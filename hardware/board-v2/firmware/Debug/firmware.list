
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a914  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034c4  0800a9d4  0800a9d4  0001a9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de98  0800de98  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800de98  0800de98  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800de98  0800de98  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de98  0800de98  0001de98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de9c  0800de9c  0001de9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800dea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024a4  20000080  0800df20  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002524  0800df20  00022524  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ac22  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b49  00000000  00000000  0003ad0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cd8  00000000  00000000  0003f858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001664  00000000  00000000  00041530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000149eb  00000000  00000000  00042b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f7c9  00000000  00000000  0005757f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076d08  00000000  00000000  00076d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000071a0  00000000  00000000  000eda50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000f4bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a9bc 	.word	0x0800a9bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	0800a9bc 	.word	0x0800a9bc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4699      	mov	r9, r3
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	469c      	mov	ip, r3
 8000412:	0413      	lsls	r3, r2, #16
 8000414:	4647      	mov	r7, r8
 8000416:	0c1b      	lsrs	r3, r3, #16
 8000418:	001d      	movs	r5, r3
 800041a:	000e      	movs	r6, r1
 800041c:	4661      	mov	r1, ip
 800041e:	0404      	lsls	r4, r0, #16
 8000420:	0c24      	lsrs	r4, r4, #16
 8000422:	b580      	push	{r7, lr}
 8000424:	0007      	movs	r7, r0
 8000426:	0c10      	lsrs	r0, r2, #16
 8000428:	434b      	muls	r3, r1
 800042a:	4365      	muls	r5, r4
 800042c:	4341      	muls	r1, r0
 800042e:	4360      	muls	r0, r4
 8000430:	0c2c      	lsrs	r4, r5, #16
 8000432:	18c0      	adds	r0, r0, r3
 8000434:	1820      	adds	r0, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	4283      	cmp	r3, r0
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4356      	muls	r6, r2
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	042d      	lsls	r5, r5, #16
 800044e:	0c2d      	lsrs	r5, r5, #16
 8000450:	1989      	adds	r1, r1, r6
 8000452:	4463      	add	r3, ip
 8000454:	0400      	lsls	r0, r0, #16
 8000456:	1940      	adds	r0, r0, r5
 8000458:	18c9      	adds	r1, r1, r3
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <set_sleep_func>:
// functions to work with relays
void (*app_turn_on)(uint8_t) = 0;
void (*app_turn_off)(uint8_t) = 0;
void (*just_sleep_for_ms)(uint32_t) = 0;

void set_sleep_func(void (*new_just_sleep_for_ms)(uint32_t)) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	just_sleep_for_ms = new_just_sleep_for_ms;
 800046c:	4b03      	ldr	r3, [pc, #12]	; (800047c <set_sleep_func+0x18>)
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	601a      	str	r2, [r3, #0]
}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	b002      	add	sp, #8
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	200000d8 	.word	0x200000d8

08000480 <zero_hw_relays_vars>:
uint32_t timeout_ms;

// variables to control motor_speed
motor_full_status motor_status;

void zero_hw_relays_vars(){
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
	for(int i=0;i<11;i++) {
 8000486:	2300      	movs	r3, #0
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	e015      	b.n	80004b8 <zero_hw_relays_vars+0x38>
		hardware_relay[i].current_position = RELAY_NOW_OFF;
 800048c:	4a0f      	ldr	r2, [pc, #60]	; (80004cc <zero_hw_relays_vars+0x4c>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	011b      	lsls	r3, r3, #4
 8000492:	18d3      	adds	r3, r2, r3
 8000494:	3301      	adds	r3, #1
 8000496:	2202      	movs	r2, #2
 8000498:	701a      	strb	r2, [r3, #0]
		hardware_relay[i].last_switching_time = 0;
 800049a:	4a0c      	ldr	r2, [pc, #48]	; (80004cc <zero_hw_relays_vars+0x4c>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	011b      	lsls	r3, r3, #4
 80004a0:	18d3      	adds	r3, r2, r3
 80004a2:	3304      	adds	r3, #4
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
		hardware_relay[i].relay_working_mode = RELAY_MODE_ALWAYS_OFF;
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <zero_hw_relays_vars+0x4c>)
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	0112      	lsls	r2, r2, #4
 80004ae:	2102      	movs	r1, #2
 80004b0:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<11;i++) {
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	3301      	adds	r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b0a      	cmp	r3, #10
 80004bc:	dde6      	ble.n	800048c <zero_hw_relays_vars+0xc>
	}
	timeout_ms = 0;
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <zero_hw_relays_vars+0x50>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b002      	add	sp, #8
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	200000e4 	.word	0x200000e4
 80004d0:	20000194 	.word	0x20000194

080004d4 <app_set_desired_motor_speed>:

void app_set_desired_motor_speed(uint8_t percent) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	0002      	movs	r2, r0
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	701a      	strb	r2, [r3, #0]
	motor_status.is_in_use = 1;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <app_set_desired_motor_speed+0x4c>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
	if(percent > 100) {
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b64      	cmp	r3, #100	; 0x64
 80004ec:	d902      	bls.n	80004f4 <app_set_desired_motor_speed+0x20>
		percent = 100;
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	2264      	movs	r2, #100	; 0x64
 80004f2:	701a      	strb	r2, [r3, #0]
	}
	if (!percent) {
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d106      	bne.n	800050a <app_set_desired_motor_speed+0x36>
		motor_status.desired_status = MOTOR_STATUS_STOPPED;
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <app_set_desired_motor_speed+0x4c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	70da      	strb	r2, [r3, #3]
		motor_status.desired_speed = 0;
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <app_set_desired_motor_speed+0x4c>)
 8000504:	2200      	movs	r2, #0
 8000506:	711a      	strb	r2, [r3, #4]
	} else {
		motor_status.desired_status = MOTOR_STATUS_RUNNING;
		motor_status.desired_speed = percent;
	}
}
 8000508:	e006      	b.n	8000518 <app_set_desired_motor_speed+0x44>
		motor_status.desired_status = MOTOR_STATUS_RUNNING;
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <app_set_desired_motor_speed+0x4c>)
 800050c:	2201      	movs	r2, #1
 800050e:	70da      	strb	r2, [r3, #3]
		motor_status.desired_speed = percent;
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <app_set_desired_motor_speed+0x4c>)
 8000512:	1dfa      	adds	r2, r7, #7
 8000514:	7812      	ldrb	r2, [r2, #0]
 8000516:	711a      	strb	r2, [r3, #4]
}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b002      	add	sp, #8
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000198 	.word	0x20000198

08000524 <status_by_error>:

uint8_t status_by_error(uint8_t err) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	0002      	movs	r2, r0
 800052c:	1dfb      	adds	r3, r7, #7
 800052e:	701a      	strb	r2, [r3, #0]
	if (err == ERROR_SHORT_ANSWER) {
 8000530:	1dfb      	adds	r3, r7, #7
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d101      	bne.n	800053c <status_by_error+0x18>
		return MOTOR_NOT_ANSWERING;
 8000538:	2300      	movs	r3, #0
 800053a:	e006      	b.n	800054a <status_by_error+0x26>
	} else if (err == ERROR_WRONG_ANSWER) {
 800053c:	1dfb      	adds	r3, r7, #7
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b02      	cmp	r3, #2
 8000542:	d101      	bne.n	8000548 <status_by_error+0x24>
		return MOTOR_WRONG_ANSWERS;
 8000544:	2301      	movs	r3, #1
 8000546:	e000      	b.n	800054a <status_by_error+0x26>
	} else {
		return MOTOR_OK;
 8000548:	2302      	movs	r3, #2
	}
}
 800054a:	0018      	movs	r0, r3
 800054c:	46bd      	mov	sp, r7
 800054e:	b002      	add	sp, #8
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <get_motor_communication_status>:

uint8_t get_motor_communication_status() {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	return motor_status.communication_status;
 8000558:	4b02      	ldr	r3, [pc, #8]	; (8000564 <get_motor_communication_status+0x10>)
 800055a:	222a      	movs	r2, #42	; 0x2a
 800055c:	5c9b      	ldrb	r3, [r3, r2]
}
 800055e:	0018      	movs	r0, r3
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000198 	.word	0x20000198

08000568 <motor_loop>:
// motor_loop returns an error
uint8_t motor_loop() {
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
	// Let it start once per 1 ms
	motor_status.inactive_loops++;
 800056e:	4b66      	ldr	r3, [pc, #408]	; (8000708 <motor_loop+0x1a0>)
 8000570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000572:	3301      	adds	r3, #1
 8000574:	b29a      	uxth	r2, r3
 8000576:	4b64      	ldr	r3, [pc, #400]	; (8000708 <motor_loop+0x1a0>)
 8000578:	851a      	strh	r2, [r3, #40]	; 0x28

	if (motor_status.desired_status == MOTOR_STATUS_STOPPED) {
 800057a:	4b63      	ldr	r3, [pc, #396]	; (8000708 <motor_loop+0x1a0>)
 800057c:	78db      	ldrb	r3, [r3, #3]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d11d      	bne.n	80005be <motor_loop+0x56>
		if(motor_status.current_status == MOTOR_STATUS_RUNNING) {
 8000582:	4b61      	ldr	r3, [pc, #388]	; (8000708 <motor_loop+0x1a0>)
 8000584:	785b      	ldrb	r3, [r3, #1]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d160      	bne.n	800064c <motor_loop+0xe4>
			motor_status.inactive_loops = 0;
 800058a:	4b5f      	ldr	r3, [pc, #380]	; (8000708 <motor_loop+0x1a0>)
 800058c:	2200      	movs	r2, #0
 800058e:	851a      	strh	r2, [r3, #40]	; 0x28
			uint8_t err = app_stop_motor();
 8000590:	1d3c      	adds	r4, r7, #4
 8000592:	f000 f975 	bl	8000880 <app_stop_motor>
 8000596:	0003      	movs	r3, r0
 8000598:	7023      	strb	r3, [r4, #0]
			if (!err) {
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d102      	bne.n	80005a8 <motor_loop+0x40>
				motor_status.current_status = MOTOR_STATUS_STOPPED;
 80005a2:	4b59      	ldr	r3, [pc, #356]	; (8000708 <motor_loop+0x1a0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	705a      	strb	r2, [r3, #1]
			}
			motor_status.communication_status = status_by_error(err);
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	0018      	movs	r0, r3
 80005ae:	f7ff ffb9 	bl	8000524 <status_by_error>
 80005b2:	0003      	movs	r3, r0
 80005b4:	0019      	movs	r1, r3
 80005b6:	4b54      	ldr	r3, [pc, #336]	; (8000708 <motor_loop+0x1a0>)
 80005b8:	222a      	movs	r2, #42	; 0x2a
 80005ba:	5499      	strb	r1, [r3, r2]
 80005bc:	e046      	b.n	800064c <motor_loop+0xe4>
		}
	} else {
		uint8_t desired_speed = motor_status.desired_speed;
 80005be:	1dfb      	adds	r3, r7, #7
 80005c0:	4a51      	ldr	r2, [pc, #324]	; (8000708 <motor_loop+0x1a0>)
 80005c2:	7912      	ldrb	r2, [r2, #4]
 80005c4:	701a      	strb	r2, [r3, #0]
		if (motor_status.current_speed != desired_speed) {
 80005c6:	4b50      	ldr	r3, [pc, #320]	; (8000708 <motor_loop+0x1a0>)
 80005c8:	789b      	ldrb	r3, [r3, #2]
 80005ca:	1dfa      	adds	r2, r7, #7
 80005cc:	7812      	ldrb	r2, [r2, #0]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d01f      	beq.n	8000612 <motor_loop+0xaa>
			motor_status.inactive_loops = 0;
 80005d2:	4b4d      	ldr	r3, [pc, #308]	; (8000708 <motor_loop+0x1a0>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	851a      	strh	r2, [r3, #40]	; 0x28
			uint8_t err = app_set_motor_speed(desired_speed);
 80005d8:	1dbc      	adds	r4, r7, #6
 80005da:	1dfb      	adds	r3, r7, #7
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 f95e 	bl	80008a0 <app_set_motor_speed>
 80005e4:	0003      	movs	r3, r0
 80005e6:	7023      	strb	r3, [r4, #0]
			motor_status.communication_status = status_by_error(err);
 80005e8:	1dbb      	adds	r3, r7, #6
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	0018      	movs	r0, r3
 80005ee:	f7ff ff99 	bl	8000524 <status_by_error>
 80005f2:	0003      	movs	r3, r0
 80005f4:	0019      	movs	r1, r3
 80005f6:	4b44      	ldr	r3, [pc, #272]	; (8000708 <motor_loop+0x1a0>)
 80005f8:	222a      	movs	r2, #42	; 0x2a
 80005fa:	5499      	strb	r1, [r3, r2]
			if (err) return err;
 80005fc:	1dbb      	adds	r3, r7, #6
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d002      	beq.n	800060a <motor_loop+0xa2>
 8000604:	1dbb      	adds	r3, r7, #6
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	e07a      	b.n	8000700 <motor_loop+0x198>
			motor_status.current_speed = desired_speed;
 800060a:	4b3f      	ldr	r3, [pc, #252]	; (8000708 <motor_loop+0x1a0>)
 800060c:	1dfa      	adds	r2, r7, #7
 800060e:	7812      	ldrb	r2, [r2, #0]
 8000610:	709a      	strb	r2, [r3, #2]
		}
		if (motor_status.current_status == MOTOR_STATUS_STOPPED) {
 8000612:	4b3d      	ldr	r3, [pc, #244]	; (8000708 <motor_loop+0x1a0>)
 8000614:	785b      	ldrb	r3, [r3, #1]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d118      	bne.n	800064c <motor_loop+0xe4>
			motor_status.inactive_loops = 0;
 800061a:	4b3b      	ldr	r3, [pc, #236]	; (8000708 <motor_loop+0x1a0>)
 800061c:	2200      	movs	r2, #0
 800061e:	851a      	strh	r2, [r3, #40]	; 0x28
			uint8_t err = app_start_motor();
 8000620:	1d7c      	adds	r4, r7, #5
 8000622:	f000 f953 	bl	80008cc <app_start_motor>
 8000626:	0003      	movs	r3, r0
 8000628:	7023      	strb	r3, [r4, #0]
			motor_status.communication_status = status_by_error(err);
 800062a:	1d7b      	adds	r3, r7, #5
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	0018      	movs	r0, r3
 8000630:	f7ff ff78 	bl	8000524 <status_by_error>
 8000634:	0003      	movs	r3, r0
 8000636:	0019      	movs	r1, r3
 8000638:	4b33      	ldr	r3, [pc, #204]	; (8000708 <motor_loop+0x1a0>)
 800063a:	222a      	movs	r2, #42	; 0x2a
 800063c:	5499      	strb	r1, [r3, r2]
			if (err) {
 800063e:	1d7b      	adds	r3, r7, #5
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <motor_loop+0xe4>
				return err;
 8000646:	1d7b      	adds	r3, r7, #5
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	e059      	b.n	8000700 <motor_loop+0x198>
			}
		}
	}
	if (motor_status.inactive_loops > 2000) {
 800064c:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <motor_loop+0x1a0>)
 800064e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8000650:	23fa      	movs	r3, #250	; 0xfa
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	429a      	cmp	r2, r3
 8000656:	d952      	bls.n	80006fe <motor_loop+0x196>
		motor_status.inactive_loops = 0;
 8000658:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <motor_loop+0x1a0>)
 800065a:	2200      	movs	r2, #0
 800065c:	851a      	strh	r2, [r3, #40]	; 0x28
		if (motor_status.is_in_use) {
 800065e:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <motor_loop+0x1a0>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d03c      	beq.n	80006e0 <motor_loop+0x178>
			if(motor_status.desired_status == MOTOR_STATUS_STOPPED) {
 8000666:	4b28      	ldr	r3, [pc, #160]	; (8000708 <motor_loop+0x1a0>)
 8000668:	78db      	ldrb	r3, [r3, #3]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d10f      	bne.n	800068e <motor_loop+0x126>
				uint8_t err = app_stop_motor();
 800066e:	1c7c      	adds	r4, r7, #1
 8000670:	f000 f906 	bl	8000880 <app_stop_motor>
 8000674:	0003      	movs	r3, r0
 8000676:	7023      	strb	r3, [r4, #0]
				motor_status.communication_status = status_by_error(err);
 8000678:	1c7b      	adds	r3, r7, #1
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	0018      	movs	r0, r3
 800067e:	f7ff ff51 	bl	8000524 <status_by_error>
 8000682:	0003      	movs	r3, r0
 8000684:	0019      	movs	r1, r3
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <motor_loop+0x1a0>)
 8000688:	222a      	movs	r2, #42	; 0x2a
 800068a:	5499      	strb	r1, [r3, r2]
 800068c:	e037      	b.n	80006fe <motor_loop+0x196>
			} else {
				uint8_t err = app_set_motor_speed(motor_status.desired_speed);
 800068e:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <motor_loop+0x1a0>)
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	1cbc      	adds	r4, r7, #2
 8000694:	0018      	movs	r0, r3
 8000696:	f000 f903 	bl	80008a0 <app_set_motor_speed>
 800069a:	0003      	movs	r3, r0
 800069c:	7023      	strb	r3, [r4, #0]
				motor_status.communication_status = status_by_error(err);
 800069e:	1cbb      	adds	r3, r7, #2
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ff3e 	bl	8000524 <status_by_error>
 80006a8:	0003      	movs	r3, r0
 80006aa:	0019      	movs	r1, r3
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <motor_loop+0x1a0>)
 80006ae:	222a      	movs	r2, #42	; 0x2a
 80006b0:	5499      	strb	r1, [r3, r2]
				if (err) return err;
 80006b2:	1cbb      	adds	r3, r7, #2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d002      	beq.n	80006c0 <motor_loop+0x158>
 80006ba:	1cbb      	adds	r3, r7, #2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	e01f      	b.n	8000700 <motor_loop+0x198>
				err = app_start_motor();
 80006c0:	1cbc      	adds	r4, r7, #2
 80006c2:	f000 f903 	bl	80008cc <app_start_motor>
 80006c6:	0003      	movs	r3, r0
 80006c8:	7023      	strb	r3, [r4, #0]
				motor_status.communication_status = status_by_error(err);
 80006ca:	1cbb      	adds	r3, r7, #2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	0018      	movs	r0, r3
 80006d0:	f7ff ff28 	bl	8000524 <status_by_error>
 80006d4:	0003      	movs	r3, r0
 80006d6:	0019      	movs	r1, r3
 80006d8:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <motor_loop+0x1a0>)
 80006da:	222a      	movs	r2, #42	; 0x2a
 80006dc:	5499      	strb	r1, [r3, r2]
 80006de:	e00e      	b.n	80006fe <motor_loop+0x196>
			}
		} else {
			uint8_t err = app_get_motor_info();
 80006e0:	1cfc      	adds	r4, r7, #3
 80006e2:	f000 f903 	bl	80008ec <app_get_motor_info>
 80006e6:	0003      	movs	r3, r0
 80006e8:	7023      	strb	r3, [r4, #0]
			motor_status.communication_status = status_by_error(err);
 80006ea:	1cfb      	adds	r3, r7, #3
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	0018      	movs	r0, r3
 80006f0:	f7ff ff18 	bl	8000524 <status_by_error>
 80006f4:	0003      	movs	r3, r0
 80006f6:	0019      	movs	r1, r3
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <motor_loop+0x1a0>)
 80006fa:	222a      	movs	r2, #42	; 0x2a
 80006fc:	5499      	strb	r1, [r3, r2]
		}
	}
	return 0;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	0018      	movs	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	b003      	add	sp, #12
 8000706:	bd90      	pop	{r4, r7, pc}
 8000708:	20000198 	.word	0x20000198

0800070c <send_rs_485_command>:

void send_rs_485_command(const char *cmd, uint8_t size) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	000a      	movs	r2, r1
 8000716:	1cfb      	adds	r3, r7, #3
 8000718:	701a      	strb	r2, [r3, #0]
	motor_status.rx_buffer_cursor = 0;
 800071a:	4b07      	ldr	r3, [pc, #28]	; (8000738 <send_rs_485_command+0x2c>)
 800071c:	2226      	movs	r2, #38	; 0x26
 800071e:	2100      	movs	r1, #0
 8000720:	5499      	strb	r1, [r3, r2]
	rs485_write_data(cmd, size);
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <send_rs_485_command+0x30>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	1cfa      	adds	r2, r7, #3
 8000728:	7811      	ldrb	r1, [r2, #0]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	0010      	movs	r0, r2
 800072e:	4798      	blx	r3
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b002      	add	sp, #8
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000198 	.word	0x20000198
 800073c:	200000c8 	.word	0x200000c8

08000740 <are_equal>:

uint8_t are_equal(const char * src1, const char * src2, uint8_t size) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<size;i++) {
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	e00e      	b.n	8000772 <are_equal+0x32>
		if (src1[i] != src2[i]) {
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	18d3      	adds	r3, r2, r3
 800075a:	781a      	ldrb	r2, [r3, #0]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	68b9      	ldr	r1, [r7, #8]
 8000760:	18cb      	adds	r3, r1, r3
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	d001      	beq.n	800076c <are_equal+0x2c>
			return 0;
 8000768:	2300      	movs	r3, #0
 800076a:	e008      	b.n	800077e <are_equal+0x3e>
	for (int i=0; i<size;i++) {
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	3301      	adds	r3, #1
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	429a      	cmp	r2, r3
 800077a:	dbeb      	blt.n	8000754 <are_equal+0x14>
		}
	}
	return 1;
 800077c:	2301      	movs	r3, #1
}
 800077e:	0018      	movs	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	b006      	add	sp, #24
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <send_generic_cmd>:

uint8_t send_generic_cmd(const char *cur_cmd) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	send_rs_485_command(cur_cmd, 8);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2108      	movs	r1, #8
 8000794:	0018      	movs	r0, r3
 8000796:	f7ff ffb9 	bl	800070c <send_rs_485_command>
	uint8_t max_delay = 50;
 800079a:	230f      	movs	r3, #15
 800079c:	18fb      	adds	r3, r7, r3
 800079e:	2232      	movs	r2, #50	; 0x32
 80007a0:	701a      	strb	r2, [r3, #0]
	for (;max_delay > 0 && motor_status.rx_buffer_cursor<8;) {
 80007a2:	e009      	b.n	80007b8 <send_generic_cmd+0x30>
		max_delay--;
 80007a4:	210f      	movs	r1, #15
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	3a01      	subs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
		just_sleep_for_ms(1);
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <send_generic_cmd+0x70>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2001      	movs	r0, #1
 80007b6:	4798      	blx	r3
	for (;max_delay > 0 && motor_status.rx_buffer_cursor<8;) {
 80007b8:	230f      	movs	r3, #15
 80007ba:	18fb      	adds	r3, r7, r3
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d004      	beq.n	80007cc <send_generic_cmd+0x44>
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <send_generic_cmd+0x74>)
 80007c4:	2226      	movs	r2, #38	; 0x26
 80007c6:	5c9b      	ldrb	r3, [r3, r2]
 80007c8:	2b07      	cmp	r3, #7
 80007ca:	d9eb      	bls.n	80007a4 <send_generic_cmd+0x1c>
	}
	if(motor_status.rx_buffer_cursor < 8) {
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <send_generic_cmd+0x74>)
 80007ce:	2226      	movs	r2, #38	; 0x26
 80007d0:	5c9b      	ldrb	r3, [r3, r2]
 80007d2:	2b07      	cmp	r3, #7
 80007d4:	d801      	bhi.n	80007da <send_generic_cmd+0x52>
		return ERROR_SHORT_ANSWER;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00a      	b.n	80007f0 <send_generic_cmd+0x68>
	}
	if(!are_equal(cur_cmd, motor_status.rx_buffer, 8)) {
 80007da:	4909      	ldr	r1, [pc, #36]	; (8000800 <send_generic_cmd+0x78>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2208      	movs	r2, #8
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff ffad 	bl	8000740 <are_equal>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d101      	bne.n	80007ee <send_generic_cmd+0x66>
		return ERROR_WRONG_ANSWER;
 80007ea:	2302      	movs	r3, #2
 80007ec:	e000      	b.n	80007f0 <send_generic_cmd+0x68>
	}
	return 0;
 80007ee:	2300      	movs	r3, #0
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b004      	add	sp, #16
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000d8 	.word	0x200000d8
 80007fc:	20000198 	.word	0x20000198
 8000800:	2000019d 	.word	0x2000019d

08000804 <send_read_cmd>:

uint8_t send_read_cmd(const char *cur_cmd) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	send_rs_485_command(cur_cmd, 8);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2108      	movs	r1, #8
 8000810:	0018      	movs	r0, r3
 8000812:	f7ff ff7b 	bl	800070c <send_rs_485_command>
	uint8_t max_delay = 50;
 8000816:	230f      	movs	r3, #15
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	2232      	movs	r2, #50	; 0x32
 800081c:	701a      	strb	r2, [r3, #0]
	for (;max_delay > 0 && motor_status.rx_buffer_cursor<6;) {
 800081e:	e009      	b.n	8000834 <send_read_cmd+0x30>
		max_delay--;
 8000820:	210f      	movs	r1, #15
 8000822:	187b      	adds	r3, r7, r1
 8000824:	781a      	ldrb	r2, [r3, #0]
 8000826:	187b      	adds	r3, r7, r1
 8000828:	3a01      	subs	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
		just_sleep_for_ms(1);
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <send_read_cmd+0x70>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2001      	movs	r0, #1
 8000832:	4798      	blx	r3
	for (;max_delay > 0 && motor_status.rx_buffer_cursor<6;) {
 8000834:	230f      	movs	r3, #15
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d004      	beq.n	8000848 <send_read_cmd+0x44>
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <send_read_cmd+0x74>)
 8000840:	2226      	movs	r2, #38	; 0x26
 8000842:	5c9b      	ldrb	r3, [r3, r2]
 8000844:	2b05      	cmp	r3, #5
 8000846:	d9eb      	bls.n	8000820 <send_read_cmd+0x1c>
	}
	if(motor_status.rx_buffer_cursor < 6) {
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <send_read_cmd+0x74>)
 800084a:	2226      	movs	r2, #38	; 0x26
 800084c:	5c9b      	ldrb	r3, [r3, r2]
 800084e:	2b05      	cmp	r3, #5
 8000850:	d801      	bhi.n	8000856 <send_read_cmd+0x52>
		return ERROR_SHORT_ANSWER;
 8000852:	2301      	movs	r3, #1
 8000854:	e00a      	b.n	800086c <send_read_cmd+0x68>
	}
	// We need to parse read info, right now we can just compare first two bytes
	if(!are_equal(cur_cmd, motor_status.rx_buffer, 2)) {
 8000856:	4909      	ldr	r1, [pc, #36]	; (800087c <send_read_cmd+0x78>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2202      	movs	r2, #2
 800085c:	0018      	movs	r0, r3
 800085e:	f7ff ff6f 	bl	8000740 <are_equal>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d101      	bne.n	800086a <send_read_cmd+0x66>
		return ERROR_WRONG_ANSWER;
 8000866:	2302      	movs	r3, #2
 8000868:	e000      	b.n	800086c <send_read_cmd+0x68>
	}
	return 0;
 800086a:	2300      	movs	r3, #0
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	b004      	add	sp, #16
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000d8 	.word	0x200000d8
 8000878:	20000198 	.word	0x20000198
 800087c:	2000019d 	.word	0x2000019d

08000880 <app_stop_motor>:

// returns error
uint8_t app_stop_motor(){
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
	char * cur_cmd = stop_motor_cmd();
 8000886:	f001 f9dd 	bl	8001c44 <stop_motor_cmd>
 800088a:	0003      	movs	r3, r0
 800088c:	607b      	str	r3, [r7, #4]
	return send_generic_cmd(cur_cmd);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	0018      	movs	r0, r3
 8000892:	f7ff ff79 	bl	8000788 <send_generic_cmd>
 8000896:	0003      	movs	r3, r0
}
 8000898:	0018      	movs	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	b002      	add	sp, #8
 800089e:	bd80      	pop	{r7, pc}

080008a0 <app_set_motor_speed>:

// returns error
uint8_t app_set_motor_speed(uint8_t desired_speed) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	0002      	movs	r2, r0
 80008a8:	1dfb      	adds	r3, r7, #7
 80008aa:	701a      	strb	r2, [r3, #0]
	char * cur_cmd = set_motor_speed_cmd(desired_speed);
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 f98f 	bl	8001bd4 <set_motor_speed_cmd>
 80008b6:	0003      	movs	r3, r0
 80008b8:	60fb      	str	r3, [r7, #12]
	return send_generic_cmd(cur_cmd);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff ff63 	bl	8000788 <send_generic_cmd>
 80008c2:	0003      	movs	r3, r0
}
 80008c4:	0018      	movs	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b004      	add	sp, #16
 80008ca:	bd80      	pop	{r7, pc}

080008cc <app_start_motor>:

// returns error
uint8_t app_start_motor() {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
	char * cur_cmd = start_motor_cmd();
 80008d2:	f001 f977 	bl	8001bc4 <start_motor_cmd>
 80008d6:	0003      	movs	r3, r0
 80008d8:	607b      	str	r3, [r7, #4]
	return send_generic_cmd(cur_cmd);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff ff53 	bl	8000788 <send_generic_cmd>
 80008e2:	0003      	movs	r3, r0
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b002      	add	sp, #8
 80008ea:	bd80      	pop	{r7, pc}

080008ec <app_get_motor_info>:

uint8_t app_get_motor_info() {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
	char * cur_cmd = read_motor_info_cmd();
 80008f2:	f001 f99f 	bl	8001c34 <read_motor_info_cmd>
 80008f6:	0003      	movs	r3, r0
 80008f8:	607b      	str	r3, [r7, #4]
	return send_read_cmd(cur_cmd);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff ff81 	bl	8000804 <send_read_cmd>
 8000902:	0003      	movs	r3, r0
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	b002      	add	sp, #8
 800090a:	bd80      	pop	{r7, pc}

0800090c <app_push_motor_byte>:

void app_push_motor_byte(uint8_t key) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	0002      	movs	r2, r0
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	701a      	strb	r2, [r3, #0]
	if (motor_status.rx_buffer_cursor == 0 && key == 0) {
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <app_push_motor_byte+0x5c>)
 800091a:	2226      	movs	r2, #38	; 0x26
 800091c:	5c9b      	ldrb	r3, [r3, r2]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d103      	bne.n	800092a <app_push_motor_byte+0x1e>
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d01a      	beq.n	8000960 <app_push_motor_byte+0x54>
		// we do not need to add leading zero bytes
		return;
	}
	motor_status.rx_buffer[motor_status.rx_buffer_cursor] = key;
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <app_push_motor_byte+0x5c>)
 800092c:	2226      	movs	r2, #38	; 0x26
 800092e:	5c9b      	ldrb	r3, [r3, r2]
 8000930:	001a      	movs	r2, r3
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <app_push_motor_byte+0x5c>)
 8000934:	189b      	adds	r3, r3, r2
 8000936:	1dfa      	adds	r2, r7, #7
 8000938:	7812      	ldrb	r2, [r2, #0]
 800093a:	715a      	strb	r2, [r3, #5]
	motor_status.rx_buffer_cursor++;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <app_push_motor_byte+0x5c>)
 800093e:	2226      	movs	r2, #38	; 0x26
 8000940:	5c9b      	ldrb	r3, [r3, r2]
 8000942:	3301      	adds	r3, #1
 8000944:	b2d9      	uxtb	r1, r3
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <app_push_motor_byte+0x5c>)
 8000948:	2226      	movs	r2, #38	; 0x26
 800094a:	5499      	strb	r1, [r3, r2]
	if(motor_status.rx_buffer_cursor > MOTOR_RX_SIZE) {
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <app_push_motor_byte+0x5c>)
 800094e:	2226      	movs	r2, #38	; 0x26
 8000950:	5c9b      	ldrb	r3, [r3, r2]
 8000952:	2b20      	cmp	r3, #32
 8000954:	d905      	bls.n	8000962 <app_push_motor_byte+0x56>
		motor_status.rx_buffer_cursor = MOTOR_RX_SIZE;
 8000956:	4b04      	ldr	r3, [pc, #16]	; (8000968 <app_push_motor_byte+0x5c>)
 8000958:	2226      	movs	r2, #38	; 0x26
 800095a:	2120      	movs	r1, #32
 800095c:	5499      	strb	r1, [r3, r2]
 800095e:	e000      	b.n	8000962 <app_push_motor_byte+0x56>
		return;
 8000960:	46c0      	nop			; (mov r8, r8)
	}
}
 8000962:	46bd      	mov	sp, r7
 8000964:	b002      	add	sp, #8
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000198 	.word	0x20000198

0800096c <zero_motor_settings>:

void zero_motor_settings() {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	motor_status.is_in_use = 0;
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <zero_motor_settings+0x40>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
	motor_status.desired_speed = 0;
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <zero_motor_settings+0x40>)
 8000978:	2200      	movs	r2, #0
 800097a:	711a      	strb	r2, [r3, #4]
	motor_status.current_speed = 0;
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <zero_motor_settings+0x40>)
 800097e:	2200      	movs	r2, #0
 8000980:	709a      	strb	r2, [r3, #2]
	motor_status.current_status = MOTOR_STATUS_STOPPED;
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <zero_motor_settings+0x40>)
 8000984:	2200      	movs	r2, #0
 8000986:	705a      	strb	r2, [r3, #1]
	motor_status.desired_status = MOTOR_STATUS_STOPPED;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <zero_motor_settings+0x40>)
 800098a:	2200      	movs	r2, #0
 800098c:	70da      	strb	r2, [r3, #3]
	motor_status.rx_buffer_cursor = 0;
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <zero_motor_settings+0x40>)
 8000990:	2226      	movs	r2, #38	; 0x26
 8000992:	2100      	movs	r1, #0
 8000994:	5499      	strb	r1, [r3, r2]
	motor_status.inactive_loops = 0;
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <zero_motor_settings+0x40>)
 8000998:	2200      	movs	r2, #0
 800099a:	851a      	strh	r2, [r3, #40]	; 0x28
	motor_status.communication_status = MOTOR_NOT_ANSWERING;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <zero_motor_settings+0x40>)
 800099e:	222a      	movs	r2, #42	; 0x2a
 80009a0:	2100      	movs	r1, #0
 80009a2:	5499      	strb	r1, [r3, r2]
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	20000198 	.word	0x20000198

080009b0 <app_init>:

void app_init() {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	recover_settings((uint32_t *)&current_settings);
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <app_init+0x20>)
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 f900 	bl	8000bbc <recover_settings>
	zero_hw_relays_vars();
 80009bc:	f7ff fd60 	bl	8000480 <zero_hw_relays_vars>
	zero_motor_settings();
 80009c0:	f7ff ffd4 	bl	800096c <zero_motor_settings>
	esq_vars_init();
 80009c4:	f001 f888 	bl	8001ad8 <esq_vars_init>
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	200000e0 	.word	0x200000e0

080009d4 <set_turn_on_func>:

void set_turn_on_func(void (*new_turn_on)(uint8_t)) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	app_turn_on = new_turn_on;
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <set_turn_on_func+0x18>)
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	601a      	str	r2, [r3, #0]
}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b002      	add	sp, #8
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	200000d0 	.word	0x200000d0

080009f0 <set_turn_off_func>:

void set_turn_off_func(void (*new_turn_off)(uint8_t)) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	app_turn_off = new_turn_off;
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <set_turn_off_func+0x18>)
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	601a      	str	r2, [r3, #0]
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	200000d4 	.word	0x200000d4

08000a0c <app_update_relays>:

void app_update_relays() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
	// let's check timeout first
	if (timeout_ms) {
 8000a12:	4b4c      	ldr	r3, [pc, #304]	; (8000b44 <app_update_relays+0x138>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d021      	beq.n	8000a5e <app_update_relays+0x52>
		if(timeout_ms == 1) {
 8000a1a:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <app_update_relays+0x138>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d118      	bne.n	8000a54 <app_update_relays+0x48>
			zero_hw_relays_vars();
 8000a22:	f7ff fd2d 	bl	8000480 <zero_hw_relays_vars>
			for (int i = 0;i<11;i++) {
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
 8000a2a:	e008      	b.n	8000a3e <app_update_relays+0x32>
				app_turn_off(i);
 8000a2c:	4b46      	ldr	r3, [pc, #280]	; (8000b48 <app_update_relays+0x13c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	69fa      	ldr	r2, [r7, #28]
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	0010      	movs	r0, r2
 8000a36:	4798      	blx	r3
			for (int i = 0;i<11;i++) {
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	61fb      	str	r3, [r7, #28]
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	2b0a      	cmp	r3, #10
 8000a42:	ddf3      	ble.n	8000a2c <app_update_relays+0x20>
			}
			if(motor_status.is_in_use) {
 8000a44:	4b41      	ldr	r3, [pc, #260]	; (8000b4c <app_update_relays+0x140>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d008      	beq.n	8000a5e <app_update_relays+0x52>
				app_set_desired_motor_speed(0);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff fd41 	bl	80004d4 <app_set_desired_motor_speed>
 8000a52:	e004      	b.n	8000a5e <app_update_relays+0x52>
			}
		} else {
			timeout_ms--;
 8000a54:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <app_update_relays+0x138>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	1e5a      	subs	r2, r3, #1
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	; (8000b44 <app_update_relays+0x138>)
 8000a5c:	601a      	str	r2, [r3, #0]
		}
	}
	for(int i=0;i<11;i++) {
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	e066      	b.n	8000b32 <app_update_relays+0x126>
		relay_hardware_status * cur_hw_relay = &hardware_relay[i];
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	011a      	lsls	r2, r3, #4
 8000a68:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <app_update_relays+0x144>)
 8000a6a:	18d3      	adds	r3, r2, r3
 8000a6c:	617b      	str	r3, [r7, #20]
		if(cur_hw_relay->relay_working_mode == RELAY_MODE_ALWAYS_OFF) {
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d10d      	bne.n	8000a92 <app_update_relays+0x86>
			if(cur_hw_relay->current_position == RELAY_NOW_ON) {
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	785b      	ldrb	r3, [r3, #1]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d156      	bne.n	8000b2c <app_update_relays+0x120>
				app_turn_off(i);
 8000a7e:	4b32      	ldr	r3, [pc, #200]	; (8000b48 <app_update_relays+0x13c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	0010      	movs	r0, r2
 8000a88:	4798      	blx	r3
				cur_hw_relay->current_position = RELAY_NOW_OFF;
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	705a      	strb	r2, [r3, #1]
 8000a90:	e04c      	b.n	8000b2c <app_update_relays+0x120>
			}
		} else if (cur_hw_relay->relay_working_mode == RELAY_MODE_ALWAYS_ON) {
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d10d      	bne.n	8000ab6 <app_update_relays+0xaa>
			if(cur_hw_relay->current_position == RELAY_NOW_OFF) {
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	785b      	ldrb	r3, [r3, #1]
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d144      	bne.n	8000b2c <app_update_relays+0x120>
				app_turn_on(i);
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <app_update_relays+0x148>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	0010      	movs	r0, r2
 8000aac:	4798      	blx	r3
				cur_hw_relay->current_position = RELAY_NOW_ON;
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	705a      	strb	r2, [r3, #1]
 8000ab4:	e03a      	b.n	8000b2c <app_update_relays+0x120>
			}
		} else {
			// switching :(
			if(cur_hw_relay->current_position == RELAY_NOW_ON) {
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	785b      	ldrb	r3, [r3, #1]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d11b      	bne.n	8000af6 <app_update_relays+0xea>
				//if it is on we need to turn it off when its time is gone
				uint32_t time_to_turn_off = cur_hw_relay->last_switching_time + cur_hw_relay->ontime;
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	18d3      	adds	r3, r2, r3
 8000ac8:	60bb      	str	r3, [r7, #8]
				uint32_t current_time = get_tick();
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <app_update_relays+0x14c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4798      	blx	r3
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	607b      	str	r3, [r7, #4]
				if (current_time > time_to_turn_off) {
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d927      	bls.n	8000b2c <app_update_relays+0x120>
					cur_hw_relay->last_switching_time = current_time;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	605a      	str	r2, [r3, #4]
					cur_hw_relay->current_position = RELAY_NOW_OFF;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	705a      	strb	r2, [r3, #1]
					app_turn_off(i);
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <app_update_relays+0x13c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	b2d2      	uxtb	r2, r2
 8000af0:	0010      	movs	r0, r2
 8000af2:	4798      	blx	r3
 8000af4:	e01a      	b.n	8000b2c <app_update_relays+0x120>
				}
			} else {
				//if it is off we need to turn it on when required
				uint32_t time_to_turn_on = cur_hw_relay->last_switching_time + cur_hw_relay->offtime;
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	18d3      	adds	r3, r2, r3
 8000b00:	613b      	str	r3, [r7, #16]
				uint32_t current_time = get_tick();
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <app_update_relays+0x14c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4798      	blx	r3
 8000b08:	0003      	movs	r3, r0
 8000b0a:	60fb      	str	r3, [r7, #12]
				if (current_time > time_to_turn_on) {
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d90b      	bls.n	8000b2c <app_update_relays+0x120>
					cur_hw_relay->last_switching_time = current_time;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	605a      	str	r2, [r3, #4]
					cur_hw_relay->current_position = RELAY_NOW_ON;
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	705a      	strb	r2, [r3, #1]
					app_turn_on(i);
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <app_update_relays+0x148>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	0010      	movs	r0, r2
 8000b2a:	4798      	blx	r3
	for(int i=0;i<11;i++) {
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	2b0a      	cmp	r3, #10
 8000b36:	dd95      	ble.n	8000a64 <app_update_relays+0x58>
				}
			}
		}

	}
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b008      	add	sp, #32
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	20000194 	.word	0x20000194
 8000b48:	200000d4 	.word	0x200000d4
 8000b4c:	20000198 	.word	0x20000198
 8000b50:	200000e4 	.word	0x200000e4
 8000b54:	200000d0 	.word	0x200000d0
 8000b58:	200000cc 	.word	0x200000cc

08000b5c <_update_post_num>:

void _update_post_num() {
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
	uint8_t post_number = current_settings.main_post_number;
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <_update_post_num+0x58>)
 8000b66:	7852      	ldrb	r2, [r2, #1]
 8000b68:	701a      	strb	r2, [r3, #0]
	post_num_str[2] = 0;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <_update_post_num+0x5c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	709a      	strb	r2, [r3, #2]
	uint8_t high = post_number / 10;
 8000b70:	1dbc      	adds	r4, r7, #6
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	210a      	movs	r1, #10
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff facf 	bl	800011c <__udivsi3>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	7023      	strb	r3, [r4, #0]
	post_num_str[0] = high + '0';
 8000b82:	1dbb      	adds	r3, r7, #6
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	3330      	adds	r3, #48	; 0x30
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <_update_post_num+0x5c>)
 8000b8c:	701a      	strb	r2, [r3, #0]
	uint8_t low = post_number % 10;
 8000b8e:	1d7c      	adds	r4, r7, #5
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	210a      	movs	r1, #10
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff fb46 	bl	8000228 <__aeabi_uidivmod>
 8000b9c:	000b      	movs	r3, r1
 8000b9e:	7023      	strb	r3, [r4, #0]
	post_num_str[1] = low + '0';
 8000ba0:	1d7b      	adds	r3, r7, #5
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	3330      	adds	r3, #48	; 0x30
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <_update_post_num+0x5c>)
 8000baa:	705a      	strb	r2, [r3, #1]
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b003      	add	sp, #12
 8000bb2:	bd90      	pop	{r4, r7, pc}
 8000bb4:	200000e0 	.word	0x200000e0
 8000bb8:	200000dc 	.word	0x200000dc

08000bbc <recover_settings>:

void recover_settings(uint32_t * obj) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	*obj = flash_read();
 8000bc4:	f003 ff08 	bl	80049d8 <flash_read>
 8000bc8:	0002      	movs	r2, r0
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
	if (current_settings.main_post_number<1) {
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <recover_settings+0x4c>)
 8000bd0:	785b      	ldrb	r3, [r3, #1]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d106      	bne.n	8000be4 <recover_settings+0x28>
		current_settings.main_post_number = 1;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <recover_settings+0x4c>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	705a      	strb	r2, [r3, #1]
		write_settings((uint32_t *)&current_settings);
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <recover_settings+0x4c>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 f814 	bl	8000c0c <write_settings>
	}
	if (current_settings.main_post_number>99) {
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <recover_settings+0x4c>)
 8000be6:	785b      	ldrb	r3, [r3, #1]
 8000be8:	2b63      	cmp	r3, #99	; 0x63
 8000bea:	d906      	bls.n	8000bfa <recover_settings+0x3e>
		current_settings.main_post_number = 99;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <recover_settings+0x4c>)
 8000bee:	2263      	movs	r2, #99	; 0x63
 8000bf0:	705a      	strb	r2, [r3, #1]
		write_settings((uint32_t *)&current_settings);
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <recover_settings+0x4c>)
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f000 f809 	bl	8000c0c <write_settings>
	}
	_update_post_num();
 8000bfa:	f7ff ffaf 	bl	8000b5c <_update_post_num>
}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b002      	add	sp, #8
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	200000e0 	.word	0x200000e0

08000c0c <write_settings>:

void write_settings(uint32_t * obj) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	flash_write(*obj);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f003 feeb 	bl	80049f4 <flash_write>
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <get_post_num_str>:

char * get_post_num_str() {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	return post_num_str;
 8000c2c:	4b01      	ldr	r3, [pc, #4]	; (8000c34 <get_post_num_str+0xc>)
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200000dc 	.word	0x200000dc

08000c38 <get_post_num>:

uint8_t get_post_num() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	return current_settings.main_post_number;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <get_post_num+0x10>)
 8000c3e:	785b      	ldrb	r3, [r3, #1]
}
 8000c40:	0018      	movs	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	200000e0 	.word	0x200000e0

08000c4c <set_post_num>:
void set_post_num(uint8_t new_post_num) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	0002      	movs	r2, r0
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	701a      	strb	r2, [r3, #0]
	uint8_t old_post_num = current_settings.main_post_number;
 8000c58:	230f      	movs	r3, #15
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <set_post_num+0x5c>)
 8000c5e:	7852      	ldrb	r2, [r2, #1]
 8000c60:	701a      	strb	r2, [r3, #0]

	current_settings.main_post_number = new_post_num;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <set_post_num+0x5c>)
 8000c64:	1dfa      	adds	r2, r7, #7
 8000c66:	7812      	ldrb	r2, [r2, #0]
 8000c68:	705a      	strb	r2, [r3, #1]
	if(current_settings.main_post_number < MIN_POST_NUM) current_settings.main_post_number = MAX_POST_NUM;
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <set_post_num+0x5c>)
 8000c6c:	785b      	ldrb	r3, [r3, #1]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <set_post_num+0x2c>
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <set_post_num+0x5c>)
 8000c74:	2263      	movs	r2, #99	; 0x63
 8000c76:	705a      	strb	r2, [r3, #1]
	if(current_settings.main_post_number > MAX_POST_NUM) current_settings.main_post_number = MIN_POST_NUM;
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <set_post_num+0x5c>)
 8000c7a:	785b      	ldrb	r3, [r3, #1]
 8000c7c:	2b63      	cmp	r3, #99	; 0x63
 8000c7e:	d902      	bls.n	8000c86 <set_post_num+0x3a>
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <set_post_num+0x5c>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	705a      	strb	r2, [r3, #1]
	_update_post_num();
 8000c86:	f7ff ff69 	bl	8000b5c <_update_post_num>
	if (old_post_num != current_settings.main_post_number) {
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <set_post_num+0x5c>)
 8000c8c:	785b      	ldrb	r3, [r3, #1]
 8000c8e:	220f      	movs	r2, #15
 8000c90:	18ba      	adds	r2, r7, r2
 8000c92:	7812      	ldrb	r2, [r2, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d003      	beq.n	8000ca0 <set_post_num+0x54>
		write_settings((uint32_t *)&current_settings);
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <set_post_num+0x5c>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff ffb6 	bl	8000c0c <write_settings>
	}
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b004      	add	sp, #16
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200000e0 	.word	0x200000e0

08000cac <set_rs485_write>:

void dec_post_num() {
	set_post_num(current_settings.main_post_number - 1);
}

void set_rs485_write(void (*new_rs485_write_data)(const char *, int)) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	rs485_write_data = new_rs485_write_data;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <set_rs485_write+0x18>)
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	200000c8 	.word	0x200000c8

08000cc8 <set_app_send_data>:

void set_app_send_data(void (*new_app_send_data)(const char *, int)) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	app_send_data = new_app_send_data;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <set_app_send_data+0x18>)
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	601a      	str	r2, [r3, #0]
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b002      	add	sp, #8
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	200000c4 	.word	0x200000c4

08000ce4 <set_tick_func>:

void set_tick_func(uint32_t (*new_get_tick)(void)) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	get_tick = new_get_tick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <set_tick_func+0x18>)
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	601a      	str	r2, [r3, #0]
}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	200000cc 	.word	0x200000cc

08000d00 <int_to_hexchar>:
char int_to_hexchar(uint8_t key) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	0002      	movs	r2, r0
 8000d08:	1dfb      	adds	r3, r7, #7
 8000d0a:	701a      	strb	r2, [r3, #0]
	if (key < 9) return '0' + key;
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b08      	cmp	r3, #8
 8000d12:	d804      	bhi.n	8000d1e <int_to_hexchar+0x1e>
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	3330      	adds	r3, #48	; 0x30
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	e003      	b.n	8000d26 <int_to_hexchar+0x26>
	return 55 + key;
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	3337      	adds	r3, #55	; 0x37
 8000d24:	b2db      	uxtb	r3, r3
}
 8000d26:	0018      	movs	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b002      	add	sp, #8
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_copy_hex_from_byte_to_buf>:

void _copy_hex_from_byte_to_buf(uint8_t sym, char * target) {
 8000d2e:	b5b0      	push	{r4, r5, r7, lr}
 8000d30:	b084      	sub	sp, #16
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	0002      	movs	r2, r0
 8000d36:	6039      	str	r1, [r7, #0]
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	701a      	strb	r2, [r3, #0]
	uint8_t high = sym >> 4;
 8000d3c:	200f      	movs	r0, #15
 8000d3e:	183b      	adds	r3, r7, r0
 8000d40:	1dfa      	adds	r2, r7, #7
 8000d42:	7812      	ldrb	r2, [r2, #0]
 8000d44:	0912      	lsrs	r2, r2, #4
 8000d46:	701a      	strb	r2, [r3, #0]
	uint8_t low = sym & 0b00001111;
 8000d48:	250e      	movs	r5, #14
 8000d4a:	197b      	adds	r3, r7, r5
 8000d4c:	1dfa      	adds	r2, r7, #7
 8000d4e:	7812      	ldrb	r2, [r2, #0]
 8000d50:	210f      	movs	r1, #15
 8000d52:	400a      	ands	r2, r1
 8000d54:	701a      	strb	r2, [r3, #0]
	target[0] = int_to_hexchar(high);
 8000d56:	183b      	adds	r3, r7, r0
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f7ff ffd0 	bl	8000d00 <int_to_hexchar>
 8000d60:	0003      	movs	r3, r0
 8000d62:	001a      	movs	r2, r3
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	701a      	strb	r2, [r3, #0]
	target[1] = int_to_hexchar(low);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	1c5c      	adds	r4, r3, #1
 8000d6c:	197b      	adds	r3, r7, r5
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff ffc5 	bl	8000d00 <int_to_hexchar>
 8000d76:	0003      	movs	r3, r0
 8000d78:	7023      	strb	r3, [r4, #0]
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b004      	add	sp, #16
 8000d80:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d84 <get_uid>:

char * get_uid() {
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
	if (!uid[0]) {
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <get_uid+0x68>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d126      	bne.n	8000de0 <get_uid+0x5c>
		uint8_t *idBase = (uint8_t*)(UID_BASE);
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <get_uid+0x6c>)
 8000d94:	60bb      	str	r3, [r7, #8]
		for (uint8_t i = 0;i < 12;i++) {
 8000d96:	230f      	movs	r3, #15
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	e017      	b.n	8000dd0 <get_uid+0x4c>
			uint8_t sym = idBase[i];
 8000da0:	240f      	movs	r4, #15
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	18d2      	adds	r2, r2, r3
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	7812      	ldrb	r2, [r2, #0]
 8000dae:	701a      	strb	r2, [r3, #0]
			_copy_hex_from_byte_to_buf(sym, &uid[i * 2]);
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	005a      	lsls	r2, r3, #1
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <get_uid+0x68>)
 8000db8:	18d2      	adds	r2, r2, r3
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	0011      	movs	r1, r2
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f7ff ffb4 	bl	8000d2e <_copy_hex_from_byte_to_buf>
		for (uint8_t i = 0;i < 12;i++) {
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	781a      	ldrb	r2, [r3, #0]
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	3201      	adds	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b0b      	cmp	r3, #11
 8000dd8:	d9e2      	bls.n	8000da0 <get_uid+0x1c>
		}
		uid[24] = 0;
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <get_uid+0x68>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	761a      	strb	r2, [r3, #24]
	}
	return uid;
 8000de0:	4b02      	ldr	r3, [pc, #8]	; (8000dec <get_uid+0x68>)
}
 8000de2:	0018      	movs	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b005      	add	sp, #20
 8000de8:	bd90      	pop	{r4, r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	2000009c 	.word	0x2000009c
 8000df0:	1ffff7ac 	.word	0x1ffff7ac

08000df4 <set_state>:

void set_state(uint8_t new_state) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	701a      	strb	r2, [r3, #0]
	current_state = new_state;
 8000e00:	1dfb      	adds	r3, r7, #7
 8000e02:	781a      	ldrb	r2, [r3, #0]
 8000e04:	4b02      	ldr	r3, [pc, #8]	; (8000e10 <set_state+0x1c>)
 8000e06:	601a      	str	r2, [r3, #0]
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b002      	add	sp, #8
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200000bc 	.word	0x200000bc

08000e14 <app_process_cmd>:

void app_process_cmd(const char * cmd) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	if(get_tick) {
 8000e1c:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <app_process_cmd+0xcc>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d005      	beq.n	8000e30 <app_process_cmd+0x1c>
		last_ping = get_tick();
 8000e24:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <app_process_cmd+0xcc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4798      	blx	r3
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <app_process_cmd+0xd0>)
 8000e2e:	601a      	str	r2, [r3, #0]
	}
	if(cmd[0]=='U' && cmd[1]=='I' && cmd[2] == 'D') {
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b55      	cmp	r3, #85	; 0x55
 8000e36:	d10f      	bne.n	8000e58 <app_process_cmd+0x44>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b49      	cmp	r3, #73	; 0x49
 8000e40:	d10a      	bne.n	8000e58 <app_process_cmd+0x44>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3302      	adds	r3, #2
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b44      	cmp	r3, #68	; 0x44
 8000e4a:	d105      	bne.n	8000e58 <app_process_cmd+0x44>
		app_decode_uid(&cmd[3]);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3303      	adds	r3, #3
 8000e50:	0018      	movs	r0, r3
 8000e52:	f000 fc09 	bl	8001668 <app_decode_uid>
		return;
 8000e56:	e03f      	b.n	8000ed8 <app_process_cmd+0xc4>
	}
	if(cmd[0]=='S' && cmd[1]=='E' && cmd[2]=='T') {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b53      	cmp	r3, #83	; 0x53
 8000e5e:	d10f      	bne.n	8000e80 <app_process_cmd+0x6c>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3301      	adds	r3, #1
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b45      	cmp	r3, #69	; 0x45
 8000e68:	d10a      	bne.n	8000e80 <app_process_cmd+0x6c>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b54      	cmp	r3, #84	; 0x54
 8000e72:	d105      	bne.n	8000e80 <app_process_cmd+0x6c>
		app_decode_set(&cmd[3]);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3303      	adds	r3, #3
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f000 fc23 	bl	80016c4 <app_decode_set>
		return;
 8000e7e:	e02b      	b.n	8000ed8 <app_process_cmd+0xc4>
	}
	if(cmd[0]=='P' && cmd[1]=='I' && cmd[2] == 'N' && cmd[3] == 'G') {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b50      	cmp	r3, #80	; 0x50
 8000e86:	d114      	bne.n	8000eb2 <app_process_cmd+0x9e>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b49      	cmp	r3, #73	; 0x49
 8000e90:	d10f      	bne.n	8000eb2 <app_process_cmd+0x9e>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3302      	adds	r3, #2
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b4e      	cmp	r3, #78	; 0x4e
 8000e9a:	d10a      	bne.n	8000eb2 <app_process_cmd+0x9e>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3303      	adds	r3, #3
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b47      	cmp	r3, #71	; 0x47
 8000ea4:	d105      	bne.n	8000eb2 <app_process_cmd+0x9e>
		app_decode_ping(&cmd[4]);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 f81c 	bl	8000ee8 <app_decode_ping>
		return;
 8000eb0:	e012      	b.n	8000ed8 <app_process_cmd+0xc4>
	}
	if(cmd[0]=='R' && cmd[1]=='U' && cmd[2]=='N') {
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b52      	cmp	r3, #82	; 0x52
 8000eb8:	d10e      	bne.n	8000ed8 <app_process_cmd+0xc4>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b55      	cmp	r3, #85	; 0x55
 8000ec2:	d109      	bne.n	8000ed8 <app_process_cmd+0xc4>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b4e      	cmp	r3, #78	; 0x4e
 8000ecc:	d104      	bne.n	8000ed8 <app_process_cmd+0xc4>
		app_decode_run(&cmd[3]);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3303      	adds	r3, #3
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f000 fa80 	bl	80013d8 <app_decode_run>
	}
}
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	200000cc 	.word	0x200000cc
 8000ee4:	200000c0 	.word	0x200000c0

08000ee8 <app_decode_ping>:
void app_decode_ping(const char *cmd) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	// right now we don't even parse additional data
	if(app_send_data) {
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <app_decode_ping+0x24>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d005      	beq.n	8000f04 <app_decode_ping+0x1c>
		app_send_data(post_num_str, 3);
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <app_decode_ping+0x24>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <app_decode_ping+0x28>)
 8000efe:	2103      	movs	r1, #3
 8000f00:	0010      	movs	r0, r2
 8000f02:	4798      	blx	r3
	}
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b002      	add	sp, #8
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200000c4 	.word	0x200000c4
 8000f10:	200000dc 	.word	0x200000dc

08000f14 <process_char>:

uint8_t process_char(char key, char * buf, uint8_t * cur, uint8_t mode, relay_reader_config * r_config)  {
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	0019      	movs	r1, r3
 8000f20:	240f      	movs	r4, #15
 8000f22:	193b      	adds	r3, r7, r4
 8000f24:	1c02      	adds	r2, r0, #0
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	200e      	movs	r0, #14
 8000f2a:	183b      	adds	r3, r7, r0
 8000f2c:	1c0a      	adds	r2, r1, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
	if(mode == MODE_SPACE) {
 8000f30:	183b      	adds	r3, r7, r0
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d127      	bne.n	8000f88 <process_char+0x74>
		if (key == 'M') {
 8000f38:	193b      	adds	r3, r7, r4
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b4d      	cmp	r3, #77	; 0x4d
 8000f3e:	d101      	bne.n	8000f44 <process_char+0x30>
			return MODE_MOTOR;
 8000f40:	231e      	movs	r3, #30
 8000f42:	e203      	b.n	800134c <process_char+0x438>
		}
		if (key == 'T') {
 8000f44:	230f      	movs	r3, #15
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b54      	cmp	r3, #84	; 0x54
 8000f4c:	d101      	bne.n	8000f52 <process_char+0x3e>
			return MODE_TIMER;
 8000f4e:	230a      	movs	r3, #10
 8000f50:	e1fc      	b.n	800134c <process_char+0x438>
		}
		if (key == 'A') {
 8000f52:	230f      	movs	r3, #15
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b41      	cmp	r3, #65	; 0x41
 8000f5a:	d101      	bne.n	8000f60 <process_char+0x4c>
			return MODE_ALL_RELAY_DEFAULT;
 8000f5c:	2314      	movs	r3, #20
 8000f5e:	e1f5      	b.n	800134c <process_char+0x438>
		}
		if (key>='0' && key <='9') {
 8000f60:	220f      	movs	r2, #15
 8000f62:	18bb      	adds	r3, r7, r2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b2f      	cmp	r3, #47	; 0x2f
 8000f68:	d90c      	bls.n	8000f84 <process_char+0x70>
 8000f6a:	18bb      	adds	r3, r7, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b39      	cmp	r3, #57	; 0x39
 8000f70:	d808      	bhi.n	8000f84 <process_char+0x70>
			buf[0] = key;
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	18ba      	adds	r2, r7, r2
 8000f76:	7812      	ldrb	r2, [r2, #0]
 8000f78:	701a      	strb	r2, [r3, #0]
			*cur = 1;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
			return MODE_RELAY;
 8000f80:	2328      	movs	r3, #40	; 0x28
 8000f82:	e1e3      	b.n	800134c <process_char+0x438>
		}
		return MODE_SPACE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e1e1      	b.n	800134c <process_char+0x438>
	}
	if(mode == MODE_MOTOR) {
 8000f88:	230e      	movs	r3, #14
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b1e      	cmp	r3, #30
 8000f90:	d130      	bne.n	8000ff4 <process_char+0xe0>
		if (key == '|') {
 8000f92:	230f      	movs	r3, #15
 8000f94:	18fb      	adds	r3, r7, r3
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b7c      	cmp	r3, #124	; 0x7c
 8000f9a:	d101      	bne.n	8000fa0 <process_char+0x8c>
			return MODE_SPACE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e1d5      	b.n	800134c <process_char+0x438>
		}
		if(key<'0' || key >'9') {
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	18bb      	adds	r3, r7, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b2f      	cmp	r3, #47	; 0x2f
 8000fa8:	d903      	bls.n	8000fb2 <process_char+0x9e>
 8000faa:	18bb      	adds	r3, r7, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b39      	cmp	r3, #57	; 0x39
 8000fb0:	d901      	bls.n	8000fb6 <process_char+0xa2>
			return MODE_ERROR;
 8000fb2:	2364      	movs	r3, #100	; 0x64
 8000fb4:	e1ca      	b.n	800134c <process_char+0x438>
		}
		r_config->motor_mentioned = 1;
 8000fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb8:	2201      	movs	r2, #1
 8000fba:	709a      	strb	r2, [r3, #2]
		if (r_config->motor_percent>20) {
 8000fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fbe:	78db      	ldrb	r3, [r3, #3]
 8000fc0:	2b14      	cmp	r3, #20
 8000fc2:	d901      	bls.n	8000fc8 <process_char+0xb4>
			return MODE_ERROR_MOTOR_PERCENT_TOO_BIG;
 8000fc4:	2365      	movs	r3, #101	; 0x65
 8000fc6:	e1c1      	b.n	800134c <process_char+0x438>
		}
		r_config->motor_percent *= 10;
 8000fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fca:	78db      	ldrb	r3, [r3, #3]
 8000fcc:	1c1a      	adds	r2, r3, #0
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	18d3      	adds	r3, r2, r3
 8000fd2:	18db      	adds	r3, r3, r3
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fd8:	70da      	strb	r2, [r3, #3]
		r_config->motor_percent += (key-'0');
 8000fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fdc:	78da      	ldrb	r2, [r3, #3]
 8000fde:	230f      	movs	r3, #15
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	18d3      	adds	r3, r2, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	3b30      	subs	r3, #48	; 0x30
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fee:	70da      	strb	r2, [r3, #3]
		return MODE_MOTOR;
 8000ff0:	231e      	movs	r3, #30
 8000ff2:	e1ab      	b.n	800134c <process_char+0x438>
	}
	if(mode == MODE_TIMER) {
 8000ff4:	230e      	movs	r3, #14
 8000ff6:	18fb      	adds	r3, r7, r3
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b0a      	cmp	r3, #10
 8000ffc:	d131      	bne.n	8001062 <process_char+0x14e>
		if (key == '|') {
 8000ffe:	230f      	movs	r3, #15
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b7c      	cmp	r3, #124	; 0x7c
 8001006:	d101      	bne.n	800100c <process_char+0xf8>
			return MODE_SPACE;
 8001008:	2300      	movs	r3, #0
 800100a:	e19f      	b.n	800134c <process_char+0x438>
		}
		if(key<'0' || key >'9') {
 800100c:	220f      	movs	r2, #15
 800100e:	18bb      	adds	r3, r7, r2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b2f      	cmp	r3, #47	; 0x2f
 8001014:	d903      	bls.n	800101e <process_char+0x10a>
 8001016:	18bb      	adds	r3, r7, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b39      	cmp	r3, #57	; 0x39
 800101c:	d901      	bls.n	8001022 <process_char+0x10e>
			return MODE_ERROR;
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	e194      	b.n	800134c <process_char+0x438>
		}
		r_config->timeout_sec_specified = 1;
 8001022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001024:	2201      	movs	r2, #1
 8001026:	711a      	strb	r2, [r3, #4]

		r_config->timeout_sec*=10;
 8001028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	0013      	movs	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	189b      	adds	r3, r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	001a      	movs	r2, r3
 8001036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001038:	609a      	str	r2, [r3, #8]
		r_config->timeout_sec+= (key-'0');
 800103a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	230f      	movs	r3, #15
 8001040:	18fb      	adds	r3, r7, r3
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	18d3      	adds	r3, r2, r3
 8001046:	3b30      	subs	r3, #48	; 0x30
 8001048:	001a      	movs	r2, r3
 800104a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800104c:	609a      	str	r2, [r3, #8]
		if (r_config->timeout_sec > 3600) {
 800104e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	23e1      	movs	r3, #225	; 0xe1
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	429a      	cmp	r2, r3
 8001058:	d901      	bls.n	800105e <process_char+0x14a>
			return MODE_ERROR_TIMEOUT_TOO_BIG;
 800105a:	2366      	movs	r3, #102	; 0x66
 800105c:	e176      	b.n	800134c <process_char+0x438>
		}
		return MODE_TIMER;
 800105e:	230a      	movs	r3, #10
 8001060:	e174      	b.n	800134c <process_char+0x438>
	}
	if (mode == MODE_ALL_RELAY_DEFAULT) {
 8001062:	230e      	movs	r3, #14
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b14      	cmp	r3, #20
 800106a:	d11c      	bne.n	80010a6 <process_char+0x192>
		if (key == '|') {
 800106c:	230f      	movs	r3, #15
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b7c      	cmp	r3, #124	; 0x7c
 8001074:	d101      	bne.n	800107a <process_char+0x166>
			return MODE_SPACE;
 8001076:	2300      	movs	r3, #0
 8001078:	e168      	b.n	800134c <process_char+0x438>
		}
		if (key == '+') {
 800107a:	230f      	movs	r3, #15
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b2b      	cmp	r3, #43	; 0x2b
 8001082:	d104      	bne.n	800108e <process_char+0x17a>
			r_config->default_relay_state = DEFAULT_RELAY_ON;
 8001084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001086:	2202      	movs	r2, #2
 8001088:	705a      	strb	r2, [r3, #1]
			return MODE_ALL_RELAY_DEFAULT;
 800108a:	2314      	movs	r3, #20
 800108c:	e15e      	b.n	800134c <process_char+0x438>
		}
		if (key == '-') {
 800108e:	230f      	movs	r3, #15
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b2d      	cmp	r3, #45	; 0x2d
 8001096:	d104      	bne.n	80010a2 <process_char+0x18e>
			r_config->default_relay_state = DEFAULT_RELAY_OFF;
 8001098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109a:	2201      	movs	r2, #1
 800109c:	705a      	strb	r2, [r3, #1]
			return MODE_ALL_RELAY_DEFAULT;
 800109e:	2314      	movs	r3, #20
 80010a0:	e154      	b.n	800134c <process_char+0x438>
		}
		return MODE_ERROR_RELAY_DEFAULT;
 80010a2:	2367      	movs	r3, #103	; 0x67
 80010a4:	e152      	b.n	800134c <process_char+0x438>
	}
	if (mode == MODE_RELAY) {
 80010a6:	230e      	movs	r3, #14
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b28      	cmp	r3, #40	; 0x28
 80010ae:	d000      	beq.n	80010b2 <process_char+0x19e>
 80010b0:	e07a      	b.n	80011a8 <process_char+0x294>
		if (key == '|' || key == '/') {
 80010b2:	220f      	movs	r2, #15
 80010b4:	18bb      	adds	r3, r7, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b7c      	cmp	r3, #124	; 0x7c
 80010ba:	d003      	beq.n	80010c4 <process_char+0x1b0>
 80010bc:	18bb      	adds	r3, r7, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b2f      	cmp	r3, #47	; 0x2f
 80010c2:	d14f      	bne.n	8001164 <process_char+0x250>
			uint8_t relay_num = 0;
 80010c4:	231f      	movs	r3, #31
 80010c6:	18fb      	adds	r3, r7, r3
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<*cur; i++) {
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	e016      	b.n	8001100 <process_char+0x1ec>
				relay_num *=10;
 80010d2:	201f      	movs	r0, #31
 80010d4:	183a      	adds	r2, r7, r0
 80010d6:	183b      	adds	r3, r7, r0
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	1c19      	adds	r1, r3, #0
 80010dc:	0089      	lsls	r1, r1, #2
 80010de:	18cb      	adds	r3, r1, r3
 80010e0:	18db      	adds	r3, r3, r3
 80010e2:	7013      	strb	r3, [r2, #0]
				relay_num += (buf[i] - '0');
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	18d3      	adds	r3, r2, r3
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	183b      	adds	r3, r7, r0
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	18d3      	adds	r3, r2, r3
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	183b      	adds	r3, r7, r0
 80010f6:	3a30      	subs	r2, #48	; 0x30
 80010f8:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<*cur; i++) {
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	3301      	adds	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	001a      	movs	r2, r3
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	4293      	cmp	r3, r2
 800110a:	dbe2      	blt.n	80010d2 <process_char+0x1be>
			}
			*cur = 0;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
			if(relay_num < 1 || relay_num > 11) {
 8001112:	221f      	movs	r2, #31
 8001114:	18bb      	adds	r3, r7, r2
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <process_char+0x210>
 800111c:	18bb      	adds	r3, r7, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b0b      	cmp	r3, #11
 8001122:	d901      	bls.n	8001128 <process_char+0x214>
				return MODE_ERROR_RELAY_NUM;
 8001124:	2368      	movs	r3, #104	; 0x68
 8001126:	e111      	b.n	800134c <process_char+0x438>
			}
			relay_num--;
 8001128:	201f      	movs	r0, #31
 800112a:	183b      	adds	r3, r7, r0
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	183b      	adds	r3, r7, r0
 8001130:	3a01      	subs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
			r_config->relays[relay_num].used = 1;
 8001134:	183b      	adds	r3, r7, r0
 8001136:	781a      	ldrb	r2, [r3, #0]
 8001138:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800113a:	0013      	movs	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	189b      	adds	r3, r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	18cb      	adds	r3, r1, r3
 8001144:	3310      	adds	r3, #16
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
			r_config->last_changed_relay = relay_num;
 800114a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800114c:	183a      	adds	r2, r7, r0
 800114e:	7812      	ldrb	r2, [r2, #0]
 8001150:	701a      	strb	r2, [r3, #0]
			if(key == '|') return MODE_SPACE;
 8001152:	230f      	movs	r3, #15
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b7c      	cmp	r3, #124	; 0x7c
 800115a:	d101      	bne.n	8001160 <process_char+0x24c>
 800115c:	2300      	movs	r3, #0
 800115e:	e0f5      	b.n	800134c <process_char+0x438>
			return MODE_RELAY_ONTIME;
 8001160:	232a      	movs	r3, #42	; 0x2a
 8001162:	e0f3      	b.n	800134c <process_char+0x438>
		}
		if (key < '0' || key > '9') {
 8001164:	220f      	movs	r2, #15
 8001166:	18bb      	adds	r3, r7, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b2f      	cmp	r3, #47	; 0x2f
 800116c:	d903      	bls.n	8001176 <process_char+0x262>
 800116e:	18bb      	adds	r3, r7, r2
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b39      	cmp	r3, #57	; 0x39
 8001174:	d901      	bls.n	800117a <process_char+0x266>
			return MODE_ERROR_BADSYMBOLS_RELAY;
 8001176:	2369      	movs	r3, #105	; 0x69
 8001178:	e0e8      	b.n	800134c <process_char+0x438>
		}
		buf[*cur] = key;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	001a      	movs	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	189b      	adds	r3, r3, r2
 8001184:	220f      	movs	r2, #15
 8001186:	18ba      	adds	r2, r7, r2
 8001188:	7812      	ldrb	r2, [r2, #0]
 800118a:	701a      	strb	r2, [r3, #0]
		*cur = *cur + 1;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	b2da      	uxtb	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	701a      	strb	r2, [r3, #0]
		if (*cur > 2) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <process_char+0x290>
			return MODE_ERROR_RELAY_NUM;
 80011a0:	2368      	movs	r3, #104	; 0x68
 80011a2:	e0d3      	b.n	800134c <process_char+0x438>
		}
		return MODE_RELAY;
 80011a4:	2328      	movs	r3, #40	; 0x28
 80011a6:	e0d1      	b.n	800134c <process_char+0x438>
	}
	if (mode == MODE_RELAY_ONTIME) {
 80011a8:	230e      	movs	r3, #14
 80011aa:	18fb      	adds	r3, r7, r3
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b2a      	cmp	r3, #42	; 0x2a
 80011b0:	d166      	bne.n	8001280 <process_char+0x36c>
		if (key == '|') {
 80011b2:	230f      	movs	r3, #15
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b7c      	cmp	r3, #124	; 0x7c
 80011ba:	d101      	bne.n	80011c0 <process_char+0x2ac>
			return MODE_ERROR_BADSYMBOLS_RELAY;
 80011bc:	2369      	movs	r3, #105	; 0x69
 80011be:	e0c5      	b.n	800134c <process_char+0x438>
		}
		if (key == '/')	{
 80011c0:	230f      	movs	r3, #15
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b2f      	cmp	r3, #47	; 0x2f
 80011c8:	d101      	bne.n	80011ce <process_char+0x2ba>
			return MODE_RELAY_OFFTIME;
 80011ca:	232b      	movs	r3, #43	; 0x2b
 80011cc:	e0be      	b.n	800134c <process_char+0x438>
		}
		if (key < '0' || key > '9') {
 80011ce:	220f      	movs	r2, #15
 80011d0:	18bb      	adds	r3, r7, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b2f      	cmp	r3, #47	; 0x2f
 80011d6:	d903      	bls.n	80011e0 <process_char+0x2cc>
 80011d8:	18bb      	adds	r3, r7, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b39      	cmp	r3, #57	; 0x39
 80011de:	d901      	bls.n	80011e4 <process_char+0x2d0>
			return MODE_ERROR_BADSYMBOLS_RELAY;
 80011e0:	2369      	movs	r3, #105	; 0x69
 80011e2:	e0b3      	b.n	800134c <process_char+0x438>
		}
		uint8_t relay_num = r_config->last_changed_relay;
 80011e4:	2116      	movs	r1, #22
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011ea:	7812      	ldrb	r2, [r2, #0]
 80011ec:	701a      	strb	r2, [r3, #0]
		if (r_config->relays[relay_num].ontime > 200) {
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	781a      	ldrb	r2, [r3, #0]
 80011f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011f4:	0013      	movs	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	189b      	adds	r3, r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	18cb      	adds	r3, r1, r3
 80011fe:	330c      	adds	r3, #12
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	2bc8      	cmp	r3, #200	; 0xc8
 8001204:	d901      	bls.n	800120a <process_char+0x2f6>
			return MODE_ERROR_BIG_ONTIME;
 8001206:	236a      	movs	r3, #106	; 0x6a
 8001208:	e0a0      	b.n	800134c <process_char+0x438>
		}
		r_config->relays[relay_num].ontime*=10;
 800120a:	2416      	movs	r4, #22
 800120c:	193b      	adds	r3, r7, r4
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001212:	0013      	movs	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	189b      	adds	r3, r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	18cb      	adds	r3, r1, r3
 800121c:	330c      	adds	r3, #12
 800121e:	8819      	ldrh	r1, [r3, #0]
 8001220:	193b      	adds	r3, r7, r4
 8001222:	781a      	ldrb	r2, [r3, #0]
 8001224:	1c0b      	adds	r3, r1, #0
 8001226:	1c19      	adds	r1, r3, #0
 8001228:	0089      	lsls	r1, r1, #2
 800122a:	18cb      	adds	r3, r1, r3
 800122c:	18db      	adds	r3, r3, r3
 800122e:	b298      	uxth	r0, r3
 8001230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001232:	0013      	movs	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	189b      	adds	r3, r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	18cb      	adds	r3, r1, r3
 800123c:	330c      	adds	r3, #12
 800123e:	1c02      	adds	r2, r0, #0
 8001240:	801a      	strh	r2, [r3, #0]
		r_config->relays[relay_num].ontime += (key - '0');
 8001242:	193b      	adds	r3, r7, r4
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001248:	0013      	movs	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	189b      	adds	r3, r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	18cb      	adds	r3, r1, r3
 8001252:	330c      	adds	r3, #12
 8001254:	881a      	ldrh	r2, [r3, #0]
 8001256:	230f      	movs	r3, #15
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	18d3      	adds	r3, r2, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	193a      	adds	r2, r7, r4
 8001264:	7812      	ldrb	r2, [r2, #0]
 8001266:	3b30      	subs	r3, #48	; 0x30
 8001268:	b298      	uxth	r0, r3
 800126a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800126c:	0013      	movs	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	189b      	adds	r3, r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	18cb      	adds	r3, r1, r3
 8001276:	330c      	adds	r3, #12
 8001278:	1c02      	adds	r2, r0, #0
 800127a:	801a      	strh	r2, [r3, #0]
		return MODE_RELAY_ONTIME;
 800127c:	232a      	movs	r3, #42	; 0x2a
 800127e:	e065      	b.n	800134c <process_char+0x438>
	}
	if (mode == MODE_RELAY_OFFTIME) {
 8001280:	230e      	movs	r3, #14
 8001282:	18fb      	adds	r3, r7, r3
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b2b      	cmp	r3, #43	; 0x2b
 8001288:	d15f      	bne.n	800134a <process_char+0x436>
		if (key == '|') {
 800128a:	230f      	movs	r3, #15
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b7c      	cmp	r3, #124	; 0x7c
 8001292:	d101      	bne.n	8001298 <process_char+0x384>
			return MODE_SPACE;
 8001294:	2300      	movs	r3, #0
 8001296:	e059      	b.n	800134c <process_char+0x438>
		}
		if (key < '0' || key > '9') {
 8001298:	220f      	movs	r2, #15
 800129a:	18bb      	adds	r3, r7, r2
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b2f      	cmp	r3, #47	; 0x2f
 80012a0:	d903      	bls.n	80012aa <process_char+0x396>
 80012a2:	18bb      	adds	r3, r7, r2
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b39      	cmp	r3, #57	; 0x39
 80012a8:	d901      	bls.n	80012ae <process_char+0x39a>
			return MODE_ERROR_BADSYMBOLS_RELAY;
 80012aa:	2369      	movs	r3, #105	; 0x69
 80012ac:	e04e      	b.n	800134c <process_char+0x438>
		}
		uint8_t relay_num = r_config->last_changed_relay;
 80012ae:	2117      	movs	r1, #23
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012b4:	7812      	ldrb	r2, [r2, #0]
 80012b6:	701a      	strb	r2, [r3, #0]
		if (r_config->relays[relay_num].offtime > 200) {
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	781a      	ldrb	r2, [r3, #0]
 80012bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012be:	0013      	movs	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	189b      	adds	r3, r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	18cb      	adds	r3, r1, r3
 80012c8:	330e      	adds	r3, #14
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	2bc8      	cmp	r3, #200	; 0xc8
 80012ce:	d901      	bls.n	80012d4 <process_char+0x3c0>
			return MODE_ERROR_BIG_OFFTIME;
 80012d0:	236b      	movs	r3, #107	; 0x6b
 80012d2:	e03b      	b.n	800134c <process_char+0x438>
		}
		r_config->relays[relay_num].offtime*=10;
 80012d4:	2417      	movs	r4, #23
 80012d6:	193b      	adds	r3, r7, r4
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012dc:	0013      	movs	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	189b      	adds	r3, r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	18cb      	adds	r3, r1, r3
 80012e6:	330e      	adds	r3, #14
 80012e8:	8819      	ldrh	r1, [r3, #0]
 80012ea:	193b      	adds	r3, r7, r4
 80012ec:	781a      	ldrb	r2, [r3, #0]
 80012ee:	1c0b      	adds	r3, r1, #0
 80012f0:	1c19      	adds	r1, r3, #0
 80012f2:	0089      	lsls	r1, r1, #2
 80012f4:	18cb      	adds	r3, r1, r3
 80012f6:	18db      	adds	r3, r3, r3
 80012f8:	b298      	uxth	r0, r3
 80012fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012fc:	0013      	movs	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	189b      	adds	r3, r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	18cb      	adds	r3, r1, r3
 8001306:	330e      	adds	r3, #14
 8001308:	1c02      	adds	r2, r0, #0
 800130a:	801a      	strh	r2, [r3, #0]
		r_config->relays[relay_num].offtime += (key - '0');
 800130c:	193b      	adds	r3, r7, r4
 800130e:	781a      	ldrb	r2, [r3, #0]
 8001310:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001312:	0013      	movs	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	189b      	adds	r3, r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	18cb      	adds	r3, r1, r3
 800131c:	330e      	adds	r3, #14
 800131e:	881a      	ldrh	r2, [r3, #0]
 8001320:	230f      	movs	r3, #15
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	18d3      	adds	r3, r2, r3
 800132a:	b29b      	uxth	r3, r3
 800132c:	193a      	adds	r2, r7, r4
 800132e:	7812      	ldrb	r2, [r2, #0]
 8001330:	3b30      	subs	r3, #48	; 0x30
 8001332:	b298      	uxth	r0, r3
 8001334:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001336:	0013      	movs	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	189b      	adds	r3, r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	18cb      	adds	r3, r1, r3
 8001340:	330e      	adds	r3, #14
 8001342:	1c02      	adds	r2, r0, #0
 8001344:	801a      	strh	r2, [r3, #0]
		return MODE_RELAY_OFFTIME;
 8001346:	232b      	movs	r3, #43	; 0x2b
 8001348:	e000      	b.n	800134c <process_char+0x438>
	}
	return MODE_ERROR_PANIC;
 800134a:	236c      	movs	r3, #108	; 0x6c
}
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	b009      	add	sp, #36	; 0x24
 8001352:	bd90      	pop	{r4, r7, pc}

08001354 <init_relay_config>:

void init_relay_config(relay_reader_config * r_config) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	for (int i=0;i<11;i++) {
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	e020      	b.n	80013a4 <init_relay_config+0x50>
		r_config->relays[i].ontime = 0;
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	0013      	movs	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	189b      	adds	r3, r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	18cb      	adds	r3, r1, r3
 8001370:	330c      	adds	r3, #12
 8001372:	2200      	movs	r2, #0
 8001374:	801a      	strh	r2, [r3, #0]
		r_config->relays[i].offtime = 0;
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	0013      	movs	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	189b      	adds	r3, r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	18cb      	adds	r3, r1, r3
 8001384:	330e      	adds	r3, #14
 8001386:	2200      	movs	r2, #0
 8001388:	801a      	strh	r2, [r3, #0]
		r_config->relays[i].used = 0;
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	0013      	movs	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	189b      	adds	r3, r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	18cb      	adds	r3, r1, r3
 8001398:	3310      	adds	r3, #16
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<11;i++) {
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3301      	adds	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b0a      	cmp	r3, #10
 80013a8:	dddb      	ble.n	8001362 <init_relay_config+0xe>
	}
	r_config->last_changed_relay = 0;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
	r_config->motor_mentioned = 0;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	709a      	strb	r2, [r3, #2]
	r_config->motor_percent = 0;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	70da      	strb	r2, [r3, #3]
	r_config->timeout_sec = 0;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
	r_config->timeout_sec_specified = 0;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	711a      	strb	r2, [r3, #4]
	r_config->default_relay_state = DEFAULT_RELAY_NO_DEFAULT;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	705a      	strb	r2, [r3, #1]
}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b004      	add	sp, #16
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <app_decode_run>:

void app_decode_run(const char *cmd) {
 80013d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013da:	b0a1      	sub	sp, #132	; 0x84
 80013dc:	af02      	add	r7, sp, #8
 80013de:	6078      	str	r0, [r7, #4]
	relay_reader_config r_config;
	init_relay_config(&r_config);
 80013e0:	2320      	movs	r3, #32
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff ffb5 	bl	8001354 <init_relay_config>

	// State machine to parse a string
	char buf[16];
	int i = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	677b      	str	r3, [r7, #116]	; 0x74
	uint8_t cur = 0;
 80013ee:	230f      	movs	r3, #15
 80013f0:	18fb      	adds	r3, r7, r3
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
	uint8_t mode = 0;
 80013f6:	2373      	movs	r3, #115	; 0x73
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]

	for (;cmd[i]!=';' && i<MAX_CMD_BUF-1;) {
 80013fe:	e07b      	b.n	80014f8 <app_decode_run+0x120>
		mode = process_char(cmd[i], buf, &cur, mode, &r_config);
 8001400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	18d3      	adds	r3, r2, r3
 8001406:	7818      	ldrb	r0, [r3, #0]
 8001408:	2673      	movs	r6, #115	; 0x73
 800140a:	19bc      	adds	r4, r7, r6
 800140c:	19bb      	adds	r3, r7, r6
 800140e:	781d      	ldrb	r5, [r3, #0]
 8001410:	230f      	movs	r3, #15
 8001412:	18fa      	adds	r2, r7, r3
 8001414:	2310      	movs	r3, #16
 8001416:	18f9      	adds	r1, r7, r3
 8001418:	2320      	movs	r3, #32
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	002b      	movs	r3, r5
 8001420:	f7ff fd78 	bl	8000f14 <process_char>
 8001424:	0003      	movs	r3, r0
 8001426:	7023      	strb	r3, [r4, #0]
		i++;
 8001428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800142a:	3301      	adds	r3, #1
 800142c:	677b      	str	r3, [r7, #116]	; 0x74
		if (mode < MODE_ERROR) continue;
 800142e:	19bb      	adds	r3, r7, r6
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b63      	cmp	r3, #99	; 0x63
 8001434:	d800      	bhi.n	8001438 <app_decode_run+0x60>
 8001436:	e05f      	b.n	80014f8 <app_decode_run+0x120>
		if (mode == MODE_ERROR_MOTOR_PERCENT_TOO_BIG) {
 8001438:	2373      	movs	r3, #115	; 0x73
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b65      	cmp	r3, #101	; 0x65
 8001440:	d106      	bne.n	8001450 <app_decode_run+0x78>
			app_send_data("motor % big", 11);
 8001442:	4b39      	ldr	r3, [pc, #228]	; (8001528 <app_decode_run+0x150>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a39      	ldr	r2, [pc, #228]	; (800152c <app_decode_run+0x154>)
 8001448:	210b      	movs	r1, #11
 800144a:	0010      	movs	r0, r2
 800144c:	4798      	blx	r3
			return;
 800144e:	e068      	b.n	8001522 <app_decode_run+0x14a>
		}
		if (mode == MODE_ERROR_TIMEOUT_TOO_BIG) {
 8001450:	2373      	movs	r3, #115	; 0x73
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b66      	cmp	r3, #102	; 0x66
 8001458:	d106      	bne.n	8001468 <app_decode_run+0x90>
			app_send_data("timeout big", 11);
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <app_decode_run+0x150>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a34      	ldr	r2, [pc, #208]	; (8001530 <app_decode_run+0x158>)
 8001460:	210b      	movs	r1, #11
 8001462:	0010      	movs	r0, r2
 8001464:	4798      	blx	r3
			return;
 8001466:	e05c      	b.n	8001522 <app_decode_run+0x14a>
		}
		if (mode == MODE_ERROR_RELAY_DEFAULT) {
 8001468:	2373      	movs	r3, #115	; 0x73
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b67      	cmp	r3, #103	; 0x67
 8001470:	d106      	bne.n	8001480 <app_decode_run+0xa8>
			app_send_data("A uses + or -", 13);
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <app_decode_run+0x150>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a2f      	ldr	r2, [pc, #188]	; (8001534 <app_decode_run+0x15c>)
 8001478:	210d      	movs	r1, #13
 800147a:	0010      	movs	r0, r2
 800147c:	4798      	blx	r3
			return;
 800147e:	e050      	b.n	8001522 <app_decode_run+0x14a>
		}
		if (mode == MODE_ERROR_RELAY_NUM) {
 8001480:	2373      	movs	r3, #115	; 0x73
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b68      	cmp	r3, #104	; 0x68
 8001488:	d106      	bne.n	8001498 <app_decode_run+0xc0>
			app_send_data("RELAY MUST BE 1 TO 11", 21);
 800148a:	4b27      	ldr	r3, [pc, #156]	; (8001528 <app_decode_run+0x150>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a2a      	ldr	r2, [pc, #168]	; (8001538 <app_decode_run+0x160>)
 8001490:	2115      	movs	r1, #21
 8001492:	0010      	movs	r0, r2
 8001494:	4798      	blx	r3
			return;
 8001496:	e044      	b.n	8001522 <app_decode_run+0x14a>
		}
		if (mode == MODE_ERROR_BADSYMBOLS_RELAY) {
 8001498:	2373      	movs	r3, #115	; 0x73
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b69      	cmp	r3, #105	; 0x69
 80014a0:	d106      	bne.n	80014b0 <app_decode_run+0xd8>
			app_send_data("BAD SYM IN RELAY", 16);
 80014a2:	4b21      	ldr	r3, [pc, #132]	; (8001528 <app_decode_run+0x150>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a25      	ldr	r2, [pc, #148]	; (800153c <app_decode_run+0x164>)
 80014a8:	2110      	movs	r1, #16
 80014aa:	0010      	movs	r0, r2
 80014ac:	4798      	blx	r3
			return;
 80014ae:	e038      	b.n	8001522 <app_decode_run+0x14a>
		}
		if (mode == MODE_ERROR_BIG_ONTIME) {
 80014b0:	2373      	movs	r3, #115	; 0x73
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b6a      	cmp	r3, #106	; 0x6a
 80014b8:	d106      	bne.n	80014c8 <app_decode_run+0xf0>
			app_send_data("BIG ONTIME", 10);
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <app_decode_run+0x150>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a20      	ldr	r2, [pc, #128]	; (8001540 <app_decode_run+0x168>)
 80014c0:	210a      	movs	r1, #10
 80014c2:	0010      	movs	r0, r2
 80014c4:	4798      	blx	r3
			return;
 80014c6:	e02c      	b.n	8001522 <app_decode_run+0x14a>
		}
		if (mode == MODE_ERROR_BIG_OFFTIME) {
 80014c8:	2373      	movs	r3, #115	; 0x73
 80014ca:	18fb      	adds	r3, r7, r3
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b6b      	cmp	r3, #107	; 0x6b
 80014d0:	d106      	bne.n	80014e0 <app_decode_run+0x108>
			app_send_data("BIG OFFTIME", 11);
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <app_decode_run+0x150>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <app_decode_run+0x16c>)
 80014d8:	210b      	movs	r1, #11
 80014da:	0010      	movs	r0, r2
 80014dc:	4798      	blx	r3
			return;
 80014de:	e020      	b.n	8001522 <app_decode_run+0x14a>
		}
		if (mode >= MODE_ERROR) {
 80014e0:	2373      	movs	r3, #115	; 0x73
 80014e2:	18fb      	adds	r3, r7, r3
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b63      	cmp	r3, #99	; 0x63
 80014e8:	d906      	bls.n	80014f8 <app_decode_run+0x120>
			app_send_data("PANIC", 4);
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <app_decode_run+0x150>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a16      	ldr	r2, [pc, #88]	; (8001548 <app_decode_run+0x170>)
 80014f0:	2104      	movs	r1, #4
 80014f2:	0010      	movs	r0, r2
 80014f4:	4798      	blx	r3
			return;
 80014f6:	e014      	b.n	8001522 <app_decode_run+0x14a>
	for (;cmd[i]!=';' && i<MAX_CMD_BUF-1;) {
 80014f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	18d3      	adds	r3, r2, r3
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b3b      	cmp	r3, #59	; 0x3b
 8001502:	d003      	beq.n	800150c <app_decode_run+0x134>
 8001504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001506:	2bbf      	cmp	r3, #191	; 0xbf
 8001508:	dc00      	bgt.n	800150c <app_decode_run+0x134>
 800150a:	e779      	b.n	8001400 <app_decode_run+0x28>
		}
	}
	app_send_data("OK", 2);
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <app_decode_run+0x150>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <app_decode_run+0x174>)
 8001512:	2102      	movs	r1, #2
 8001514:	0010      	movs	r0, r2
 8001516:	4798      	blx	r3
	app_apply_relays(&r_config);
 8001518:	2320      	movs	r3, #32
 800151a:	18fb      	adds	r3, r7, r3
 800151c:	0018      	movs	r0, r3
 800151e:	f000 f817 	bl	8001550 <app_apply_relays>
}
 8001522:	46bd      	mov	sp, r7
 8001524:	b01f      	add	sp, #124	; 0x7c
 8001526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001528:	200000c4 	.word	0x200000c4
 800152c:	0800a9d4 	.word	0x0800a9d4
 8001530:	0800a9e0 	.word	0x0800a9e0
 8001534:	0800a9ec 	.word	0x0800a9ec
 8001538:	0800a9fc 	.word	0x0800a9fc
 800153c:	0800aa14 	.word	0x0800aa14
 8001540:	0800aa28 	.word	0x0800aa28
 8001544:	0800aa34 	.word	0x0800aa34
 8001548:	0800aa40 	.word	0x0800aa40
 800154c:	0800aa48 	.word	0x0800aa48

08001550 <app_apply_relays>:
void app_apply_relays(relay_reader_config  * new_relays) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	for (int i=0;i<11;i++) {
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	e060      	b.n	8001620 <app_apply_relays+0xd0>
		// need to update?
		if(new_relays->relays[i].used) {
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	0013      	movs	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	189b      	adds	r3, r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	18cb      	adds	r3, r1, r3
 800156c:	3310      	adds	r3, #16
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d03f      	beq.n	80015f4 <app_apply_relays+0xa4>
			uint32_t ontime = new_relays->relays[i].ontime;
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	0013      	movs	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	189b      	adds	r3, r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	18cb      	adds	r3, r1, r3
 8001582:	330c      	adds	r3, #12
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	613b      	str	r3, [r7, #16]
			uint32_t offtime = new_relays->relays[i].offtime;
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	0013      	movs	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	189b      	adds	r3, r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	18cb      	adds	r3, r1, r3
 8001596:	330e      	adds	r3, #14
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	60fb      	str	r3, [r7, #12]
			if ( ontime > 0 && offtime > 0) {
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d016      	beq.n	80015d0 <app_apply_relays+0x80>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d013      	beq.n	80015d0 <app_apply_relays+0x80>
				hardware_relay[i].relay_working_mode = RELAY_MODE_SWITCHING;
 80015a8:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <app_apply_relays+0x110>)
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	0112      	lsls	r2, r2, #4
 80015ae:	2103      	movs	r1, #3
 80015b0:	54d1      	strb	r1, [r2, r3]
				hardware_relay[i].ontime = ontime;
 80015b2:	4a2b      	ldr	r2, [pc, #172]	; (8001660 <app_apply_relays+0x110>)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	18d3      	adds	r3, r2, r3
 80015ba:	3308      	adds	r3, #8
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	601a      	str	r2, [r3, #0]
				hardware_relay[i].offtime = offtime;
 80015c0:	4a27      	ldr	r2, [pc, #156]	; (8001660 <app_apply_relays+0x110>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	18d3      	adds	r3, r2, r3
 80015c8:	330c      	adds	r3, #12
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	e024      	b.n	800161a <app_apply_relays+0xca>
			} else if (ontime == 0 && offtime > 0) {
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d108      	bne.n	80015e8 <app_apply_relays+0x98>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <app_apply_relays+0x98>
				hardware_relay[i].relay_working_mode = RELAY_MODE_ALWAYS_OFF;
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <app_apply_relays+0x110>)
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	2102      	movs	r1, #2
 80015e4:	54d1      	strb	r1, [r2, r3]
 80015e6:	e018      	b.n	800161a <app_apply_relays+0xca>
			} else {
				hardware_relay[i].relay_working_mode = RELAY_MODE_ALWAYS_ON;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <app_apply_relays+0x110>)
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	2101      	movs	r1, #1
 80015f0:	54d1      	strb	r1, [r2, r3]
 80015f2:	e012      	b.n	800161a <app_apply_relays+0xca>
			}
		} else if (new_relays->default_relay_state == DEFAULT_RELAY_OFF) {
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	785b      	ldrb	r3, [r3, #1]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d105      	bne.n	8001608 <app_apply_relays+0xb8>
			hardware_relay[i].relay_working_mode = RELAY_MODE_ALWAYS_OFF;
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <app_apply_relays+0x110>)
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	2102      	movs	r1, #2
 8001604:	54d1      	strb	r1, [r2, r3]
 8001606:	e008      	b.n	800161a <app_apply_relays+0xca>
		} else if (new_relays->default_relay_state == DEFAULT_RELAY_ON) {
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	785b      	ldrb	r3, [r3, #1]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d104      	bne.n	800161a <app_apply_relays+0xca>
			hardware_relay[i].relay_working_mode = RELAY_MODE_ALWAYS_ON;
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <app_apply_relays+0x110>)
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	2101      	movs	r1, #1
 8001618:	54d1      	strb	r1, [r2, r3]
	for (int i=0;i<11;i++) {
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	2b0a      	cmp	r3, #10
 8001624:	dd9b      	ble.n	800155e <app_apply_relays+0xe>
		}
	}
	if (new_relays->timeout_sec_specified) {
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	791b      	ldrb	r3, [r3, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00a      	beq.n	8001644 <app_apply_relays+0xf4>
		timeout_ms = 1 + new_relays->timeout_sec * 1000;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	0013      	movs	r3, r2
 8001634:	015b      	lsls	r3, r3, #5
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	189b      	adds	r3, r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <app_apply_relays+0x114>)
 8001642:	601a      	str	r2, [r3, #0]
	}
	// TODO UPDATE MOTOR
	if (new_relays->motor_mentioned) {
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	789b      	ldrb	r3, [r3, #2]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d004      	beq.n	8001656 <app_apply_relays+0x106>
		app_set_desired_motor_speed(new_relays->motor_percent);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	78db      	ldrb	r3, [r3, #3]
 8001650:	0018      	movs	r0, r3
 8001652:	f7fe ff3f 	bl	80004d4 <app_set_desired_motor_speed>
	}
}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	b006      	add	sp, #24
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	200000e4 	.word	0x200000e4
 8001664:	20000194 	.word	0x20000194

08001668 <app_decode_uid>:

void app_decode_uid(const char *cmd) {
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b08d      	sub	sp, #52	; 0x34
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	char uid_answer[30];
	cp("UID ", uid_answer, 0);
 8001670:	240c      	movs	r4, #12
 8001672:	1939      	adds	r1, r7, r4
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <app_decode_uid+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	0018      	movs	r0, r3
 800167a:	f000 f883 	bl	8001784 <cp>
	char *uid = get_uid();
 800167e:	f7ff fb81 	bl	8000d84 <get_uid>
 8001682:	0003      	movs	r3, r0
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
	cp(uid, &uid_answer[4], 24);
 8001686:	193b      	adds	r3, r7, r4
 8001688:	1d19      	adds	r1, r3, #4
 800168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168c:	2218      	movs	r2, #24
 800168e:	0018      	movs	r0, r3
 8001690:	f000 f878 	bl	8001784 <cp>
	cp(";", &uid_answer[28], 0);
 8001694:	193b      	adds	r3, r7, r4
 8001696:	331c      	adds	r3, #28
 8001698:	0019      	movs	r1, r3
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <app_decode_uid+0x54>)
 800169c:	2200      	movs	r2, #0
 800169e:	0018      	movs	r0, r3
 80016a0:	f000 f870 	bl	8001784 <cp>

	app_send_data(uid_answer, 29);
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <app_decode_uid+0x58>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	193a      	adds	r2, r7, r4
 80016aa:	211d      	movs	r1, #29
 80016ac:	0010      	movs	r0, r2
 80016ae:	4798      	blx	r3
	// now we don't parse it even
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b00d      	add	sp, #52	; 0x34
 80016b6:	bd90      	pop	{r4, r7, pc}
 80016b8:	0800aa4c 	.word	0x0800aa4c
 80016bc:	0800aa54 	.word	0x0800aa54
 80016c0:	200000c4 	.word	0x200000c4

080016c4 <app_decode_set>:

void app_decode_set(const char *cmd) {
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	uint8_t post_num = 0;
 80016cc:	2317      	movs	r3, #23
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
	uint8_t digits = 0;
 80016d4:	2316      	movs	r3, #22
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<4 && digits<2;i++) {
 80016dc:	2300      	movs	r3, #0
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	e032      	b.n	8001748 <app_decode_set+0x84>
		if(cmd[i]>='0' && cmd[i]<='9') {
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	18d3      	adds	r3, r2, r3
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b2f      	cmp	r3, #47	; 0x2f
 80016ec:	d924      	bls.n	8001738 <app_decode_set+0x74>
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	18d3      	adds	r3, r2, r3
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b39      	cmp	r3, #57	; 0x39
 80016f8:	d81e      	bhi.n	8001738 <app_decode_set+0x74>
			digits++;
 80016fa:	2116      	movs	r1, #22
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	781a      	ldrb	r2, [r3, #0]
 8001700:	187b      	adds	r3, r7, r1
 8001702:	3201      	adds	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
			uint8_t digit = cmd[i] - '0';
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	18d3      	adds	r3, r2, r3
 800170c:	781a      	ldrb	r2, [r3, #0]
 800170e:	240f      	movs	r4, #15
 8001710:	193b      	adds	r3, r7, r4
 8001712:	3a30      	subs	r2, #48	; 0x30
 8001714:	701a      	strb	r2, [r3, #0]
			post_num = post_num * 10;
 8001716:	2017      	movs	r0, #23
 8001718:	183a      	adds	r2, r7, r0
 800171a:	183b      	adds	r3, r7, r0
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	1c19      	adds	r1, r3, #0
 8001720:	0089      	lsls	r1, r1, #2
 8001722:	18cb      	adds	r3, r1, r3
 8001724:	18db      	adds	r3, r3, r3
 8001726:	7013      	strb	r3, [r2, #0]
			post_num += digit;
 8001728:	183b      	adds	r3, r7, r0
 800172a:	1839      	adds	r1, r7, r0
 800172c:	193a      	adds	r2, r7, r4
 800172e:	7809      	ldrb	r1, [r1, #0]
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	188a      	adds	r2, r1, r2
 8001734:	701a      	strb	r2, [r3, #0]
		if(cmd[i]>='0' && cmd[i]<='9') {
 8001736:	e004      	b.n	8001742 <app_decode_set+0x7e>
		} else {
			if(digits!=0) break;
 8001738:	2316      	movs	r3, #22
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10b      	bne.n	800175a <app_decode_set+0x96>
	for(int i=0;i<4 && digits<2;i++) {
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	3301      	adds	r3, #1
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	2b03      	cmp	r3, #3
 800174c:	dc06      	bgt.n	800175c <app_decode_set+0x98>
 800174e:	2316      	movs	r3, #22
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d9c4      	bls.n	80016e2 <app_decode_set+0x1e>
 8001758:	e000      	b.n	800175c <app_decode_set+0x98>
			if(digits!=0) break;
 800175a:	46c0      	nop			; (mov r8, r8)
		}
	}
	set_post_num(post_num);
 800175c:	2317      	movs	r3, #23
 800175e:	18fb      	adds	r3, r7, r3
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff fa72 	bl	8000c4c <set_post_num>
	app_send_data("OK", 2);
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <app_decode_set+0xb8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a04      	ldr	r2, [pc, #16]	; (8001780 <app_decode_set+0xbc>)
 800176e:	2102      	movs	r1, #2
 8001770:	0010      	movs	r0, r2
 8001772:	4798      	blx	r3
}
 8001774:	46c0      	nop			; (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	b007      	add	sp, #28
 800177a:	bd90      	pop	{r4, r7, pc}
 800177c:	200000c4 	.word	0x200000c4
 8001780:	0800aa48 	.word	0x0800aa48

08001784 <cp>:

void cp(char * from, char *to, uint8_t size) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	1dfb      	adds	r3, r7, #7
 8001790:	701a      	strb	r2, [r3, #0]
	if (!size) {
 8001792:	1dfb      	adds	r3, r7, #7
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d11c      	bne.n	80017d4 <cp+0x50>
		int i;
		for(i=0;from[i] != 0 && i< MAX_CMD_BUF;i++) {
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	e00a      	b.n	80017b6 <cp+0x32>
			to[i] = from[i];
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	18d2      	adds	r2, r2, r3
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	18cb      	adds	r3, r1, r3
 80017ac:	7812      	ldrb	r2, [r2, #0]
 80017ae:	701a      	strb	r2, [r3, #0]
		for(i=0;from[i] != 0 && i< MAX_CMD_BUF;i++) {
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	3301      	adds	r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	18d3      	adds	r3, r2, r3
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <cp+0x44>
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2bc0      	cmp	r3, #192	; 0xc0
 80017c6:	ddeb      	ble.n	80017a0 <cp+0x1c>
		}
		to[i] = 0;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	18d3      	adds	r3, r2, r3
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
	} else {
		for (int i=0;i<size;i++) {
			to[i] = from[i];
		}
	}
}
 80017d2:	e012      	b.n	80017fa <cp+0x76>
		for (int i=0;i<size;i++) {
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	e00a      	b.n	80017f0 <cp+0x6c>
			to[i] = from[i];
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	18d2      	adds	r2, r2, r3
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	68b9      	ldr	r1, [r7, #8]
 80017e4:	18cb      	adds	r3, r1, r3
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<size;i++) {
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	3301      	adds	r3, #1
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	1dfb      	adds	r3, r7, #7
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	dbef      	blt.n	80017da <cp+0x56>
}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b006      	add	sp, #24
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <get_state>:

uint8_t get_state() {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
	if (get_tick) {
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <get_state+0x48>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d015      	beq.n	800183e <get_state+0x3a>
		uint32_t cur_tick = get_tick();
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <get_state+0x48>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4798      	blx	r3
 8001818:	0003      	movs	r3, r0
 800181a:	607b      	str	r3, [r7, #4]
		uint32_t time_passed = cur_tick - last_ping;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <get_state+0x4c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	603b      	str	r3, [r7, #0]
		if(time_passed > 1000) {
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	23fa      	movs	r3, #250	; 0xfa
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d903      	bls.n	8001838 <get_state+0x34>
			current_state = ST_WAITING_FOR_CONNECTION;
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <get_state+0x50>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e002      	b.n	800183e <get_state+0x3a>
		} else {
			current_state = ST_WORKING;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <get_state+0x50>)
 800183a:	2202      	movs	r2, #2
 800183c:	601a      	str	r2, [r3, #0]
		}
	}
	return current_state;
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <get_state+0x50>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	b2db      	uxtb	r3, r3
}
 8001844:	0018      	movs	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	b002      	add	sp, #8
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200000cc 	.word	0x200000cc
 8001850:	200000c0 	.word	0x200000c0
 8001854:	200000bc 	.word	0x200000bc

08001858 <add_button>:
 */


#include "buttons.h"

void add_button(buttons * obj, uint16_t pin, GPIO_TypeDef * port) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	200a      	movs	r0, #10
 8001864:	183b      	adds	r3, r7, r0
 8001866:	1c0a      	adds	r2, r1, #0
 8001868:	801a      	strh	r2, [r3, #0]
	obj->btn[obj->cursor].pin = pin;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2230      	movs	r2, #48	; 0x30
 800186e:	5c9b      	ldrb	r3, [r3, r2]
 8001870:	001a      	movs	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	1839      	adds	r1, r7, r0
 8001878:	8809      	ldrh	r1, [r1, #0]
 800187a:	52d1      	strh	r1, [r2, r3]
	obj->btn[obj->cursor].port = port;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2230      	movs	r2, #48	; 0x30
 8001880:	5c9b      	ldrb	r3, [r3, r2]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	18d3      	adds	r3, r2, r3
 8001888:	3304      	adds	r3, #4
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	601a      	str	r2, [r3, #0]
	obj->btn[obj->cursor].digital_state = 1; //1 means released, no macros deliberately
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2230      	movs	r2, #48	; 0x30
 8001892:	5c9b      	ldrb	r3, [r3, r2]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	18d3      	adds	r3, r2, r3
 800189a:	3309      	adds	r3, #9
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
	obj->btn[obj->cursor].is_clicked = 0;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2230      	movs	r2, #48	; 0x30
 80018a4:	5c9b      	ldrb	r3, [r3, r2]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	18d3      	adds	r3, r2, r3
 80018ac:	330a      	adds	r3, #10
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
	obj->btn[obj->cursor].is_dblclicked = 0;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2230      	movs	r2, #48	; 0x30
 80018b6:	5c9b      	ldrb	r3, [r3, r2]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	18d3      	adds	r3, r2, r3
 80018be:	330b      	adds	r3, #11
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
	obj->btn[obj->cursor].dbl_click_countdown = 0;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2230      	movs	r2, #48	; 0x30
 80018c8:	5c9b      	ldrb	r3, [r3, r2]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	18d3      	adds	r3, r2, r3
 80018d0:	330c      	adds	r3, #12
 80018d2:	2200      	movs	r2, #0
 80018d4:	801a      	strh	r2, [r3, #0]
	obj->btn[obj->cursor].bounce_analog_state = BOUNCE_SAMPLES; // maximum released state
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2230      	movs	r2, #48	; 0x30
 80018da:	5c9b      	ldrb	r3, [r3, r2]
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	18d3      	adds	r3, r2, r3
 80018e2:	3308      	adds	r3, #8
 80018e4:	2203      	movs	r2, #3
 80018e6:	701a      	strb	r2, [r3, #0]
	obj->cursor = obj->cursor + 1;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2230      	movs	r2, #48	; 0x30
 80018ec:	5c9b      	ldrb	r3, [r3, r2]
 80018ee:	3301      	adds	r3, #1
 80018f0:	b2d9      	uxtb	r1, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2230      	movs	r2, #48	; 0x30
 80018f6:	5499      	strb	r1, [r3, r2]
}
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b004      	add	sp, #16
 80018fe:	bd80      	pop	{r7, pc}

08001900 <init_buttons>:

void init_buttons(buttons * obj) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	obj->cursor = 0;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2230      	movs	r2, #48	; 0x30
 800190c:	2100      	movs	r1, #0
 800190e:	5499      	strb	r1, [r3, r2]
	add_button(obj, BUTTON_1_Pin, BUTTON_1_GPIO_Port);
 8001910:	4a0c      	ldr	r2, [pc, #48]	; (8001944 <init_buttons+0x44>)
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	0199      	lsls	r1, r3, #6
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff ff9d 	bl	8001858 <add_button>
	add_button(obj, BUTTON_2_Pin, BUTTON_2_GPIO_Port);
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <init_buttons+0x44>)
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	01d9      	lsls	r1, r3, #7
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	0018      	movs	r0, r3
 8001928:	f7ff ff96 	bl	8001858 <add_button>
	add_button(obj, BUTTON_3_Pin, BUTTON_3_GPIO_Port);
 800192c:	4a05      	ldr	r2, [pc, #20]	; (8001944 <init_buttons+0x44>)
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	0219      	lsls	r1, r3, #8
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	0018      	movs	r0, r3
 8001936:	f7ff ff8f 	bl	8001858 <add_button>
}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	46bd      	mov	sp, r7
 800193e:	b002      	add	sp, #8
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	48000800 	.word	0x48000800

08001948 <update_button>:

void update_button(button * obj) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	if(obj->dbl_click_countdown) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	899b      	ldrh	r3, [r3, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <update_button+0x1c>
		obj->dbl_click_countdown--;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	899b      	ldrh	r3, [r3, #12]
 800195c:	3b01      	subs	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	819a      	strh	r2, [r3, #12]
	}
	if (HAL_GPIO_ReadPin (obj->port, obj->pin)) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	0019      	movs	r1, r3
 800196e:	0010      	movs	r0, r2
 8001970:	f003 fdc6 	bl	8005500 <HAL_GPIO_ReadPin>
 8001974:	1e03      	subs	r3, r0, #0
 8001976:	d018      	beq.n	80019aa <update_button+0x62>
		// positive value is when a button released
		obj->bounce_analog_state++;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7a1b      	ldrb	r3, [r3, #8]
 800197c:	b25b      	sxtb	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	3301      	adds	r3, #1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	b25a      	sxtb	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	721a      	strb	r2, [r3, #8]
		if (obj->bounce_analog_state >= BOUNCE_SAMPLES) {
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7a1b      	ldrb	r3, [r3, #8]
 800198e:	b25b      	sxtb	r3, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	dd33      	ble.n	80019fc <update_button+0xb4>
			// really released the button
			obj->bounce_analog_state = BOUNCE_SAMPLES;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2203      	movs	r2, #3
 8001998:	721a      	strb	r2, [r3, #8]
			if(!obj->digital_state) {
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7a5b      	ldrb	r3, [r3, #9]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d12c      	bne.n	80019fc <update_button+0xb4>
				obj->digital_state = 1;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	725a      	strb	r2, [r3, #9]
					obj->dbl_click_countdown = DBL_CLICK_CYCLES;
				}
			}
		}
	}
}
 80019a8:	e028      	b.n	80019fc <update_button+0xb4>
		obj->bounce_analog_state--;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7a1b      	ldrb	r3, [r3, #8]
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	3b01      	subs	r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	b25a      	sxtb	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	721a      	strb	r2, [r3, #8]
		if (obj->bounce_analog_state<=0) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7a1b      	ldrb	r3, [r3, #8]
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	dc1a      	bgt.n	80019fc <update_button+0xb4>
			obj->bounce_analog_state = 0;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	721a      	strb	r2, [r3, #8]
			if(obj->digital_state) {
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7a5b      	ldrb	r3, [r3, #9]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d013      	beq.n	80019fc <update_button+0xb4>
				obj->digital_state = 0;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	725a      	strb	r2, [r3, #9]
				if(obj->dbl_click_countdown) {
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	899b      	ldrh	r3, [r3, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d006      	beq.n	80019f0 <update_button+0xa8>
					obj->is_dblclicked = 1;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	72da      	strb	r2, [r3, #11]
					obj->dbl_click_countdown = 0;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	819a      	strh	r2, [r3, #12]
}
 80019ee:	e005      	b.n	80019fc <update_button+0xb4>
					obj->is_clicked = 1;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	729a      	strb	r2, [r3, #10]
					obj->dbl_click_countdown = DBL_CLICK_CYCLES;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2264      	movs	r2, #100	; 0x64
 80019fa:	819a      	strh	r2, [r3, #12]
}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b002      	add	sp, #8
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <_set_cmd_crc>:
char cmd_set_speed[8];

// stop motor command
char cmd_stop_motor[8];

void _set_cmd_crc(const char *cmd, uint8_t size, uint16_t * crc_sum) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	230b      	movs	r3, #11
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	1c0a      	adds	r2, r1, #0
 8001a14:	701a      	strb	r2, [r3, #0]
	*crc_sum = 0xffff;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4252      	negs	r2, r2
 8001a1c:	801a      	strh	r2, [r3, #0]
	uint16_t polynom = 0xa001;
 8001a1e:	2314      	movs	r3, #20
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	4a2c      	ldr	r2, [pc, #176]	; (8001ad4 <_set_cmd_crc+0xd0>)
 8001a24:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i<size;i++) {
 8001a26:	2317      	movs	r3, #23
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	e043      	b.n	8001ab8 <_set_cmd_crc+0xb4>
		uint8_t cur_element = (uint8_t)cmd[i];
 8001a30:	2317      	movs	r3, #23
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	18d2      	adds	r2, r2, r3
 8001a3a:	2113      	movs	r1, #19
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	7812      	ldrb	r2, [r2, #0]
 8001a40:	701a      	strb	r2, [r3, #0]
		*crc_sum = *crc_sum ^ cur_element;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	881a      	ldrh	r2, [r3, #0]
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	4053      	eors	r3, r2
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	801a      	strh	r2, [r3, #0]
		for (uint8_t j = 0;j<8;j++) {
 8001a54:	2316      	movs	r3, #22
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	e021      	b.n	8001aa2 <_set_cmd_crc+0x9e>
			if(*crc_sum & 0x0001) {
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	001a      	movs	r2, r3
 8001a64:	2301      	movs	r3, #1
 8001a66:	4013      	ands	r3, r2
 8001a68:	d00f      	beq.n	8001a8a <_set_cmd_crc+0x86>
				*crc_sum >>= 1;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	801a      	strh	r2, [r3, #0]
				*crc_sum = *crc_sum ^ polynom;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	881a      	ldrh	r2, [r3, #0]
 8001a7a:	2314      	movs	r3, #20
 8001a7c:	18fb      	adds	r3, r7, r3
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	4053      	eors	r3, r2
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	801a      	strh	r2, [r3, #0]
 8001a88:	e005      	b.n	8001a96 <_set_cmd_crc+0x92>
			} else {
				*crc_sum >>= 1;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	085b      	lsrs	r3, r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	801a      	strh	r2, [r3, #0]
		for (uint8_t j = 0;j<8;j++) {
 8001a96:	2116      	movs	r1, #22
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	781a      	ldrb	r2, [r3, #0]
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	3201      	adds	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	2316      	movs	r3, #22
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b07      	cmp	r3, #7
 8001aaa:	d9d8      	bls.n	8001a5e <_set_cmd_crc+0x5a>
	for (uint8_t i = 0; i<size;i++) {
 8001aac:	2117      	movs	r1, #23
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	781a      	ldrb	r2, [r3, #0]
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	3201      	adds	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	2317      	movs	r3, #23
 8001aba:	18fa      	adds	r2, r7, r3
 8001abc:	230b      	movs	r3, #11
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	7812      	ldrb	r2, [r2, #0]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d3b3      	bcc.n	8001a30 <_set_cmd_crc+0x2c>
			}
		}
	}
}
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b006      	add	sp, #24
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	ffffa001 	.word	0xffffa001

08001ad8 <esq_vars_init>:

void esq_vars_init(){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	// header
	cmd_motor_info[0] = DEVICE_ADDR;
 8001adc:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <esq_vars_init+0xcc>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
	cmd_motor_info[1] = READ_COMMAND;
 8001ae2:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <esq_vars_init+0xcc>)
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	705a      	strb	r2, [r3, #1]
	// address
	cmd_motor_info[2] = 0x1e;
 8001ae8:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <esq_vars_init+0xcc>)
 8001aea:	221e      	movs	r2, #30
 8001aec:	709a      	strb	r2, [r3, #2]
	cmd_motor_info[3] = 0x02;
 8001aee:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <esq_vars_init+0xcc>)
 8001af0:	2202      	movs	r2, #2
 8001af2:	70da      	strb	r2, [r3, #3]
	// value
	cmd_motor_info[4] = 0x00;
 8001af4:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <esq_vars_init+0xcc>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	711a      	strb	r2, [r3, #4]
	cmd_motor_info[5] = 0x01;
 8001afa:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <esq_vars_init+0xcc>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	715a      	strb	r2, [r3, #5]
	// crc
	_set_cmd_crc(cmd_motor_info, 6, (uint16_t *)&cmd_motor_info[6]);
 8001b00:	4a29      	ldr	r2, [pc, #164]	; (8001ba8 <esq_vars_init+0xd0>)
 8001b02:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <esq_vars_init+0xcc>)
 8001b04:	2106      	movs	r1, #6
 8001b06:	0018      	movs	r0, r3
 8001b08:	f7ff ff7c 	bl	8001a04 <_set_cmd_crc>

	//header
	cmd_start_motor[0] = DEVICE_ADDR;
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <esq_vars_init+0xd4>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]
	cmd_start_motor[1] = WRITE_COMMAND;
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <esq_vars_init+0xd4>)
 8001b14:	2206      	movs	r2, #6
 8001b16:	705a      	strb	r2, [r3, #1]
	// address
	cmd_start_motor[2] = 0x1e;
 8001b18:	4b24      	ldr	r3, [pc, #144]	; (8001bac <esq_vars_init+0xd4>)
 8001b1a:	221e      	movs	r2, #30
 8001b1c:	709a      	strb	r2, [r3, #2]
	cmd_start_motor[3] = 0x00;
 8001b1e:	4b23      	ldr	r3, [pc, #140]	; (8001bac <esq_vars_init+0xd4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	70da      	strb	r2, [r3, #3]
	// value
	cmd_start_motor[4] = 0x00;
 8001b24:	4b21      	ldr	r3, [pc, #132]	; (8001bac <esq_vars_init+0xd4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	711a      	strb	r2, [r3, #4]
	cmd_start_motor[5] = 0x05;
 8001b2a:	4b20      	ldr	r3, [pc, #128]	; (8001bac <esq_vars_init+0xd4>)
 8001b2c:	2205      	movs	r2, #5
 8001b2e:	715a      	strb	r2, [r3, #5]
	// crc
	_set_cmd_crc(cmd_start_motor, 6, (uint16_t *)&cmd_start_motor[6]);
 8001b30:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <esq_vars_init+0xd8>)
 8001b32:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <esq_vars_init+0xd4>)
 8001b34:	2106      	movs	r1, #6
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7ff ff64 	bl	8001a04 <_set_cmd_crc>

	// header
	cmd_set_speed[0] = DEVICE_ADDR;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <esq_vars_init+0xdc>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
	cmd_set_speed[1] = WRITE_COMMAND;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <esq_vars_init+0xdc>)
 8001b44:	2206      	movs	r2, #6
 8001b46:	705a      	strb	r2, [r3, #1]
	// address
	cmd_set_speed[2] = 0x1e;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <esq_vars_init+0xdc>)
 8001b4a:	221e      	movs	r2, #30
 8001b4c:	709a      	strb	r2, [r3, #2]
	cmd_set_speed[3] = 0x01;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <esq_vars_init+0xdc>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	70da      	strb	r2, [r3, #3]
	// value
	cmd_set_speed[4] = 0x13; //1388 is 5000, which is 50%
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <esq_vars_init+0xdc>)
 8001b56:	2213      	movs	r2, #19
 8001b58:	711a      	strb	r2, [r3, #4]
	cmd_set_speed[5] = 0x88;
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <esq_vars_init+0xdc>)
 8001b5c:	2288      	movs	r2, #136	; 0x88
 8001b5e:	715a      	strb	r2, [r3, #5]
	// crc
	_set_cmd_crc(cmd_set_speed, 6, (uint16_t *)&cmd_set_speed[6]);
 8001b60:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <esq_vars_init+0xe0>)
 8001b62:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <esq_vars_init+0xdc>)
 8001b64:	2106      	movs	r1, #6
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7ff ff4c 	bl	8001a04 <_set_cmd_crc>

	// header
	cmd_stop_motor[0] = DEVICE_ADDR;
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <esq_vars_init+0xe4>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
	cmd_stop_motor[1] = WRITE_COMMAND;
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <esq_vars_init+0xe4>)
 8001b74:	2206      	movs	r2, #6
 8001b76:	705a      	strb	r2, [r3, #1]
	// address
	cmd_stop_motor[2] = 0x1e;
 8001b78:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <esq_vars_init+0xe4>)
 8001b7a:	221e      	movs	r2, #30
 8001b7c:	709a      	strb	r2, [r3, #2]
	cmd_stop_motor[3] = 0x00;
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <esq_vars_init+0xe4>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	70da      	strb	r2, [r3, #3]
	// value
	cmd_stop_motor[4] = 0x00;
 8001b84:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <esq_vars_init+0xe4>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	711a      	strb	r2, [r3, #4]
	cmd_stop_motor[5] = 0x06;
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <esq_vars_init+0xe4>)
 8001b8c:	2206      	movs	r2, #6
 8001b8e:	715a      	strb	r2, [r3, #5]
	// crc
	_set_cmd_crc(cmd_stop_motor, 6, (uint16_t *)&cmd_stop_motor[6]);
 8001b90:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <esq_vars_init+0xe8>)
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <esq_vars_init+0xe4>)
 8001b94:	2106      	movs	r1, #6
 8001b96:	0018      	movs	r0, r3
 8001b98:	f7ff ff34 	bl	8001a04 <_set_cmd_crc>
}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	200001c4 	.word	0x200001c4
 8001ba8:	200001ca 	.word	0x200001ca
 8001bac:	200001cc 	.word	0x200001cc
 8001bb0:	200001d2 	.word	0x200001d2
 8001bb4:	200001d4 	.word	0x200001d4
 8001bb8:	200001da 	.word	0x200001da
 8001bbc:	200001dc 	.word	0x200001dc
 8001bc0:	200001e2 	.word	0x200001e2

08001bc4 <start_motor_cmd>:


// returns a command to start_motor starts motor
char * start_motor_cmd() {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	return cmd_start_motor;
 8001bc8:	4b01      	ldr	r3, [pc, #4]	; (8001bd0 <start_motor_cmd+0xc>)
}
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200001cc 	.word	0x200001cc

08001bd4 <set_motor_speed_cmd>:
uint8_t parse_start_motor_answer(const char * answer) {
	return 0;
}

// returns a command to start_motor starts motor at specified percent
char * set_motor_speed_cmd(uint8_t percent) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	0002      	movs	r2, r0
 8001bdc:	1dfb      	adds	r3, r7, #7
 8001bde:	701a      	strb	r2, [r3, #0]
	if(percent>100) {
 8001be0:	1dfb      	adds	r3, r7, #7
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b64      	cmp	r3, #100	; 0x64
 8001be6:	d902      	bls.n	8001bee <set_motor_speed_cmd+0x1a>
		percent = 100;
 8001be8:	1dfb      	adds	r3, r7, #7
 8001bea:	2264      	movs	r2, #100	; 0x64
 8001bec:	701a      	strb	r2, [r3, #0]
	}
	uint16_t big_percent = percent * 100;
 8001bee:	1dfb      	adds	r3, r7, #7
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	2264      	movs	r2, #100	; 0x64
 8001bf6:	4353      	muls	r3, r2
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	210a      	movs	r1, #10
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	801a      	strh	r2, [r3, #0]
	char * val = (char*)&big_percent;
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	60fb      	str	r3, [r7, #12]
	cmd_set_speed[5] = val[0];
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <set_motor_speed_cmd+0x58>)
 8001c0a:	715a      	strb	r2, [r3, #5]
	cmd_set_speed[4] = val[1];
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	785a      	ldrb	r2, [r3, #1]
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <set_motor_speed_cmd+0x58>)
 8001c12:	711a      	strb	r2, [r3, #4]
	_set_cmd_crc(cmd_set_speed, 6, (uint16_t *)&cmd_set_speed[6]);
 8001c14:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <set_motor_speed_cmd+0x5c>)
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <set_motor_speed_cmd+0x58>)
 8001c18:	2106      	movs	r1, #6
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f7ff fef2 	bl	8001a04 <_set_cmd_crc>
	return cmd_set_speed;
 8001c20:	4b02      	ldr	r3, [pc, #8]	; (8001c2c <set_motor_speed_cmd+0x58>)
}
 8001c22:	0018      	movs	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b004      	add	sp, #16
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	200001d4 	.word	0x200001d4
 8001c30:	200001da 	.word	0x200001da

08001c34 <read_motor_info_cmd>:
uint8_t parse_set_motor_speed_answer(const char * answer) {
	return 0;
}

// read_motor_info collects info from the motor
char * read_motor_info_cmd() {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	return cmd_motor_info;
 8001c38:	4b01      	ldr	r3, [pc, #4]	; (8001c40 <read_motor_info_cmd+0xc>)
}
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200001c4 	.word	0x200001c4

08001c44 <stop_motor_cmd>:
uint8_t parse_motor_info_answer(const char * answer, motor_parsed_info * status) {
	return 0;
}

// stop motor stops the motor
char * stop_motor_cmd() {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
	return cmd_stop_motor;
 8001c48:	4b01      	ldr	r3, [pc, #4]	; (8001c50 <stop_motor_cmd+0xc>)
}
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200001dc 	.word	0x200001dc

08001c54 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	0004      	movs	r4, r0
 8001c5c:	0008      	movs	r0, r1
 8001c5e:	60ba      	str	r2, [r7, #8]
 8001c60:	0019      	movs	r1, r3
 8001c62:	230e      	movs	r3, #14
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	1c22      	adds	r2, r4, #0
 8001c68:	801a      	strh	r2, [r3, #0]
 8001c6a:	230c      	movs	r3, #12
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	1c02      	adds	r2, r0, #0
 8001c70:	801a      	strh	r2, [r3, #0]
 8001c72:	1dbb      	adds	r3, r7, #6
 8001c74:	1c0a      	adds	r2, r1, #0
 8001c76:	801a      	strh	r2, [r3, #0]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001c78:	1dbb      	adds	r3, r7, #6
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	5e9b      	ldrsh	r3, [r3, r2]
 8001c7e:	3307      	adds	r3, #7
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	da00      	bge.n	8001c86 <SSD1306_DrawBitmap+0x32>
 8001c84:	3307      	adds	r3, #7
 8001c86:	10db      	asrs	r3, r3, #3
 8001c88:	001a      	movs	r2, r3
 8001c8a:	2310      	movs	r3, #16
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8001c90:	2317      	movs	r3, #23
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]

    for(int16_t j=0; j<h; j++, y++)
 8001c98:	2314      	movs	r3, #20
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	801a      	strh	r2, [r3, #0]
 8001ca0:	e068      	b.n	8001d74 <SSD1306_DrawBitmap+0x120>
    {
        for(int16_t i=0; i<w; i++)
 8001ca2:	2312      	movs	r3, #18
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	801a      	strh	r2, [r3, #0]
 8001caa:	e048      	b.n	8001d3e <SSD1306_DrawBitmap+0xea>
        {
            if(i & 7)
 8001cac:	2312      	movs	r3, #18
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	001a      	movs	r2, r3
 8001cb4:	2307      	movs	r3, #7
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d006      	beq.n	8001cc8 <SSD1306_DrawBitmap+0x74>
            {
               byte <<= 1;
 8001cba:	2317      	movs	r3, #23
 8001cbc:	18fa      	adds	r2, r7, r3
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	18db      	adds	r3, r3, r3
 8001cc4:	7013      	strb	r3, [r2, #0]
 8001cc6:	e019      	b.n	8001cfc <SSD1306_DrawBitmap+0xa8>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001cc8:	2314      	movs	r3, #20
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2200      	movs	r2, #0
 8001cce:	5e9b      	ldrsh	r3, [r3, r2]
 8001cd0:	2210      	movs	r2, #16
 8001cd2:	18ba      	adds	r2, r7, r2
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	5e52      	ldrsh	r2, [r2, r1]
 8001cd8:	435a      	muls	r2, r3
 8001cda:	2312      	movs	r3, #18
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	2100      	movs	r1, #0
 8001ce0:	5e5b      	ldrsh	r3, [r3, r1]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	da00      	bge.n	8001ce8 <SSD1306_DrawBitmap+0x94>
 8001ce6:	3307      	adds	r3, #7
 8001ce8:	10db      	asrs	r3, r3, #3
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	18d3      	adds	r3, r2, r3
 8001cee:	001a      	movs	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	189a      	adds	r2, r3, r2
 8001cf4:	2317      	movs	r3, #23
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	7812      	ldrb	r2, [r2, #0]
 8001cfa:	701a      	strb	r2, [r3, #0]
            }

            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001cfc:	2317      	movs	r3, #23
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	b25b      	sxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	da11      	bge.n	8001d2c <SSD1306_DrawBitmap+0xd8>
 8001d08:	230e      	movs	r3, #14
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	881a      	ldrh	r2, [r3, #0]
 8001d0e:	2312      	movs	r3, #18
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	18d3      	adds	r3, r2, r3
 8001d16:	b298      	uxth	r0, r3
 8001d18:	230c      	movs	r3, #12
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	8819      	ldrh	r1, [r3, #0]
 8001d1e:	232c      	movs	r3, #44	; 0x2c
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	001a      	movs	r2, r3
 8001d28:	f000 f8e8 	bl	8001efc <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001d2c:	2112      	movs	r1, #18
 8001d2e:	187b      	adds	r3, r7, r1
 8001d30:	2200      	movs	r2, #0
 8001d32:	5e9b      	ldrsh	r3, [r3, r2]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	187b      	adds	r3, r7, r1
 8001d3c:	801a      	strh	r2, [r3, #0]
 8001d3e:	2312      	movs	r3, #18
 8001d40:	18fa      	adds	r2, r7, r3
 8001d42:	1dbb      	adds	r3, r7, #6
 8001d44:	2100      	movs	r1, #0
 8001d46:	5e52      	ldrsh	r2, [r2, r1]
 8001d48:	2100      	movs	r1, #0
 8001d4a:	5e5b      	ldrsh	r3, [r3, r1]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	dbad      	blt.n	8001cac <SSD1306_DrawBitmap+0x58>
    for(int16_t j=0; j<h; j++, y++)
 8001d50:	2114      	movs	r1, #20
 8001d52:	187b      	adds	r3, r7, r1
 8001d54:	2200      	movs	r2, #0
 8001d56:	5e9b      	ldrsh	r3, [r3, r2]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	187b      	adds	r3, r7, r1
 8001d60:	801a      	strh	r2, [r3, #0]
 8001d62:	210c      	movs	r1, #12
 8001d64:	187b      	adds	r3, r7, r1
 8001d66:	2200      	movs	r2, #0
 8001d68:	5e9b      	ldrsh	r3, [r3, r2]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	187b      	adds	r3, r7, r1
 8001d72:	801a      	strh	r2, [r3, #0]
 8001d74:	2314      	movs	r3, #20
 8001d76:	18fa      	adds	r2, r7, r3
 8001d78:	2328      	movs	r3, #40	; 0x28
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	5e52      	ldrsh	r2, [r2, r1]
 8001d80:	2100      	movs	r1, #0
 8001d82:	5e5b      	ldrsh	r3, [r3, r1]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	db8c      	blt.n	8001ca2 <SSD1306_DrawBitmap+0x4e>
        }
    }
}
 8001d88:	46c0      	nop			; (mov r8, r8)
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b007      	add	sp, #28
 8001d90:	bd90      	pop	{r4, r7, pc}
	...

08001d94 <SSD1306_Init>:

uint8_t SSD1306_Init(void) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
    mirrored_x = 1;
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <SSD1306_Init+0x80>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
    mirrored_y = 1;
 8001da0:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <SSD1306_Init+0x84>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
	/* Init I2C - just a delay */
	ssd1306_I2C_Init();
 8001da6:	f000 fc07 	bl	80025b8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001daa:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <SSD1306_Init+0x88>)
 8001dac:	481c      	ldr	r0, [pc, #112]	; (8001e20 <SSD1306_Init+0x8c>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	2178      	movs	r1, #120	; 0x78
 8001db2:	f003 fd7d 	bl	80058b0 <HAL_I2C_IsDeviceReady>
 8001db6:	1e03      	subs	r3, r0, #0
 8001db8:	d001      	beq.n	8001dbe <SSD1306_Init+0x2a>
		/* Return false */
		return 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e026      	b.n	8001e0c <SSD1306_Init+0x78>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <SSD1306_Init+0x90>)
 8001dc0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001dc2:	e002      	b.n	8001dca <SSD1306_Init+0x36>
		p--;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f9      	bne.n	8001dc4 <SSD1306_Init+0x30>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001dd0:	22ae      	movs	r2, #174	; 0xae
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2078      	movs	r0, #120	; 0x78
 8001dd6:	f000 fc6f 	bl	80026b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001dda:	2281      	movs	r2, #129	; 0x81
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2078      	movs	r0, #120	; 0x78
 8001de0:	f000 fc6a 	bl	80026b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x01); // low brughtness
 8001de4:	2201      	movs	r2, #1
 8001de6:	2100      	movs	r1, #0
 8001de8:	2078      	movs	r0, #120	; 0x78
 8001dea:	f000 fc65 	bl	80026b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 8001dee:	223f      	movs	r2, #63	; 0x3f
 8001df0:	2100      	movs	r1, #0
 8001df2:	2078      	movs	r0, #120	; 0x78
 8001df4:	f000 fc60 	bl	80026b8 <ssd1306_I2C_Write>

	/* Update screen */
	//SSD1306_UpdateScreen();

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <SSD1306_Init+0x94>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <SSD1306_Init+0x94>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <SSD1306_Init+0x94>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b002      	add	sp, #8
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200005e4 	.word	0x200005e4
 8001e18:	200005e5 	.word	0x200005e5
 8001e1c:	00004e20 	.word	0x00004e20
 8001e20:	200005f0 	.word	0x200005f0
 8001e24:	000009c4 	.word	0x000009c4
 8001e28:	200005e8 	.word	0x200005e8

08001e2c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e021      	b.n	8001e7e <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m + 0);
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	3b50      	subs	r3, #80	; 0x50
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	001a      	movs	r2, r3
 8001e44:	2100      	movs	r1, #0
 8001e46:	2078      	movs	r0, #120	; 0x78
 8001e48:	f000 fc36 	bl	80026b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2100      	movs	r1, #0
 8001e50:	2078      	movs	r0, #120	; 0x78
 8001e52:	f000 fc31 	bl	80026b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001e56:	2210      	movs	r2, #16
 8001e58:	2100      	movs	r1, #0
 8001e5a:	2078      	movs	r0, #120	; 0x78
 8001e5c:	f000 fc2c 	bl	80026b8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001e60:	1dfb      	adds	r3, r7, #7
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	01da      	lsls	r2, r3, #7
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <SSD1306_UpdateScreen+0x64>)
 8001e68:	18d2      	adds	r2, r2, r3
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	2140      	movs	r1, #64	; 0x40
 8001e6e:	2078      	movs	r0, #120	; 0x78
 8001e70:	f000 fbb6 	bl	80025e0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001e74:	1dfb      	adds	r3, r7, #7
 8001e76:	781a      	ldrb	r2, [r3, #0]
 8001e78:	1dfb      	adds	r3, r7, #7
 8001e7a:	3201      	adds	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
 8001e7e:	1dfb      	adds	r3, r7, #7
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b07      	cmp	r3, #7
 8001e84:	d9d9      	bls.n	8001e3a <SSD1306_UpdateScreen+0xe>
	}
}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b002      	add	sp, #8
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200001e4 	.word	0x200001e4

08001e94 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	1dfb      	adds	r3, r7, #7
 8001e9e:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001ea0:	1dfb      	adds	r3, r7, #7
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <SSD1306_Fill+0x18>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e000      	b.n	8001eae <SSD1306_Fill+0x1a>
 8001eac:	23ff      	movs	r3, #255	; 0xff
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	00d2      	lsls	r2, r2, #3
 8001eb2:	4804      	ldr	r0, [pc, #16]	; (8001ec4 <SSD1306_Fill+0x30>)
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	f007 ff19 	bl	8009cec <memset>
}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b002      	add	sp, #8
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	200001e4 	.word	0x200001e4

08001ec8 <SSD1306_Mirror>:
void SSD1306_Mirror(uint8_t new_mirror_x, uint8_t new_mirror_y) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	0002      	movs	r2, r0
 8001ed0:	1dfb      	adds	r3, r7, #7
 8001ed2:	701a      	strb	r2, [r3, #0]
 8001ed4:	1dbb      	adds	r3, r7, #6
 8001ed6:	1c0a      	adds	r2, r1, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
	mirrored_x = new_mirror_x;
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <SSD1306_Mirror+0x2c>)
 8001edc:	1dfa      	adds	r2, r7, #7
 8001ede:	7812      	ldrb	r2, [r2, #0]
 8001ee0:	701a      	strb	r2, [r3, #0]
	mirrored_y = new_mirror_y;
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <SSD1306_Mirror+0x30>)
 8001ee4:	1dba      	adds	r2, r7, #6
 8001ee6:	7812      	ldrb	r2, [r2, #0]
 8001ee8:	701a      	strb	r2, [r3, #0]
}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	200005e4 	.word	0x200005e4
 8001ef8:	200005e5 	.word	0x200005e5

08001efc <SSD1306_DrawPixel>:
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	0004      	movs	r4, r0
 8001f04:	0008      	movs	r0, r1
 8001f06:	0011      	movs	r1, r2
 8001f08:	1dbb      	adds	r3, r7, #6
 8001f0a:	1c22      	adds	r2, r4, #0
 8001f0c:	801a      	strh	r2, [r3, #0]
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	1c02      	adds	r2, r0, #0
 8001f12:	801a      	strh	r2, [r3, #0]
 8001f14:	1cfb      	adds	r3, r7, #3
 8001f16:	1c0a      	adds	r2, r1, #0
 8001f18:	701a      	strb	r2, [r3, #0]
	// Let's rotate the screen;
	if(mirrored_x) {
 8001f1a:	4b37      	ldr	r3, [pc, #220]	; (8001ff8 <SSD1306_DrawPixel+0xfc>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <SSD1306_DrawPixel+0x32>
		x = 127 - x;
 8001f22:	1dbb      	adds	r3, r7, #6
 8001f24:	1dba      	adds	r2, r7, #6
 8001f26:	8812      	ldrh	r2, [r2, #0]
 8001f28:	217f      	movs	r1, #127	; 0x7f
 8001f2a:	1a8a      	subs	r2, r1, r2
 8001f2c:	801a      	strh	r2, [r3, #0]
	}
	if(mirrored_y) {
 8001f2e:	4b33      	ldr	r3, [pc, #204]	; (8001ffc <SSD1306_DrawPixel+0x100>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <SSD1306_DrawPixel+0x46>
		y = 63 - y;
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	1d3a      	adds	r2, r7, #4
 8001f3a:	8812      	ldrh	r2, [r2, #0]
 8001f3c:	213f      	movs	r1, #63	; 0x3f
 8001f3e:	1a8a      	subs	r2, r1, r2
 8001f40:	801a      	strh	r2, [r3, #0]
	}
	if (
 8001f42:	1dbb      	adds	r3, r7, #6
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	2b7f      	cmp	r3, #127	; 0x7f
 8001f48:	d852      	bhi.n	8001ff0 <SSD1306_DrawPixel+0xf4>
		x >= SSD1306_WIDTH ||
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	2b3f      	cmp	r3, #63	; 0x3f
 8001f50:	d84e      	bhi.n	8001ff0 <SSD1306_DrawPixel+0xf4>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001f52:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <SSD1306_DrawPixel+0x104>)
 8001f54:	791b      	ldrb	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d006      	beq.n	8001f68 <SSD1306_DrawPixel+0x6c>
		color = (SSD1306_COLOR_t)!color;
 8001f5a:	1cfb      	adds	r3, r7, #3
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	425a      	negs	r2, r3
 8001f60:	4153      	adcs	r3, r2
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	1cfb      	adds	r3, r7, #3
 8001f66:	701a      	strb	r2, [r3, #0]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001f68:	1cfb      	adds	r3, r7, #3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d11e      	bne.n	8001fae <SSD1306_DrawPixel+0xb2>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001f70:	1dbb      	adds	r3, r7, #6
 8001f72:	881a      	ldrh	r2, [r3, #0]
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	08db      	lsrs	r3, r3, #3
 8001f7a:	b298      	uxth	r0, r3
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	01db      	lsls	r3, r3, #7
 8001f80:	18d3      	adds	r3, r2, r3
 8001f82:	4a20      	ldr	r2, [pc, #128]	; (8002004 <SSD1306_DrawPixel+0x108>)
 8001f84:	5cd3      	ldrb	r3, [r2, r3]
 8001f86:	b25a      	sxtb	r2, r3
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	2107      	movs	r1, #7
 8001f8e:	400b      	ands	r3, r1
 8001f90:	2101      	movs	r1, #1
 8001f92:	4099      	lsls	r1, r3
 8001f94:	000b      	movs	r3, r1
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	b259      	sxtb	r1, r3
 8001f9c:	1dbb      	adds	r3, r7, #6
 8001f9e:	881a      	ldrh	r2, [r3, #0]
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	01db      	lsls	r3, r3, #7
 8001fa4:	18d3      	adds	r3, r2, r3
 8001fa6:	b2c9      	uxtb	r1, r1
 8001fa8:	4a16      	ldr	r2, [pc, #88]	; (8002004 <SSD1306_DrawPixel+0x108>)
 8001faa:	54d1      	strb	r1, [r2, r3]
 8001fac:	e021      	b.n	8001ff2 <SSD1306_DrawPixel+0xf6>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001fae:	1dbb      	adds	r3, r7, #6
 8001fb0:	881a      	ldrh	r2, [r3, #0]
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	08db      	lsrs	r3, r3, #3
 8001fb8:	b298      	uxth	r0, r3
 8001fba:	0003      	movs	r3, r0
 8001fbc:	01db      	lsls	r3, r3, #7
 8001fbe:	18d3      	adds	r3, r2, r3
 8001fc0:	4a10      	ldr	r2, [pc, #64]	; (8002004 <SSD1306_DrawPixel+0x108>)
 8001fc2:	5cd3      	ldrb	r3, [r2, r3]
 8001fc4:	b25b      	sxtb	r3, r3
 8001fc6:	1d3a      	adds	r2, r7, #4
 8001fc8:	8812      	ldrh	r2, [r2, #0]
 8001fca:	2107      	movs	r1, #7
 8001fcc:	400a      	ands	r2, r1
 8001fce:	2101      	movs	r1, #1
 8001fd0:	4091      	lsls	r1, r2
 8001fd2:	000a      	movs	r2, r1
 8001fd4:	b252      	sxtb	r2, r2
 8001fd6:	43d2      	mvns	r2, r2
 8001fd8:	b252      	sxtb	r2, r2
 8001fda:	4013      	ands	r3, r2
 8001fdc:	b259      	sxtb	r1, r3
 8001fde:	1dbb      	adds	r3, r7, #6
 8001fe0:	881a      	ldrh	r2, [r3, #0]
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	01db      	lsls	r3, r3, #7
 8001fe6:	18d3      	adds	r3, r2, r3
 8001fe8:	b2c9      	uxtb	r1, r1
 8001fea:	4a06      	ldr	r2, [pc, #24]	; (8002004 <SSD1306_DrawPixel+0x108>)
 8001fec:	54d1      	strb	r1, [r2, r3]
 8001fee:	e000      	b.n	8001ff2 <SSD1306_DrawPixel+0xf6>
		return;
 8001ff0:	46c0      	nop			; (mov r8, r8)
	}
}
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b003      	add	sp, #12
 8001ff6:	bd90      	pop	{r4, r7, pc}
 8001ff8:	200005e4 	.word	0x200005e4
 8001ffc:	200005e5 	.word	0x200005e5
 8002000:	200005e8 	.word	0x200005e8
 8002004:	200001e4 	.word	0x200001e4

08002008 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	0002      	movs	r2, r0
 8002010:	1dbb      	adds	r3, r7, #6
 8002012:	801a      	strh	r2, [r3, #0]
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	1c0a      	adds	r2, r1, #0
 8002018:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <SSD1306_GotoXY+0x2c>)
 800201c:	1dba      	adds	r2, r7, #6
 800201e:	8812      	ldrh	r2, [r2, #0]
 8002020:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8002022:	4b04      	ldr	r3, [pc, #16]	; (8002034 <SSD1306_GotoXY+0x2c>)
 8002024:	1d3a      	adds	r2, r7, #4
 8002026:	8812      	ldrh	r2, [r2, #0]
 8002028:	805a      	strh	r2, [r3, #2]
}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	46bd      	mov	sp, r7
 800202e:	b002      	add	sp, #8
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	200005e8 	.word	0x200005e8

08002038 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6039      	str	r1, [r7, #0]
 8002040:	0011      	movs	r1, r2
 8002042:	1dfb      	adds	r3, r7, #7
 8002044:	1c02      	adds	r2, r0, #0
 8002046:	701a      	strb	r2, [r3, #0]
 8002048:	1dbb      	adds	r3, r7, #6
 800204a:	1c0a      	adds	r2, r1, #0
 800204c:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800204e:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <SSD1306_Putc+0x100>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	001a      	movs	r2, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	18d3      	adds	r3, r2, r3
	if (
 800205a:	2b7f      	cmp	r3, #127	; 0x7f
 800205c:	dc07      	bgt.n	800206e <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800205e:	4b36      	ldr	r3, [pc, #216]	; (8002138 <SSD1306_Putc+0x100>)
 8002060:	885b      	ldrh	r3, [r3, #2]
 8002062:	001a      	movs	r2, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	785b      	ldrb	r3, [r3, #1]
 8002068:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800206a:	2b3f      	cmp	r3, #63	; 0x3f
 800206c:	dd01      	ble.n	8002072 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 800206e:	2300      	movs	r3, #0
 8002070:	e05e      	b.n	8002130 <SSD1306_Putc+0xf8>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	e04a      	b.n	800210e <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	1dfb      	adds	r3, r7, #7
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	3b20      	subs	r3, #32
 8002082:	6839      	ldr	r1, [r7, #0]
 8002084:	7849      	ldrb	r1, [r1, #1]
 8002086:	434b      	muls	r3, r1
 8002088:	0019      	movs	r1, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	18cb      	adds	r3, r1, r3
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	18d3      	adds	r3, r2, r3
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	e02f      	b.n	80020fc <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	409a      	lsls	r2, r3
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	4013      	ands	r3, r2
 80020a8:	d011      	beq.n	80020ce <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80020aa:	4b23      	ldr	r3, [pc, #140]	; (8002138 <SSD1306_Putc+0x100>)
 80020ac:	881a      	ldrh	r2, [r3, #0]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	18d3      	adds	r3, r2, r3
 80020b4:	b298      	uxth	r0, r3
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <SSD1306_Putc+0x100>)
 80020b8:	885a      	ldrh	r2, [r3, #2]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	18d3      	adds	r3, r2, r3
 80020c0:	b299      	uxth	r1, r3
 80020c2:	1dbb      	adds	r3, r7, #6
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	001a      	movs	r2, r3
 80020c8:	f7ff ff18 	bl	8001efc <SSD1306_DrawPixel>
 80020cc:	e013      	b.n	80020f6 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <SSD1306_Putc+0x100>)
 80020d0:	881a      	ldrh	r2, [r3, #0]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	18d3      	adds	r3, r2, r3
 80020d8:	b298      	uxth	r0, r3
 80020da:	4b17      	ldr	r3, [pc, #92]	; (8002138 <SSD1306_Putc+0x100>)
 80020dc:	885a      	ldrh	r2, [r3, #2]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	18d3      	adds	r3, r2, r3
 80020e4:	b299      	uxth	r1, r3
 80020e6:	1dbb      	adds	r3, r7, #6
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	425a      	negs	r2, r3
 80020ec:	4153      	adcs	r3, r2
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	001a      	movs	r2, r3
 80020f2:	f7ff ff03 	bl	8001efc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	3301      	adds	r3, #1
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	001a      	movs	r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4293      	cmp	r3, r2
 8002106:	d3c9      	bcc.n	800209c <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	3301      	adds	r3, #1
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	001a      	movs	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	4293      	cmp	r3, r2
 8002118:	d3ae      	bcc.n	8002078 <SSD1306_Putc+0x40>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <SSD1306_Putc+0x100>)
 800211c:	881a      	ldrh	r2, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	18d3      	adds	r3, r2, r3
 8002126:	b29a      	uxth	r2, r3
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <SSD1306_Putc+0x100>)
 800212a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800212c:	1dfb      	adds	r3, r7, #7
 800212e:	781b      	ldrb	r3, [r3, #0]
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b006      	add	sp, #24
 8002136:	bd80      	pop	{r7, pc}
 8002138:	200005e8 	.word	0x200005e8

0800213c <SSD1306_Puts>:

char SSD1306_Puts(const char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	1dfb      	adds	r3, r7, #7
 8002148:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 800214a:	e013      	b.n	8002174 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	7818      	ldrb	r0, [r3, #0]
 8002150:	1dfb      	adds	r3, r7, #7
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	0019      	movs	r1, r3
 8002158:	f7ff ff6e 	bl	8002038 <SSD1306_Putc>
 800215c:	0003      	movs	r3, r0
 800215e:	001a      	movs	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d002      	beq.n	800216e <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	e008      	b.n	8002180 <SSD1306_Puts+0x44>
		}

		/* Increase string pointer */
		str++;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3301      	adds	r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1e7      	bne.n	800214c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	781b      	ldrb	r3, [r3, #0]
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b004      	add	sp, #16
 8002186:	bd80      	pop	{r7, pc}

08002188 <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8002188:	b5b0      	push	{r4, r5, r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	0005      	movs	r5, r0
 8002190:	000c      	movs	r4, r1
 8002192:	0010      	movs	r0, r2
 8002194:	0019      	movs	r1, r3
 8002196:	1dbb      	adds	r3, r7, #6
 8002198:	1c2a      	adds	r2, r5, #0
 800219a:	801a      	strh	r2, [r3, #0]
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	1c22      	adds	r2, r4, #0
 80021a0:	801a      	strh	r2, [r3, #0]
 80021a2:	1cbb      	adds	r3, r7, #2
 80021a4:	1c02      	adds	r2, r0, #0
 80021a6:	801a      	strh	r2, [r3, #0]
 80021a8:	003b      	movs	r3, r7
 80021aa:	1c0a      	adds	r2, r1, #0
 80021ac:	801a      	strh	r2, [r3, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80021ae:	1dbb      	adds	r3, r7, #6
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	2b7f      	cmp	r3, #127	; 0x7f
 80021b4:	d902      	bls.n	80021bc <SSD1306_DrawLine+0x34>
		x0 = SSD1306_WIDTH - 1;
 80021b6:	1dbb      	adds	r3, r7, #6
 80021b8:	227f      	movs	r2, #127	; 0x7f
 80021ba:	801a      	strh	r2, [r3, #0]
	}
	if (x1 >= SSD1306_WIDTH) {
 80021bc:	1cbb      	adds	r3, r7, #2
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	2b7f      	cmp	r3, #127	; 0x7f
 80021c2:	d902      	bls.n	80021ca <SSD1306_DrawLine+0x42>
		x1 = SSD1306_WIDTH - 1;
 80021c4:	1cbb      	adds	r3, r7, #2
 80021c6:	227f      	movs	r2, #127	; 0x7f
 80021c8:	801a      	strh	r2, [r3, #0]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	2b3f      	cmp	r3, #63	; 0x3f
 80021d0:	d902      	bls.n	80021d8 <SSD1306_DrawLine+0x50>
		y0 = SSD1306_HEIGHT - 1;
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	223f      	movs	r2, #63	; 0x3f
 80021d6:	801a      	strh	r2, [r3, #0]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80021d8:	003b      	movs	r3, r7
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	2b3f      	cmp	r3, #63	; 0x3f
 80021de:	d902      	bls.n	80021e6 <SSD1306_DrawLine+0x5e>
		y1 = SSD1306_HEIGHT - 1;
 80021e0:	003b      	movs	r3, r7
 80021e2:	223f      	movs	r2, #63	; 0x3f
 80021e4:	801a      	strh	r2, [r3, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 80021e6:	1dba      	adds	r2, r7, #6
 80021e8:	1cbb      	adds	r3, r7, #2
 80021ea:	8812      	ldrh	r2, [r2, #0]
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d207      	bcs.n	8002202 <SSD1306_DrawLine+0x7a>
 80021f2:	1cba      	adds	r2, r7, #2
 80021f4:	1dbb      	adds	r3, r7, #6
 80021f6:	8812      	ldrh	r2, [r2, #0]
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	b21b      	sxth	r3, r3
 8002200:	e006      	b.n	8002210 <SSD1306_DrawLine+0x88>
 8002202:	1dba      	adds	r2, r7, #6
 8002204:	1cbb      	adds	r3, r7, #2
 8002206:	8812      	ldrh	r2, [r2, #0]
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	b29b      	uxth	r3, r3
 800220e:	b21b      	sxth	r3, r3
 8002210:	2212      	movs	r2, #18
 8002212:	18ba      	adds	r2, r7, r2
 8002214:	8013      	strh	r3, [r2, #0]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8002216:	1d3a      	adds	r2, r7, #4
 8002218:	003b      	movs	r3, r7
 800221a:	8812      	ldrh	r2, [r2, #0]
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d207      	bcs.n	8002232 <SSD1306_DrawLine+0xaa>
 8002222:	003a      	movs	r2, r7
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	8812      	ldrh	r2, [r2, #0]
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	b29b      	uxth	r3, r3
 800222e:	b21b      	sxth	r3, r3
 8002230:	e006      	b.n	8002240 <SSD1306_DrawLine+0xb8>
 8002232:	1d3a      	adds	r2, r7, #4
 8002234:	003b      	movs	r3, r7
 8002236:	8812      	ldrh	r2, [r2, #0]
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	b29b      	uxth	r3, r3
 800223e:	b21b      	sxth	r3, r3
 8002240:	2210      	movs	r2, #16
 8002242:	18ba      	adds	r2, r7, r2
 8002244:	8013      	strh	r3, [r2, #0]
	sx = (x0 < x1) ? 1 : -1;
 8002246:	1dba      	adds	r2, r7, #6
 8002248:	1cbb      	adds	r3, r7, #2
 800224a:	8812      	ldrh	r2, [r2, #0]
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d201      	bcs.n	8002256 <SSD1306_DrawLine+0xce>
 8002252:	2201      	movs	r2, #1
 8002254:	e001      	b.n	800225a <SSD1306_DrawLine+0xd2>
 8002256:	2301      	movs	r3, #1
 8002258:	425a      	negs	r2, r3
 800225a:	230e      	movs	r3, #14
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	801a      	strh	r2, [r3, #0]
	sy = (y0 < y1) ? 1 : -1;
 8002260:	1d3a      	adds	r2, r7, #4
 8002262:	003b      	movs	r3, r7
 8002264:	8812      	ldrh	r2, [r2, #0]
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d201      	bcs.n	8002270 <SSD1306_DrawLine+0xe8>
 800226c:	2201      	movs	r2, #1
 800226e:	e001      	b.n	8002274 <SSD1306_DrawLine+0xec>
 8002270:	2301      	movs	r3, #1
 8002272:	425a      	negs	r2, r3
 8002274:	230c      	movs	r3, #12
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	801a      	strh	r2, [r3, #0]
	err = ((dx > dy) ? dx : -dy) / 2;
 800227a:	2112      	movs	r1, #18
 800227c:	187a      	adds	r2, r7, r1
 800227e:	2310      	movs	r3, #16
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	2000      	movs	r0, #0
 8002284:	5e12      	ldrsh	r2, [r2, r0]
 8002286:	2000      	movs	r0, #0
 8002288:	5e1b      	ldrsh	r3, [r3, r0]
 800228a:	429a      	cmp	r2, r3
 800228c:	dd08      	ble.n	80022a0 <SSD1306_DrawLine+0x118>
 800228e:	187b      	adds	r3, r7, r1
 8002290:	2200      	movs	r2, #0
 8002292:	5e9b      	ldrsh	r3, [r3, r2]
 8002294:	2b00      	cmp	r3, #0
 8002296:	da00      	bge.n	800229a <SSD1306_DrawLine+0x112>
 8002298:	3301      	adds	r3, #1
 800229a:	105b      	asrs	r3, r3, #1
 800229c:	b21b      	sxth	r3, r3
 800229e:	e009      	b.n	80022b4 <SSD1306_DrawLine+0x12c>
 80022a0:	2310      	movs	r3, #16
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2200      	movs	r2, #0
 80022a6:	5e9b      	ldrsh	r3, [r3, r2]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	da00      	bge.n	80022ae <SSD1306_DrawLine+0x126>
 80022ac:	3301      	adds	r3, #1
 80022ae:	105b      	asrs	r3, r3, #1
 80022b0:	425b      	negs	r3, r3
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	2216      	movs	r2, #22
 80022b6:	18ba      	adds	r2, r7, r2
 80022b8:	8013      	strh	r3, [r2, #0]

	if (dx == 0) {
 80022ba:	2312      	movs	r3, #18
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	2200      	movs	r2, #0
 80022c0:	5e9b      	ldrsh	r3, [r3, r2]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d148      	bne.n	8002358 <SSD1306_DrawLine+0x1d0>
		if (y1 < y0) {
 80022c6:	003a      	movs	r2, r7
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	8812      	ldrh	r2, [r2, #0]
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d20c      	bcs.n	80022ec <SSD1306_DrawLine+0x164>
			tmp = y1;
 80022d2:	2108      	movs	r1, #8
 80022d4:	187b      	adds	r3, r7, r1
 80022d6:	003a      	movs	r2, r7
 80022d8:	8812      	ldrh	r2, [r2, #0]
 80022da:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 80022dc:	003b      	movs	r3, r7
 80022de:	1d3a      	adds	r2, r7, #4
 80022e0:	8812      	ldrh	r2, [r2, #0]
 80022e2:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	187a      	adds	r2, r7, r1
 80022e8:	8812      	ldrh	r2, [r2, #0]
 80022ea:	801a      	strh	r2, [r3, #0]
		}

		if (x1 < x0) {
 80022ec:	1cba      	adds	r2, r7, #2
 80022ee:	1dbb      	adds	r3, r7, #6
 80022f0:	8812      	ldrh	r2, [r2, #0]
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d20c      	bcs.n	8002312 <SSD1306_DrawLine+0x18a>
			tmp = x1;
 80022f8:	2108      	movs	r1, #8
 80022fa:	187b      	adds	r3, r7, r1
 80022fc:	1cba      	adds	r2, r7, #2
 80022fe:	8812      	ldrh	r2, [r2, #0]
 8002300:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 8002302:	1cbb      	adds	r3, r7, #2
 8002304:	1dba      	adds	r2, r7, #6
 8002306:	8812      	ldrh	r2, [r2, #0]
 8002308:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 800230a:	1dbb      	adds	r3, r7, #6
 800230c:	187a      	adds	r2, r7, r1
 800230e:	8812      	ldrh	r2, [r2, #0]
 8002310:	801a      	strh	r2, [r3, #0]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8002312:	2314      	movs	r3, #20
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	1d3a      	adds	r2, r7, #4
 8002318:	8812      	ldrh	r2, [r2, #0]
 800231a:	801a      	strh	r2, [r3, #0]
 800231c:	e013      	b.n	8002346 <SSD1306_DrawLine+0x1be>
			SSD1306_DrawPixel(x0, i, c);
 800231e:	2414      	movs	r4, #20
 8002320:	193b      	adds	r3, r7, r4
 8002322:	8819      	ldrh	r1, [r3, #0]
 8002324:	2328      	movs	r3, #40	; 0x28
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	781a      	ldrb	r2, [r3, #0]
 800232a:	1dbb      	adds	r3, r7, #6
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	0018      	movs	r0, r3
 8002330:	f7ff fde4 	bl	8001efc <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002334:	0021      	movs	r1, r4
 8002336:	187b      	adds	r3, r7, r1
 8002338:	2200      	movs	r2, #0
 800233a:	5e9b      	ldrsh	r3, [r3, r2]
 800233c:	b29b      	uxth	r3, r3
 800233e:	3301      	adds	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	187b      	adds	r3, r7, r1
 8002344:	801a      	strh	r2, [r3, #0]
 8002346:	2314      	movs	r3, #20
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	2200      	movs	r2, #0
 800234c:	5e9a      	ldrsh	r2, [r3, r2]
 800234e:	003b      	movs	r3, r7
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	dde3      	ble.n	800231e <SSD1306_DrawLine+0x196>
		}

		/* Return from function */
		return;
 8002356:	e0a3      	b.n	80024a0 <SSD1306_DrawLine+0x318>
	}

	if (dy == 0) {
 8002358:	2310      	movs	r3, #16
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2200      	movs	r2, #0
 800235e:	5e9b      	ldrsh	r3, [r3, r2]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d148      	bne.n	80023f6 <SSD1306_DrawLine+0x26e>
		if (y1 < y0) {
 8002364:	003a      	movs	r2, r7
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	8812      	ldrh	r2, [r2, #0]
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d20c      	bcs.n	800238a <SSD1306_DrawLine+0x202>
			tmp = y1;
 8002370:	2108      	movs	r1, #8
 8002372:	187b      	adds	r3, r7, r1
 8002374:	003a      	movs	r2, r7
 8002376:	8812      	ldrh	r2, [r2, #0]
 8002378:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 800237a:	003b      	movs	r3, r7
 800237c:	1d3a      	adds	r2, r7, #4
 800237e:	8812      	ldrh	r2, [r2, #0]
 8002380:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	187a      	adds	r2, r7, r1
 8002386:	8812      	ldrh	r2, [r2, #0]
 8002388:	801a      	strh	r2, [r3, #0]
		}

		if (x1 < x0) {
 800238a:	1cba      	adds	r2, r7, #2
 800238c:	1dbb      	adds	r3, r7, #6
 800238e:	8812      	ldrh	r2, [r2, #0]
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d20c      	bcs.n	80023b0 <SSD1306_DrawLine+0x228>
			tmp = x1;
 8002396:	2108      	movs	r1, #8
 8002398:	187b      	adds	r3, r7, r1
 800239a:	1cba      	adds	r2, r7, #2
 800239c:	8812      	ldrh	r2, [r2, #0]
 800239e:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 80023a0:	1cbb      	adds	r3, r7, #2
 80023a2:	1dba      	adds	r2, r7, #6
 80023a4:	8812      	ldrh	r2, [r2, #0]
 80023a6:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 80023a8:	1dbb      	adds	r3, r7, #6
 80023aa:	187a      	adds	r2, r7, r1
 80023ac:	8812      	ldrh	r2, [r2, #0]
 80023ae:	801a      	strh	r2, [r3, #0]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80023b0:	2314      	movs	r3, #20
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	1dba      	adds	r2, r7, #6
 80023b6:	8812      	ldrh	r2, [r2, #0]
 80023b8:	801a      	strh	r2, [r3, #0]
 80023ba:	e013      	b.n	80023e4 <SSD1306_DrawLine+0x25c>
			SSD1306_DrawPixel(i, y0, c);
 80023bc:	2414      	movs	r4, #20
 80023be:	193b      	adds	r3, r7, r4
 80023c0:	8818      	ldrh	r0, [r3, #0]
 80023c2:	2328      	movs	r3, #40	; 0x28
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	0019      	movs	r1, r3
 80023ce:	f7ff fd95 	bl	8001efc <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80023d2:	0021      	movs	r1, r4
 80023d4:	187b      	adds	r3, r7, r1
 80023d6:	2200      	movs	r2, #0
 80023d8:	5e9b      	ldrsh	r3, [r3, r2]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	187b      	adds	r3, r7, r1
 80023e2:	801a      	strh	r2, [r3, #0]
 80023e4:	2314      	movs	r3, #20
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	2200      	movs	r2, #0
 80023ea:	5e9a      	ldrsh	r2, [r3, r2]
 80023ec:	1cbb      	adds	r3, r7, #2
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	dde3      	ble.n	80023bc <SSD1306_DrawLine+0x234>
		}

		/* Return from function */
		return;
 80023f4:	e054      	b.n	80024a0 <SSD1306_DrawLine+0x318>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80023f6:	2328      	movs	r3, #40	; 0x28
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	781a      	ldrb	r2, [r3, #0]
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	8819      	ldrh	r1, [r3, #0]
 8002400:	1dbb      	adds	r3, r7, #6
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	0018      	movs	r0, r3
 8002406:	f7ff fd79 	bl	8001efc <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800240a:	1dba      	adds	r2, r7, #6
 800240c:	1cbb      	adds	r3, r7, #2
 800240e:	8812      	ldrh	r2, [r2, #0]
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d105      	bne.n	8002422 <SSD1306_DrawLine+0x29a>
 8002416:	1d3a      	adds	r2, r7, #4
 8002418:	003b      	movs	r3, r7
 800241a:	8812      	ldrh	r2, [r2, #0]
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d03d      	beq.n	800249e <SSD1306_DrawLine+0x316>
			break;
		}
		e2 = err;
 8002422:	200a      	movs	r0, #10
 8002424:	183b      	adds	r3, r7, r0
 8002426:	2116      	movs	r1, #22
 8002428:	187a      	adds	r2, r7, r1
 800242a:	8812      	ldrh	r2, [r2, #0]
 800242c:	801a      	strh	r2, [r3, #0]
		if (e2 > -dx) {
 800242e:	183b      	adds	r3, r7, r0
 8002430:	2200      	movs	r2, #0
 8002432:	5e9a      	ldrsh	r2, [r3, r2]
 8002434:	2312      	movs	r3, #18
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	2000      	movs	r0, #0
 800243a:	5e1b      	ldrsh	r3, [r3, r0]
 800243c:	425b      	negs	r3, r3
 800243e:	429a      	cmp	r2, r3
 8002440:	dd10      	ble.n	8002464 <SSD1306_DrawLine+0x2dc>
			err -= dy;
 8002442:	187b      	adds	r3, r7, r1
 8002444:	881a      	ldrh	r2, [r3, #0]
 8002446:	2310      	movs	r3, #16
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	b29a      	uxth	r2, r3
 8002450:	187b      	adds	r3, r7, r1
 8002452:	801a      	strh	r2, [r3, #0]
			x0 += sx;
 8002454:	230e      	movs	r3, #14
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	8819      	ldrh	r1, [r3, #0]
 800245a:	1dbb      	adds	r3, r7, #6
 800245c:	1dba      	adds	r2, r7, #6
 800245e:	8812      	ldrh	r2, [r2, #0]
 8002460:	188a      	adds	r2, r1, r2
 8002462:	801a      	strh	r2, [r3, #0]
		}
		if (e2 < dy) {
 8002464:	230a      	movs	r3, #10
 8002466:	18fa      	adds	r2, r7, r3
 8002468:	2310      	movs	r3, #16
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	2100      	movs	r1, #0
 800246e:	5e52      	ldrsh	r2, [r2, r1]
 8002470:	2100      	movs	r1, #0
 8002472:	5e5b      	ldrsh	r3, [r3, r1]
 8002474:	429a      	cmp	r2, r3
 8002476:	dabe      	bge.n	80023f6 <SSD1306_DrawLine+0x26e>
			err += dx;
 8002478:	2116      	movs	r1, #22
 800247a:	187b      	adds	r3, r7, r1
 800247c:	881a      	ldrh	r2, [r3, #0]
 800247e:	2312      	movs	r3, #18
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	18d3      	adds	r3, r2, r3
 8002486:	b29a      	uxth	r2, r3
 8002488:	187b      	adds	r3, r7, r1
 800248a:	801a      	strh	r2, [r3, #0]
			y0 += sy;
 800248c:	230c      	movs	r3, #12
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	8819      	ldrh	r1, [r3, #0]
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	1d3a      	adds	r2, r7, #4
 8002496:	8812      	ldrh	r2, [r2, #0]
 8002498:	188a      	adds	r2, r1, r2
 800249a:	801a      	strh	r2, [r3, #0]
		SSD1306_DrawPixel(x0, y0, c);
 800249c:	e7ab      	b.n	80023f6 <SSD1306_DrawLine+0x26e>
			break;
 800249e:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b006      	add	sp, #24
 80024a4:	bdb0      	pop	{r4, r5, r7, pc}

080024a6 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80024a6:	b5b0      	push	{r4, r5, r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af02      	add	r7, sp, #8
 80024ac:	0005      	movs	r5, r0
 80024ae:	000c      	movs	r4, r1
 80024b0:	0010      	movs	r0, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	1dbb      	adds	r3, r7, #6
 80024b6:	1c2a      	adds	r2, r5, #0
 80024b8:	801a      	strh	r2, [r3, #0]
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	1c22      	adds	r2, r4, #0
 80024be:	801a      	strh	r2, [r3, #0]
 80024c0:	1cbb      	adds	r3, r7, #2
 80024c2:	1c02      	adds	r2, r0, #0
 80024c4:	801a      	strh	r2, [r3, #0]
 80024c6:	003b      	movs	r3, r7
 80024c8:	1c0a      	adds	r2, r1, #0
 80024ca:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 80024cc:	1dbb      	adds	r3, r7, #6
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	2b7f      	cmp	r3, #127	; 0x7f
 80024d2:	d850      	bhi.n	8002576 <SSD1306_DrawFilledRectangle+0xd0>
		x >= SSD1306_WIDTH ||
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	2b3f      	cmp	r3, #63	; 0x3f
 80024da:	d84c      	bhi.n	8002576 <SSD1306_DrawFilledRectangle+0xd0>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80024dc:	1dbb      	adds	r3, r7, #6
 80024de:	881a      	ldrh	r2, [r3, #0]
 80024e0:	1cbb      	adds	r3, r7, #2
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	18d3      	adds	r3, r2, r3
 80024e6:	2b7f      	cmp	r3, #127	; 0x7f
 80024e8:	dd05      	ble.n	80024f6 <SSD1306_DrawFilledRectangle+0x50>
		w = SSD1306_WIDTH - x;
 80024ea:	1cbb      	adds	r3, r7, #2
 80024ec:	1dba      	adds	r2, r7, #6
 80024ee:	8812      	ldrh	r2, [r2, #0]
 80024f0:	2180      	movs	r1, #128	; 0x80
 80024f2:	1a8a      	subs	r2, r1, r2
 80024f4:	801a      	strh	r2, [r3, #0]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	881a      	ldrh	r2, [r3, #0]
 80024fa:	003b      	movs	r3, r7
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	18d3      	adds	r3, r2, r3
 8002500:	2b3f      	cmp	r3, #63	; 0x3f
 8002502:	dd05      	ble.n	8002510 <SSD1306_DrawFilledRectangle+0x6a>
		h = SSD1306_HEIGHT - y;
 8002504:	003b      	movs	r3, r7
 8002506:	1d3a      	adds	r2, r7, #4
 8002508:	8812      	ldrh	r2, [r2, #0]
 800250a:	2140      	movs	r1, #64	; 0x40
 800250c:	1a8a      	subs	r2, r1, r2
 800250e:	801a      	strh	r2, [r3, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8002510:	230f      	movs	r3, #15
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e024      	b.n	8002564 <SSD1306_DrawFilledRectangle+0xbe>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 800251a:	200f      	movs	r0, #15
 800251c:	183b      	adds	r3, r7, r0
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	b29a      	uxth	r2, r3
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	18d3      	adds	r3, r2, r3
 8002528:	b299      	uxth	r1, r3
 800252a:	1dba      	adds	r2, r7, #6
 800252c:	1cbb      	adds	r3, r7, #2
 800252e:	8812      	ldrh	r2, [r2, #0]
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	18d3      	adds	r3, r2, r3
 8002534:	b29c      	uxth	r4, r3
 8002536:	0005      	movs	r5, r0
 8002538:	183b      	adds	r3, r7, r0
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	b29a      	uxth	r2, r3
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	18d3      	adds	r3, r2, r3
 8002544:	b29a      	uxth	r2, r3
 8002546:	1dbb      	adds	r3, r7, #6
 8002548:	8818      	ldrh	r0, [r3, #0]
 800254a:	2320      	movs	r3, #32
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	0013      	movs	r3, r2
 8002554:	0022      	movs	r2, r4
 8002556:	f7ff fe17 	bl	8002188 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 800255a:	197b      	adds	r3, r7, r5
 800255c:	781a      	ldrb	r2, [r3, #0]
 800255e:	197b      	adds	r3, r7, r5
 8002560:	3201      	adds	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
 8002564:	230f      	movs	r3, #15
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	003a      	movs	r2, r7
 800256e:	8812      	ldrh	r2, [r2, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d2d2      	bcs.n	800251a <SSD1306_DrawFilledRectangle+0x74>
 8002574:	e000      	b.n	8002578 <SSD1306_DrawFilledRectangle+0xd2>
		return;
 8002576:	46c0      	nop			; (mov r8, r8)
	}
}
 8002578:	46bd      	mov	sp, r7
 800257a:	b004      	add	sp, #16
 800257c:	bdb0      	pop	{r4, r5, r7, pc}

0800257e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002582:	2000      	movs	r0, #0
 8002584:	f7ff fc86 	bl	8001e94 <SSD1306_Fill>
    //SSD1306_UpdateScreen();
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <SSD1306_ON>:
void SSD1306_ON(void) {
 800258e:	b580      	push	{r7, lr}
 8002590:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(0x8D);
 8002592:	228d      	movs	r2, #141	; 0x8d
 8002594:	2100      	movs	r1, #0
 8002596:	2078      	movs	r0, #120	; 0x78
 8002598:	f000 f88e 	bl	80026b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 800259c:	2214      	movs	r2, #20
 800259e:	2100      	movs	r1, #0
 80025a0:	2078      	movs	r0, #120	; 0x78
 80025a2:	f000 f889 	bl	80026b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 80025a6:	22af      	movs	r2, #175	; 0xaf
 80025a8:	2100      	movs	r1, #0
 80025aa:	2078      	movs	r0, #120	; 0x78
 80025ac:	f000 f884 	bl	80026b8 <ssd1306_I2C_Write>
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <ssd1306_I2C_Init+0x24>)
 80025c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80025c2:	e002      	b.n	80025ca <ssd1306_I2C_Init+0x12>
		p--;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f9      	bne.n	80025c4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80025d0:	46c0      	nop			; (mov r8, r8)
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b002      	add	sp, #8
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	0003d090 	.word	0x0003d090

080025e0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80025e0:	b5b0      	push	{r4, r5, r7, lr}
 80025e2:	b0c6      	sub	sp, #280	; 0x118
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	0004      	movs	r4, r0
 80025e8:	0008      	movs	r0, r1
 80025ea:	603a      	str	r2, [r7, #0]
 80025ec:	0019      	movs	r1, r3
 80025ee:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <ssd1306_I2C_WriteMulti+0xc4>)
 80025f0:	2588      	movs	r5, #136	; 0x88
 80025f2:	006d      	lsls	r5, r5, #1
 80025f4:	195b      	adds	r3, r3, r5
 80025f6:	19db      	adds	r3, r3, r7
 80025f8:	1c22      	adds	r2, r4, #0
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <ssd1306_I2C_WriteMulti+0xc8>)
 80025fe:	002c      	movs	r4, r5
 8002600:	191b      	adds	r3, r3, r4
 8002602:	19db      	adds	r3, r3, r7
 8002604:	1c02      	adds	r2, r0, #0
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	4b28      	ldr	r3, [pc, #160]	; (80026ac <ssd1306_I2C_WriteMulti+0xcc>)
 800260a:	0020      	movs	r0, r4
 800260c:	181b      	adds	r3, r3, r0
 800260e:	19db      	adds	r3, r3, r7
 8002610:	1c0a      	adds	r2, r1, #0
 8002612:	801a      	strh	r2, [r3, #0]
  uint8_t dt[256];
  dt[0] = reg;
 8002614:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <ssd1306_I2C_WriteMulti+0xd0>)
 8002616:	181b      	adds	r3, r3, r0
 8002618:	19db      	adds	r3, r3, r7
 800261a:	4a23      	ldr	r2, [pc, #140]	; (80026a8 <ssd1306_I2C_WriteMulti+0xc8>)
 800261c:	1812      	adds	r2, r2, r0
 800261e:	19d2      	adds	r2, r2, r7
 8002620:	7812      	ldrb	r2, [r2, #0]
 8002622:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  for(i = 0; i < count; i++) dt[i+1] = data[i];
 8002624:	2310      	movs	r3, #16
 8002626:	33ff      	adds	r3, #255	; 0xff
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e014      	b.n	800265a <ssd1306_I2C_WriteMulti+0x7a>
 8002630:	2010      	movs	r0, #16
 8002632:	30ff      	adds	r0, #255	; 0xff
 8002634:	183b      	adds	r3, r7, r0
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	18d2      	adds	r2, r2, r3
 800263c:	183b      	adds	r3, r7, r0
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	7811      	ldrb	r1, [r2, #0]
 8002644:	4a1a      	ldr	r2, [pc, #104]	; (80026b0 <ssd1306_I2C_WriteMulti+0xd0>)
 8002646:	2488      	movs	r4, #136	; 0x88
 8002648:	0064      	lsls	r4, r4, #1
 800264a:	1912      	adds	r2, r2, r4
 800264c:	19d2      	adds	r2, r2, r7
 800264e:	54d1      	strb	r1, [r2, r3]
 8002650:	183b      	adds	r3, r7, r0
 8002652:	781a      	ldrb	r2, [r3, #0]
 8002654:	183b      	adds	r3, r7, r0
 8002656:	3201      	adds	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	2310      	movs	r3, #16
 800265c:	33ff      	adds	r3, #255	; 0xff
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	4a11      	ldr	r2, [pc, #68]	; (80026ac <ssd1306_I2C_WriteMulti+0xcc>)
 8002666:	2188      	movs	r1, #136	; 0x88
 8002668:	0049      	lsls	r1, r1, #1
 800266a:	1852      	adds	r2, r2, r1
 800266c:	19d2      	adds	r2, r2, r7
 800266e:	8812      	ldrh	r2, [r2, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d8dd      	bhi.n	8002630 <ssd1306_I2C_WriteMulti+0x50>

  HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 200);
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <ssd1306_I2C_WriteMulti+0xc4>)
 8002676:	000a      	movs	r2, r1
 8002678:	189b      	adds	r3, r3, r2
 800267a:	19db      	adds	r3, r3, r7
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	b299      	uxth	r1, r3
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <ssd1306_I2C_WriteMulti+0xcc>)
 8002682:	189b      	adds	r3, r3, r2
 8002684:	19db      	adds	r3, r3, r7
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	b29b      	uxth	r3, r3
 800268c:	220c      	movs	r2, #12
 800268e:	18ba      	adds	r2, r7, r2
 8002690:	4808      	ldr	r0, [pc, #32]	; (80026b4 <ssd1306_I2C_WriteMulti+0xd4>)
 8002692:	24c8      	movs	r4, #200	; 0xc8
 8002694:	9400      	str	r4, [sp, #0]
 8002696:	f003 f803 	bl	80056a0 <HAL_I2C_Master_Transmit>
}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	b044      	add	sp, #272	; 0x110
 80026a0:	bdb0      	pop	{r4, r5, r7, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	fffffef7 	.word	0xfffffef7
 80026a8:	fffffef6 	.word	0xfffffef6
 80026ac:	fffffef4 	.word	0xfffffef4
 80026b0:	fffffefc 	.word	0xfffffefc
 80026b4:	200005f0 	.word	0x200005f0

080026b8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af02      	add	r7, sp, #8
 80026be:	0004      	movs	r4, r0
 80026c0:	0008      	movs	r0, r1
 80026c2:	0011      	movs	r1, r2
 80026c4:	1dfb      	adds	r3, r7, #7
 80026c6:	1c22      	adds	r2, r4, #0
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	1dbb      	adds	r3, r7, #6
 80026cc:	1c02      	adds	r2, r0, #0
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	1d7b      	adds	r3, r7, #5
 80026d2:	1c0a      	adds	r2, r1, #0
 80026d4:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 80026d6:	200c      	movs	r0, #12
 80026d8:	183b      	adds	r3, r7, r0
 80026da:	1dba      	adds	r2, r7, #6
 80026dc:	7812      	ldrb	r2, [r2, #0]
 80026de:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 80026e0:	183b      	adds	r3, r7, r0
 80026e2:	1d7a      	adds	r2, r7, #5
 80026e4:	7812      	ldrb	r2, [r2, #0]
 80026e6:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80026e8:	1dfb      	adds	r3, r7, #7
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b299      	uxth	r1, r3
 80026ee:	183a      	adds	r2, r7, r0
 80026f0:	4804      	ldr	r0, [pc, #16]	; (8002704 <ssd1306_I2C_Write+0x4c>)
 80026f2:	230a      	movs	r3, #10
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	2302      	movs	r3, #2
 80026f8:	f002 ffd2 	bl	80056a0 <HAL_I2C_Master_Transmit>
}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	46bd      	mov	sp, r7
 8002700:	b005      	add	sp, #20
 8002702:	bd90      	pop	{r4, r7, pc}
 8002704:	200005f0 	.word	0x200005f0

08002708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	0002      	movs	r2, r0
 8002710:	1dfb      	adds	r3, r7, #7
 8002712:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002714:	1dfb      	adds	r3, r7, #7
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b7f      	cmp	r3, #127	; 0x7f
 800271a:	d809      	bhi.n	8002730 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271c:	1dfb      	adds	r3, r7, #7
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	001a      	movs	r2, r3
 8002722:	231f      	movs	r3, #31
 8002724:	401a      	ands	r2, r3
 8002726:	4b04      	ldr	r3, [pc, #16]	; (8002738 <__NVIC_EnableIRQ+0x30>)
 8002728:	2101      	movs	r1, #1
 800272a:	4091      	lsls	r1, r2
 800272c:	000a      	movs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]
  }
}
 8002730:	46c0      	nop			; (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	b002      	add	sp, #8
 8002736:	bd80      	pop	{r7, pc}
 8002738:	e000e100 	.word	0xe000e100

0800273c <send_usb>:
void Start_user_interface(void *argument);
void Start_keys_switcher(void *argument);
void Start_rs485_controller(void *argument);


void send_usb(const char * cmd, int size) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
	send_bytes(1, cmd, size);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0019      	movs	r1, r3
 800274e:	2001      	movs	r0, #1
 8002750:	f001 ffbe 	bl	80046d0 <send_bytes>
}
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	b002      	add	sp, #8
 800275a:	bd80      	pop	{r7, pc}

0800275c <send_rs485>:
void send_rs485(const char * cmd, int size) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
	send_bytes(2, cmd, size);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	0019      	movs	r1, r3
 800276e:	2002      	movs	r0, #2
 8002770:	f001 ffae 	bl	80046d0 <send_bytes>
}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	b002      	add	sp, #8
 800277a:	bd80      	pop	{r7, pc}

0800277c <void_os_delay>:

void void_os_delay(uint32_t ticks) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
	osDelay(ticks);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	0018      	movs	r0, r3
 8002788:	f004 ffda 	bl	8007740 <osDelay>
}
 800278c:	46c0      	nop			; (mov r8, r8)
 800278e:	46bd      	mov	sp, r7
 8002790:	b002      	add	sp, #8
 8002792:	bd80      	pop	{r7, pc}

08002794 <main>:

int main(void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	HAL_Init();
 8002798:	f002 fa62 	bl	8004c60 <HAL_Init>
	app_init();
 800279c:	f7fe f908 	bl	80009b0 <app_init>
	set_app_send_data(send_usb);
 80027a0:	4b4c      	ldr	r3, [pc, #304]	; (80028d4 <main+0x140>)
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7fe fa90 	bl	8000cc8 <set_app_send_data>
	set_rs485_write(send_rs485);
 80027a8:	4b4b      	ldr	r3, [pc, #300]	; (80028d8 <main+0x144>)
 80027aa:	0018      	movs	r0, r3
 80027ac:	f7fe fa7e 	bl	8000cac <set_rs485_write>
	set_turn_on_func(turn_on);
 80027b0:	4b4a      	ldr	r3, [pc, #296]	; (80028dc <main+0x148>)
 80027b2:	0018      	movs	r0, r3
 80027b4:	f7fe f90e 	bl	80009d4 <set_turn_on_func>
	set_turn_off_func(turn_off);
 80027b8:	4b49      	ldr	r3, [pc, #292]	; (80028e0 <main+0x14c>)
 80027ba:	0018      	movs	r0, r3
 80027bc:	f7fe f918 	bl	80009f0 <set_turn_off_func>
	set_sleep_func(void_os_delay);
 80027c0:	4b48      	ldr	r3, [pc, #288]	; (80028e4 <main+0x150>)
 80027c2:	0018      	movs	r0, r3
 80027c4:	f7fd fe4e 	bl	8000464 <set_sleep_func>
	SystemClock_Config();
 80027c8:	f000 f8be 	bl	8002948 <SystemClock_Config>
	MX_GPIO_Init();
 80027cc:	f000 f9da 	bl	8002b84 <MX_GPIO_Init>
	MX_I2C1_Init();
 80027d0:	f000 f914 	bl	80029fc <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80027d4:	f000 f952 	bl	8002a7c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80027d8:	f000 f992 	bl	8002b00 <MX_USART2_UART_Init>
	osKernelInitialize();
 80027dc:	f004 feae 	bl	800753c <osKernelInitialize>
	init_gpio_entity(&keys);
 80027e0:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <main+0x154>)
 80027e2:	0018      	movs	r0, r3
 80027e4:	f001 fd18 	bl	8004218 <init_gpio_entity>
	init_buttons(&btns);
 80027e8:	4b40      	ldr	r3, [pc, #256]	; (80028ec <main+0x158>)
 80027ea:	0018      	movs	r0, r3
 80027ec:	f7ff f888 	bl	8001900 <init_buttons>
	init_usarts();
 80027f0:	f001 ff32 	bl	8004658 <init_usarts>
	SSD1306_Init();
 80027f4:	f7ff face 	bl	8001d94 <SSD1306_Init>
	set_incoming_byte_handler(1, receive_cmd);
 80027f8:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <main+0x15c>)
 80027fa:	0019      	movs	r1, r3
 80027fc:	2001      	movs	r0, #1
 80027fe:	f001 ff4d 	bl	800469c <set_incoming_byte_handler>
	set_incoming_byte_handler(2, receive_motor1);
 8002802:	4b3c      	ldr	r3, [pc, #240]	; (80028f4 <main+0x160>)
 8002804:	0019      	movs	r1, r3
 8002806:	2002      	movs	r0, #2
 8002808:	f001 ff48 	bl	800469c <set_incoming_byte_handler>
	set_state(ST_WAITING_FOR_CONNECTION);
 800280c:	2001      	movs	r0, #1
 800280e:	f7fe faf1 	bl	8000df4 <set_state>
	menu_init(&main_menu, &main_menu_supervisor);
 8002812:	4a39      	ldr	r2, [pc, #228]	; (80028f8 <main+0x164>)
 8002814:	4b39      	ldr	r3, [pc, #228]	; (80028fc <main+0x168>)
 8002816:	0011      	movs	r1, r2
 8002818:	0018      	movs	r0, r3
 800281a:	f000 ff9d 	bl	8003758 <menu_init>
	menu_supervisor_init(&main_menu_supervisor, &main_menu);
 800281e:	4a37      	ldr	r2, [pc, #220]	; (80028fc <main+0x168>)
 8002820:	4b35      	ldr	r3, [pc, #212]	; (80028f8 <main+0x164>)
 8002822:	0011      	movs	r1, r2
 8002824:	0018      	movs	r0, r3
 8002826:	f000 feb1 	bl	800358c <menu_supervisor_init>
	usb_buf[0] = 0;
 800282a:	4b35      	ldr	r3, [pc, #212]	; (8002900 <main+0x16c>)
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
	usb_buf_cursor = 0;
 8002830:	4b34      	ldr	r3, [pc, #208]	; (8002904 <main+0x170>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
	motor_cur = 0;
 8002836:	4b34      	ldr	r3, [pc, #208]	; (8002908 <main+0x174>)
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
	motor_tx_buf[0] = 49;
	motor_tx_buf[1] = 50;
	motor_tx_buf[2] = 10;
	*/

	set_tick_func(HAL_GetTick);
 800283c:	4b33      	ldr	r3, [pc, #204]	; (800290c <main+0x178>)
 800283e:	0018      	movs	r0, r3
 8002840:	f7fe fa50 	bl	8000ce4 <set_tick_func>


	motor_buf[0] = 0;
 8002844:	4b32      	ldr	r3, [pc, #200]	; (8002910 <main+0x17c>)
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
	motor_tx_buf[0] = 0x01;
 800284a:	4b32      	ldr	r3, [pc, #200]	; (8002914 <main+0x180>)
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
	motor_tx_buf[1] = 0x06;
 8002850:	4b30      	ldr	r3, [pc, #192]	; (8002914 <main+0x180>)
 8002852:	2206      	movs	r2, #6
 8002854:	705a      	strb	r2, [r3, #1]
	motor_tx_buf[2] = 0x1e;
 8002856:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <main+0x180>)
 8002858:	221e      	movs	r2, #30
 800285a:	709a      	strb	r2, [r3, #2]
	motor_tx_buf[3] = 0x02;
 800285c:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <main+0x180>)
 800285e:	2202      	movs	r2, #2
 8002860:	70da      	strb	r2, [r3, #3]
	motor_tx_buf[4] = 0x00;
 8002862:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <main+0x180>)
 8002864:	2200      	movs	r2, #0
 8002866:	711a      	strb	r2, [r3, #4]
	motor_tx_buf[5] = 0x01;
 8002868:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <main+0x180>)
 800286a:	2201      	movs	r2, #1
 800286c:	715a      	strb	r2, [r3, #5]
	motor_tx_buf[6] = 0x23;
 800286e:	4b29      	ldr	r3, [pc, #164]	; (8002914 <main+0x180>)
 8002870:	2223      	movs	r2, #35	; 0x23
 8002872:	719a      	strb	r2, [r3, #6]
	motor_tx_buf[7] = 0xe2;
 8002874:	4b27      	ldr	r3, [pc, #156]	; (8002914 <main+0x180>)
 8002876:	22e2      	movs	r2, #226	; 0xe2
 8002878:	71da      	strb	r2, [r3, #7]

	//needToSend = 0;

	command_readerHandle = osThreadNew(Start_command_reader, NULL, &command_reader_attributes);
 800287a:	4a27      	ldr	r2, [pc, #156]	; (8002918 <main+0x184>)
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <main+0x188>)
 800287e:	2100      	movs	r1, #0
 8002880:	0018      	movs	r0, r3
 8002882:	f004 feb5 	bl	80075f0 <osThreadNew>
 8002886:	0002      	movs	r2, r0
 8002888:	4b25      	ldr	r3, [pc, #148]	; (8002920 <main+0x18c>)
 800288a:	601a      	str	r2, [r3, #0]
	user_interfaceHandle = osThreadNew(Start_user_interface, NULL, &user_interface_attributes);
 800288c:	4a25      	ldr	r2, [pc, #148]	; (8002924 <main+0x190>)
 800288e:	4b26      	ldr	r3, [pc, #152]	; (8002928 <main+0x194>)
 8002890:	2100      	movs	r1, #0
 8002892:	0018      	movs	r0, r3
 8002894:	f004 feac 	bl	80075f0 <osThreadNew>
 8002898:	0002      	movs	r2, r0
 800289a:	4b24      	ldr	r3, [pc, #144]	; (800292c <main+0x198>)
 800289c:	601a      	str	r2, [r3, #0]

	/* creation of keys_switcher */
	keys_switcherHandle = osThreadNew(Start_keys_switcher, NULL, &keys_switcher_attributes);
 800289e:	4a24      	ldr	r2, [pc, #144]	; (8002930 <main+0x19c>)
 80028a0:	4b24      	ldr	r3, [pc, #144]	; (8002934 <main+0x1a0>)
 80028a2:	2100      	movs	r1, #0
 80028a4:	0018      	movs	r0, r3
 80028a6:	f004 fea3 	bl	80075f0 <osThreadNew>
 80028aa:	0002      	movs	r2, r0
 80028ac:	4b22      	ldr	r3, [pc, #136]	; (8002938 <main+0x1a4>)
 80028ae:	601a      	str	r2, [r3, #0]

	/* creation of rs485_control */
	rs485_controlHandle = osThreadNew(Start_rs485_controller, NULL, &rs485_control_attributes);
 80028b0:	4a22      	ldr	r2, [pc, #136]	; (800293c <main+0x1a8>)
 80028b2:	4b23      	ldr	r3, [pc, #140]	; (8002940 <main+0x1ac>)
 80028b4:	2100      	movs	r1, #0
 80028b6:	0018      	movs	r0, r3
 80028b8:	f004 fe9a 	bl	80075f0 <osThreadNew>
 80028bc:	0002      	movs	r2, r0
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <main+0x1b0>)
 80028c0:	601a      	str	r2, [r3, #0]

	/* Start scheduler */
	osKernelStart();
 80028c2:	f004 fe67 	bl	8007594 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	while (1) {
		osDelay(1000);
 80028c6:	23fa      	movs	r3, #250	; 0xfa
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	0018      	movs	r0, r3
 80028cc:	f004 ff38 	bl	8007740 <osDelay>
 80028d0:	e7f9      	b.n	80028c6 <main+0x132>
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	0800273d 	.word	0x0800273d
 80028d8:	0800275d 	.word	0x0800275d
 80028dc:	080032cd 	.word	0x080032cd
 80028e0:	08003309 	.word	0x08003309
 80028e4:	0800277d 	.word	0x0800277d
 80028e8:	20000860 	.word	0x20000860
 80028ec:	200008bc 	.word	0x200008bc
 80028f0:	08003445 	.word	0x08003445
 80028f4:	080034dd 	.word	0x080034dd
 80028f8:	20000760 	.word	0x20000760
 80028fc:	20000744 	.word	0x20000744
 8002900:	20000770 	.word	0x20000770
 8002904:	2000076c 	.word	0x2000076c
 8002908:	20000859 	.word	0x20000859
 800290c:	08004cad 	.word	0x08004cad
 8002910:	20000848 	.word	0x20000848
 8002914:	20000834 	.word	0x20000834
 8002918:	0800dcb4 	.word	0x0800dcb4
 800291c:	08002c99 	.word	0x08002c99
 8002920:	200008f0 	.word	0x200008f0
 8002924:	0800dcd8 	.word	0x0800dcd8
 8002928:	08002f89 	.word	0x08002f89
 800292c:	200008f4 	.word	0x200008f4
 8002930:	0800dcfc 	.word	0x0800dcfc
 8002934:	08003233 	.word	0x08003233
 8002938:	200008f8 	.word	0x200008f8
 800293c:	0800dd20 	.word	0x0800dd20
 8002940:	0800327d 	.word	0x0800327d
 8002944:	200008fc 	.word	0x200008fc

08002948 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b097      	sub	sp, #92	; 0x5c
 800294c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800294e:	2428      	movs	r4, #40	; 0x28
 8002950:	193b      	adds	r3, r7, r4
 8002952:	0018      	movs	r0, r3
 8002954:	2330      	movs	r3, #48	; 0x30
 8002956:	001a      	movs	r2, r3
 8002958:	2100      	movs	r1, #0
 800295a:	f007 f9c7 	bl	8009cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800295e:	2318      	movs	r3, #24
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	0018      	movs	r0, r3
 8002964:	2310      	movs	r3, #16
 8002966:	001a      	movs	r2, r3
 8002968:	2100      	movs	r1, #0
 800296a:	f007 f9bf 	bl	8009cec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800296e:	1d3b      	adds	r3, r7, #4
 8002970:	0018      	movs	r0, r3
 8002972:	2314      	movs	r3, #20
 8002974:	001a      	movs	r2, r3
 8002976:	2100      	movs	r1, #0
 8002978:	f007 f9b8 	bl	8009cec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800297c:	0021      	movs	r1, r4
 800297e:	187b      	adds	r3, r7, r1
 8002980:	2202      	movs	r2, #2
 8002982:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002984:	187b      	adds	r3, r7, r1
 8002986:	2201      	movs	r2, #1
 8002988:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800298a:	187b      	adds	r3, r7, r1
 800298c:	2210      	movs	r2, #16
 800298e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002990:	187b      	adds	r3, r7, r1
 8002992:	2200      	movs	r2, #0
 8002994:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)  {
 8002996:	187b      	adds	r3, r7, r1
 8002998:	0018      	movs	r0, r3
 800299a:	f003 fab3 	bl	8005f04 <HAL_RCC_OscConfig>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d001      	beq.n	80029a6 <SystemClock_Config+0x5e>
    Error_Handler();
 80029a2:	f000 fc8d 	bl	80032c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029a6:	2118      	movs	r1, #24
 80029a8:	187b      	adds	r3, r7, r1
 80029aa:	2207      	movs	r2, #7
 80029ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	2200      	movs	r2, #0
 80029b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029ba:	187b      	adds	r3, r7, r1
 80029bc:	2200      	movs	r2, #0
 80029be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	2100      	movs	r1, #0
 80029c4:	0018      	movs	r0, r3
 80029c6:	f003 fdbb 	bl	8006540 <HAL_RCC_ClockConfig>
 80029ca:	1e03      	subs	r3, r0, #0
 80029cc:	d001      	beq.n	80029d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80029ce:	f000 fc77 	bl	80032c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	2221      	movs	r2, #33	; 0x21
 80029d6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	2200      	movs	r2, #0
 80029e2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	0018      	movs	r0, r3
 80029e8:	f003 ff28 	bl	800683c <HAL_RCCEx_PeriphCLKConfig>
 80029ec:	1e03      	subs	r3, r0, #0
 80029ee:	d001      	beq.n	80029f4 <SystemClock_Config+0xac>
    Error_Handler();
 80029f0:	f000 fc66 	bl	80032c0 <Error_Handler>
  }
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b017      	add	sp, #92	; 0x5c
 80029fa:	bd90      	pop	{r4, r7, pc}

080029fc <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <MX_I2C1_Init+0x74>)
 8002a02:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <MX_I2C1_Init+0x78>)
 8002a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8002a06:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <MX_I2C1_Init+0x74>)
 8002a08:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <MX_I2C1_Init+0x7c>)
 8002a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a0c:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <MX_I2C1_Init+0x74>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a12:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <MX_I2C1_Init+0x74>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a18:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <MX_I2C1_Init+0x74>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a1e:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <MX_I2C1_Init+0x74>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <MX_I2C1_Init+0x74>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <MX_I2C1_Init+0x74>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <MX_I2C1_Init+0x74>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <MX_I2C1_Init+0x74>)
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f002 fd9b 	bl	8005574 <HAL_I2C_Init>
 8002a3e:	1e03      	subs	r3, r0, #0
 8002a40:	d001      	beq.n	8002a46 <MX_I2C1_Init+0x4a>
    Error_Handler();
 8002a42:	f000 fc3d 	bl	80032c0 <Error_Handler>
  }
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8002a46:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <MX_I2C1_Init+0x74>)
 8002a48:	2100      	movs	r1, #0
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f003 f9c2 	bl	8005dd4 <HAL_I2CEx_ConfigAnalogFilter>
 8002a50:	1e03      	subs	r3, r0, #0
 8002a52:	d001      	beq.n	8002a58 <MX_I2C1_Init+0x5c>
    Error_Handler();
 8002a54:	f000 fc34 	bl	80032c0 <Error_Handler>
  }
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <MX_I2C1_Init+0x74>)
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f003 fa05 	bl	8005e6c <HAL_I2CEx_ConfigDigitalFilter>
 8002a62:	1e03      	subs	r3, r0, #0
 8002a64:	d001      	beq.n	8002a6a <MX_I2C1_Init+0x6e>
    Error_Handler();
 8002a66:	f000 fc2b 	bl	80032c0 <Error_Handler>
  }
}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	200005f0 	.word	0x200005f0
 8002a74:	40005400 	.word	0x40005400
 8002a78:	0000020b 	.word	0x0000020b

08002a7c <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8002a80:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <MX_USART1_UART_Init+0x7c>)
 8002a82:	4a1e      	ldr	r2, [pc, #120]	; (8002afc <MX_USART1_UART_Init+0x80>)
 8002a84:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 38400;
 8002a86:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <MX_USART1_UART_Init+0x7c>)
 8002a88:	2296      	movs	r2, #150	; 0x96
 8002a8a:	0212      	lsls	r2, r2, #8
 8002a8c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <MX_USART1_UART_Init+0x7c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002a94:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <MX_USART1_UART_Init+0x7c>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002a9a:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <MX_USART1_UART_Init+0x7c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002aa0:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <MX_USART1_UART_Init+0x7c>)
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <MX_USART1_UART_Init+0x7c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aac:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <MX_USART1_UART_Init+0x7c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <MX_USART1_UART_Init+0x7c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <MX_USART1_UART_Init+0x7c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8002abe:	480e      	ldr	r0, [pc, #56]	; (8002af8 <MX_USART1_UART_Init+0x7c>)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	f004 fcc9 	bl	800745c <HAL_RS485Ex_Init>
 8002aca:	1e03      	subs	r3, r0, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_USART1_UART_Init+0x56>
		Error_Handler();
 8002ace:	f000 fbf7 	bl	80032c0 <Error_Handler>
	}

	USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <MX_USART1_UART_Init+0x80>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <MX_USART1_UART_Init+0x80>)
 8002ad8:	212c      	movs	r1, #44	; 0x2c
 8002ada:	430a      	orrs	r2, r1
 8002adc:	601a      	str	r2, [r3, #0]
	USART1->CR2 = 0;
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <MX_USART1_UART_Init+0x80>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	605a      	str	r2, [r3, #4]
	USART1->CR3 = 0;
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <MX_USART1_UART_Init+0x80>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
	NVIC_EnableIRQ(USART1_IRQn);
 8002aea:	201b      	movs	r0, #27
 8002aec:	f7ff fe0c 	bl	8002708 <__NVIC_EnableIRQ>
}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	2000063c 	.word	0x2000063c
 8002afc:	40013800 	.word	0x40013800

08002b00 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <MX_USART2_UART_Init+0x7c>)
 8002b06:	4a1e      	ldr	r2, [pc, #120]	; (8002b80 <MX_USART2_UART_Init+0x80>)
 8002b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002b0a:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <MX_USART2_UART_Init+0x7c>)
 8002b0c:	2296      	movs	r2, #150	; 0x96
 8002b0e:	0192      	lsls	r2, r2, #6
 8002b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <MX_USART2_UART_Init+0x7c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b18:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <MX_USART2_UART_Init+0x7c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b1e:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <MX_USART2_UART_Init+0x7c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b24:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <MX_USART2_UART_Init+0x7c>)
 8002b26:	220c      	movs	r2, #12
 8002b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b2a:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <MX_USART2_UART_Init+0x7c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b30:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <MX_USART2_UART_Init+0x7c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <MX_USART2_UART_Init+0x7c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <MX_USART2_UART_Init+0x7c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8002b42:	480e      	ldr	r0, [pc, #56]	; (8002b7c <MX_USART2_UART_Init+0x7c>)
 8002b44:	2300      	movs	r3, #0
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	f004 fc87 	bl	800745c <HAL_RS485Ex_Init>
 8002b4e:	1e03      	subs	r3, r0, #0
 8002b50:	d001      	beq.n	8002b56 <MX_USART2_UART_Init+0x56>
    Error_Handler();
 8002b52:	f000 fbb5 	bl	80032c0 <Error_Handler>
  }
  USART2->CR1 &= ~  (USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_TXEIE);
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <MX_USART2_UART_Init+0x80>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <MX_USART2_UART_Init+0x80>)
 8002b5c:	21ac      	movs	r1, #172	; 0xac
 8002b5e:	438a      	bics	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]
  //USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
  //| USART_CR1_RXNEIE;
  USART2->CR2 = 0;
 8002b62:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <MX_USART2_UART_Init+0x80>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	605a      	str	r2, [r3, #4]
  USART2->CR3 = 0;
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <MX_USART2_UART_Init+0x80>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  NVIC_EnableIRQ(USART2_IRQn);
 8002b6e:	201c      	movs	r0, #28
 8002b70:	f7ff fdca 	bl	8002708 <__NVIC_EnableIRQ>
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	200006c0 	.word	0x200006c0
 8002b80:	40004400 	.word	0x40004400

08002b84 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b089      	sub	sp, #36	; 0x24
 8002b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8a:	240c      	movs	r4, #12
 8002b8c:	193b      	adds	r3, r7, r4
 8002b8e:	0018      	movs	r0, r3
 8002b90:	2314      	movs	r3, #20
 8002b92:	001a      	movs	r2, r3
 8002b94:	2100      	movs	r1, #0
 8002b96:	f007 f8a9 	bl	8009cec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9a:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <MX_GPIO_Init+0x104>)
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	4b3a      	ldr	r3, [pc, #232]	; (8002c88 <MX_GPIO_Init+0x104>)
 8002ba0:	2180      	movs	r1, #128	; 0x80
 8002ba2:	0309      	lsls	r1, r1, #12
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	615a      	str	r2, [r3, #20]
 8002ba8:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <MX_GPIO_Init+0x104>)
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	031b      	lsls	r3, r3, #12
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	4b34      	ldr	r3, [pc, #208]	; (8002c88 <MX_GPIO_Init+0x104>)
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	4b33      	ldr	r3, [pc, #204]	; (8002c88 <MX_GPIO_Init+0x104>)
 8002bbc:	2180      	movs	r1, #128	; 0x80
 8002bbe:	0289      	lsls	r1, r1, #10
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	615a      	str	r2, [r3, #20]
 8002bc4:	4b30      	ldr	r3, [pc, #192]	; (8002c88 <MX_GPIO_Init+0x104>)
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	029b      	lsls	r3, r3, #10
 8002bcc:	4013      	ands	r3, r2
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd2:	4b2d      	ldr	r3, [pc, #180]	; (8002c88 <MX_GPIO_Init+0x104>)
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	4b2c      	ldr	r3, [pc, #176]	; (8002c88 <MX_GPIO_Init+0x104>)
 8002bd8:	2180      	movs	r1, #128	; 0x80
 8002bda:	02c9      	lsls	r1, r1, #11
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	615a      	str	r2, [r3, #20]
 8002be0:	4b29      	ldr	r3, [pc, #164]	; (8002c88 <MX_GPIO_Init+0x104>)
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	02db      	lsls	r3, r3, #11
 8002be8:	4013      	ands	r3, r2
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_11_Pin|OUT_10_Pin|OUT_9_Pin|OUT_8_Pin
 8002bee:	23f2      	movs	r3, #242	; 0xf2
 8002bf0:	33ff      	adds	r3, #255	; 0xff
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	2390      	movs	r3, #144	; 0x90
 8002bf6:	05db      	lsls	r3, r3, #23
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f002 fc9d 	bl	800553a <HAL_GPIO_WritePin>
                          |OUT_7_Pin|OUT_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_6_Pin|OUT_5_Pin|OUT_4_Pin|OUT_3_Pin
 8002c00:	4922      	ldr	r1, [pc, #136]	; (8002c8c <MX_GPIO_Init+0x108>)
 8002c02:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <MX_GPIO_Init+0x10c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	0018      	movs	r0, r3
 8002c08:	f002 fc97 	bl	800553a <HAL_GPIO_WritePin>
                          |OUT_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8002c0c:	193b      	adds	r3, r7, r4
 8002c0e:	22e0      	movs	r2, #224	; 0xe0
 8002c10:	0212      	lsls	r2, r2, #8
 8002c12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c14:	193b      	adds	r3, r7, r4
 8002c16:	2200      	movs	r2, #0
 8002c18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c1a:	193b      	adds	r3, r7, r4
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c20:	193b      	adds	r3, r7, r4
 8002c22:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <MX_GPIO_Init+0x110>)
 8002c24:	0019      	movs	r1, r3
 8002c26:	0010      	movs	r0, r2
 8002c28:	f002 fafa 	bl	8005220 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_11_Pin OUT_10_Pin OUT_9_Pin OUT_8_Pin
                           OUT_7_Pin OUT_1_Pin */
  GPIO_InitStruct.Pin = OUT_11_Pin|OUT_10_Pin|OUT_9_Pin|OUT_8_Pin
 8002c2c:	0021      	movs	r1, r4
 8002c2e:	187b      	adds	r3, r7, r1
 8002c30:	22f2      	movs	r2, #242	; 0xf2
 8002c32:	32ff      	adds	r2, #255	; 0xff
 8002c34:	601a      	str	r2, [r3, #0]
                          |OUT_7_Pin|OUT_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c36:	000c      	movs	r4, r1
 8002c38:	193b      	adds	r3, r7, r4
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	193b      	adds	r3, r7, r4
 8002c40:	2200      	movs	r2, #0
 8002c42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	193b      	adds	r3, r7, r4
 8002c46:	2200      	movs	r2, #0
 8002c48:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4a:	193a      	adds	r2, r7, r4
 8002c4c:	2390      	movs	r3, #144	; 0x90
 8002c4e:	05db      	lsls	r3, r3, #23
 8002c50:	0011      	movs	r1, r2
 8002c52:	0018      	movs	r0, r3
 8002c54:	f002 fae4 	bl	8005220 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_6_Pin OUT_5_Pin OUT_4_Pin OUT_3_Pin
                           OUT_2_Pin */
  GPIO_InitStruct.Pin = OUT_6_Pin|OUT_5_Pin|OUT_4_Pin|OUT_3_Pin
 8002c58:	0021      	movs	r1, r4
 8002c5a:	187b      	adds	r3, r7, r1
 8002c5c:	4a0b      	ldr	r2, [pc, #44]	; (8002c8c <MX_GPIO_Init+0x108>)
 8002c5e:	601a      	str	r2, [r3, #0]
                          |OUT_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c60:	187b      	adds	r3, r7, r1
 8002c62:	2201      	movs	r2, #1
 8002c64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	187b      	adds	r3, r7, r1
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6c:	187b      	adds	r3, r7, r1
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c72:	187b      	adds	r3, r7, r1
 8002c74:	4a06      	ldr	r2, [pc, #24]	; (8002c90 <MX_GPIO_Init+0x10c>)
 8002c76:	0019      	movs	r1, r3
 8002c78:	0010      	movs	r0, r2
 8002c7a:	f002 fad1 	bl	8005220 <HAL_GPIO_Init>
}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b009      	add	sp, #36	; 0x24
 8002c84:	bd90      	pop	{r4, r7, pc}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	0000f001 	.word	0x0000f001
 8002c90:	48000400 	.word	0x48000400
 8002c94:	48000800 	.word	0x48000800

08002c98 <Start_command_reader>:

char received_cmd[MAX_CMD_BUF+1] = {0,};
void Start_command_reader(void *argument) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  for(;;) {
	  if (cmd_ready) {
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <Start_command_reader+0x2c>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d009      	beq.n	8002cbc <Start_command_reader+0x24>
		  cmd_ready = 0;
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <Start_command_reader+0x2c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
		  app_process_cmd(received_cmd);
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <Start_command_reader+0x30>)
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7fe f8af 	bl	8000e14 <app_process_cmd>
		  received_cmd[0] = 0;
 8002cb6:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <Start_command_reader+0x30>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
	  }
	  osDelay(1);
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	f004 fd3f 	bl	8007740 <osDelay>
	  if (cmd_ready) {
 8002cc2:	e7ed      	b.n	8002ca0 <Start_command_reader+0x8>
 8002cc4:	2000085a 	.word	0x2000085a
 8002cc8:	20000900 	.word	0x20000900

08002ccc <display_logo>:
  }
}

void display_logo(int key) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	6078      	str	r0, [r7, #4]
	SSD1306_Clear();
 8002cd4:	f7ff fc53 	bl	800257e <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, bg, 128, 64, 1);
 8002cd8:	4a1b      	ldr	r2, [pc, #108]	; (8002d48 <display_logo+0x7c>)
 8002cda:	2301      	movs	r3, #1
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	2340      	movs	r3, #64	; 0x40
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fe ffb4 	bl	8001c54 <SSD1306_DrawBitmap>
	if (key == 1) SSD1306_DrawBitmap(72, 8, rb1, 48, 54, 1);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d109      	bne.n	8002d06 <display_logo+0x3a>
 8002cf2:	4a16      	ldr	r2, [pc, #88]	; (8002d4c <display_logo+0x80>)
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	2336      	movs	r3, #54	; 0x36
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	2330      	movs	r3, #48	; 0x30
 8002cfe:	2108      	movs	r1, #8
 8002d00:	2048      	movs	r0, #72	; 0x48
 8002d02:	f7fe ffa7 	bl	8001c54 <SSD1306_DrawBitmap>
	if (key == 2) SSD1306_DrawBitmap(72, 8, rb2, 48, 54, 1);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d109      	bne.n	8002d20 <display_logo+0x54>
 8002d0c:	4a10      	ldr	r2, [pc, #64]	; (8002d50 <display_logo+0x84>)
 8002d0e:	2301      	movs	r3, #1
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	2336      	movs	r3, #54	; 0x36
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	2330      	movs	r3, #48	; 0x30
 8002d18:	2108      	movs	r1, #8
 8002d1a:	2048      	movs	r0, #72	; 0x48
 8002d1c:	f7fe ff9a 	bl	8001c54 <SSD1306_DrawBitmap>
	if (key == 3) SSD1306_DrawBitmap(72, 8, rb3, 48, 54, 1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d109      	bne.n	8002d3a <display_logo+0x6e>
 8002d26:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <display_logo+0x88>)
 8002d28:	2301      	movs	r3, #1
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	2336      	movs	r3, #54	; 0x36
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	2330      	movs	r3, #48	; 0x30
 8002d32:	2108      	movs	r1, #8
 8002d34:	2048      	movs	r0, #72	; 0x48
 8002d36:	f7fe ff8d 	bl	8001c54 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8002d3a:	f7ff f877 	bl	8001e2c <SSD1306_UpdateScreen>
}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b002      	add	sp, #8
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	0800d4d8 	.word	0x0800d4d8
 8002d4c:	0800d8dc 	.word	0x0800d8dc
 8002d50:	0800da24 	.word	0x0800da24
 8002d54:	0800db6c 	.word	0x0800db6c

08002d58 <display_connection>:

void display_connection(int is_connected) {
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	SSD1306_Clear();
 8002d60:	f7ff fc0d 	bl	800257e <SSD1306_Clear>
	if(!is_connected) {
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d11e      	bne.n	8002da8 <display_connection+0x50>
		SSD1306_GotoXY(25, 3);
 8002d6a:	2103      	movs	r1, #3
 8002d6c:	2019      	movs	r0, #25
 8002d6e:	f7ff f94b 	bl	8002008 <SSD1306_GotoXY>
		SSD1306_Puts("WAITING", &Font_11x18, 1);
 8002d72:	4926      	ldr	r1, [pc, #152]	; (8002e0c <display_connection+0xb4>)
 8002d74:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <display_connection+0xb8>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f7ff f9df 	bl	800213c <SSD1306_Puts>
		SSD1306_GotoXY(47, 23);
 8002d7e:	2117      	movs	r1, #23
 8002d80:	202f      	movs	r0, #47	; 0x2f
 8002d82:	f7ff f941 	bl	8002008 <SSD1306_GotoXY>
		SSD1306_Puts("FOR", &Font_11x18, 1);
 8002d86:	4921      	ldr	r1, [pc, #132]	; (8002e0c <display_connection+0xb4>)
 8002d88:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <display_connection+0xbc>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f7ff f9d5 	bl	800213c <SSD1306_Puts>
		SSD1306_GotoXY(9, 45);
 8002d92:	212d      	movs	r1, #45	; 0x2d
 8002d94:	2009      	movs	r0, #9
 8002d96:	f7ff f937 	bl	8002008 <SSD1306_GotoXY>
		SSD1306_Puts("CONNECTION", &Font_11x18, 1);
 8002d9a:	491c      	ldr	r1, [pc, #112]	; (8002e0c <display_connection+0xb4>)
 8002d9c:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <display_connection+0xc0>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7ff f9cb 	bl	800213c <SSD1306_Puts>
 8002da6:	e02b      	b.n	8002e00 <display_connection+0xa8>
	} else {
		SSD1306_GotoXY(9, 45);
 8002da8:	212d      	movs	r1, #45	; 0x2d
 8002daa:	2009      	movs	r0, #9
 8002dac:	f7ff f92c 	bl	8002008 <SSD1306_GotoXY>
		uint8_t x = rand() % 28;
 8002db0:	f006 fe9a 	bl	8009ae8 <rand>
 8002db4:	0003      	movs	r3, r0
 8002db6:	211c      	movs	r1, #28
 8002db8:	0018      	movs	r0, r3
 8002dba:	f7fd fb1f 	bl	80003fc <__aeabi_idivmod>
 8002dbe:	000b      	movs	r3, r1
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	240f      	movs	r4, #15
 8002dc4:	193b      	adds	r3, r7, r4
 8002dc6:	701a      	strb	r2, [r3, #0]
		uint8_t y = rand() % 45;
 8002dc8:	f006 fe8e 	bl	8009ae8 <rand>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	212d      	movs	r1, #45	; 0x2d
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7fd fb13 	bl	80003fc <__aeabi_idivmod>
 8002dd6:	000b      	movs	r3, r1
 8002dd8:	001a      	movs	r2, r3
 8002dda:	210e      	movs	r1, #14
 8002ddc:	187b      	adds	r3, r7, r1
 8002dde:	701a      	strb	r2, [r3, #0]
		SSD1306_GotoXY(x, y);
 8002de0:	193b      	adds	r3, r7, r4
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	0019      	movs	r1, r3
 8002dee:	0010      	movs	r0, r2
 8002df0:	f7ff f90a 	bl	8002008 <SSD1306_GotoXY>
		SSD1306_Puts("CONNECTED", &Font_11x18, 1);
 8002df4:	4905      	ldr	r1, [pc, #20]	; (8002e0c <display_connection+0xb4>)
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <display_connection+0xc4>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f7ff f99e 	bl	800213c <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 8002e00:	f7ff f814 	bl	8001e2c <SSD1306_UpdateScreen>
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b005      	add	sp, #20
 8002e0a:	bd90      	pop	{r4, r7, pc}
 8002e0c:	20000008 	.word	0x20000008
 8002e10:	0800aa98 	.word	0x0800aa98
 8002e14:	0800aaa0 	.word	0x0800aaa0
 8002e18:	0800aaa4 	.word	0x0800aaa4
 8002e1c:	0800aab0 	.word	0x0800aab0

08002e20 <display_post_num>:

void display_post_num() {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8002e26:	f7ff fbaa 	bl	800257e <SSD1306_Clear>
	uint8_t x = rand() % 95;
 8002e2a:	f006 fe5d 	bl	8009ae8 <rand>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	215f      	movs	r1, #95	; 0x5f
 8002e32:	0018      	movs	r0, r3
 8002e34:	f7fd fae2 	bl	80003fc <__aeabi_idivmod>
 8002e38:	000b      	movs	r3, r1
 8002e3a:	001a      	movs	r2, r3
 8002e3c:	1dfb      	adds	r3, r7, #7
 8002e3e:	701a      	strb	r2, [r3, #0]
	uint8_t y = rand() % 37;
 8002e40:	f006 fe52 	bl	8009ae8 <rand>
 8002e44:	0003      	movs	r3, r0
 8002e46:	2125      	movs	r1, #37	; 0x25
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f7fd fad7 	bl	80003fc <__aeabi_idivmod>
 8002e4e:	000b      	movs	r3, r1
 8002e50:	001a      	movs	r2, r3
 8002e52:	1dbb      	adds	r3, r7, #6
 8002e54:	701a      	strb	r2, [r3, #0]

	SSD1306_GotoXY(x, y);
 8002e56:	1dfb      	adds	r3, r7, #7
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	1dbb      	adds	r3, r7, #6
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	0019      	movs	r1, r3
 8002e64:	0010      	movs	r0, r2
 8002e66:	f7ff f8cf 	bl	8002008 <SSD1306_GotoXY>
	SSD1306_Puts(get_post_num_str(), &Font_16x26, 1);
 8002e6a:	f7fd fedd 	bl	8000c28 <get_post_num_str>
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <display_post_num+0x64>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	0019      	movs	r1, r3
 8002e74:	f7ff f962 	bl	800213c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002e78:	f7fe ffd8 	bl	8001e2c <SSD1306_UpdateScreen>
}
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000010 	.word	0x20000010

08002e88 <display_motor_status>:

void display_motor_status() {
 8002e88:	b590      	push	{r4, r7, lr}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8002e8e:	f7ff fb76 	bl	800257e <SSD1306_Clear>
	uint8_t motor_com_status = get_motor_communication_status();
 8002e92:	1dfc      	adds	r4, r7, #7
 8002e94:	f7fd fb5e 	bl	8000554 <get_motor_communication_status>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	7023      	strb	r3, [r4, #0]
	uint8_t y = rand() % 45;
 8002e9c:	f006 fe24 	bl	8009ae8 <rand>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	212d      	movs	r1, #45	; 0x2d
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f7fd faa9 	bl	80003fc <__aeabi_idivmod>
 8002eaa:	000b      	movs	r3, r1
 8002eac:	001a      	movs	r2, r3
 8002eae:	1dbb      	adds	r3, r7, #6
 8002eb0:	701a      	strb	r2, [r3, #0]
	if (motor_com_status == MOTOR_NOT_ANSWERING){
 8002eb2:	1dfb      	adds	r3, r7, #7
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d11b      	bne.n	8002ef2 <display_motor_status+0x6a>
		uint8_t x = rand() % 39;
 8002eba:	f006 fe15 	bl	8009ae8 <rand>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	2127      	movs	r1, #39	; 0x27
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f7fd fa9a 	bl	80003fc <__aeabi_idivmod>
 8002ec8:	000b      	movs	r3, r1
 8002eca:	001a      	movs	r2, r3
 8002ecc:	1cfb      	adds	r3, r7, #3
 8002ece:	701a      	strb	r2, [r3, #0]
		SSD1306_GotoXY(x, y);
 8002ed0:	1cfb      	adds	r3, r7, #3
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	1dbb      	adds	r3, r7, #6
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	0019      	movs	r1, r3
 8002ede:	0010      	movs	r0, r2
 8002ee0:	f7ff f892 	bl	8002008 <SSD1306_GotoXY>
		SSD1306_Puts("NO MOTOR", &Font_11x18, 1);
 8002ee4:	4924      	ldr	r1, [pc, #144]	; (8002f78 <display_motor_status+0xf0>)
 8002ee6:	4b25      	ldr	r3, [pc, #148]	; (8002f7c <display_motor_status+0xf4>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	0018      	movs	r0, r3
 8002eec:	f7ff f926 	bl	800213c <SSD1306_Puts>
 8002ef0:	e03b      	b.n	8002f6a <display_motor_status+0xe2>
	} else if (motor_com_status == MOTOR_WRONG_ANSWERS) {
 8002ef2:	1dfb      	adds	r3, r7, #7
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d11c      	bne.n	8002f34 <display_motor_status+0xac>
		int8_t x = rand() % 28;
 8002efa:	f006 fdf5 	bl	8009ae8 <rand>
 8002efe:	0003      	movs	r3, r0
 8002f00:	211c      	movs	r1, #28
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7fd fa7a 	bl	80003fc <__aeabi_idivmod>
 8002f08:	000b      	movs	r3, r1
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	1d3b      	adds	r3, r7, #4
 8002f0e:	701a      	strb	r2, [r3, #0]
		SSD1306_GotoXY(x, y);
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	b25b      	sxtb	r3, r3
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	1dbb      	adds	r3, r7, #6
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	0019      	movs	r1, r3
 8002f20:	0010      	movs	r0, r2
 8002f22:	f7ff f871 	bl	8002008 <SSD1306_GotoXY>
		SSD1306_Puts("MOTOR ERR", &Font_11x18, 1);
 8002f26:	4914      	ldr	r1, [pc, #80]	; (8002f78 <display_motor_status+0xf0>)
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <display_motor_status+0xf8>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f7ff f905 	bl	800213c <SSD1306_Puts>
 8002f32:	e01a      	b.n	8002f6a <display_motor_status+0xe2>
	} else {
		uint8_t x = rand() % 39;
 8002f34:	f006 fdd8 	bl	8009ae8 <rand>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	2127      	movs	r1, #39	; 0x27
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7fd fa5d 	bl	80003fc <__aeabi_idivmod>
 8002f42:	000b      	movs	r3, r1
 8002f44:	001a      	movs	r2, r3
 8002f46:	1d7b      	adds	r3, r7, #5
 8002f48:	701a      	strb	r2, [r3, #0]
		SSD1306_GotoXY(x, y);
 8002f4a:	1d7b      	adds	r3, r7, #5
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	1dbb      	adds	r3, r7, #6
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	0019      	movs	r1, r3
 8002f58:	0010      	movs	r0, r2
 8002f5a:	f7ff f855 	bl	8002008 <SSD1306_GotoXY>
		SSD1306_Puts("MOTOR OK", &Font_11x18, 1);
 8002f5e:	4906      	ldr	r1, [pc, #24]	; (8002f78 <display_motor_status+0xf0>)
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <display_motor_status+0xfc>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	0018      	movs	r0, r3
 8002f66:	f7ff f8e9 	bl	800213c <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 8002f6a:	f7fe ff5f 	bl	8001e2c <SSD1306_UpdateScreen>
}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b003      	add	sp, #12
 8002f74:	bd90      	pop	{r4, r7, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	20000008 	.word	0x20000008
 8002f7c:	0800aabc 	.word	0x0800aabc
 8002f80:	0800aac8 	.word	0x0800aac8
 8002f84:	0800aad4 	.word	0x0800aad4

08002f88 <Start_user_interface>:

void start_animation();

void Start_user_interface(void *argument) {
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	start_animation();
 8002f90:	f000 f916 	bl	80031c0 <start_animation>
	needToSend = 0;
 8002f94:	4b72      	ldr	r3, [pc, #456]	; (8003160 <Start_user_interface+0x1d8>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
	uint16_t loop = 1000;
 8002f9a:	230e      	movs	r3, #14
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	22fa      	movs	r2, #250	; 0xfa
 8002fa0:	0092      	lsls	r2, r2, #2
 8002fa2:	801a      	strh	r2, [r3, #0]
	uint8_t frame = 0;
 8002fa4:	230d      	movs	r3, #13
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
	uint8_t mode = MODE_SCREENSAVER;
 8002fac:	230c      	movs	r3, #12
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	701a      	strb	r2, [r3, #0]
	for(;;) {
		if (mode == MODE_SCREENSAVER) {
 8002fb4:	230c      	movs	r3, #12
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d000      	beq.n	8002fc0 <Start_user_interface+0x38>
 8002fbe:	e06a      	b.n	8003096 <Start_user_interface+0x10e>
			loop++;
 8002fc0:	210e      	movs	r1, #14
 8002fc2:	187b      	adds	r3, r7, r1
 8002fc4:	881a      	ldrh	r2, [r3, #0]
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	3201      	adds	r2, #1
 8002fca:	801a      	strh	r2, [r3, #0]
			// Will be state machine later


			// cleaning states of the buttons:
			is_dblclicked(0);
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f000 fab5 	bl	800353c <is_dblclicked>
			if(is_dblclicked(2)) {
 8002fd2:	2002      	movs	r0, #2
 8002fd4:	f000 fab2 	bl	800353c <is_dblclicked>
 8002fd8:	1e03      	subs	r3, r0, #0
 8002fda:	d005      	beq.n	8002fe8 <Start_user_interface+0x60>
				const char * cmd = "RUN T60|1/900/900|2/850/850|3/800/800|4/750/750|5/725/725|6/700/700|7/650/650|8/630/630|9/600/600|10/550/550|11/500/500|;";
 8002fdc:	4b61      	ldr	r3, [pc, #388]	; (8003164 <Start_user_interface+0x1dc>)
 8002fde:	60bb      	str	r3, [r7, #8]
				app_process_cmd(cmd);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7fd ff16 	bl	8000e14 <app_process_cmd>
			}
			is_clicked(0);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f000 fa87 	bl	80034fc <is_clicked>
			//is_clicked(2);

			if(is_dblclicked(1)) {
 8002fee:	2001      	movs	r0, #1
 8002ff0:	f000 faa4 	bl	800353c <is_dblclicked>
 8002ff4:	1e03      	subs	r3, r0, #0
 8002ff6:	d008      	beq.n	800300a <Start_user_interface+0x82>
				mode = MODE_MENU;
 8002ff8:	230c      	movs	r3, #12
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	701a      	strb	r2, [r3, #0]
				loop = 0;
 8003000:	230e      	movs	r3, #14
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	2200      	movs	r2, #0
 8003006:	801a      	strh	r2, [r3, #0]
				continue;
 8003008:	e0a9      	b.n	800315e <Start_user_interface+0x1d6>
			}

			if (loop>1000) {
 800300a:	210e      	movs	r1, #14
 800300c:	187b      	adds	r3, r7, r1
 800300e:	881a      	ldrh	r2, [r3, #0]
 8003010:	23fa      	movs	r3, #250	; 0xfa
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	429a      	cmp	r2, r3
 8003016:	d93e      	bls.n	8003096 <Start_user_interface+0x10e>
				loop = 0;
 8003018:	187b      	adds	r3, r7, r1
 800301a:	2200      	movs	r2, #0
 800301c:	801a      	strh	r2, [r3, #0]
				if (frame == 0) {
 800301e:	230d      	movs	r3, #13
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <Start_user_interface+0xb4>
					display_connection(get_state() != ST_WAITING_FOR_CONNECTION);
 8003028:	f7fe fbec 	bl	8001804 <get_state>
 800302c:	0003      	movs	r3, r0
 800302e:	3b01      	subs	r3, #1
 8003030:	1e5a      	subs	r2, r3, #1
 8003032:	4193      	sbcs	r3, r2
 8003034:	b2db      	uxtb	r3, r3
 8003036:	0018      	movs	r0, r3
 8003038:	f7ff fe8e 	bl	8002d58 <display_connection>
				}
				if (frame == 1) {
 800303c:	230d      	movs	r3, #13
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <Start_user_interface+0xc2>
					display_post_num();
 8003046:	f7ff feeb 	bl	8002e20 <display_post_num>
				}
				if (frame == 2) {
 800304a:	230d      	movs	r3, #13
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d101      	bne.n	8003058 <Start_user_interface+0xd0>
					display_motor_status();
 8003054:	f7ff ff18 	bl	8002e88 <display_motor_status>
				}
				if (frame == 3) {
 8003058:	230d      	movs	r3, #13
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d103      	bne.n	800306a <Start_user_interface+0xe2>
					SSD1306_Clear();
 8003062:	f7ff fa8c 	bl	800257e <SSD1306_Clear>
					SSD1306_UpdateScreen();
 8003066:	f7fe fee1 	bl	8001e2c <SSD1306_UpdateScreen>
				}
				if (frame == 3) {
 800306a:	230d      	movs	r3, #13
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b03      	cmp	r3, #3
 8003072:	d103      	bne.n	800307c <Start_user_interface+0xf4>
					SSD1306_Clear();
 8003074:	f7ff fa83 	bl	800257e <SSD1306_Clear>
					SSD1306_UpdateScreen();
 8003078:	f7fe fed8 	bl	8001e2c <SSD1306_UpdateScreen>
				}

				frame++;
 800307c:	210d      	movs	r1, #13
 800307e:	187b      	adds	r3, r7, r1
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	187b      	adds	r3, r7, r1
 8003084:	3201      	adds	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]
				if(frame >= 3) frame = 0;
 8003088:	187b      	adds	r3, r7, r1
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d902      	bls.n	8003096 <Start_user_interface+0x10e>
 8003090:	187b      	adds	r3, r7, r1
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]
			}
		}
		if (mode == MODE_MENU) {
 8003096:	230c      	movs	r3, #12
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d15b      	bne.n	8003158 <Start_user_interface+0x1d0>
			if (loop == 0) {
 80030a0:	230e      	movs	r3, #14
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <Start_user_interface+0x12a>
				display_menu_supervisor(&main_menu_supervisor);
 80030aa:	4b2f      	ldr	r3, [pc, #188]	; (8003168 <Start_user_interface+0x1e0>)
 80030ac:	0018      	movs	r0, r3
 80030ae:	f000 fa82 	bl	80035b6 <display_menu_supervisor>
			}
			if(main_menu_supervisor.exit) {
 80030b2:	4b2d      	ldr	r3, [pc, #180]	; (8003168 <Start_user_interface+0x1e0>)
 80030b4:	7a1b      	ldrb	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00e      	beq.n	80030d8 <Start_user_interface+0x150>
				main_menu_reset();
 80030ba:	f000 f859 	bl	8003170 <main_menu_reset>
				mode = MODE_SCREENSAVER;
 80030be:	230c      	movs	r3, #12
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
				loop+=1000;
 80030c6:	230e      	movs	r3, #14
 80030c8:	18fa      	adds	r2, r7, r3
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	21fa      	movs	r1, #250	; 0xfa
 80030d0:	0089      	lsls	r1, r1, #2
 80030d2:	468c      	mov	ip, r1
 80030d4:	4463      	add	r3, ip
 80030d6:	8013      	strh	r3, [r2, #0]
			}
			loop++;
 80030d8:	240e      	movs	r4, #14
 80030da:	193b      	adds	r3, r7, r4
 80030dc:	881a      	ldrh	r2, [r3, #0]
 80030de:	193b      	adds	r3, r7, r4
 80030e0:	3201      	adds	r2, #1
 80030e2:	801a      	strh	r2, [r3, #0]
			if (loop > 10000) {
 80030e4:	193b      	adds	r3, r7, r4
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	4a20      	ldr	r2, [pc, #128]	; (800316c <Start_user_interface+0x1e4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d90d      	bls.n	800310a <Start_user_interface+0x182>
				main_menu_reset();
 80030ee:	f000 f83f 	bl	8003170 <main_menu_reset>
				mode = MODE_SCREENSAVER;
 80030f2:	230c      	movs	r3, #12
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
				loop+=1000;
 80030fa:	193a      	adds	r2, r7, r4
 80030fc:	193b      	adds	r3, r7, r4
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	21fa      	movs	r1, #250	; 0xfa
 8003102:	0089      	lsls	r1, r1, #2
 8003104:	468c      	mov	ip, r1
 8003106:	4463      	add	r3, ip
 8003108:	8013      	strh	r3, [r2, #0]
			}
			if (is_clicked(0)) {
 800310a:	2000      	movs	r0, #0
 800310c:	f000 f9f6 	bl	80034fc <is_clicked>
 8003110:	1e03      	subs	r3, r0, #0
 8003112:	d007      	beq.n	8003124 <Start_user_interface+0x19c>
				loop = 0;
 8003114:	230e      	movs	r3, #14
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	2200      	movs	r2, #0
 800311a:	801a      	strh	r2, [r3, #0]
				menu_supervisor_up(&main_menu_supervisor);
 800311c:	4b12      	ldr	r3, [pc, #72]	; (8003168 <Start_user_interface+0x1e0>)
 800311e:	0018      	movs	r0, r3
 8003120:	f000 fa5c 	bl	80035dc <menu_supervisor_up>
			}
			if (is_clicked(1)) {
 8003124:	2001      	movs	r0, #1
 8003126:	f000 f9e9 	bl	80034fc <is_clicked>
 800312a:	1e03      	subs	r3, r0, #0
 800312c:	d007      	beq.n	800313e <Start_user_interface+0x1b6>
				loop = 0;
 800312e:	230e      	movs	r3, #14
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	2200      	movs	r2, #0
 8003134:	801a      	strh	r2, [r3, #0]
				menu_supervisor_center(&main_menu_supervisor);
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <Start_user_interface+0x1e0>)
 8003138:	0018      	movs	r0, r3
 800313a:	f000 faeb 	bl	8003714 <menu_supervisor_center>
			}
			if (is_clicked(2)) {
 800313e:	2002      	movs	r0, #2
 8003140:	f000 f9dc 	bl	80034fc <is_clicked>
 8003144:	1e03      	subs	r3, r0, #0
 8003146:	d007      	beq.n	8003158 <Start_user_interface+0x1d0>
				loop = 0;
 8003148:	230e      	movs	r3, #14
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	2200      	movs	r2, #0
 800314e:	801a      	strh	r2, [r3, #0]
				menu_supervisor_down(&main_menu_supervisor);
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <Start_user_interface+0x1e0>)
 8003152:	0018      	movs	r0, r3
 8003154:	f000 fa96 	bl	8003684 <menu_supervisor_down>
			}

		}
		osDelay(1);
 8003158:	2001      	movs	r0, #1
 800315a:	f004 faf1 	bl	8007740 <osDelay>
		if (mode == MODE_SCREENSAVER) {
 800315e:	e729      	b.n	8002fb4 <Start_user_interface+0x2c>
 8003160:	2000085c 	.word	0x2000085c
 8003164:	0800aae0 	.word	0x0800aae0
 8003168:	20000760 	.word	0x20000760
 800316c:	00002710 	.word	0x00002710

08003170 <main_menu_reset>:
	}
}

void main_menu_reset() {
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
	is_clicked(0);
 8003174:	2000      	movs	r0, #0
 8003176:	f000 f9c1 	bl	80034fc <is_clicked>
	is_clicked(1);
 800317a:	2001      	movs	r0, #1
 800317c:	f000 f9be 	bl	80034fc <is_clicked>
	is_clicked(2);
 8003180:	2002      	movs	r0, #2
 8003182:	f000 f9bb 	bl	80034fc <is_clicked>
	is_dblclicked(0);
 8003186:	2000      	movs	r0, #0
 8003188:	f000 f9d8 	bl	800353c <is_dblclicked>
	is_dblclicked(1);
 800318c:	2001      	movs	r0, #1
 800318e:	f000 f9d5 	bl	800353c <is_dblclicked>
	is_dblclicked(2);
 8003192:	2002      	movs	r0, #2
 8003194:	f000 f9d2 	bl	800353c <is_dblclicked>
	main_menu_supervisor.exit = 0; // Let's reset the flag
 8003198:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <main_menu_reset+0x48>)
 800319a:	2200      	movs	r2, #0
 800319c:	721a      	strb	r2, [r3, #8]
	main_menu_supervisor.cursor = 0;
 800319e:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <main_menu_reset+0x48>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	705a      	strb	r2, [r3, #1]
	main_menu_supervisor.cur_item = &main_menu;
 80031a4:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <main_menu_reset+0x48>)
 80031a6:	4a05      	ldr	r2, [pc, #20]	; (80031bc <main_menu_reset+0x4c>)
 80031a8:	605a      	str	r2, [r3, #4]
	main_menu_supervisor.start_item = 0;
 80031aa:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <main_menu_reset+0x48>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	20000760 	.word	0x20000760
 80031bc:	20000744 	.word	0x20000744

080031c0 <start_animation>:

void start_animation() {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80031c4:	f7ff f9db 	bl	800257e <SSD1306_Clear>
	SSD1306_GotoXY(0,0);
 80031c8:	2100      	movs	r1, #0
 80031ca:	2000      	movs	r0, #0
 80031cc:	f7fe ff1c 	bl	8002008 <SSD1306_GotoXY>
	SSD1306_Mirror(1, 1);
 80031d0:	2101      	movs	r1, #1
 80031d2:	2001      	movs	r0, #1
 80031d4:	f7fe fe78 	bl	8001ec8 <SSD1306_Mirror>
	SSD1306_ON();
 80031d8:	f7ff f9d9 	bl	800258e <SSD1306_ON>
	display_logo(1);
 80031dc:	2001      	movs	r0, #1
 80031de:	f7ff fd75 	bl	8002ccc <display_logo>
	osDelay(500);
 80031e2:	23fa      	movs	r3, #250	; 0xfa
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	0018      	movs	r0, r3
 80031e8:	f004 faaa 	bl	8007740 <osDelay>
	display_logo(2);
 80031ec:	2002      	movs	r0, #2
 80031ee:	f7ff fd6d 	bl	8002ccc <display_logo>
	osDelay(500);
 80031f2:	23fa      	movs	r3, #250	; 0xfa
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	0018      	movs	r0, r3
 80031f8:	f004 faa2 	bl	8007740 <osDelay>
	display_logo(3);
 80031fc:	2003      	movs	r0, #3
 80031fe:	f7ff fd65 	bl	8002ccc <display_logo>
	osDelay(500);
 8003202:	23fa      	movs	r3, #250	; 0xfa
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	0018      	movs	r0, r3
 8003208:	f004 fa9a 	bl	8007740 <osDelay>
	display_logo(2);
 800320c:	2002      	movs	r0, #2
 800320e:	f7ff fd5d 	bl	8002ccc <display_logo>
	osDelay(500);
 8003212:	23fa      	movs	r3, #250	; 0xfa
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	0018      	movs	r0, r3
 8003218:	f004 fa92 	bl	8007740 <osDelay>
	display_logo(1);
 800321c:	2001      	movs	r0, #1
 800321e:	f7ff fd55 	bl	8002ccc <display_logo>
	osDelay(2000);
 8003222:	23fa      	movs	r3, #250	; 0xfa
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	0018      	movs	r0, r3
 8003228:	f004 fa8a 	bl	8007740 <osDelay>
}
 800322c:	46c0      	nop			; (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <Start_keys_switcher>:

void Start_keys_switcher(void *argument) {
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  int frame = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
  for(int i=0;i<11;i++) turn_off(i);
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	e007      	b.n	8003254 <Start_keys_switcher+0x22>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	0018      	movs	r0, r3
 800324a:	f000 f85d 	bl	8003308 <turn_off>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3301      	adds	r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b0a      	cmp	r3, #10
 8003258:	ddf4      	ble.n	8003244 <Start_keys_switcher+0x12>
  for(;;) {
	frame++;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	3301      	adds	r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
	if(frame>5) {
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b05      	cmp	r3, #5
 8003264:	dd03      	ble.n	800326e <Start_keys_switcher+0x3c>
		buttons_update();
 8003266:	f000 f86d 	bl	8003344 <buttons_update>
		frame = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
	}
	app_update_relays();
 800326e:	f7fd fbcd 	bl	8000a0c <app_update_relays>
    osDelay(1);
 8003272:	2001      	movs	r0, #1
 8003274:	f004 fa64 	bl	8007740 <osDelay>
	frame++;
 8003278:	e7ef      	b.n	800325a <Start_keys_switcher+0x28>
	...

0800327c <Start_rs485_controller>:
  }
}

void Start_rs485_controller(void *argument) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	// Let's not touch the motors for 3 seconds
	osDelay(3000);
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <Start_rs485_controller+0x1c>)
 8003286:	0018      	movs	r0, r3
 8003288:	f004 fa5a 	bl	8007740 <osDelay>
	for(;;) {
		motor_loop();
 800328c:	f7fd f96c 	bl	8000568 <motor_loop>
		osDelay(1);
 8003290:	2001      	movs	r0, #1
 8003292:	f004 fa55 	bl	8007740 <osDelay>
		motor_loop();
 8003296:	e7f9      	b.n	800328c <Start_rs485_controller+0x10>
 8003298:	00000bb8 	.word	0x00000bb8

0800329c <HAL_TIM_PeriodElapsedCallback>:
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d101      	bne.n	80032b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80032ae:	f001 fceb 	bl	8004c88 <HAL_IncTick>
  }
}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b002      	add	sp, #8
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	40001000 	.word	0x40001000

080032c0 <Error_Handler>:

void Error_Handler(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032c4:	b672      	cpsid	i
}
 80032c6:	46c0      	nop			; (mov r8, r8)
  __disable_irq();
  while (1)
 80032c8:	e7fe      	b.n	80032c8 <Error_Handler+0x8>
	...

080032cc <turn_on>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

void turn_on(uint8_t key) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	0002      	movs	r2, r0
 80032d4:	1dfb      	adds	r3, r7, #7
 80032d6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(keys.relays[key].port, keys.relays[key].pin , GPIO_PIN_SET);
 80032d8:	1dfb      	adds	r3, r7, #7
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	4a09      	ldr	r2, [pc, #36]	; (8003304 <turn_on+0x38>)
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	18d3      	adds	r3, r2, r3
 80032e2:	3308      	adds	r3, #8
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	1dfb      	adds	r3, r7, #7
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	4a06      	ldr	r2, [pc, #24]	; (8003304 <turn_on+0x38>)
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	18d3      	adds	r3, r2, r3
 80032f0:	3304      	adds	r3, #4
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	2201      	movs	r2, #1
 80032f6:	0019      	movs	r1, r3
 80032f8:	f002 f91f 	bl	800553a <HAL_GPIO_WritePin>
}
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000860 	.word	0x20000860

08003308 <turn_off>:

void turn_off(uint8_t key) {
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	0002      	movs	r2, r0
 8003310:	1dfb      	adds	r3, r7, #7
 8003312:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(keys.relays[key].port, keys.relays[key].pin , GPIO_PIN_RESET);
 8003314:	1dfb      	adds	r3, r7, #7
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	4a09      	ldr	r2, [pc, #36]	; (8003340 <turn_off+0x38>)
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	18d3      	adds	r3, r2, r3
 800331e:	3308      	adds	r3, #8
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	1dfb      	adds	r3, r7, #7
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	4a06      	ldr	r2, [pc, #24]	; (8003340 <turn_off+0x38>)
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	18d3      	adds	r3, r2, r3
 800332c:	3304      	adds	r3, #4
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	2200      	movs	r2, #0
 8003332:	0019      	movs	r1, r3
 8003334:	f002 f901 	bl	800553a <HAL_GPIO_WritePin>
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b002      	add	sp, #8
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000860 	.word	0x20000860

08003344 <buttons_update>:

void buttons_update() {
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<BUTTONS_COUNT;i++) {
 800334a:	1dfb      	adds	r3, r7, #7
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e00c      	b.n	800336c <buttons_update+0x28>
		update_button(&btns.btn[i]);
 8003352:	1dfb      	adds	r3, r7, #7
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	011a      	lsls	r2, r3, #4
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <buttons_update+0x3c>)
 800335a:	18d3      	adds	r3, r2, r3
 800335c:	0018      	movs	r0, r3
 800335e:	f7fe faf3 	bl	8001948 <update_button>
	for(uint8_t i=0;i<BUTTONS_COUNT;i++) {
 8003362:	1dfb      	adds	r3, r7, #7
 8003364:	781a      	ldrb	r2, [r3, #0]
 8003366:	1dfb      	adds	r3, r7, #7
 8003368:	3201      	adds	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	1dfb      	adds	r3, r7, #7
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d9ee      	bls.n	8003352 <buttons_update+0xe>
	}
}
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	46bd      	mov	sp, r7
 800337a:	b002      	add	sp, #8
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	200008bc 	.word	0x200008bc

08003384 <is_acceptable>:

uint8_t is_acceptable(char k) {
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	0002      	movs	r2, r0
 800338c:	1dfb      	adds	r3, r7, #7
 800338e:	701a      	strb	r2, [r3, #0]
	if (k>='0' && k <='9') return 1;
 8003390:	1dfb      	adds	r3, r7, #7
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b2f      	cmp	r3, #47	; 0x2f
 8003396:	d905      	bls.n	80033a4 <is_acceptable+0x20>
 8003398:	1dfb      	adds	r3, r7, #7
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b39      	cmp	r3, #57	; 0x39
 800339e:	d801      	bhi.n	80033a4 <is_acceptable+0x20>
 80033a0:	2301      	movs	r3, #1
 80033a2:	e04a      	b.n	800343a <is_acceptable+0xb6>
	if (k=='+' || k=='-' || k=='|' || k=='-' || k=='/' || k==';' || k==':' || k=='?' || k==')' ||k=='.'|| k==',' || k==' '|| k=='!') return 1;
 80033a4:	1dfb      	adds	r3, r7, #7
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b2b      	cmp	r3, #43	; 0x2b
 80033aa:	d02f      	beq.n	800340c <is_acceptable+0x88>
 80033ac:	1dfb      	adds	r3, r7, #7
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b2d      	cmp	r3, #45	; 0x2d
 80033b2:	d02b      	beq.n	800340c <is_acceptable+0x88>
 80033b4:	1dfb      	adds	r3, r7, #7
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b7c      	cmp	r3, #124	; 0x7c
 80033ba:	d027      	beq.n	800340c <is_acceptable+0x88>
 80033bc:	1dfb      	adds	r3, r7, #7
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b2d      	cmp	r3, #45	; 0x2d
 80033c2:	d023      	beq.n	800340c <is_acceptable+0x88>
 80033c4:	1dfb      	adds	r3, r7, #7
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b2f      	cmp	r3, #47	; 0x2f
 80033ca:	d01f      	beq.n	800340c <is_acceptable+0x88>
 80033cc:	1dfb      	adds	r3, r7, #7
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b3b      	cmp	r3, #59	; 0x3b
 80033d2:	d01b      	beq.n	800340c <is_acceptable+0x88>
 80033d4:	1dfb      	adds	r3, r7, #7
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b3a      	cmp	r3, #58	; 0x3a
 80033da:	d017      	beq.n	800340c <is_acceptable+0x88>
 80033dc:	1dfb      	adds	r3, r7, #7
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b3f      	cmp	r3, #63	; 0x3f
 80033e2:	d013      	beq.n	800340c <is_acceptable+0x88>
 80033e4:	1dfb      	adds	r3, r7, #7
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b29      	cmp	r3, #41	; 0x29
 80033ea:	d00f      	beq.n	800340c <is_acceptable+0x88>
 80033ec:	1dfb      	adds	r3, r7, #7
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b2e      	cmp	r3, #46	; 0x2e
 80033f2:	d00b      	beq.n	800340c <is_acceptable+0x88>
 80033f4:	1dfb      	adds	r3, r7, #7
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b2c      	cmp	r3, #44	; 0x2c
 80033fa:	d007      	beq.n	800340c <is_acceptable+0x88>
 80033fc:	1dfb      	adds	r3, r7, #7
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b20      	cmp	r3, #32
 8003402:	d003      	beq.n	800340c <is_acceptable+0x88>
 8003404:	1dfb      	adds	r3, r7, #7
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b21      	cmp	r3, #33	; 0x21
 800340a:	d101      	bne.n	8003410 <is_acceptable+0x8c>
 800340c:	2301      	movs	r3, #1
 800340e:	e014      	b.n	800343a <is_acceptable+0xb6>
	if (k>='a' && k<='z') return 1;
 8003410:	1dfb      	adds	r3, r7, #7
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b60      	cmp	r3, #96	; 0x60
 8003416:	d905      	bls.n	8003424 <is_acceptable+0xa0>
 8003418:	1dfb      	adds	r3, r7, #7
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b7a      	cmp	r3, #122	; 0x7a
 800341e:	d801      	bhi.n	8003424 <is_acceptable+0xa0>
 8003420:	2301      	movs	r3, #1
 8003422:	e00a      	b.n	800343a <is_acceptable+0xb6>
	if (k>='A' && k<='Z') return 1;
 8003424:	1dfb      	adds	r3, r7, #7
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b40      	cmp	r3, #64	; 0x40
 800342a:	d905      	bls.n	8003438 <is_acceptable+0xb4>
 800342c:	1dfb      	adds	r3, r7, #7
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b5a      	cmp	r3, #90	; 0x5a
 8003432:	d801      	bhi.n	8003438 <is_acceptable+0xb4>
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <is_acceptable+0xb6>
	return 0;
 8003438:	2300      	movs	r3, #0
}
 800343a:	0018      	movs	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	b002      	add	sp, #8
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <receive_cmd>:

void receive_cmd(uint8_t sym) {
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	0002      	movs	r2, r0
 800344c:	1dfb      	adds	r3, r7, #7
 800344e:	701a      	strb	r2, [r3, #0]
	if (sym == '\n') usb_buf_cursor = 0;
 8003450:	1dfb      	adds	r3, r7, #7
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b0a      	cmp	r3, #10
 8003456:	d102      	bne.n	800345e <receive_cmd+0x1a>
 8003458:	4b1c      	ldr	r3, [pc, #112]	; (80034cc <receive_cmd+0x88>)
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
	if(!is_acceptable(sym)) return;
 800345e:	1dfb      	adds	r3, r7, #7
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	0018      	movs	r0, r3
 8003464:	f7ff ff8e 	bl	8003384 <is_acceptable>
 8003468:	1e03      	subs	r3, r0, #0
 800346a:	d02a      	beq.n	80034c2 <receive_cmd+0x7e>
	usb_buf[usb_buf_cursor+1] = 0;
 800346c:	4b17      	ldr	r3, [pc, #92]	; (80034cc <receive_cmd+0x88>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	3301      	adds	r3, #1
 8003472:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <receive_cmd+0x8c>)
 8003474:	2100      	movs	r1, #0
 8003476:	54d1      	strb	r1, [r2, r3]
	usb_buf[usb_buf_cursor] = (char)sym;
 8003478:	4b14      	ldr	r3, [pc, #80]	; (80034cc <receive_cmd+0x88>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	0019      	movs	r1, r3
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <receive_cmd+0x8c>)
 8003480:	1dfa      	adds	r2, r7, #7
 8003482:	7812      	ldrb	r2, [r2, #0]
 8003484:	545a      	strb	r2, [r3, r1]
	usb_buf_cursor++;
 8003486:	4b11      	ldr	r3, [pc, #68]	; (80034cc <receive_cmd+0x88>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	3301      	adds	r3, #1
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <receive_cmd+0x88>)
 8003490:	701a      	strb	r2, [r3, #0]
	if(usb_buf_cursor>=MAX_CMD_BUF) {
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <receive_cmd+0x88>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2bc0      	cmp	r3, #192	; 0xc0
 8003498:	d902      	bls.n	80034a0 <receive_cmd+0x5c>
		usb_buf_cursor = MAX_CMD_BUF - 1;
 800349a:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <receive_cmd+0x88>)
 800349c:	22c0      	movs	r2, #192	; 0xc0
 800349e:	701a      	strb	r2, [r3, #0]
	}
	if(sym == ';') {
 80034a0:	1dfb      	adds	r3, r7, #7
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b3b      	cmp	r3, #59	; 0x3b
 80034a6:	d10d      	bne.n	80034c4 <receive_cmd+0x80>
		cp(usb_buf, received_cmd, 0);
 80034a8:	490a      	ldr	r1, [pc, #40]	; (80034d4 <receive_cmd+0x90>)
 80034aa:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <receive_cmd+0x8c>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	0018      	movs	r0, r3
 80034b0:	f7fe f968 	bl	8001784 <cp>
		usb_buf_cursor = 0;
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <receive_cmd+0x88>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
		cmd_ready = 1;
 80034ba:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <receive_cmd+0x94>)
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	e000      	b.n	80034c4 <receive_cmd+0x80>
	if(!is_acceptable(sym)) return;
 80034c2:	46c0      	nop			; (mov r8, r8)
	}
}
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b002      	add	sp, #8
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	2000076c 	.word	0x2000076c
 80034d0:	20000770 	.word	0x20000770
 80034d4:	20000900 	.word	0x20000900
 80034d8:	2000085a 	.word	0x2000085a

080034dc <receive_motor1>:

void receive_motor1(uint8_t sym) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	0002      	movs	r2, r0
 80034e4:	1dfb      	adds	r3, r7, #7
 80034e6:	701a      	strb	r2, [r3, #0]
	app_push_motor_byte(sym);
 80034e8:	1dfb      	adds	r3, r7, #7
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	0018      	movs	r0, r3
 80034ee:	f7fd fa0d 	bl	800090c <app_push_motor_byte>
}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b002      	add	sp, #8
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <is_clicked>:

uint8_t is_clicked(uint8_t key) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	0002      	movs	r2, r0
 8003504:	1dfb      	adds	r3, r7, #7
 8003506:	701a      	strb	r2, [r3, #0]
  if(btns.btn[key].is_clicked) {
 8003508:	1dfb      	adds	r3, r7, #7
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <is_clicked+0x3c>)
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	18d3      	adds	r3, r2, r3
 8003512:	330a      	adds	r3, #10
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <is_clicked+0x32>
	  btns.btn[key].is_clicked = 0;
 800351a:	1dfb      	adds	r3, r7, #7
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	4a06      	ldr	r2, [pc, #24]	; (8003538 <is_clicked+0x3c>)
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	18d3      	adds	r3, r2, r3
 8003524:	330a      	adds	r3, #10
 8003526:	2200      	movs	r2, #0
 8003528:	701a      	strb	r2, [r3, #0]
	  return 1;
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <is_clicked+0x34>
  }
  return 0;
 800352e:	2300      	movs	r3, #0
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b002      	add	sp, #8
 8003536:	bd80      	pop	{r7, pc}
 8003538:	200008bc 	.word	0x200008bc

0800353c <is_dblclicked>:

uint8_t is_dblclicked(uint8_t key) {
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	0002      	movs	r2, r0
 8003544:	1dfb      	adds	r3, r7, #7
 8003546:	701a      	strb	r2, [r3, #0]
	if(btns.btn[key].is_dblclicked) {
 8003548:	1dfb      	adds	r3, r7, #7
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	4a0e      	ldr	r2, [pc, #56]	; (8003588 <is_dblclicked+0x4c>)
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	18d3      	adds	r3, r2, r3
 8003552:	330b      	adds	r3, #11
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d011      	beq.n	800357e <is_dblclicked+0x42>
		btns.btn[key].is_clicked = 0;
 800355a:	1dfb      	adds	r3, r7, #7
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <is_dblclicked+0x4c>)
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	18d3      	adds	r3, r2, r3
 8003564:	330a      	adds	r3, #10
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
		btns.btn[key].is_dblclicked = 0;
 800356a:	1dfb      	adds	r3, r7, #7
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	4a06      	ldr	r2, [pc, #24]	; (8003588 <is_dblclicked+0x4c>)
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	18d3      	adds	r3, r2, r3
 8003574:	330b      	adds	r3, #11
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]
		return 1;
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <is_dblclicked+0x44>
	}
	return 0;
 800357e:	2300      	movs	r3, #0
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	b002      	add	sp, #8
 8003586:	bd80      	pop	{r7, pc}
 8003588:	200008bc 	.word	0x200008bc

0800358c <menu_supervisor_init>:
 */

#include "menu.h"
#include "app.h"

void menu_supervisor_init(menu_supervisor * s, menu * main_menu){
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
	s->cur_item = main_menu;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	605a      	str	r2, [r3, #4]
	s->start_item = 0;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
	s->cursor = 0;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	705a      	strb	r2, [r3, #1]
	s->exit = 0;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	721a      	strb	r2, [r3, #8]
}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b002      	add	sp, #8
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <display_menu_supervisor>:

void display_menu_supervisor(menu_supervisor * s) {
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
	display_menu_item(s->cur_item, s->start_item, s->cursor);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6858      	ldr	r0, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2100      	movs	r1, #0
 80035c6:	5659      	ldrsb	r1, [r3, r1]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	b25b      	sxtb	r3, r3
 80035ce:	001a      	movs	r2, r3
 80035d0:	f000 fbf4 	bl	8003dbc <display_menu_item>
}
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}

080035dc <menu_supervisor_up>:

void menu_supervisor_up(menu_supervisor * s) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	if (s->cursor <= 0) { // If its already the first element
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	785b      	ldrb	r3, [r3, #1]
 80035e8:	b25b      	sxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	dc19      	bgt.n	8003622 <menu_supervisor_up+0x46>
		if (s->cur_item->size < MAX_MENU_LINES) {
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	7a1b      	ldrb	r3, [r3, #8]
 80035f4:	2b05      	cmp	r3, #5
 80035f6:	d803      	bhi.n	8003600 <menu_supervisor_up+0x24>
			s->start_item = 0;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	e007      	b.n	8003610 <menu_supervisor_up+0x34>
		} else {
			s->start_item =  1 + s->cur_item->size - MAX_MENU_LINES;;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	7a1b      	ldrb	r3, [r3, #8]
 8003606:	3b05      	subs	r3, #5
 8003608:	b2db      	uxtb	r3, r3
 800360a:	b25a      	sxtb	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	701a      	strb	r2, [r3, #0]
		}
		s->cursor = s->cur_item->size - 1;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	7a1b      	ldrb	r3, [r3, #8]
 8003616:	3b01      	subs	r3, #1
 8003618:	b2db      	uxtb	r3, r3
 800361a:	b25a      	sxtb	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	705a      	strb	r2, [r3, #1]
		return;
 8003620:	e02d      	b.n	800367e <menu_supervisor_up+0xa2>
	}
	int8_t curLine = s->cursor - s->start_item;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	785b      	ldrb	r3, [r3, #1]
 8003626:	b25b      	sxtb	r3, r3
 8003628:	b2da      	uxtb	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	b25b      	sxtb	r3, r3
 8003630:	b2db      	uxtb	r3, r3
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	b2da      	uxtb	r2, r3
 8003636:	210f      	movs	r1, #15
 8003638:	187b      	adds	r3, r7, r1
 800363a:	701a      	strb	r2, [r3, #0]
	if (curLine <=0) { // if we're already on the first line
 800363c:	187b      	adds	r3, r7, r1
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	b25b      	sxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	dc12      	bgt.n	800366c <menu_supervisor_up+0x90>
		s->cursor--;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	785b      	ldrb	r3, [r3, #1]
 800364a:	b25b      	sxtb	r3, r3
 800364c:	b2db      	uxtb	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b2db      	uxtb	r3, r3
 8003652:	b25a      	sxtb	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	705a      	strb	r2, [r3, #1]
		s->start_item--;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b25b      	sxtb	r3, r3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b2db      	uxtb	r3, r3
 8003664:	b25a      	sxtb	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	701a      	strb	r2, [r3, #0]
		return;
 800366a:	e008      	b.n	800367e <menu_supervisor_up+0xa2>
	}
	s->cursor--;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	785b      	ldrb	r3, [r3, #1]
 8003670:	b25b      	sxtb	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b2db      	uxtb	r3, r3
 8003678:	b25a      	sxtb	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	705a      	strb	r2, [r3, #1]
}
 800367e:	46bd      	mov	sp, r7
 8003680:	b004      	add	sp, #16
 8003682:	bd80      	pop	{r7, pc}

08003684 <menu_supervisor_down>:

void menu_supervisor_down(menu_supervisor * s) {
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	if (s->cursor >= s->cur_item->size-1) { // If its already the latest element
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	785b      	ldrb	r3, [r3, #1]
 8003690:	b25b      	sxtb	r3, r3
 8003692:	001a      	movs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	7a1b      	ldrb	r3, [r3, #8]
 800369a:	3b01      	subs	r3, #1
 800369c:	429a      	cmp	r2, r3
 800369e:	db06      	blt.n	80036ae <menu_supervisor_down+0x2a>
		s->start_item = 0;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
		s->cursor = 0;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	705a      	strb	r2, [r3, #1]
		return;
 80036ac:	e02f      	b.n	800370e <menu_supervisor_down+0x8a>
	}
	int8_t curLine = s->cursor - s->start_item + 1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	785b      	ldrb	r3, [r3, #1]
 80036b2:	b25b      	sxtb	r3, r3
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	b25b      	sxtb	r3, r3
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	3301      	adds	r3, #1
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	210f      	movs	r1, #15
 80036c8:	187b      	adds	r3, r7, r1
 80036ca:	701a      	strb	r2, [r3, #0]
	if (curLine >= MAX_MENU_LINES - 1) { // if we're already on the last line
 80036cc:	187b      	adds	r3, r7, r1
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	b25b      	sxtb	r3, r3
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	dd12      	ble.n	80036fc <menu_supervisor_down+0x78>
		s->cursor++;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	785b      	ldrb	r3, [r3, #1]
 80036da:	b25b      	sxtb	r3, r3
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	3301      	adds	r3, #1
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	b25a      	sxtb	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	705a      	strb	r2, [r3, #1]
		s->start_item++;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b25b      	sxtb	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	3301      	adds	r3, #1
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	b25a      	sxtb	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	701a      	strb	r2, [r3, #0]
		return;
 80036fa:	e008      	b.n	800370e <menu_supervisor_down+0x8a>
	}
	s->cursor++;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	785b      	ldrb	r3, [r3, #1]
 8003700:	b25b      	sxtb	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	3301      	adds	r3, #1
 8003706:	b2db      	uxtb	r3, r3
 8003708:	b25a      	sxtb	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	705a      	strb	r2, [r3, #1]
}
 800370e:	46bd      	mov	sp, r7
 8003710:	b004      	add	sp, #16
 8003712:	bd80      	pop	{r7, pc}

08003714 <menu_supervisor_center>:

void menu_supervisor_center(menu_supervisor * s) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	menu * selected_item = &(s->cur_item->items[s->cursor]);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	785b      	ldrb	r3, [r3, #1]
 8003726:	b25b      	sxtb	r3, r3
 8003728:	0019      	movs	r1, r3
 800372a:	000b      	movs	r3, r1
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	1a5b      	subs	r3, r3, r1
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	18d3      	adds	r3, r2, r3
 8003734:	60fb      	str	r3, [r7, #12]

	if (selected_item->action != 0) {
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <menu_supervisor_center+0x3a>
		void * arg = selected_item->action_arg;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	60bb      	str	r3, [r7, #8]
		selected_item->action(arg);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	0010      	movs	r0, r2
 800374c:	4798      	blx	r3
	}
}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	b004      	add	sp, #16
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <menu_init>:

void menu_init(menu * main_menu, menu_supervisor *s) {
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
	int N1 = 5;
 8003762:	2305      	movs	r3, #5
 8003764:	60bb      	str	r3, [r7, #8]
	main_menu->id = 1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	701a      	strb	r2, [r3, #0]
	main_menu->size = N1;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	721a      	strb	r2, [r3, #8]
	main_menu->heading = STR_MAIN_MENU_CAPTION;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a2e      	ldr	r2, [pc, #184]	; (8003830 <menu_init+0xd8>)
 8003778:	605a      	str	r2, [r3, #4]
	main_menu->parent = 0;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	611a      	str	r2, [r3, #16]
	main_menu->action = 0;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	615a      	str	r2, [r3, #20]
	main_menu->action_arg = 0;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	619a      	str	r2, [r3, #24]

	main_menu->items = malloc(N1*sizeof(menu));
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	0013      	movs	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	0018      	movs	r0, r3
 8003798:	f006 f8e8 	bl	800996c <malloc>
 800379c:	0003      	movs	r3, r0
 800379e:	001a      	movs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	60da      	str	r2, [r3, #12]
	// Let's set up a parent for all
	for (int8_t i=0;i<N1;i++) {
 80037a4:	230f      	movs	r3, #15
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
 80037ac:	e014      	b.n	80037d8 <menu_init+0x80>
		main_menu->items[i].parent = main_menu;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68d9      	ldr	r1, [r3, #12]
 80037b2:	200f      	movs	r0, #15
 80037b4:	183b      	adds	r3, r7, r0
 80037b6:	2200      	movs	r2, #0
 80037b8:	569a      	ldrsb	r2, [r3, r2]
 80037ba:	0013      	movs	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	18cb      	adds	r3, r1, r3
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	611a      	str	r2, [r3, #16]
	for (int8_t i=0;i<N1;i++) {
 80037c8:	183b      	adds	r3, r7, r0
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	b25b      	sxtb	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	3301      	adds	r3, #1
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	183b      	adds	r3, r7, r0
 80037d6:	701a      	strb	r2, [r3, #0]
 80037d8:	230f      	movs	r3, #15
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	b25b      	sxtb	r3, r3
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	dce3      	bgt.n	80037ae <menu_init+0x56>
	}

	init_post_number_menu(&main_menu->items[0], s);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	0011      	movs	r1, r2
 80037ee:	0018      	movs	r0, r3
 80037f0:	f000 f8ac 	bl	800394c <init_post_number_menu>
	init_mode_menu(&main_menu->items[1]);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	331c      	adds	r3, #28
 80037fa:	0018      	movs	r0, r3
 80037fc:	f000 f984 	bl	8003b08 <init_mode_menu>
	init_motors_menu(&main_menu->items[2]);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	3338      	adds	r3, #56	; 0x38
 8003806:	0018      	movs	r0, r3
 8003808:	f000 f9e2 	bl	8003bd0 <init_motors_menu>
	init_test_menu(&main_menu->items[3]);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	3354      	adds	r3, #84	; 0x54
 8003812:	0018      	movs	r0, r3
 8003814:	f000 f856 	bl	80038c4 <init_test_menu>
	init_exit_menu(&main_menu->items[4], s);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	3370      	adds	r3, #112	; 0x70
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	0011      	movs	r1, r2
 8003822:	0018      	movs	r0, r3
 8003824:	f000 f870 	bl	8003908 <init_exit_menu>
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	b004      	add	sp, #16
 800382e:	bd80      	pop	{r7, pc}
 8003830:	0800ab5c 	.word	0x0800ab5c

08003834 <str_by_num>:

const char * str_by_num(uint8_t num) {
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	0002      	movs	r2, r0
 800383c:	1dfb      	adds	r3, r7, #7
 800383e:	701a      	strb	r2, [r3, #0]
	switch (num) {
 8003840:	1dfb      	adds	r3, r7, #7
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b0c      	cmp	r3, #12
 8003846:	d81c      	bhi.n	8003882 <str_by_num+0x4e>
 8003848:	009a      	lsls	r2, r3, #2
 800384a:	4b10      	ldr	r3, [pc, #64]	; (800388c <str_by_num+0x58>)
 800384c:	18d3      	adds	r3, r2, r3
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	469f      	mov	pc, r3
	    case 1:
	    	return STR_MOTORS_01;
 8003852:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <str_by_num+0x5c>)
 8003854:	e016      	b.n	8003884 <str_by_num+0x50>
	    case 2:
			return STR_MOTORS_02;
 8003856:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <str_by_num+0x60>)
 8003858:	e014      	b.n	8003884 <str_by_num+0x50>
	    case 3:
			return STR_MOTORS_03;
 800385a:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <str_by_num+0x64>)
 800385c:	e012      	b.n	8003884 <str_by_num+0x50>
	    case 4:
			return STR_MOTORS_04;
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <str_by_num+0x68>)
 8003860:	e010      	b.n	8003884 <str_by_num+0x50>
	    case 5:
			return STR_MOTORS_05;
 8003862:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <str_by_num+0x6c>)
 8003864:	e00e      	b.n	8003884 <str_by_num+0x50>
	    case 6:
			return STR_MOTORS_06;
 8003866:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <str_by_num+0x70>)
 8003868:	e00c      	b.n	8003884 <str_by_num+0x50>
	    case 7:
			return STR_MOTORS_07;
 800386a:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <str_by_num+0x74>)
 800386c:	e00a      	b.n	8003884 <str_by_num+0x50>
	    case 8:
			return STR_MOTORS_08;
 800386e:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <str_by_num+0x78>)
 8003870:	e008      	b.n	8003884 <str_by_num+0x50>
	    case 9:
			return STR_MOTORS_09;
 8003872:	4b0f      	ldr	r3, [pc, #60]	; (80038b0 <str_by_num+0x7c>)
 8003874:	e006      	b.n	8003884 <str_by_num+0x50>
	    case 10:
			return STR_MOTORS_10;
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <str_by_num+0x80>)
 8003878:	e004      	b.n	8003884 <str_by_num+0x50>
	    case 11:
			return STR_MOTORS_11;
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <str_by_num+0x84>)
 800387c:	e002      	b.n	8003884 <str_by_num+0x50>
	    case 12:
			return STR_MOTORS_12;
 800387e:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <str_by_num+0x88>)
 8003880:	e000      	b.n	8003884 <str_by_num+0x50>

	    default:
	    	return "X";
 8003882:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <str_by_num+0x8c>)
	}
	return "XX";
}
 8003884:	0018      	movs	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}
 800388c:	0800dd44 	.word	0x0800dd44
 8003890:	0800ab68 	.word	0x0800ab68
 8003894:	0800ab6c 	.word	0x0800ab6c
 8003898:	0800ab70 	.word	0x0800ab70
 800389c:	0800ab74 	.word	0x0800ab74
 80038a0:	0800ab78 	.word	0x0800ab78
 80038a4:	0800ab7c 	.word	0x0800ab7c
 80038a8:	0800ab80 	.word	0x0800ab80
 80038ac:	0800ab84 	.word	0x0800ab84
 80038b0:	0800ab88 	.word	0x0800ab88
 80038b4:	0800ab8c 	.word	0x0800ab8c
 80038b8:	0800ab90 	.word	0x0800ab90
 80038bc:	0800ab94 	.word	0x0800ab94
 80038c0:	0800ab98 	.word	0x0800ab98

080038c4 <init_test_menu>:

void init_test_menu(menu * test_menu) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	test_menu->id = 6;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2206      	movs	r2, #6
 80038d0:	701a      	strb	r2, [r3, #0]
	test_menu->size = 0;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	721a      	strb	r2, [r3, #8]
	test_menu->is_selected = 0;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	725a      	strb	r2, [r3, #9]
	test_menu->items = 0;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	60da      	str	r2, [r3, #12]
	test_menu->heading = STR_TEST_RELAYS;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a06      	ldr	r2, [pc, #24]	; (8003900 <init_test_menu+0x3c>)
 80038e8:	605a      	str	r2, [r3, #4]
	test_menu->action = act_test_relays;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a05      	ldr	r2, [pc, #20]	; (8003904 <init_test_menu+0x40>)
 80038ee:	615a      	str	r2, [r3, #20]
	test_menu->action_arg = 0;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	619a      	str	r2, [r3, #24]
}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b002      	add	sp, #8
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	0800ab9c 	.word	0x0800ab9c
 8003904:	08004035 	.word	0x08004035

08003908 <init_exit_menu>:

void init_exit_menu(menu * exit_menu, menu_supervisor *s) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
	exit_menu->id = 7;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2207      	movs	r2, #7
 8003916:	701a      	strb	r2, [r3, #0]
	exit_menu->size = 0;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	721a      	strb	r2, [r3, #8]
	exit_menu->items = 0;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	60da      	str	r2, [r3, #12]
	exit_menu->heading = STR_EXIT;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a07      	ldr	r2, [pc, #28]	; (8003944 <init_exit_menu+0x3c>)
 8003928:	605a      	str	r2, [r3, #4]
	exit_menu->action = act_exit;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a06      	ldr	r2, [pc, #24]	; (8003948 <init_exit_menu+0x40>)
 800392e:	615a      	str	r2, [r3, #20]
	exit_menu->action_arg = s;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	619a      	str	r2, [r3, #24]
	exit_menu->is_selected = 0;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	725a      	strb	r2, [r3, #9]
}
 800393c:	46c0      	nop			; (mov r8, r8)
 800393e:	46bd      	mov	sp, r7
 8003940:	b002      	add	sp, #8
 8003942:	bd80      	pop	{r7, pc}
 8003944:	0800aba8 	.word	0x0800aba8
 8003948:	08004019 	.word	0x08004019

0800394c <init_post_number_menu>:

void init_post_number_menu(menu * post_num, menu_supervisor *s) {
 800394c:	b5b0      	push	{r4, r5, r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
	post_num->id = 2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2202      	movs	r2, #2
 800395a:	701a      	strb	r2, [r3, #0]
	post_num->size = TOTAL_POSTS + 1;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	220d      	movs	r2, #13
 8003960:	721a      	strb	r2, [r3, #8]
	post_num->heading = STR_MAIN_ITEM_POST_NUM;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a63      	ldr	r2, [pc, #396]	; (8003af4 <init_post_number_menu+0x1a8>)
 8003966:	605a      	str	r2, [r3, #4]
	post_num->items = malloc((TOTAL_POSTS + 1)*sizeof(menu));
 8003968:	23b6      	movs	r3, #182	; 0xb6
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	0018      	movs	r0, r3
 800396e:	f005 fffd 	bl	800996c <malloc>
 8003972:	0003      	movs	r3, r0
 8003974:	001a      	movs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	60da      	str	r2, [r3, #12]
	post_num->is_selected = 0;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	725a      	strb	r2, [r3, #9]
	act_submenu_arg * args = malloc(sizeof(act_submenu_arg)); // will never be destroyed
 8003980:	2008      	movs	r0, #8
 8003982:	f005 fff3 	bl	800996c <malloc>
 8003986:	0003      	movs	r3, r0
 8003988:	613b      	str	r3, [r7, #16]

	args->m = post_num;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	605a      	str	r2, [r3, #4]
	args->s = s;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	601a      	str	r2, [r3, #0]

	post_num->action = act_submenu_pos;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a57      	ldr	r2, [pc, #348]	; (8003af8 <init_post_number_menu+0x1ac>)
 800399a:	615a      	str	r2, [r3, #20]
	post_num->action_arg = args;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	619a      	str	r2, [r3, #24]

	for (uint8_t i=1;i<=TOTAL_POSTS;i++) {
 80039a2:	2317      	movs	r3, #23
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
 80039aa:	e06a      	b.n	8003a82 <init_post_number_menu+0x136>
		post_num->items[i-1].id = i;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68d9      	ldr	r1, [r3, #12]
 80039b0:	2017      	movs	r0, #23
 80039b2:	183b      	adds	r3, r7, r0
 80039b4:	781a      	ldrb	r2, [r3, #0]
 80039b6:	0013      	movs	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	3b1c      	subs	r3, #28
 80039c0:	18cb      	adds	r3, r1, r3
 80039c2:	183a      	adds	r2, r7, r0
 80039c4:	7812      	ldrb	r2, [r2, #0]
 80039c6:	701a      	strb	r2, [r3, #0]
		post_num->items[i-1].size = 0;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68d9      	ldr	r1, [r3, #12]
 80039cc:	183b      	adds	r3, r7, r0
 80039ce:	781a      	ldrb	r2, [r3, #0]
 80039d0:	0013      	movs	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	3b1c      	subs	r3, #28
 80039da:	18cb      	adds	r3, r1, r3
 80039dc:	2200      	movs	r2, #0
 80039de:	721a      	strb	r2, [r3, #8]
		post_num->items[i-1].heading = str_by_num(i);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68d9      	ldr	r1, [r3, #12]
 80039e4:	183b      	adds	r3, r7, r0
 80039e6:	781a      	ldrb	r2, [r3, #0]
 80039e8:	0013      	movs	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	3b1c      	subs	r3, #28
 80039f2:	18cc      	adds	r4, r1, r3
 80039f4:	0005      	movs	r5, r0
 80039f6:	197b      	adds	r3, r7, r5
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	0018      	movs	r0, r3
 80039fc:	f7ff ff1a 	bl	8003834 <str_by_num>
 8003a00:	0003      	movs	r3, r0
 8003a02:	6063      	str	r3, [r4, #4]
		post_num->items[i-1].items = 0;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68d9      	ldr	r1, [r3, #12]
 8003a08:	197b      	adds	r3, r7, r5
 8003a0a:	781a      	ldrb	r2, [r3, #0]
 8003a0c:	0013      	movs	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	3b1c      	subs	r3, #28
 8003a16:	18cb      	adds	r3, r1, r3
 8003a18:	2200      	movs	r2, #0
 8003a1a:	60da      	str	r2, [r3, #12]
		post_num->items[i-1].action = act_set_active;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68d9      	ldr	r1, [r3, #12]
 8003a20:	197b      	adds	r3, r7, r5
 8003a22:	781a      	ldrb	r2, [r3, #0]
 8003a24:	0013      	movs	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	3b1c      	subs	r3, #28
 8003a2e:	18cb      	adds	r3, r1, r3
 8003a30:	4a32      	ldr	r2, [pc, #200]	; (8003afc <init_post_number_menu+0x1b0>)
 8003a32:	615a      	str	r2, [r3, #20]
		post_num->items[i-1].action_arg = &(post_num->items[i-1]);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68d8      	ldr	r0, [r3, #12]
 8003a38:	197b      	adds	r3, r7, r5
 8003a3a:	781a      	ldrb	r2, [r3, #0]
 8003a3c:	0013      	movs	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	3b1c      	subs	r3, #28
 8003a46:	0019      	movs	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68dc      	ldr	r4, [r3, #12]
 8003a4c:	197b      	adds	r3, r7, r5
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	0013      	movs	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	3b1c      	subs	r3, #28
 8003a5a:	18e3      	adds	r3, r4, r3
 8003a5c:	1842      	adds	r2, r0, r1
 8003a5e:	619a      	str	r2, [r3, #24]
		post_num->items[i-1].parent = post_num;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68d9      	ldr	r1, [r3, #12]
 8003a64:	197b      	adds	r3, r7, r5
 8003a66:	781a      	ldrb	r2, [r3, #0]
 8003a68:	0013      	movs	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	3b1c      	subs	r3, #28
 8003a72:	18cb      	adds	r3, r1, r3
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	611a      	str	r2, [r3, #16]
	for (uint8_t i=1;i<=TOTAL_POSTS;i++) {
 8003a78:	197b      	adds	r3, r7, r5
 8003a7a:	781a      	ldrb	r2, [r3, #0]
 8003a7c:	197b      	adds	r3, r7, r5
 8003a7e:	3201      	adds	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	2317      	movs	r3, #23
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b0c      	cmp	r3, #12
 8003a8a:	d98f      	bls.n	80039ac <init_post_number_menu+0x60>
	}

	// exit item
	post_num->items[TOTAL_POSTS].id = 0; // TO DO remove id field
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	3351      	adds	r3, #81	; 0x51
 8003a92:	33ff      	adds	r3, #255	; 0xff
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]
	post_num->items[TOTAL_POSTS].size = 0;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	3351      	adds	r3, #81	; 0x51
 8003a9e:	33ff      	adds	r3, #255	; 0xff
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	721a      	strb	r2, [r3, #8]
	post_num->items[TOTAL_POSTS].heading = STR_BACK;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	3351      	adds	r3, #81	; 0x51
 8003aaa:	33ff      	adds	r3, #255	; 0xff
 8003aac:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <init_post_number_menu+0x1b4>)
 8003aae:	605a      	str	r2, [r3, #4]
	post_num->items[TOTAL_POSTS].items = 0;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	3351      	adds	r3, #81	; 0x51
 8003ab6:	33ff      	adds	r3, #255	; 0xff
 8003ab8:	2200      	movs	r2, #0
 8003aba:	60da      	str	r2, [r3, #12]
	post_num->items[TOTAL_POSTS].action = act_goto_parent;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	3351      	adds	r3, #81	; 0x51
 8003ac2:	33ff      	adds	r3, #255	; 0xff
 8003ac4:	4a0f      	ldr	r2, [pc, #60]	; (8003b04 <init_post_number_menu+0x1b8>)
 8003ac6:	615a      	str	r2, [r3, #20]
	act_goto_parent_arg * post_args_back = malloc(sizeof(act_goto_parent_arg)); // never deleted
 8003ac8:	2008      	movs	r0, #8
 8003aca:	f005 ff4f 	bl	800996c <malloc>
 8003ace:	0003      	movs	r3, r0
 8003ad0:	60fb      	str	r3, [r7, #12]
	post_args_back->m = post_num;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	605a      	str	r2, [r3, #4]
	post_args_back->s = s;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	601a      	str	r2, [r3, #0]
	post_num->items[TOTAL_POSTS].action_arg = post_args_back;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	3351      	adds	r3, #81	; 0x51
 8003ae4:	33ff      	adds	r3, #255	; 0xff
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	619a      	str	r2, [r3, #24]
}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b006      	add	sp, #24
 8003af0:	bdb0      	pop	{r4, r5, r7, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	0800abb0 	.word	0x0800abb0
 8003af8:	08003f71 	.word	0x08003f71
 8003afc:	080040e5 	.word	0x080040e5
 8003b00:	0800abbc 	.word	0x0800abbc
 8003b04:	08004055 	.word	0x08004055

08003b08 <init_mode_menu>:

void init_mode_menu(menu * modemenu) {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	int N3 = 2;
 8003b10:	2302      	movs	r3, #2
 8003b12:	60fb      	str	r3, [r7, #12]
	modemenu->id = 3;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2203      	movs	r2, #3
 8003b18:	701a      	strb	r2, [r3, #0]
	modemenu->size = N3;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	721a      	strb	r2, [r3, #8]
	modemenu->heading = STR_MAIN_ITEM_POST_MODE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a27      	ldr	r2, [pc, #156]	; (8003bc4 <init_mode_menu+0xbc>)
 8003b26:	605a      	str	r2, [r3, #4]
	modemenu->items = malloc(N3*sizeof(menu));
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	0013      	movs	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	0018      	movs	r0, r3
 8003b34:	f005 ff1a 	bl	800996c <malloc>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	001a      	movs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	60da      	str	r2, [r3, #12]
	modemenu->action = 0;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	615a      	str	r2, [r3, #20]
	modemenu->is_selected = 0;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	725a      	strb	r2, [r3, #9]


	// relay mode
	modemenu->items[0].id = modemenu->id * ID_OFFST + 1;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	3201      	adds	r2, #1
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]
	modemenu->items[0].size = 0;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	721a      	strb	r2, [r3, #8]
	modemenu->items[0].heading = STR_WORK_MODE_RELAY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	4a17      	ldr	r2, [pc, #92]	; (8003bc8 <init_mode_menu+0xc0>)
 8003b6c:	605a      	str	r2, [r3, #4]
	modemenu->items[0].items = 0;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	60da      	str	r2, [r3, #12]
	modemenu->items[0].action = 0;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	615a      	str	r2, [r3, #20]

	// motor control mode
	modemenu->items[1].id = modemenu->id * ID_OFFST + 2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	331c      	adds	r3, #28
 8003b8c:	3202      	adds	r2, #2
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]
	modemenu->items[1].size = 0;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	331c      	adds	r3, #28
 8003b98:	2200      	movs	r2, #0
 8003b9a:	721a      	strb	r2, [r3, #8]
	modemenu->items[1].heading = STR_WORK_MODE_MOTOR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	331c      	adds	r3, #28
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <init_mode_menu+0xc4>)
 8003ba4:	605a      	str	r2, [r3, #4]
	modemenu->items[1].items = 0;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	331c      	adds	r3, #28
 8003bac:	2200      	movs	r2, #0
 8003bae:	60da      	str	r2, [r3, #12]
	modemenu->items[1].action = 0;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	331c      	adds	r3, #28
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	615a      	str	r2, [r3, #20]
}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b004      	add	sp, #16
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	0800abc8 	.word	0x0800abc8
 8003bc8:	0800abd0 	.word	0x0800abd0
 8003bcc:	0800abe0 	.word	0x0800abe0

08003bd0 <init_motors_menu>:

void init_motors_menu(menu * motorsmenu) {
 8003bd0:	b5b0      	push	{r4, r5, r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	motorsmenu->id = ID_MOTORSMENU;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2204      	movs	r2, #4
 8003bdc:	701a      	strb	r2, [r3, #0]
	motorsmenu->size = TOTAL_POSTS;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	220c      	movs	r2, #12
 8003be2:	721a      	strb	r2, [r3, #8]
	motorsmenu->heading = STR_MAIN_ITEM_POST_MOTORS;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a4b      	ldr	r2, [pc, #300]	; (8003d14 <init_motors_menu+0x144>)
 8003be8:	605a      	str	r2, [r3, #4]
	motorsmenu->items = malloc(TOTAL_POSTS*sizeof(menu));
 8003bea:	23a8      	movs	r3, #168	; 0xa8
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f005 febc 	bl	800996c <malloc>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	001a      	movs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	60da      	str	r2, [r3, #12]
	motorsmenu->action = 0;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	615a      	str	r2, [r3, #20]
	motorsmenu->is_selected = 0;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	725a      	strb	r2, [r3, #9]
	for (uint8_t i=1; i<=TOTAL_POSTS; i++) {
 8003c08:	230f      	movs	r3, #15
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	701a      	strb	r2, [r3, #0]
 8003c10:	e076      	b.n	8003d00 <init_motors_menu+0x130>
		motorsmenu->items[i-1].id = motorsmenu->id * ID_OFFST + i;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	b2d9      	uxtb	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68d8      	ldr	r0, [r3, #12]
 8003c1e:	240f      	movs	r4, #15
 8003c20:	193b      	adds	r3, r7, r4
 8003c22:	781a      	ldrb	r2, [r3, #0]
 8003c24:	0013      	movs	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	3b1c      	subs	r3, #28
 8003c2e:	18c3      	adds	r3, r0, r3
 8003c30:	0020      	movs	r0, r4
 8003c32:	183a      	adds	r2, r7, r0
 8003c34:	7812      	ldrb	r2, [r2, #0]
 8003c36:	188a      	adds	r2, r1, r2
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	701a      	strb	r2, [r3, #0]
		int N4 = 3;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	60bb      	str	r3, [r7, #8]
		motorsmenu->items[i-1].size = N4;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68d9      	ldr	r1, [r3, #12]
 8003c44:	183b      	adds	r3, r7, r0
 8003c46:	781a      	ldrb	r2, [r3, #0]
 8003c48:	0013      	movs	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	3b1c      	subs	r3, #28
 8003c52:	18cb      	adds	r3, r1, r3
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	721a      	strb	r2, [r3, #8]
		motorsmenu->items[i-1].heading = str_by_num(i);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68d9      	ldr	r1, [r3, #12]
 8003c5e:	0005      	movs	r5, r0
 8003c60:	197b      	adds	r3, r7, r5
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	0013      	movs	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	3b1c      	subs	r3, #28
 8003c6e:	18cc      	adds	r4, r1, r3
 8003c70:	197b      	adds	r3, r7, r5
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	0018      	movs	r0, r3
 8003c76:	f7ff fddd 	bl	8003834 <str_by_num>
 8003c7a:	0003      	movs	r3, r0
 8003c7c:	6063      	str	r3, [r4, #4]
		motorsmenu->items[i-1].items = malloc(N4*sizeof(menu));
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	0013      	movs	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	0018      	movs	r0, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68d9      	ldr	r1, [r3, #12]
 8003c8e:	197b      	adds	r3, r7, r5
 8003c90:	781a      	ldrb	r2, [r3, #0]
 8003c92:	0013      	movs	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	3b1c      	subs	r3, #28
 8003c9c:	18cc      	adds	r4, r1, r3
 8003c9e:	f005 fe65 	bl	800996c <malloc>
 8003ca2:	0003      	movs	r3, r0
 8003ca4:	60e3      	str	r3, [r4, #12]
		motorsmenu->items[i-1].action = 0;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68d9      	ldr	r1, [r3, #12]
 8003caa:	197b      	adds	r3, r7, r5
 8003cac:	781a      	ldrb	r2, [r3, #0]
 8003cae:	0013      	movs	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	3b1c      	subs	r3, #28
 8003cb8:	18cb      	adds	r3, r1, r3
 8003cba:	2200      	movs	r2, #0
 8003cbc:	615a      	str	r2, [r3, #20]
		motorsmenu->items[i-1].is_selected = 0;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68d9      	ldr	r1, [r3, #12]
 8003cc2:	197b      	adds	r3, r7, r5
 8003cc4:	781a      	ldrb	r2, [r3, #0]
 8003cc6:	0013      	movs	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	3b1c      	subs	r3, #28
 8003cd0:	18cb      	adds	r3, r1, r3
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	725a      	strb	r2, [r3, #9]
		init_drivers_list(i-1, &motorsmenu->items[i-1]);
 8003cd6:	197b      	adds	r3, r7, r5
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	1e58      	subs	r0, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68d9      	ldr	r1, [r3, #12]
 8003ce0:	197b      	adds	r3, r7, r5
 8003ce2:	781a      	ldrb	r2, [r3, #0]
 8003ce4:	0013      	movs	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	3b1c      	subs	r3, #28
 8003cee:	18cb      	adds	r3, r1, r3
 8003cf0:	0019      	movs	r1, r3
 8003cf2:	f000 f811 	bl	8003d18 <init_drivers_list>
	for (uint8_t i=1; i<=TOTAL_POSTS; i++) {
 8003cf6:	197b      	adds	r3, r7, r5
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	197b      	adds	r3, r7, r5
 8003cfc:	3201      	adds	r2, #1
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	230f      	movs	r3, #15
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	d983      	bls.n	8003c12 <init_motors_menu+0x42>
	}
}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b004      	add	sp, #16
 8003d12:	bdb0      	pop	{r4, r5, r7, pc}
 8003d14:	0800abf0 	.word	0x0800abf0

08003d18 <init_drivers_list>:

void init_drivers_list(int i, menu * motorsitem) {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
	// off item
	motorsitem[0].id = 0;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]
	motorsitem[0].size = 0;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	721a      	strb	r2, [r3, #8]
	motorsitem[0].heading = STR_DRIVER_OFF;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	4a1f      	ldr	r2, [pc, #124]	; (8003db0 <init_drivers_list+0x98>)
 8003d32:	605a      	str	r2, [r3, #4]
	motorsitem[0].items = 0;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	60da      	str	r2, [r3, #12]
	motorsitem[0].action = 0;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	615a      	str	r2, [r3, #20]
	motorsitem[0].is_selected = 0;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2200      	movs	r2, #0
 8003d44:	725a      	strb	r2, [r3, #9]

	// esq500 item
	motorsitem[1].id = 1;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	331c      	adds	r3, #28
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
	motorsitem[1].size = 0;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	331c      	adds	r3, #28
 8003d52:	2200      	movs	r2, #0
 8003d54:	721a      	strb	r2, [r3, #8]
	motorsitem[1].heading = STR_DRIVER_ESQ500;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	331c      	adds	r3, #28
 8003d5a:	4a16      	ldr	r2, [pc, #88]	; (8003db4 <init_drivers_list+0x9c>)
 8003d5c:	605a      	str	r2, [r3, #4]
	motorsitem[1].items = 0;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	331c      	adds	r3, #28
 8003d62:	2200      	movs	r2, #0
 8003d64:	60da      	str	r2, [r3, #12]
	motorsitem[1].action = 0;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	331c      	adds	r3, #28
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	615a      	str	r2, [r3, #20]
	motorsitem[1].is_selected = 1;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	331c      	adds	r3, #28
 8003d72:	2201      	movs	r2, #1
 8003d74:	725a      	strb	r2, [r3, #9]

	// ae200h item
	motorsitem[2].id = 2;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	3338      	adds	r3, #56	; 0x38
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	701a      	strb	r2, [r3, #0]
	motorsitem[2].size = 0;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	3338      	adds	r3, #56	; 0x38
 8003d82:	2200      	movs	r2, #0
 8003d84:	721a      	strb	r2, [r3, #8]
	motorsitem[2].heading = STR_DRIVER_AE200H;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	3338      	adds	r3, #56	; 0x38
 8003d8a:	4a0b      	ldr	r2, [pc, #44]	; (8003db8 <init_drivers_list+0xa0>)
 8003d8c:	605a      	str	r2, [r3, #4]
	motorsitem[2].items = 0;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	3338      	adds	r3, #56	; 0x38
 8003d92:	2200      	movs	r2, #0
 8003d94:	60da      	str	r2, [r3, #12]
	motorsitem[2].action = 0;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	3338      	adds	r3, #56	; 0x38
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	615a      	str	r2, [r3, #20]
	motorsitem[2].is_selected = 0;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	3338      	adds	r3, #56	; 0x38
 8003da2:	2200      	movs	r2, #0
 8003da4:	725a      	strb	r2, [r3, #9]
}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b002      	add	sp, #8
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	0800abf8 	.word	0x0800abf8
 8003db4:	0800abfc 	.word	0x0800abfc
 8003db8:	0800ac04 	.word	0x0800ac04

08003dbc <display_menu_item>:

void display_menu_item(menu * menu_item, int8_t start_item, int8_t cursor) {
 8003dbc:	b5b0      	push	{r4, r5, r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	0008      	movs	r0, r1
 8003dc6:	0011      	movs	r1, r2
 8003dc8:	1cfb      	adds	r3, r7, #3
 8003dca:	1c02      	adds	r2, r0, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	1cbb      	adds	r3, r7, #2
 8003dd0:	1c0a      	adds	r2, r1, #0
 8003dd2:	701a      	strb	r2, [r3, #0]
	SSD1306_Clear();
 8003dd4:	f7fe fbd3 	bl	800257e <SSD1306_Clear>
	SSD1306_GotoXY(0, 0);
 8003dd8:	2100      	movs	r1, #0
 8003dda:	2000      	movs	r0, #0
 8003ddc:	f7fe f914 	bl	8002008 <SSD1306_GotoXY>
	SSD1306_Puts(menu_item->heading, &Font_7x10, 1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4960      	ldr	r1, [pc, #384]	; (8003f68 <display_menu_item+0x1ac>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	0018      	movs	r0, r3
 8003dea:	f7fe f9a7 	bl	800213c <SSD1306_Puts>

	int8_t cur_line = 1; // we're starting not from 0
 8003dee:	230f      	movs	r3, #15
 8003df0:	18fb      	adds	r3, r7, r3
 8003df2:	2201      	movs	r2, #1
 8003df4:	701a      	strb	r2, [r3, #0]
	for(int8_t i=start_item; i < menu_item->size && cur_line < MAX_MENU_LINES; i++) {
 8003df6:	230e      	movs	r3, #14
 8003df8:	18fb      	adds	r3, r7, r3
 8003dfa:	1cfa      	adds	r2, r7, #3
 8003dfc:	7812      	ldrb	r2, [r2, #0]
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	e09d      	b.n	8003f3e <display_menu_item+0x182>
		SSD1306_GotoXY(8, 10 * cur_line);
 8003e02:	250f      	movs	r5, #15
 8003e04:	197b      	adds	r3, r7, r5
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	b25b      	sxtb	r3, r3
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	1c1a      	adds	r2, r3, #0
 8003e0e:	0092      	lsls	r2, r2, #2
 8003e10:	18d3      	adds	r3, r2, r3
 8003e12:	18db      	adds	r3, r3, r3
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	0019      	movs	r1, r3
 8003e18:	2008      	movs	r0, #8
 8003e1a:	f7fe f8f5 	bl	8002008 <SSD1306_GotoXY>
		if (cursor != i) {
 8003e1e:	1cba      	adds	r2, r7, #2
 8003e20:	240e      	movs	r4, #14
 8003e22:	193b      	adds	r3, r7, r4
 8003e24:	7812      	ldrb	r2, [r2, #0]
 8003e26:	b252      	sxtb	r2, r2
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	b25b      	sxtb	r3, r3
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d030      	beq.n	8003e92 <display_menu_item+0xd6>
			SSD1306_Puts(menu_item->items[i].heading, &Font_7x10, 1);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68d9      	ldr	r1, [r3, #12]
 8003e34:	193b      	adds	r3, r7, r4
 8003e36:	2200      	movs	r2, #0
 8003e38:	569a      	ldrsb	r2, [r3, r2]
 8003e3a:	0013      	movs	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	18cb      	adds	r3, r1, r3
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4948      	ldr	r1, [pc, #288]	; (8003f68 <display_menu_item+0x1ac>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f7fe f976 	bl	800213c <SSD1306_Puts>
			if (menu_item->items[i].is_selected) {
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68d9      	ldr	r1, [r3, #12]
 8003e54:	193b      	adds	r3, r7, r4
 8003e56:	2200      	movs	r2, #0
 8003e58:	569a      	ldrsb	r2, [r3, r2]
 8003e5a:	0013      	movs	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	18cb      	adds	r3, r1, r3
 8003e64:	7a5b      	ldrb	r3, [r3, #9]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d057      	beq.n	8003f1a <display_menu_item+0x15e>
				SSD1306_GotoXY(0, 10 * cur_line);
 8003e6a:	197b      	adds	r3, r7, r5
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	b25b      	sxtb	r3, r3
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	1c1a      	adds	r2, r3, #0
 8003e74:	0092      	lsls	r2, r2, #2
 8003e76:	18d3      	adds	r3, r2, r3
 8003e78:	18db      	adds	r3, r3, r3
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	0019      	movs	r1, r3
 8003e7e:	2000      	movs	r0, #0
 8003e80:	f7fe f8c2 	bl	8002008 <SSD1306_GotoXY>
				SSD1306_Puts(">", &Font_7x10, 1);
 8003e84:	4938      	ldr	r1, [pc, #224]	; (8003f68 <display_menu_item+0x1ac>)
 8003e86:	4b39      	ldr	r3, [pc, #228]	; (8003f6c <display_menu_item+0x1b0>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f7fe f956 	bl	800213c <SSD1306_Puts>
 8003e90:	e043      	b.n	8003f1a <display_menu_item+0x15e>
			}
		} else {
			SSD1306_DrawFilledRectangle(0, 10 * cur_line-1, 127, 10, 1);
 8003e92:	240f      	movs	r4, #15
 8003e94:	193b      	adds	r3, r7, r4
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	b25b      	sxtb	r3, r3
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	1c1a      	adds	r2, r3, #0
 8003e9e:	0092      	lsls	r2, r2, #2
 8003ea0:	18d3      	adds	r3, r2, r3
 8003ea2:	18db      	adds	r3, r3, r3
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b299      	uxth	r1, r3
 8003eaa:	2301      	movs	r3, #1
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	230a      	movs	r3, #10
 8003eb0:	227f      	movs	r2, #127	; 0x7f
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	f7fe faf7 	bl	80024a6 <SSD1306_DrawFilledRectangle>
			SSD1306_Puts(menu_item->items[i].heading, &Font_7x10, 0);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68d9      	ldr	r1, [r3, #12]
 8003ebc:	250e      	movs	r5, #14
 8003ebe:	197b      	adds	r3, r7, r5
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	569a      	ldrsb	r2, [r3, r2]
 8003ec4:	0013      	movs	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	18cb      	adds	r3, r1, r3
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4925      	ldr	r1, [pc, #148]	; (8003f68 <display_menu_item+0x1ac>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f7fe f931 	bl	800213c <SSD1306_Puts>
			if (menu_item->items[i].is_selected) {
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68d9      	ldr	r1, [r3, #12]
 8003ede:	197b      	adds	r3, r7, r5
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	569a      	ldrsb	r2, [r3, r2]
 8003ee4:	0013      	movs	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	18cb      	adds	r3, r1, r3
 8003eee:	7a5b      	ldrb	r3, [r3, #9]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d012      	beq.n	8003f1a <display_menu_item+0x15e>
				SSD1306_GotoXY(0, 10 * cur_line);
 8003ef4:	193b      	adds	r3, r7, r4
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	b25b      	sxtb	r3, r3
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	1c1a      	adds	r2, r3, #0
 8003efe:	0092      	lsls	r2, r2, #2
 8003f00:	18d3      	adds	r3, r2, r3
 8003f02:	18db      	adds	r3, r3, r3
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	0019      	movs	r1, r3
 8003f08:	2000      	movs	r0, #0
 8003f0a:	f7fe f87d 	bl	8002008 <SSD1306_GotoXY>
				SSD1306_Puts(">", &Font_7x10, 0);
 8003f0e:	4916      	ldr	r1, [pc, #88]	; (8003f68 <display_menu_item+0x1ac>)
 8003f10:	4b16      	ldr	r3, [pc, #88]	; (8003f6c <display_menu_item+0x1b0>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7fe f911 	bl	800213c <SSD1306_Puts>
			}
		}
		cur_line++;
 8003f1a:	210f      	movs	r1, #15
 8003f1c:	187b      	adds	r3, r7, r1
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	b25b      	sxtb	r3, r3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	3301      	adds	r3, #1
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	187b      	adds	r3, r7, r1
 8003f2a:	701a      	strb	r2, [r3, #0]
	for(int8_t i=start_item; i < menu_item->size && cur_line < MAX_MENU_LINES; i++) {
 8003f2c:	210e      	movs	r1, #14
 8003f2e:	187b      	adds	r3, r7, r1
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	b25b      	sxtb	r3, r3
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	3301      	adds	r3, #1
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	230e      	movs	r3, #14
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	b25b      	sxtb	r3, r3
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	7a12      	ldrb	r2, [r2, #8]
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	da06      	bge.n	8003f5c <display_menu_item+0x1a0>
 8003f4e:	230f      	movs	r3, #15
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	b25b      	sxtb	r3, r3
 8003f56:	2b05      	cmp	r3, #5
 8003f58:	dc00      	bgt.n	8003f5c <display_menu_item+0x1a0>
 8003f5a:	e752      	b.n	8003e02 <display_menu_item+0x46>
	}
	SSD1306_UpdateScreen();
 8003f5c:	f7fd ff66 	bl	8001e2c <SSD1306_UpdateScreen>
}
 8003f60:	46c0      	nop			; (mov r8, r8)
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b004      	add	sp, #16
 8003f66:	bdb0      	pop	{r4, r5, r7, pc}
 8003f68:	20000000 	.word	0x20000000
 8003f6c:	0800ac0c 	.word	0x0800ac0c

08003f70 <act_submenu_pos>:

void act_submenu_pos(void *arg) {
 8003f70:	b590      	push	{r4, r7, lr}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	act_submenu_arg * args = (act_submenu_arg *)arg;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	613b      	str	r3, [r7, #16]
	uint8_t post_num = get_post_num();
 8003f7c:	230f      	movs	r3, #15
 8003f7e:	18fc      	adds	r4, r7, r3
 8003f80:	f7fc fe5a 	bl	8000c38 <get_post_num>
 8003f84:	0003      	movs	r3, r0
 8003f86:	7023      	strb	r3, [r4, #0]
	// Let's make just one of them selected
	for (uint8_t i = 0;i<args->m->size; i++) {
 8003f88:	2317      	movs	r3, #23
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	e035      	b.n	8003ffe <act_submenu_pos+0x8e>
	if (i + 1 == post_num) {
 8003f92:	2017      	movs	r0, #23
 8003f94:	183b      	adds	r3, r7, r0
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	230f      	movs	r3, #15
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d10c      	bne.n	8003fbe <act_submenu_pos+0x4e>
		args->m->items[i].is_selected = 1;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	68d9      	ldr	r1, [r3, #12]
 8003faa:	183b      	adds	r3, r7, r0
 8003fac:	781a      	ldrb	r2, [r3, #0]
 8003fae:	0013      	movs	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	18cb      	adds	r3, r1, r3
 8003fb8:	2201      	movs	r2, #1
 8003fba:	725a      	strb	r2, [r3, #9]
 8003fbc:	e00c      	b.n	8003fd8 <act_submenu_pos+0x68>
	} else {
		args->m->items[i].is_selected = 0;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	68d9      	ldr	r1, [r3, #12]
 8003fc4:	2317      	movs	r3, #23
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	0013      	movs	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	18cb      	adds	r3, r1, r3
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	725a      	strb	r2, [r3, #9]
	}

	act_goto_menu_aux(args->s, args->m, post_num - 1);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	6859      	ldr	r1, [r3, #4]
 8003fe0:	230f      	movs	r3, #15
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	b25b      	sxtb	r3, r3
 8003fec:	001a      	movs	r2, r3
 8003fee:	f000 f8be 	bl	800416e <act_goto_menu_aux>
	for (uint8_t i = 0;i<args->m->size; i++) {
 8003ff2:	2117      	movs	r1, #23
 8003ff4:	187b      	adds	r3, r7, r1
 8003ff6:	781a      	ldrb	r2, [r3, #0]
 8003ff8:	187b      	adds	r3, r7, r1
 8003ffa:	3201      	adds	r2, #1
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	7a1b      	ldrb	r3, [r3, #8]
 8004004:	2217      	movs	r2, #23
 8004006:	18ba      	adds	r2, r7, r2
 8004008:	7812      	ldrb	r2, [r2, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d3c1      	bcc.n	8003f92 <act_submenu_pos+0x22>
}
}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	46c0      	nop			; (mov r8, r8)
 8004012:	46bd      	mov	sp, r7
 8004014:	b007      	add	sp, #28
 8004016:	bd90      	pop	{r4, r7, pc}

08004018 <act_exit>:

void act_exit(void *arg) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	menu_supervisor * s = (menu_supervisor *)arg;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	60fb      	str	r3, [r7, #12]
	s->exit = 1;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	721a      	strb	r2, [r3, #8]
}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	46bd      	mov	sp, r7
 800402e:	b004      	add	sp, #16
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <act_test_relays>:

void act_test_relays(void * arg) {
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
	const char * cmd = "RUN T60|1/900/900|2/850/850|3/800/800|4/750/750|5/725/725|6/700/700|7/650/650|8/630/630|9/600/600|10/550/550|11/500/500|;";
 800403c:	4b04      	ldr	r3, [pc, #16]	; (8004050 <act_test_relays+0x1c>)
 800403e:	60fb      	str	r3, [r7, #12]
	app_process_cmd(cmd);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	0018      	movs	r0, r3
 8004044:	f7fc fee6 	bl	8000e14 <app_process_cmd>
}
 8004048:	46c0      	nop			; (mov r8, r8)
 800404a:	46bd      	mov	sp, r7
 800404c:	b004      	add	sp, #16
 800404e:	bd80      	pop	{r7, pc}
 8004050:	0800ac10 	.word	0x0800ac10

08004054 <act_goto_parent>:

void act_goto_parent(void * arg) {
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	act_goto_parent_arg * args = (act_goto_parent_arg *)arg;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60bb      	str	r3, [r7, #8]

	int8_t desired_position = 0;
 8004060:	230f      	movs	r3, #15
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]

	// Let's find required position
	for (int8_t i=0;i<args->m->parent->size;i++) {
 8004068:	230e      	movs	r3, #14
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
 8004070:	e01e      	b.n	80040b0 <act_goto_parent+0x5c>
		if (&(args->m->parent->items[i]) == args->m) {
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	68d9      	ldr	r1, [r3, #12]
 800407a:	200e      	movs	r0, #14
 800407c:	183b      	adds	r3, r7, r0
 800407e:	2200      	movs	r2, #0
 8004080:	569a      	ldrsb	r2, [r3, r2]
 8004082:	0013      	movs	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	18ca      	adds	r2, r1, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	429a      	cmp	r2, r3
 8004092:	d104      	bne.n	800409e <act_goto_parent+0x4a>
			desired_position = i;
 8004094:	230f      	movs	r3, #15
 8004096:	18fb      	adds	r3, r7, r3
 8004098:	183a      	adds	r2, r7, r0
 800409a:	7812      	ldrb	r2, [r2, #0]
 800409c:	701a      	strb	r2, [r3, #0]
	for (int8_t i=0;i<args->m->parent->size;i++) {
 800409e:	210e      	movs	r1, #14
 80040a0:	187b      	adds	r3, r7, r1
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	b25b      	sxtb	r3, r3
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	3301      	adds	r3, #1
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	187b      	adds	r3, r7, r1
 80040ae:	701a      	strb	r2, [r3, #0]
 80040b0:	230e      	movs	r3, #14
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	569a      	ldrsb	r2, [r3, r2]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	7a1b      	ldrb	r3, [r3, #8]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	dbd6      	blt.n	8004072 <act_goto_parent+0x1e>
		}
	}

	act_goto_menu_aux(args->s, args->m->parent, desired_position);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	6919      	ldr	r1, [r3, #16]
 80040ce:	230f      	movs	r3, #15
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	b25b      	sxtb	r3, r3
 80040d6:	001a      	movs	r2, r3
 80040d8:	f000 f849 	bl	800416e <act_goto_menu_aux>
}
 80040dc:	46c0      	nop			; (mov r8, r8)
 80040de:	46bd      	mov	sp, r7
 80040e0:	b004      	add	sp, #16
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <act_set_active>:

void act_set_active(void * arg) {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
	menu * post_item = (menu *) arg;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	613b      	str	r3, [r7, #16]
	menu * parent = post_item->parent;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0;i<parent->size;i++) {
 80040f6:	2317      	movs	r3, #23
 80040f8:	18fb      	adds	r3, r7, r3
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e02a      	b.n	8004156 <act_set_active+0x72>
		if (i+1 == post_item->id) {
 8004100:	2017      	movs	r0, #23
 8004102:	183b      	adds	r3, r7, r0
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	7812      	ldrb	r2, [r2, #0]
 800410c:	4293      	cmp	r3, r2
 800410e:	d110      	bne.n	8004132 <act_set_active+0x4e>
			// we need to make it selected
			parent->items[i].is_selected = 1;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	68d9      	ldr	r1, [r3, #12]
 8004114:	183b      	adds	r3, r7, r0
 8004116:	781a      	ldrb	r2, [r3, #0]
 8004118:	0013      	movs	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	18cb      	adds	r3, r1, r3
 8004122:	2201      	movs	r2, #1
 8004124:	725a      	strb	r2, [r3, #9]
			set_post_num(post_item->id);
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	0018      	movs	r0, r3
 800412c:	f7fc fd8e 	bl	8000c4c <set_post_num>
 8004130:	e00b      	b.n	800414a <act_set_active+0x66>
		} else {
			parent->items[i].is_selected = 0;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	68d9      	ldr	r1, [r3, #12]
 8004136:	2317      	movs	r3, #23
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	781a      	ldrb	r2, [r3, #0]
 800413c:	0013      	movs	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	18cb      	adds	r3, r1, r3
 8004146:	2200      	movs	r2, #0
 8004148:	725a      	strb	r2, [r3, #9]
	for (uint8_t i=0;i<parent->size;i++) {
 800414a:	2117      	movs	r1, #23
 800414c:	187b      	adds	r3, r7, r1
 800414e:	781a      	ldrb	r2, [r3, #0]
 8004150:	187b      	adds	r3, r7, r1
 8004152:	3201      	adds	r2, #1
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	7a1b      	ldrb	r3, [r3, #8]
 800415a:	2217      	movs	r2, #23
 800415c:	18ba      	adds	r2, r7, r2
 800415e:	7812      	ldrb	r2, [r2, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d3cd      	bcc.n	8004100 <act_set_active+0x1c>
		}
	}
}
 8004164:	46c0      	nop			; (mov r8, r8)
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	46bd      	mov	sp, r7
 800416a:	b006      	add	sp, #24
 800416c:	bd80      	pop	{r7, pc}

0800416e <act_goto_menu_aux>:
void act_goto_menu_aux(menu_supervisor *s, menu *m, int8_t desired_position) {
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	1dfb      	adds	r3, r7, #7
 800417a:	701a      	strb	r2, [r3, #0]
	s->cursor = desired_position;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	1dfa      	adds	r2, r7, #7
 8004180:	7812      	ldrb	r2, [r2, #0]
 8004182:	705a      	strb	r2, [r3, #1]
	s->start_item = desired_position;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1dfa      	adds	r2, r7, #7
 8004188:	7812      	ldrb	r2, [r2, #0]
 800418a:	701a      	strb	r2, [r3, #0]

	// Let's position it properly on the screen
	// e.g. if the last element is selected we won't see just one element
	// on the screen
	if (m->size < MAX_MENU_LINES) {
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	7a1b      	ldrb	r3, [r3, #8]
 8004190:	2b05      	cmp	r3, #5
 8004192:	d803      	bhi.n	800419c <act_goto_menu_aux+0x2e>
		s->start_item = 0;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	e012      	b.n	80041c2 <act_goto_menu_aux+0x54>
	} else {
		int8_t max_start_item = 1 + m->size - MAX_MENU_LINES;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	7a1b      	ldrb	r3, [r3, #8]
 80041a0:	3b05      	subs	r3, #5
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	2117      	movs	r1, #23
 80041a6:	187b      	adds	r3, r7, r1
 80041a8:	701a      	strb	r2, [r3, #0]
		if (s->start_item > max_start_item) {
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b25b      	sxtb	r3, r3
 80041b0:	187a      	adds	r2, r7, r1
 80041b2:	7812      	ldrb	r2, [r2, #0]
 80041b4:	b252      	sxtb	r2, r2
 80041b6:	429a      	cmp	r2, r3
 80041b8:	da03      	bge.n	80041c2 <act_goto_menu_aux+0x54>
			s->start_item = max_start_item;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	187a      	adds	r2, r7, r1
 80041be:	7812      	ldrb	r2, [r2, #0]
 80041c0:	701a      	strb	r2, [r3, #0]
		}
	}

	s->cur_item = m;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	605a      	str	r2, [r3, #4]
}
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b006      	add	sp, #24
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <add_relay>:
 *      Author: roman
 */

#include "relays.h"

void add_relay(gpio_entity *obj, uint16_t pin, GPIO_TypeDef * port) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	607a      	str	r2, [r7, #4]
 80041da:	200a      	movs	r0, #10
 80041dc:	183b      	adds	r3, r7, r0
 80041de:	1c0a      	adds	r2, r1, #0
 80041e0:	801a      	strh	r2, [r3, #0]
	obj->relays[obj->cursor].pin = pin;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	18d3      	adds	r3, r2, r3
 80041ec:	3304      	adds	r3, #4
 80041ee:	183a      	adds	r2, r7, r0
 80041f0:	8812      	ldrh	r2, [r2, #0]
 80041f2:	801a      	strh	r2, [r3, #0]
	obj->relays[obj->cursor].port = port;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	18d3      	adds	r3, r2, r3
 80041fe:	3308      	adds	r3, #8
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	601a      	str	r2, [r3, #0]
	obj->cursor = obj->cursor + 1;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	601a      	str	r2, [r3, #0]
}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	46bd      	mov	sp, r7
 8004212:	b004      	add	sp, #16
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <init_gpio_entity>:

void init_gpio_entity(gpio_entity *obj) {
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	obj->cursor = 0;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
	add_relay(obj, OUT_1_Pin, OUT_1_GPIO_Port);
 8004226:	2390      	movs	r3, #144	; 0x90
 8004228:	05da      	lsls	r2, r3, #23
 800422a:	2380      	movs	r3, #128	; 0x80
 800422c:	0059      	lsls	r1, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	0018      	movs	r0, r3
 8004232:	f7ff ffcd 	bl	80041d0 <add_relay>
	add_relay(obj, OUT_2_Pin, OUT_2_GPIO_Port);
 8004236:	4a24      	ldr	r2, [pc, #144]	; (80042c8 <init_gpio_entity+0xb0>)
 8004238:	2380      	movs	r3, #128	; 0x80
 800423a:	0219      	lsls	r1, r3, #8
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	0018      	movs	r0, r3
 8004240:	f7ff ffc6 	bl	80041d0 <add_relay>
	add_relay(obj, OUT_3_Pin, OUT_3_GPIO_Port);
 8004244:	4a20      	ldr	r2, [pc, #128]	; (80042c8 <init_gpio_entity+0xb0>)
 8004246:	2380      	movs	r3, #128	; 0x80
 8004248:	01d9      	lsls	r1, r3, #7
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	0018      	movs	r0, r3
 800424e:	f7ff ffbf 	bl	80041d0 <add_relay>
	add_relay(obj, OUT_4_Pin, OUT_4_GPIO_Port);
 8004252:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <init_gpio_entity+0xb0>)
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	0199      	lsls	r1, r3, #6
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	0018      	movs	r0, r3
 800425c:	f7ff ffb8 	bl	80041d0 <add_relay>
	add_relay(obj, OUT_5_Pin, OUT_5_GPIO_Port);
 8004260:	4a19      	ldr	r2, [pc, #100]	; (80042c8 <init_gpio_entity+0xb0>)
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	0159      	lsls	r1, r3, #5
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	0018      	movs	r0, r3
 800426a:	f7ff ffb1 	bl	80041d0 <add_relay>
	add_relay(obj, OUT_6_Pin, OUT_6_GPIO_Port);
 800426e:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <init_gpio_entity+0xb0>)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2101      	movs	r1, #1
 8004274:	0018      	movs	r0, r3
 8004276:	f7ff ffab 	bl	80041d0 <add_relay>
	add_relay(obj, OUT_7_Pin, OUT_7_GPIO_Port);
 800427a:	2390      	movs	r3, #144	; 0x90
 800427c:	05da      	lsls	r2, r3, #23
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2180      	movs	r1, #128	; 0x80
 8004282:	0018      	movs	r0, r3
 8004284:	f7ff ffa4 	bl	80041d0 <add_relay>
	add_relay(obj, OUT_8_Pin, OUT_8_GPIO_Port);
 8004288:	2390      	movs	r3, #144	; 0x90
 800428a:	05da      	lsls	r2, r3, #23
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2140      	movs	r1, #64	; 0x40
 8004290:	0018      	movs	r0, r3
 8004292:	f7ff ff9d 	bl	80041d0 <add_relay>
	add_relay(obj, OUT_9_Pin, OUT_9_GPIO_Port);
 8004296:	2390      	movs	r3, #144	; 0x90
 8004298:	05da      	lsls	r2, r3, #23
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2120      	movs	r1, #32
 800429e:	0018      	movs	r0, r3
 80042a0:	f7ff ff96 	bl	80041d0 <add_relay>
	add_relay(obj, OUT_10_Pin, OUT_10_GPIO_Port);
 80042a4:	2390      	movs	r3, #144	; 0x90
 80042a6:	05da      	lsls	r2, r3, #23
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2110      	movs	r1, #16
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7ff ff8f 	bl	80041d0 <add_relay>
	add_relay(obj, OUT_11_Pin, OUT_11_GPIO_Port);
 80042b2:	2390      	movs	r3, #144	; 0x90
 80042b4:	05da      	lsls	r2, r3, #23
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2101      	movs	r1, #1
 80042ba:	0018      	movs	r0, r3
 80042bc:	f7ff ff88 	bl	80041d0 <add_relay>
}
 80042c0:	46c0      	nop			; (mov r8, r8)
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b002      	add	sp, #8
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	48000400 	.word	0x48000400

080042cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <HAL_MspInit+0x50>)
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	4b11      	ldr	r3, [pc, #68]	; (800431c <HAL_MspInit+0x50>)
 80042d8:	2101      	movs	r1, #1
 80042da:	430a      	orrs	r2, r1
 80042dc:	619a      	str	r2, [r3, #24]
 80042de:	4b0f      	ldr	r3, [pc, #60]	; (800431c <HAL_MspInit+0x50>)
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	2201      	movs	r2, #1
 80042e4:	4013      	ands	r3, r2
 80042e6:	607b      	str	r3, [r7, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042ea:	4b0c      	ldr	r3, [pc, #48]	; (800431c <HAL_MspInit+0x50>)
 80042ec:	69da      	ldr	r2, [r3, #28]
 80042ee:	4b0b      	ldr	r3, [pc, #44]	; (800431c <HAL_MspInit+0x50>)
 80042f0:	2180      	movs	r1, #128	; 0x80
 80042f2:	0549      	lsls	r1, r1, #21
 80042f4:	430a      	orrs	r2, r1
 80042f6:	61da      	str	r2, [r3, #28]
 80042f8:	4b08      	ldr	r3, [pc, #32]	; (800431c <HAL_MspInit+0x50>)
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	2380      	movs	r3, #128	; 0x80
 80042fe:	055b      	lsls	r3, r3, #21
 8004300:	4013      	ands	r3, r2
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8004306:	2302      	movs	r3, #2
 8004308:	425b      	negs	r3, r3
 800430a:	2200      	movs	r2, #0
 800430c:	2103      	movs	r1, #3
 800430e:	0018      	movs	r0, r3
 8004310:	f000 fd5e 	bl	8004dd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004314:	46c0      	nop			; (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b002      	add	sp, #8
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40021000 	.word	0x40021000

08004320 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b08b      	sub	sp, #44	; 0x2c
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004328:	2414      	movs	r4, #20
 800432a:	193b      	adds	r3, r7, r4
 800432c:	0018      	movs	r0, r3
 800432e:	2314      	movs	r3, #20
 8004330:	001a      	movs	r2, r3
 8004332:	2100      	movs	r1, #0
 8004334:	f005 fcda 	bl	8009cec <memset>
  if(hi2c->Instance==I2C1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1c      	ldr	r2, [pc, #112]	; (80043b0 <HAL_I2C_MspInit+0x90>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d131      	bne.n	80043a6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004342:	4b1c      	ldr	r3, [pc, #112]	; (80043b4 <HAL_I2C_MspInit+0x94>)
 8004344:	695a      	ldr	r2, [r3, #20]
 8004346:	4b1b      	ldr	r3, [pc, #108]	; (80043b4 <HAL_I2C_MspInit+0x94>)
 8004348:	2180      	movs	r1, #128	; 0x80
 800434a:	02c9      	lsls	r1, r1, #11
 800434c:	430a      	orrs	r2, r1
 800434e:	615a      	str	r2, [r3, #20]
 8004350:	4b18      	ldr	r3, [pc, #96]	; (80043b4 <HAL_I2C_MspInit+0x94>)
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	02db      	lsls	r3, r3, #11
 8004358:	4013      	ands	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800435e:	0021      	movs	r1, r4
 8004360:	187b      	adds	r3, r7, r1
 8004362:	22c0      	movs	r2, #192	; 0xc0
 8004364:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004366:	187b      	adds	r3, r7, r1
 8004368:	2212      	movs	r2, #18
 800436a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800436c:	187b      	adds	r3, r7, r1
 800436e:	2201      	movs	r2, #1
 8004370:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004372:	187b      	adds	r3, r7, r1
 8004374:	2203      	movs	r2, #3
 8004376:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004378:	187b      	adds	r3, r7, r1
 800437a:	2201      	movs	r2, #1
 800437c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800437e:	187b      	adds	r3, r7, r1
 8004380:	4a0d      	ldr	r2, [pc, #52]	; (80043b8 <HAL_I2C_MspInit+0x98>)
 8004382:	0019      	movs	r1, r3
 8004384:	0010      	movs	r0, r2
 8004386:	f000 ff4b 	bl	8005220 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_I2C_MspInit+0x94>)
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <HAL_I2C_MspInit+0x94>)
 8004390:	2180      	movs	r1, #128	; 0x80
 8004392:	0389      	lsls	r1, r1, #14
 8004394:	430a      	orrs	r2, r1
 8004396:	61da      	str	r2, [r3, #28]
 8004398:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_I2C_MspInit+0x94>)
 800439a:	69da      	ldr	r2, [r3, #28]
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	039b      	lsls	r3, r3, #14
 80043a0:	4013      	ands	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	46bd      	mov	sp, r7
 80043aa:	b00b      	add	sp, #44	; 0x2c
 80043ac:	bd90      	pop	{r4, r7, pc}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	40005400 	.word	0x40005400
 80043b4:	40021000 	.word	0x40021000
 80043b8:	48000400 	.word	0x48000400

080043bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043bc:	b590      	push	{r4, r7, lr}
 80043be:	b08f      	sub	sp, #60	; 0x3c
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c4:	2424      	movs	r4, #36	; 0x24
 80043c6:	193b      	adds	r3, r7, r4
 80043c8:	0018      	movs	r0, r3
 80043ca:	2314      	movs	r3, #20
 80043cc:	001a      	movs	r2, r3
 80043ce:	2100      	movs	r1, #0
 80043d0:	f005 fc8c 	bl	8009cec <memset>
  if(huart->Instance==USART1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a55      	ldr	r2, [pc, #340]	; (8004530 <HAL_UART_MspInit+0x174>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d134      	bne.n	8004448 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043de:	4b55      	ldr	r3, [pc, #340]	; (8004534 <HAL_UART_MspInit+0x178>)
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	4b54      	ldr	r3, [pc, #336]	; (8004534 <HAL_UART_MspInit+0x178>)
 80043e4:	2180      	movs	r1, #128	; 0x80
 80043e6:	01c9      	lsls	r1, r1, #7
 80043e8:	430a      	orrs	r2, r1
 80043ea:	619a      	str	r2, [r3, #24]
 80043ec:	4b51      	ldr	r3, [pc, #324]	; (8004534 <HAL_UART_MspInit+0x178>)
 80043ee:	699a      	ldr	r2, [r3, #24]
 80043f0:	2380      	movs	r3, #128	; 0x80
 80043f2:	01db      	lsls	r3, r3, #7
 80043f4:	4013      	ands	r3, r2
 80043f6:	623b      	str	r3, [r7, #32]
 80043f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fa:	4b4e      	ldr	r3, [pc, #312]	; (8004534 <HAL_UART_MspInit+0x178>)
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	4b4d      	ldr	r3, [pc, #308]	; (8004534 <HAL_UART_MspInit+0x178>)
 8004400:	2180      	movs	r1, #128	; 0x80
 8004402:	0289      	lsls	r1, r1, #10
 8004404:	430a      	orrs	r2, r1
 8004406:	615a      	str	r2, [r3, #20]
 8004408:	4b4a      	ldr	r3, [pc, #296]	; (8004534 <HAL_UART_MspInit+0x178>)
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	029b      	lsls	r3, r3, #10
 8004410:	4013      	ands	r3, r2
 8004412:	61fb      	str	r3, [r7, #28]
 8004414:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8004416:	193b      	adds	r3, r7, r4
 8004418:	22b0      	movs	r2, #176	; 0xb0
 800441a:	0152      	lsls	r2, r2, #5
 800441c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441e:	0021      	movs	r1, r4
 8004420:	187b      	adds	r3, r7, r1
 8004422:	2202      	movs	r2, #2
 8004424:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004426:	187b      	adds	r3, r7, r1
 8004428:	2200      	movs	r2, #0
 800442a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800442c:	187b      	adds	r3, r7, r1
 800442e:	2203      	movs	r2, #3
 8004430:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004432:	187b      	adds	r3, r7, r1
 8004434:	2201      	movs	r2, #1
 8004436:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004438:	187a      	adds	r2, r7, r1
 800443a:	2390      	movs	r3, #144	; 0x90
 800443c:	05db      	lsls	r3, r3, #23
 800443e:	0011      	movs	r1, r2
 8004440:	0018      	movs	r0, r3
 8004442:	f000 feed 	bl	8005220 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004446:	e06f      	b.n	8004528 <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==USART2)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a3a      	ldr	r2, [pc, #232]	; (8004538 <HAL_UART_MspInit+0x17c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d133      	bne.n	80044ba <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004452:	4b38      	ldr	r3, [pc, #224]	; (8004534 <HAL_UART_MspInit+0x178>)
 8004454:	69da      	ldr	r2, [r3, #28]
 8004456:	4b37      	ldr	r3, [pc, #220]	; (8004534 <HAL_UART_MspInit+0x178>)
 8004458:	2180      	movs	r1, #128	; 0x80
 800445a:	0289      	lsls	r1, r1, #10
 800445c:	430a      	orrs	r2, r1
 800445e:	61da      	str	r2, [r3, #28]
 8004460:	4b34      	ldr	r3, [pc, #208]	; (8004534 <HAL_UART_MspInit+0x178>)
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	029b      	lsls	r3, r3, #10
 8004468:	4013      	ands	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
 800446c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800446e:	4b31      	ldr	r3, [pc, #196]	; (8004534 <HAL_UART_MspInit+0x178>)
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	4b30      	ldr	r3, [pc, #192]	; (8004534 <HAL_UART_MspInit+0x178>)
 8004474:	2180      	movs	r1, #128	; 0x80
 8004476:	0289      	lsls	r1, r1, #10
 8004478:	430a      	orrs	r2, r1
 800447a:	615a      	str	r2, [r3, #20]
 800447c:	4b2d      	ldr	r3, [pc, #180]	; (8004534 <HAL_UART_MspInit+0x178>)
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	029b      	lsls	r3, r3, #10
 8004484:	4013      	ands	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800448a:	2124      	movs	r1, #36	; 0x24
 800448c:	187b      	adds	r3, r7, r1
 800448e:	220e      	movs	r2, #14
 8004490:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004492:	187b      	adds	r3, r7, r1
 8004494:	2202      	movs	r2, #2
 8004496:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004498:	187b      	adds	r3, r7, r1
 800449a:	2200      	movs	r2, #0
 800449c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800449e:	187b      	adds	r3, r7, r1
 80044a0:	2203      	movs	r2, #3
 80044a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80044a4:	187b      	adds	r3, r7, r1
 80044a6:	2201      	movs	r2, #1
 80044a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044aa:	187a      	adds	r2, r7, r1
 80044ac:	2390      	movs	r3, #144	; 0x90
 80044ae:	05db      	lsls	r3, r3, #23
 80044b0:	0011      	movs	r1, r2
 80044b2:	0018      	movs	r0, r3
 80044b4:	f000 feb4 	bl	8005220 <HAL_GPIO_Init>
}
 80044b8:	e036      	b.n	8004528 <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==USART3)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1f      	ldr	r2, [pc, #124]	; (800453c <HAL_UART_MspInit+0x180>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d131      	bne.n	8004528 <HAL_UART_MspInit+0x16c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80044c4:	4b1b      	ldr	r3, [pc, #108]	; (8004534 <HAL_UART_MspInit+0x178>)
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <HAL_UART_MspInit+0x178>)
 80044ca:	2180      	movs	r1, #128	; 0x80
 80044cc:	02c9      	lsls	r1, r1, #11
 80044ce:	430a      	orrs	r2, r1
 80044d0:	61da      	str	r2, [r3, #28]
 80044d2:	4b18      	ldr	r3, [pc, #96]	; (8004534 <HAL_UART_MspInit+0x178>)
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	02db      	lsls	r3, r3, #11
 80044da:	4013      	ands	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044e0:	4b14      	ldr	r3, [pc, #80]	; (8004534 <HAL_UART_MspInit+0x178>)
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	4b13      	ldr	r3, [pc, #76]	; (8004534 <HAL_UART_MspInit+0x178>)
 80044e6:	2180      	movs	r1, #128	; 0x80
 80044e8:	02c9      	lsls	r1, r1, #11
 80044ea:	430a      	orrs	r2, r1
 80044ec:	615a      	str	r2, [r3, #20]
 80044ee:	4b11      	ldr	r3, [pc, #68]	; (8004534 <HAL_UART_MspInit+0x178>)
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	2380      	movs	r3, #128	; 0x80
 80044f4:	02db      	lsls	r3, r3, #11
 80044f6:	4013      	ands	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 80044fc:	2124      	movs	r1, #36	; 0x24
 80044fe:	187b      	adds	r3, r7, r1
 8004500:	4a0f      	ldr	r2, [pc, #60]	; (8004540 <HAL_UART_MspInit+0x184>)
 8004502:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004504:	187b      	adds	r3, r7, r1
 8004506:	2202      	movs	r2, #2
 8004508:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450a:	187b      	adds	r3, r7, r1
 800450c:	2200      	movs	r2, #0
 800450e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004510:	187b      	adds	r3, r7, r1
 8004512:	2203      	movs	r2, #3
 8004514:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004516:	187b      	adds	r3, r7, r1
 8004518:	2204      	movs	r2, #4
 800451a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800451c:	187b      	adds	r3, r7, r1
 800451e:	4a09      	ldr	r2, [pc, #36]	; (8004544 <HAL_UART_MspInit+0x188>)
 8004520:	0019      	movs	r1, r3
 8004522:	0010      	movs	r0, r2
 8004524:	f000 fe7c 	bl	8005220 <HAL_GPIO_Init>
}
 8004528:	46c0      	nop			; (mov r8, r8)
 800452a:	46bd      	mov	sp, r7
 800452c:	b00f      	add	sp, #60	; 0x3c
 800452e:	bd90      	pop	{r4, r7, pc}
 8004530:	40013800 	.word	0x40013800
 8004534:	40021000 	.word	0x40021000
 8004538:	40004400 	.word	0x40004400
 800453c:	40004800 	.word	0x40004800
 8004540:	00000c02 	.word	0x00000c02
 8004544:	48000400 	.word	0x48000400

08004548 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	; 0x28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	0019      	movs	r1, r3
 800455e:	2011      	movs	r0, #17
 8004560:	f000 fc36 	bl	8004dd0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004564:	2011      	movs	r0, #17
 8004566:	f000 fc48 	bl	8004dfa <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <HAL_InitTick+0xa4>)
 800456c:	69da      	ldr	r2, [r3, #28]
 800456e:	4b1f      	ldr	r3, [pc, #124]	; (80045ec <HAL_InitTick+0xa4>)
 8004570:	2110      	movs	r1, #16
 8004572:	430a      	orrs	r2, r1
 8004574:	61da      	str	r2, [r3, #28]
 8004576:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <HAL_InitTick+0xa4>)
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	2210      	movs	r2, #16
 800457c:	4013      	ands	r3, r2
 800457e:	60bb      	str	r3, [r7, #8]
 8004580:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004582:	230c      	movs	r3, #12
 8004584:	18fa      	adds	r2, r7, r3
 8004586:	2310      	movs	r3, #16
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	0011      	movs	r1, r2
 800458c:	0018      	movs	r0, r3
 800458e:	f002 f92b 	bl	80067e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004592:	f002 f913 	bl	80067bc <HAL_RCC_GetPCLK1Freq>
 8004596:	0003      	movs	r3, r0
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	4914      	ldr	r1, [pc, #80]	; (80045f0 <HAL_InitTick+0xa8>)
 800459e:	0018      	movs	r0, r3
 80045a0:	f7fb fdbc 	bl	800011c <__udivsi3>
 80045a4:	0003      	movs	r3, r0
 80045a6:	3b01      	subs	r3, #1
 80045a8:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80045aa:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <HAL_InitTick+0xac>)
 80045ac:	4a12      	ldr	r2, [pc, #72]	; (80045f8 <HAL_InitTick+0xb0>)
 80045ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80045b0:	4b10      	ldr	r3, [pc, #64]	; (80045f4 <HAL_InitTick+0xac>)
 80045b2:	4a12      	ldr	r2, [pc, #72]	; (80045fc <HAL_InitTick+0xb4>)
 80045b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80045b6:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <HAL_InitTick+0xac>)
 80045b8:	6a3a      	ldr	r2, [r7, #32]
 80045ba:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 80045bc:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <HAL_InitTick+0xac>)
 80045be:	2200      	movs	r2, #0
 80045c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045c2:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <HAL_InitTick+0xac>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <HAL_InitTick+0xac>)
 80045ca:	0018      	movs	r0, r3
 80045cc:	f002 fa14 	bl	80069f8 <HAL_TIM_Base_Init>
 80045d0:	1e03      	subs	r3, r0, #0
 80045d2:	d105      	bne.n	80045e0 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80045d4:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <HAL_InitTick+0xac>)
 80045d6:	0018      	movs	r0, r3
 80045d8:	f002 fa66 	bl	8006aa8 <HAL_TIM_Base_Start_IT>
 80045dc:	0003      	movs	r3, r0
 80045de:	e000      	b.n	80045e2 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
}
 80045e2:	0018      	movs	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b00a      	add	sp, #40	; 0x28
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	40021000 	.word	0x40021000
 80045f0:	000f4240 	.word	0x000f4240
 80045f4:	200009c4 	.word	0x200009c4
 80045f8:	40001000 	.word	0x40001000
 80045fc:	000003e7 	.word	0x000003e7

08004600 <NMI_Handler>:


// let's use this mutex for remaining bytes
volatile xSemaphoreHandle xMutex;

void NMI_Handler(void) {
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  while (1) {
 8004604:	e7fe      	b.n	8004604 <NMI_Handler+0x4>

08004606 <HardFault_Handler>:
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void) {
 8004606:	b580      	push	{r7, lr}
 8004608:	af00      	add	r7, sp, #0
  while (1) {
 800460a:	e7fe      	b.n	800460a <HardFault_Handler+0x4>

0800460c <TIM6_IRQHandler>:
  }
}

void TIM6_IRQHandler(void) {
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <TIM6_IRQHandler+0x14>)
 8004612:	0018      	movs	r0, r3
 8004614:	f002 fa94 	bl	8006b40 <HAL_TIM_IRQHandler>
}
 8004618:	46c0      	nop			; (mov r8, r8)
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	200009c4 	.word	0x200009c4

08004624 <init_usart>:

void init_usart(uart_user_friendly *user_usart, USART_TypeDef * actual_port) {
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
	user_usart->port = actual_port;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	601a      	str	r2, [r3, #0]

	// sending buffer
	user_usart->remaining_bytes = 0;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2227      	movs	r2, #39	; 0x27
 8004638:	2100      	movs	r1, #0
 800463a:	5499      	strb	r1, [r3, r2]
	user_usart->send_cursor = 0;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2226      	movs	r2, #38	; 0x26
 8004640:	2100      	movs	r1, #0
 8004642:	5499      	strb	r1, [r3, r2]
	user_usart->send_cycle_buffer[0] = 0;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	711a      	strb	r2, [r3, #4]

	user_usart->event_handler = 0;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004650:	46c0      	nop			; (mov r8, r8)
 8004652:	46bd      	mov	sp, r7
 8004654:	b002      	add	sp, #8
 8004656:	bd80      	pop	{r7, pc}

08004658 <init_usarts>:

void init_usarts() {
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
	init_usart(&user_uart1, USART1);
 800465c:	4a0b      	ldr	r2, [pc, #44]	; (800468c <init_usarts+0x34>)
 800465e:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <init_usarts+0x38>)
 8004660:	0011      	movs	r1, r2
 8004662:	0018      	movs	r0, r3
 8004664:	f7ff ffde 	bl	8004624 <init_usart>
	user_uart1.can_do_both_dirs = 1;
 8004668:	4b09      	ldr	r3, [pc, #36]	; (8004690 <init_usarts+0x38>)
 800466a:	222c      	movs	r2, #44	; 0x2c
 800466c:	2101      	movs	r1, #1
 800466e:	5499      	strb	r1, [r3, r2]
	init_usart(&user_uart2, USART2);
 8004670:	4a08      	ldr	r2, [pc, #32]	; (8004694 <init_usarts+0x3c>)
 8004672:	4b09      	ldr	r3, [pc, #36]	; (8004698 <init_usarts+0x40>)
 8004674:	0011      	movs	r1, r2
 8004676:	0018      	movs	r0, r3
 8004678:	f7ff ffd4 	bl	8004624 <init_usart>
	user_uart2.can_do_both_dirs = 0;
 800467c:	4b06      	ldr	r3, [pc, #24]	; (8004698 <init_usarts+0x40>)
 800467e:	222c      	movs	r2, #44	; 0x2c
 8004680:	2100      	movs	r1, #0
 8004682:	5499      	strb	r1, [r3, r2]
}
 8004684:	46c0      	nop			; (mov r8, r8)
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	40013800 	.word	0x40013800
 8004690:	20000a0c 	.word	0x20000a0c
 8004694:	40004400 	.word	0x40004400
 8004698:	20000a3c 	.word	0x20000a3c

0800469c <set_incoming_byte_handler>:
}
uart_user_friendly * get_usart2() {
	return &user_uart2;
}

void set_incoming_byte_handler(uint8_t port_num, void (*event_handler)(uint8_t symbol)) {
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	0002      	movs	r2, r0
 80046a4:	6039      	str	r1, [r7, #0]
 80046a6:	1dfb      	adds	r3, r7, #7
 80046a8:	701a      	strb	r2, [r3, #0]
	if(port_num == 1) {
 80046aa:	1dfb      	adds	r3, r7, #7
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d103      	bne.n	80046ba <set_incoming_byte_handler+0x1e>
		user_uart1.event_handler = event_handler;
 80046b2:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <set_incoming_byte_handler+0x2c>)
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	629a      	str	r2, [r3, #40]	; 0x28
	} else {
		user_uart2.event_handler = event_handler;
	}
}
 80046b8:	e002      	b.n	80046c0 <set_incoming_byte_handler+0x24>
		user_uart2.event_handler = event_handler;
 80046ba:	4b04      	ldr	r3, [pc, #16]	; (80046cc <set_incoming_byte_handler+0x30>)
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046c0:	46c0      	nop			; (mov r8, r8)
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b002      	add	sp, #8
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	20000a0c 	.word	0x20000a0c
 80046cc:	20000a3c 	.word	0x20000a3c

080046d0 <send_bytes>:

uint8_t send_bytes(uint8_t port_num, const char * new_data, uint8_t size) {
 80046d0:	b590      	push	{r4, r7, lr}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6039      	str	r1, [r7, #0]
 80046d8:	0011      	movs	r1, r2
 80046da:	1dfb      	adds	r3, r7, #7
 80046dc:	1c02      	adds	r2, r0, #0
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	1dbb      	adds	r3, r7, #6
 80046e2:	1c0a      	adds	r2, r1, #0
 80046e4:	701a      	strb	r2, [r3, #0]
	uart_user_friendly * usart;
	if(port_num == 1) {
 80046e6:	1dfb      	adds	r3, r7, #7
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d102      	bne.n	80046f4 <send_bytes+0x24>
		usart = &user_uart1;
 80046ee:	4b36      	ldr	r3, [pc, #216]	; (80047c8 <send_bytes+0xf8>)
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	e001      	b.n	80046f8 <send_bytes+0x28>
	} else {
		usart = &user_uart2;
 80046f4:	4b35      	ldr	r3, [pc, #212]	; (80047cc <send_bytes+0xfc>)
 80046f6:	60fb      	str	r3, [r7, #12]
	}
	usart_sending_off(usart->port);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	0018      	movs	r0, r3
 80046fe:	f000 f8dd 	bl	80048bc <usart_sending_off>
	if (!usart->can_do_both_dirs) {
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	222c      	movs	r2, #44	; 0x2c
 8004706:	5c9b      	ldrb	r3, [r3, r2]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d102      	bne.n	8004712 <send_bytes+0x42>
		set_rs_mode(RS485_DISABLE);
 800470c:	2000      	movs	r0, #0
 800470e:	f000 f8eb 	bl	80048e8 <set_rs_mode>
	}
	if (usart->remaining_bytes > 0) {
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2227      	movs	r2, #39	; 0x27
 8004716:	5c9b      	ldrb	r3, [r3, r2]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <send_bytes+0x50>
		return 3; // let's not allow sending something while the previous operation is in progress
 800471c:	2303      	movs	r3, #3
 800471e:	e04e      	b.n	80047be <send_bytes+0xee>
	}
	if (size > MAX_SEND_BUF) {
 8004720:	1dbb      	adds	r3, r7, #6
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b20      	cmp	r3, #32
 8004726:	d901      	bls.n	800472c <send_bytes+0x5c>
		return 1;
 8004728:	2301      	movs	r3, #1
 800472a:	e048      	b.n	80047be <send_bytes+0xee>
	}
	uint8_t write_cursor = usart->send_cursor + 1;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2226      	movs	r2, #38	; 0x26
 8004730:	5c9a      	ldrb	r2, [r3, r2]
 8004732:	230b      	movs	r3, #11
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	3201      	adds	r2, #1
 8004738:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<size; i++) {
 800473a:	230a      	movs	r3, #10
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	e02f      	b.n	80047a4 <send_bytes+0xd4>
		if(write_cursor>=MAX_SEND_BUF) write_cursor = write_cursor - MAX_SEND_BUF;
 8004744:	220b      	movs	r2, #11
 8004746:	18bb      	adds	r3, r7, r2
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b1f      	cmp	r3, #31
 800474c:	d904      	bls.n	8004758 <send_bytes+0x88>
 800474e:	18bb      	adds	r3, r7, r2
 8004750:	18ba      	adds	r2, r7, r2
 8004752:	7812      	ldrb	r2, [r2, #0]
 8004754:	3a20      	subs	r2, #32
 8004756:	701a      	strb	r2, [r3, #0]
		if(write_cursor>=MAX_SEND_BUF) {
 8004758:	230b      	movs	r3, #11
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b1f      	cmp	r3, #31
 8004760:	d901      	bls.n	8004766 <send_bytes+0x96>
			return 2;
 8004762:	2302      	movs	r3, #2
 8004764:	e02b      	b.n	80047be <send_bytes+0xee>
		}
		usart->send_cycle_buffer[write_cursor] = new_data[i];
 8004766:	200a      	movs	r0, #10
 8004768:	183b      	adds	r3, r7, r0
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	18d2      	adds	r2, r2, r3
 8004770:	240b      	movs	r4, #11
 8004772:	193b      	adds	r3, r7, r4
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	7811      	ldrb	r1, [r2, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	18d3      	adds	r3, r2, r3
 800477c:	1c0a      	adds	r2, r1, #0
 800477e:	711a      	strb	r2, [r3, #4]
		usart->remaining_bytes++;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2227      	movs	r2, #39	; 0x27
 8004784:	5c9b      	ldrb	r3, [r3, r2]
 8004786:	3301      	adds	r3, #1
 8004788:	b2d9      	uxtb	r1, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2227      	movs	r2, #39	; 0x27
 800478e:	5499      	strb	r1, [r3, r2]
		write_cursor++;
 8004790:	193b      	adds	r3, r7, r4
 8004792:	781a      	ldrb	r2, [r3, #0]
 8004794:	193b      	adds	r3, r7, r4
 8004796:	3201      	adds	r2, #1
 8004798:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<size; i++) {
 800479a:	183b      	adds	r3, r7, r0
 800479c:	781a      	ldrb	r2, [r3, #0]
 800479e:	183b      	adds	r3, r7, r0
 80047a0:	3201      	adds	r2, #1
 80047a2:	701a      	strb	r2, [r3, #0]
 80047a4:	230a      	movs	r3, #10
 80047a6:	18fa      	adds	r2, r7, r3
 80047a8:	1dbb      	adds	r3, r7, #6
 80047aa:	7812      	ldrb	r2, [r2, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d3c8      	bcc.n	8004744 <send_bytes+0x74>
	}
	usart_sending_on(usart->port);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	0018      	movs	r0, r3
 80047b8:	f000 f872 	bl	80048a0 <usart_sending_on>
	return 0;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	0018      	movs	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b005      	add	sp, #20
 80047c4:	bd90      	pop	{r4, r7, pc}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	20000a0c 	.word	0x20000a0c
 80047cc:	20000a3c 	.word	0x20000a3c

080047d0 <send_byte_from_buffer>:

uint8_t send_byte_from_buffer(uart_user_friendly * user_uart) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
	USART_TypeDef * port = user_uart->port;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60fb      	str	r3, [r7, #12]
	if(user_uart->remaining_bytes == 0) {
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2227      	movs	r2, #39	; 0x27
 80047e2:	5c9b      	ldrb	r3, [r3, r2]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10d      	bne.n	8004804 <send_byte_from_buffer+0x34>
		usart_sending_off(port);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	0018      	movs	r0, r3
 80047ec:	f000 f866 	bl	80048bc <usart_sending_off>
		if (!user_uart->can_do_both_dirs) {
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	222c      	movs	r2, #44	; 0x2c
 80047f4:	5c9b      	ldrb	r3, [r3, r2]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <send_byte_from_buffer+0x30>
			set_rs_mode(RS485_RX);
 80047fa:	2002      	movs	r0, #2
 80047fc:	f000 f874 	bl	80048e8 <set_rs_mode>
		}
		return 1;
 8004800:	2301      	movs	r3, #1
 8004802:	e02f      	b.n	8004864 <send_byte_from_buffer+0x94>
	}
	if ((port->ISR & USART_ISR_TXE)==0) return 2;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	2280      	movs	r2, #128	; 0x80
 800480a:	4013      	ands	r3, r2
 800480c:	d101      	bne.n	8004812 <send_byte_from_buffer+0x42>
 800480e:	2302      	movs	r3, #2
 8004810:	e028      	b.n	8004864 <send_byte_from_buffer+0x94>
	user_uart->send_cursor = user_uart->send_cursor + 1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2226      	movs	r2, #38	; 0x26
 8004816:	5c9b      	ldrb	r3, [r3, r2]
 8004818:	3301      	adds	r3, #1
 800481a:	b2d9      	uxtb	r1, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2226      	movs	r2, #38	; 0x26
 8004820:	5499      	strb	r1, [r3, r2]

	if(user_uart->send_cursor >= MAX_SEND_BUF) user_uart->send_cursor = 0;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2226      	movs	r2, #38	; 0x26
 8004826:	5c9b      	ldrb	r3, [r3, r2]
 8004828:	2b1f      	cmp	r3, #31
 800482a:	d903      	bls.n	8004834 <send_byte_from_buffer+0x64>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2226      	movs	r2, #38	; 0x26
 8004830:	2100      	movs	r1, #0
 8004832:	5499      	strb	r1, [r3, r2]
	uint8_t to_be_sent = (uint8_t)user_uart->send_cycle_buffer[user_uart->send_cursor];
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2226      	movs	r2, #38	; 0x26
 8004838:	5c9b      	ldrb	r3, [r3, r2]
 800483a:	0019      	movs	r1, r3
 800483c:	200b      	movs	r0, #11
 800483e:	183b      	adds	r3, r7, r0
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	1852      	adds	r2, r2, r1
 8004844:	7912      	ldrb	r2, [r2, #4]
 8004846:	701a      	strb	r2, [r3, #0]
	user_uart->remaining_bytes = user_uart->remaining_bytes - 1;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2227      	movs	r2, #39	; 0x27
 800484c:	5c9b      	ldrb	r3, [r3, r2]
 800484e:	3b01      	subs	r3, #1
 8004850:	b2d9      	uxtb	r1, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2227      	movs	r2, #39	; 0x27
 8004856:	5499      	strb	r1, [r3, r2]
	port->TDR = to_be_sent;
 8004858:	183b      	adds	r3, r7, r0
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	851a      	strh	r2, [r3, #40]	; 0x28
	return 0;
 8004862:	2300      	movs	r3, #0
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	b004      	add	sp, #16
 800486a:	bd80      	pop	{r7, pc}

0800486c <process_accepted_byte>:



void process_accepted_byte(uart_user_friendly * user_uart) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	uint8_t d = user_uart->port->RDR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800487a:	b29a      	uxth	r2, r3
 800487c:	210f      	movs	r1, #15
 800487e:	187b      	adds	r3, r7, r1
 8004880:	701a      	strb	r2, [r3, #0]

	if(user_uart->event_handler) {
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	2b00      	cmp	r3, #0
 8004888:	d006      	beq.n	8004898 <process_accepted_byte+0x2c>
		user_uart->event_handler(d);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	187a      	adds	r2, r7, r1
 8004890:	7812      	ldrb	r2, [r2, #0]
 8004892:	0010      	movs	r0, r2
 8004894:	4798      	blx	r3
	}
	return;
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	46c0      	nop			; (mov r8, r8)

}
 800489a:	46bd      	mov	sp, r7
 800489c:	b004      	add	sp, #16
 800489e:	bd80      	pop	{r7, pc}

080048a0 <usart_sending_on>:

void usart_sending_on(USART_TypeDef * usart) {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
	usart->CR1 |= USART_CR1_TXEIE | USART_CR1_TE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2288      	movs	r2, #136	; 0x88
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	601a      	str	r2, [r3, #0]
}
 80048b4:	46c0      	nop			; (mov r8, r8)
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b002      	add	sp, #8
 80048ba:	bd80      	pop	{r7, pc}

080048bc <usart_sending_off>:

void usart_sending_off(USART_TypeDef * usart) {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	usart->CR1 &= ~(USART_CR1_TXEIE | USART_CR1_TE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2288      	movs	r2, #136	; 0x88
 80048ca:	4393      	bics	r3, r2
 80048cc:	001a      	movs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	601a      	str	r2, [r3, #0]
	usart->CR1 |= USART_CR1_RE  | USART_CR1_RXNEIE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2224      	movs	r2, #36	; 0x24
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	601a      	str	r2, [r3, #0]
}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b002      	add	sp, #8
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <set_rs_mode>:

void set_rs_mode(uint8_t new_mode) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	0002      	movs	r2, r0
 80048f0:	1dfb      	adds	r3, r7, #7
 80048f2:	701a      	strb	r2, [r3, #0]
	USART_TypeDef * usart = USART2;
 80048f4:	4b18      	ldr	r3, [pc, #96]	; (8004958 <set_rs_mode+0x70>)
 80048f6:	60fb      	str	r3, [r7, #12]

	if (new_mode == RS485_DISABLE) {
 80048f8:	1dfb      	adds	r3, r7, #7
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d107      	bne.n	8004910 <set_rs_mode+0x28>
		usart->CR1 &= ~(USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_TXEIE);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	22ac      	movs	r2, #172	; 0xac
 8004906:	4393      	bics	r3, r2
 8004908:	001a      	movs	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	601a      	str	r2, [r3, #0]
		usart->CR1 &= ~(USART_CR1_RE  | USART_CR1_RXNEIE);
	} else {
		usart->CR1 &= ~(USART_CR1_TE | USART_CR1_TXEIE);
		usart->CR1 |= USART_CR1_RE  | USART_CR1_RXNEIE;
	}
}
 800490e:	e01e      	b.n	800494e <set_rs_mode+0x66>
	} else if (new_mode == RS485_TX) {
 8004910:	1dfb      	adds	r3, r7, #7
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d10d      	bne.n	8004934 <set_rs_mode+0x4c>
		usart->CR1 |= USART_CR1_TE | USART_CR1_TXEIE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2288      	movs	r2, #136	; 0x88
 800491e:	431a      	orrs	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]
		usart->CR1 &= ~(USART_CR1_RE  | USART_CR1_RXNEIE);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2224      	movs	r2, #36	; 0x24
 800492a:	4393      	bics	r3, r2
 800492c:	001a      	movs	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	601a      	str	r2, [r3, #0]
}
 8004932:	e00c      	b.n	800494e <set_rs_mode+0x66>
		usart->CR1 &= ~(USART_CR1_TE | USART_CR1_TXEIE);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2288      	movs	r2, #136	; 0x88
 800493a:	4393      	bics	r3, r2
 800493c:	001a      	movs	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	601a      	str	r2, [r3, #0]
		usart->CR1 |= USART_CR1_RE  | USART_CR1_RXNEIE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2224      	movs	r2, #36	; 0x24
 8004948:	431a      	orrs	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	601a      	str	r2, [r3, #0]
}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	46bd      	mov	sp, r7
 8004952:	b004      	add	sp, #16
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	40004400 	.word	0x40004400

0800495c <default_usart_handler>:

void default_usart_handler(uart_user_friendly * user_uart) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
	USART_TypeDef * usart = user_uart->port;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60fb      	str	r3, [r7, #12]
	if(usart->ISR & USART_ISR_RXNE) {
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	2220      	movs	r2, #32
 8004970:	4013      	ands	r3, r2
 8004972:	d004      	beq.n	800497e <default_usart_handler+0x22>
		process_accepted_byte(user_uart);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	0018      	movs	r0, r3
 8004978:	f7ff ff78 	bl	800486c <process_accepted_byte>
		return;
 800497c:	e028      	b.n	80049d0 <default_usart_handler+0x74>
	}
	if(usart->ISR & USART_ISR_ORE) {
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	2208      	movs	r2, #8
 8004984:	4013      	ands	r3, r2
 8004986:	d00a      	beq.n	800499e <default_usart_handler+0x42>
		usart->ICR = (UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	220f      	movs	r2, #15
 800498c:	621a      	str	r2, [r3, #32]
		usart->CR1 &= ~USART_CR1_IDLEIE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2210      	movs	r2, #16
 8004994:	4393      	bics	r3, r2
 8004996:	001a      	movs	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	601a      	str	r2, [r3, #0]
		return;
 800499c:	e018      	b.n	80049d0 <default_usart_handler+0x74>
	}
	if(usart->ISR & USART_ISR_TXE) {
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	2280      	movs	r2, #128	; 0x80
 80049a4:	4013      	ands	r3, r2
 80049a6:	d004      	beq.n	80049b2 <default_usart_handler+0x56>
		send_byte_from_buffer(user_uart);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	0018      	movs	r0, r3
 80049ac:	f7ff ff10 	bl	80047d0 <send_byte_from_buffer>
		return;
 80049b0:	e00e      	b.n	80049d0 <default_usart_handler+0x74>
	}
	if(usart->ISR & USART_ISR_FE) {
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	2202      	movs	r2, #2
 80049b8:	4013      	ands	r3, r2
 80049ba:	d009      	beq.n	80049d0 <default_usart_handler+0x74>
		usart->ICR = (UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	220f      	movs	r2, #15
 80049c0:	621a      	str	r2, [r3, #32]
		usart->CR1 &= ~USART_CR1_IDLEIE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2210      	movs	r2, #16
 80049c8:	4393      	bics	r3, r2
 80049ca:	001a      	movs	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	601a      	str	r2, [r3, #0]
	}
}
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b004      	add	sp, #16
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <flash_read>:

uint32_t flash_read(){
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
	uint32_t * res = (uint32_t*)(FLASH_BANK1_END - 2047);
 80049de:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <flash_read+0x18>)
 80049e0:	607b      	str	r3, [r7, #4]
    return res[0];
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
}
 80049e6:	0018      	movs	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	b002      	add	sp, #8
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	46c0      	nop			; (mov r8, r8)
 80049f0:	0801f800 	.word	0x0801f800

080049f4 <flash_write>:

void flash_write(uint32_t data){
 80049f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.PageAddress = FLASH_BANK1_END - 2047;
 80049fc:	260c      	movs	r6, #12
 80049fe:	19bb      	adds	r3, r7, r6
 8004a00:	4a13      	ldr	r2, [pc, #76]	; (8004a50 <flash_write+0x5c>)
 8004a02:	605a      	str	r2, [r3, #4]
    EraseInitStruct.TypeErase = TYPEERASE_PAGES;
 8004a04:	19bb      	adds	r3, r7, r6
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
    EraseInitStruct.NbPages = 1;
 8004a0a:	19bb      	adds	r3, r7, r6
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	609a      	str	r2, [r3, #8]
    uint32_t PageError = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	60bb      	str	r3, [r7, #8]
    if (HAL_FLASH_Unlock() == HAL_OK) {
 8004a14:	f000 fa98 	bl	8004f48 <HAL_FLASH_Unlock>
 8004a18:	1e03      	subs	r3, r0, #0
 8004a1a:	d114      	bne.n	8004a46 <flash_write+0x52>
    	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK) {
 8004a1c:	2308      	movs	r3, #8
 8004a1e:	18fa      	adds	r2, r7, r3
 8004a20:	19bb      	adds	r3, r7, r6
 8004a22:	0011      	movs	r1, r2
 8004a24:	0018      	movs	r0, r3
 8004a26:	f000 fb4f 	bl	80050c8 <HAL_FLASHEx_Erase>
 8004a2a:	1e03      	subs	r3, r0, #0
 8004a2c:	d109      	bne.n	8004a42 <flash_write+0x4e>
    		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_BANK1_END - 2047, data);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	001c      	movs	r4, r3
 8004a32:	2300      	movs	r3, #0
 8004a34:	001d      	movs	r5, r3
 8004a36:	4906      	ldr	r1, [pc, #24]	; (8004a50 <flash_write+0x5c>)
 8004a38:	0022      	movs	r2, r4
 8004a3a:	002b      	movs	r3, r5
 8004a3c:	2002      	movs	r0, #2
 8004a3e:	f000 f9ed 	bl	8004e1c <HAL_FLASH_Program>
    	}
    	HAL_FLASH_Lock();
 8004a42:	f000 faa7 	bl	8004f94 <HAL_FLASH_Lock>
    }
}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b007      	add	sp, #28
 8004a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	0801f800 	.word	0x0801f800

08004a54 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
	default_usart_handler(&user_uart1);
 8004a58:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <USART1_IRQHandler+0x14>)
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f7ff ff7e 	bl	800495c <default_usart_handler>
}
 8004a60:	46c0      	nop			; (mov r8, r8)
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	20000a0c 	.word	0x20000a0c

08004a6c <USART2_IRQHandler>:
void USART2_IRQHandler(void) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
	default_usart_handler(&user_uart2);
 8004a70:	4b03      	ldr	r3, [pc, #12]	; (8004a80 <USART2_IRQHandler+0x14>)
 8004a72:	0018      	movs	r0, r3
 8004a74:	f7ff ff72 	bl	800495c <default_usart_handler>
}
 8004a78:	46c0      	nop			; (mov r8, r8)
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	20000a3c 	.word	0x20000a3c

08004a84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
	return 1;
 8004a88:	2301      	movs	r3, #1
}
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <_kill>:

int _kill(int pid, int sig)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004a9a:	f005 f941 	bl	8009d20 <__errno>
 8004a9e:	0003      	movs	r3, r0
 8004aa0:	2216      	movs	r2, #22
 8004aa2:	601a      	str	r2, [r3, #0]
	return -1;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	425b      	negs	r3, r3
}
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	b002      	add	sp, #8
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <_exit>:

void _exit (int status)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ab8:	2301      	movs	r3, #1
 8004aba:	425a      	negs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	0011      	movs	r1, r2
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7ff ffe5 	bl	8004a90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004ac6:	e7fe      	b.n	8004ac6 <_exit+0x16>

08004ac8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e00a      	b.n	8004af0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004ada:	e000      	b.n	8004ade <_read+0x16>
 8004adc:	bf00      	nop
 8004ade:	0001      	movs	r1, r0
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	60ba      	str	r2, [r7, #8]
 8004ae6:	b2ca      	uxtb	r2, r1
 8004ae8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	3301      	adds	r3, #1
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	dbf0      	blt.n	8004ada <_read+0x12>
	}

return len;
 8004af8:	687b      	ldr	r3, [r7, #4]
}
 8004afa:	0018      	movs	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	b006      	add	sp, #24
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b086      	sub	sp, #24
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	e009      	b.n	8004b28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	60ba      	str	r2, [r7, #8]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	e000      	b.n	8004b22 <_write+0x20>
 8004b20:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	3301      	adds	r3, #1
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	dbf1      	blt.n	8004b14 <_write+0x12>
	}
	return len;
 8004b30:	687b      	ldr	r3, [r7, #4]
}
 8004b32:	0018      	movs	r0, r3
 8004b34:	46bd      	mov	sp, r7
 8004b36:	b006      	add	sp, #24
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <_close>:

int _close(int file)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
	return -1;
 8004b42:	2301      	movs	r3, #1
 8004b44:	425b      	negs	r3, r3
}
 8004b46:	0018      	movs	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b002      	add	sp, #8
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2280      	movs	r2, #128	; 0x80
 8004b5c:	0192      	lsls	r2, r2, #6
 8004b5e:	605a      	str	r2, [r3, #4]
	return 0;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	0018      	movs	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b002      	add	sp, #8
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <_isatty>:

int _isatty(int file)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
	return 1;
 8004b72:	2301      	movs	r3, #1
}
 8004b74:	0018      	movs	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b002      	add	sp, #8
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
	return 0;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b004      	add	sp, #16
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b9c:	4a14      	ldr	r2, [pc, #80]	; (8004bf0 <_sbrk+0x5c>)
 8004b9e:	4b15      	ldr	r3, [pc, #84]	; (8004bf4 <_sbrk+0x60>)
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ba8:	4b13      	ldr	r3, [pc, #76]	; (8004bf8 <_sbrk+0x64>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d102      	bne.n	8004bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bb0:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <_sbrk+0x64>)
 8004bb2:	4a12      	ldr	r2, [pc, #72]	; (8004bfc <_sbrk+0x68>)
 8004bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bb6:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <_sbrk+0x64>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	18d3      	adds	r3, r2, r3
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d207      	bcs.n	8004bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bc4:	f005 f8ac 	bl	8009d20 <__errno>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	220c      	movs	r2, #12
 8004bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	425b      	negs	r3, r3
 8004bd2:	e009      	b.n	8004be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bd4:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <_sbrk+0x64>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bda:	4b07      	ldr	r3, [pc, #28]	; (8004bf8 <_sbrk+0x64>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	18d2      	adds	r2, r2, r3
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <_sbrk+0x64>)
 8004be4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004be6:	68fb      	ldr	r3, [r7, #12]
}
 8004be8:	0018      	movs	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b006      	add	sp, #24
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	20004000 	.word	0x20004000
 8004bf4:	00000400 	.word	0x00000400
 8004bf8:	20000a6c 	.word	0x20000a6c
 8004bfc:	20002528 	.word	0x20002528

08004c00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004c04:	46c0      	nop			; (mov r8, r8)
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004c0c:	480d      	ldr	r0, [pc, #52]	; (8004c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004c0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c10:	480d      	ldr	r0, [pc, #52]	; (8004c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8004c12:	490e      	ldr	r1, [pc, #56]	; (8004c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c14:	4a0e      	ldr	r2, [pc, #56]	; (8004c50 <LoopForever+0xe>)
  movs r3, #0
 8004c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c18:	e002      	b.n	8004c20 <LoopCopyDataInit>

08004c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c1e:	3304      	adds	r3, #4

08004c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c24:	d3f9      	bcc.n	8004c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c26:	4a0b      	ldr	r2, [pc, #44]	; (8004c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c28:	4c0b      	ldr	r4, [pc, #44]	; (8004c58 <LoopForever+0x16>)
  movs r3, #0
 8004c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c2c:	e001      	b.n	8004c32 <LoopFillZerobss>

08004c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c30:	3204      	adds	r2, #4

08004c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c34:	d3fb      	bcc.n	8004c2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004c36:	f7ff ffe3 	bl	8004c00 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004c3a:	f005 f877 	bl	8009d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c3e:	f7fd fda9 	bl	8002794 <main>

08004c42 <LoopForever>:

LoopForever:
    b LoopForever
 8004c42:	e7fe      	b.n	8004c42 <LoopForever>
  ldr   r0, =_estack
 8004c44:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c4c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8004c50:	0800dea0 	.word	0x0800dea0
  ldr r2, =_sbss
 8004c54:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004c58:	20002524 	.word	0x20002524

08004c5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c5c:	e7fe      	b.n	8004c5c <ADC1_IRQHandler>
	...

08004c60 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c64:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <HAL_Init+0x24>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <HAL_Init+0x24>)
 8004c6a:	2110      	movs	r1, #16
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004c70:	2000      	movs	r0, #0
 8004c72:	f7ff fc69 	bl	8004548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c76:	f7ff fb29 	bl	80042cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	40022000 	.word	0x40022000

08004c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <HAL_IncTick+0x1c>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	001a      	movs	r2, r3
 8004c92:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <HAL_IncTick+0x20>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	18d2      	adds	r2, r2, r3
 8004c98:	4b03      	ldr	r3, [pc, #12]	; (8004ca8 <HAL_IncTick+0x20>)
 8004c9a:	601a      	str	r2, [r3, #0]
}
 8004c9c:	46c0      	nop			; (mov r8, r8)
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	2000001c 	.word	0x2000001c
 8004ca8:	20000a70 	.word	0x20000a70

08004cac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  return uwTick;
 8004cb0:	4b02      	ldr	r3, [pc, #8]	; (8004cbc <HAL_GetTick+0x10>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
}
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	20000a70 	.word	0x20000a70

08004cc0 <__NVIC_EnableIRQ>:
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	0002      	movs	r2, r0
 8004cc8:	1dfb      	adds	r3, r7, #7
 8004cca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004ccc:	1dfb      	adds	r3, r7, #7
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd2:	d809      	bhi.n	8004ce8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cd4:	1dfb      	adds	r3, r7, #7
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	001a      	movs	r2, r3
 8004cda:	231f      	movs	r3, #31
 8004cdc:	401a      	ands	r2, r3
 8004cde:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <__NVIC_EnableIRQ+0x30>)
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	4091      	lsls	r1, r2
 8004ce4:	000a      	movs	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]
}
 8004ce8:	46c0      	nop			; (mov r8, r8)
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b002      	add	sp, #8
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	e000e100 	.word	0xe000e100

08004cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cf4:	b590      	push	{r4, r7, lr}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	0002      	movs	r2, r0
 8004cfc:	6039      	str	r1, [r7, #0]
 8004cfe:	1dfb      	adds	r3, r7, #7
 8004d00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d02:	1dfb      	adds	r3, r7, #7
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b7f      	cmp	r3, #127	; 0x7f
 8004d08:	d828      	bhi.n	8004d5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d0a:	4a2f      	ldr	r2, [pc, #188]	; (8004dc8 <__NVIC_SetPriority+0xd4>)
 8004d0c:	1dfb      	adds	r3, r7, #7
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	b25b      	sxtb	r3, r3
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	33c0      	adds	r3, #192	; 0xc0
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	589b      	ldr	r3, [r3, r2]
 8004d1a:	1dfa      	adds	r2, r7, #7
 8004d1c:	7812      	ldrb	r2, [r2, #0]
 8004d1e:	0011      	movs	r1, r2
 8004d20:	2203      	movs	r2, #3
 8004d22:	400a      	ands	r2, r1
 8004d24:	00d2      	lsls	r2, r2, #3
 8004d26:	21ff      	movs	r1, #255	; 0xff
 8004d28:	4091      	lsls	r1, r2
 8004d2a:	000a      	movs	r2, r1
 8004d2c:	43d2      	mvns	r2, r2
 8004d2e:	401a      	ands	r2, r3
 8004d30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	019b      	lsls	r3, r3, #6
 8004d36:	22ff      	movs	r2, #255	; 0xff
 8004d38:	401a      	ands	r2, r3
 8004d3a:	1dfb      	adds	r3, r7, #7
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	0018      	movs	r0, r3
 8004d40:	2303      	movs	r3, #3
 8004d42:	4003      	ands	r3, r0
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d48:	481f      	ldr	r0, [pc, #124]	; (8004dc8 <__NVIC_SetPriority+0xd4>)
 8004d4a:	1dfb      	adds	r3, r7, #7
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	b25b      	sxtb	r3, r3
 8004d50:	089b      	lsrs	r3, r3, #2
 8004d52:	430a      	orrs	r2, r1
 8004d54:	33c0      	adds	r3, #192	; 0xc0
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004d5a:	e031      	b.n	8004dc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d5c:	4a1b      	ldr	r2, [pc, #108]	; (8004dcc <__NVIC_SetPriority+0xd8>)
 8004d5e:	1dfb      	adds	r3, r7, #7
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	0019      	movs	r1, r3
 8004d64:	230f      	movs	r3, #15
 8004d66:	400b      	ands	r3, r1
 8004d68:	3b08      	subs	r3, #8
 8004d6a:	089b      	lsrs	r3, r3, #2
 8004d6c:	3306      	adds	r3, #6
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	18d3      	adds	r3, r2, r3
 8004d72:	3304      	adds	r3, #4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	1dfa      	adds	r2, r7, #7
 8004d78:	7812      	ldrb	r2, [r2, #0]
 8004d7a:	0011      	movs	r1, r2
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	400a      	ands	r2, r1
 8004d80:	00d2      	lsls	r2, r2, #3
 8004d82:	21ff      	movs	r1, #255	; 0xff
 8004d84:	4091      	lsls	r1, r2
 8004d86:	000a      	movs	r2, r1
 8004d88:	43d2      	mvns	r2, r2
 8004d8a:	401a      	ands	r2, r3
 8004d8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	019b      	lsls	r3, r3, #6
 8004d92:	22ff      	movs	r2, #255	; 0xff
 8004d94:	401a      	ands	r2, r3
 8004d96:	1dfb      	adds	r3, r7, #7
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	4003      	ands	r3, r0
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004da4:	4809      	ldr	r0, [pc, #36]	; (8004dcc <__NVIC_SetPriority+0xd8>)
 8004da6:	1dfb      	adds	r3, r7, #7
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	001c      	movs	r4, r3
 8004dac:	230f      	movs	r3, #15
 8004dae:	4023      	ands	r3, r4
 8004db0:	3b08      	subs	r3, #8
 8004db2:	089b      	lsrs	r3, r3, #2
 8004db4:	430a      	orrs	r2, r1
 8004db6:	3306      	adds	r3, #6
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	18c3      	adds	r3, r0, r3
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	601a      	str	r2, [r3, #0]
}
 8004dc0:	46c0      	nop			; (mov r8, r8)
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	b003      	add	sp, #12
 8004dc6:	bd90      	pop	{r4, r7, pc}
 8004dc8:	e000e100 	.word	0xe000e100
 8004dcc:	e000ed00 	.word	0xe000ed00

08004dd0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	210f      	movs	r1, #15
 8004ddc:	187b      	adds	r3, r7, r1
 8004dde:	1c02      	adds	r2, r0, #0
 8004de0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	187b      	adds	r3, r7, r1
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	b25b      	sxtb	r3, r3
 8004dea:	0011      	movs	r1, r2
 8004dec:	0018      	movs	r0, r3
 8004dee:	f7ff ff81 	bl	8004cf4 <__NVIC_SetPriority>
}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	46bd      	mov	sp, r7
 8004df6:	b004      	add	sp, #16
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	0002      	movs	r2, r0
 8004e02:	1dfb      	adds	r3, r7, #7
 8004e04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e06:	1dfb      	adds	r3, r7, #7
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	b25b      	sxtb	r3, r3
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7ff ff57 	bl	8004cc0 <__NVIC_EnableIRQ>
}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b002      	add	sp, #8
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	603a      	str	r2, [r7, #0]
 8004e28:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e2a:	2317      	movs	r3, #23
 8004e2c:	18fb      	adds	r3, r7, r3
 8004e2e:	2201      	movs	r2, #1
 8004e30:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8004e32:	2316      	movs	r3, #22
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	2200      	movs	r2, #0
 8004e38:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8004e3a:	2315      	movs	r3, #21
 8004e3c:	18fb      	adds	r3, r7, r3
 8004e3e:	2200      	movs	r2, #0
 8004e40:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e42:	4b3e      	ldr	r3, [pc, #248]	; (8004f3c <HAL_FLASH_Program+0x120>)
 8004e44:	7e1b      	ldrb	r3, [r3, #24]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <HAL_FLASH_Program+0x32>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e072      	b.n	8004f34 <HAL_FLASH_Program+0x118>
 8004e4e:	4b3b      	ldr	r3, [pc, #236]	; (8004f3c <HAL_FLASH_Program+0x120>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004e54:	2317      	movs	r3, #23
 8004e56:	18fe      	adds	r6, r7, r3
 8004e58:	4b39      	ldr	r3, [pc, #228]	; (8004f40 <HAL_FLASH_Program+0x124>)
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	f000 f8c4 	bl	8004fe8 <FLASH_WaitForLastOperation>
 8004e60:	0003      	movs	r3, r0
 8004e62:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8004e64:	2317      	movs	r3, #23
 8004e66:	18fb      	adds	r3, r7, r3
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d15c      	bne.n	8004f28 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d104      	bne.n	8004e7e <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004e74:	2315      	movs	r3, #21
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	2201      	movs	r2, #1
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	e00b      	b.n	8004e96 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d104      	bne.n	8004e8e <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004e84:	2315      	movs	r3, #21
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	2202      	movs	r2, #2
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	e003      	b.n	8004e96 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004e8e:	2315      	movs	r3, #21
 8004e90:	18fb      	adds	r3, r7, r3
 8004e92:	2204      	movs	r2, #4
 8004e94:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8004e96:	2316      	movs	r3, #22
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	e039      	b.n	8004f14 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004ea0:	2116      	movs	r1, #22
 8004ea2:	187b      	adds	r3, r7, r1
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	005a      	lsls	r2, r3, #1
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	18d0      	adds	r0, r2, r3
 8004eac:	187b      	adds	r3, r7, r1
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	001a      	movs	r2, r3
 8004eb4:	3a20      	subs	r2, #32
 8004eb6:	2a00      	cmp	r2, #0
 8004eb8:	db03      	blt.n	8004ec2 <HAL_FLASH_Program+0xa6>
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	40d1      	lsrs	r1, r2
 8004ebe:	000c      	movs	r4, r1
 8004ec0:	e008      	b.n	8004ed4 <HAL_FLASH_Program+0xb8>
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	1ad2      	subs	r2, r2, r3
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	4091      	lsls	r1, r2
 8004eca:	000a      	movs	r2, r1
 8004ecc:	6839      	ldr	r1, [r7, #0]
 8004ece:	40d9      	lsrs	r1, r3
 8004ed0:	000c      	movs	r4, r1
 8004ed2:	4314      	orrs	r4, r2
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	40da      	lsrs	r2, r3
 8004ed8:	0015      	movs	r5, r2
 8004eda:	b2a3      	uxth	r3, r4
 8004edc:	0019      	movs	r1, r3
 8004ede:	f000 f867 	bl	8004fb0 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ee2:	2317      	movs	r3, #23
 8004ee4:	18fe      	adds	r6, r7, r3
 8004ee6:	4b16      	ldr	r3, [pc, #88]	; (8004f40 <HAL_FLASH_Program+0x124>)
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f000 f87d 	bl	8004fe8 <FLASH_WaitForLastOperation>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004ef2:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <HAL_FLASH_Program+0x128>)
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <HAL_FLASH_Program+0x128>)
 8004ef8:	2101      	movs	r1, #1
 8004efa:	438a      	bics	r2, r1
 8004efc:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8004efe:	2317      	movs	r3, #23
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10e      	bne.n	8004f26 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8004f08:	2116      	movs	r1, #22
 8004f0a:	187b      	adds	r3, r7, r1
 8004f0c:	781a      	ldrb	r2, [r3, #0]
 8004f0e:	187b      	adds	r3, r7, r1
 8004f10:	3201      	adds	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	2316      	movs	r3, #22
 8004f16:	18fa      	adds	r2, r7, r3
 8004f18:	2315      	movs	r3, #21
 8004f1a:	18fb      	adds	r3, r7, r3
 8004f1c:	7812      	ldrb	r2, [r2, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d3bd      	bcc.n	8004ea0 <HAL_FLASH_Program+0x84>
 8004f24:	e000      	b.n	8004f28 <HAL_FLASH_Program+0x10c>
      {
        break;
 8004f26:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f28:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <HAL_FLASH_Program+0x120>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	761a      	strb	r2, [r3, #24]

  return status;
 8004f2e:	2317      	movs	r3, #23
 8004f30:	18fb      	adds	r3, r7, r3
 8004f32:	781b      	ldrb	r3, [r3, #0]
}
 8004f34:	0018      	movs	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	b007      	add	sp, #28
 8004f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f3c:	20000a78 	.word	0x20000a78
 8004f40:	0000c350 	.word	0x0000c350
 8004f44:	40022000 	.word	0x40022000

08004f48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004f4e:	1dfb      	adds	r3, r7, #7
 8004f50:	2200      	movs	r2, #0
 8004f52:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004f54:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <HAL_FLASH_Unlock+0x40>)
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	2280      	movs	r2, #128	; 0x80
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d00d      	beq.n	8004f7a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004f5e:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <HAL_FLASH_Unlock+0x40>)
 8004f60:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <HAL_FLASH_Unlock+0x44>)
 8004f62:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004f64:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <HAL_FLASH_Unlock+0x40>)
 8004f66:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <HAL_FLASH_Unlock+0x48>)
 8004f68:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004f6a:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <HAL_FLASH_Unlock+0x40>)
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2280      	movs	r2, #128	; 0x80
 8004f70:	4013      	ands	r3, r2
 8004f72:	d002      	beq.n	8004f7a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004f74:	1dfb      	adds	r3, r7, #7
 8004f76:	2201      	movs	r2, #1
 8004f78:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004f7a:	1dfb      	adds	r3, r7, #7
 8004f7c:	781b      	ldrb	r3, [r3, #0]
}
 8004f7e:	0018      	movs	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b002      	add	sp, #8
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	40022000 	.word	0x40022000
 8004f8c:	45670123 	.word	0x45670123
 8004f90:	cdef89ab 	.word	0xcdef89ab

08004f94 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004f98:	4b04      	ldr	r3, [pc, #16]	; (8004fac <HAL_FLASH_Lock+0x18>)
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	4b03      	ldr	r3, [pc, #12]	; (8004fac <HAL_FLASH_Lock+0x18>)
 8004f9e:	2180      	movs	r1, #128	; 0x80
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40022000 	.word	0x40022000

08004fb0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	000a      	movs	r2, r1
 8004fba:	1cbb      	adds	r3, r7, #2
 8004fbc:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004fbe:	4b08      	ldr	r3, [pc, #32]	; (8004fe0 <FLASH_Program_HalfWord+0x30>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004fc4:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <FLASH_Program_HalfWord+0x34>)
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <FLASH_Program_HalfWord+0x34>)
 8004fca:	2101      	movs	r1, #1
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	1cba      	adds	r2, r7, #2
 8004fd4:	8812      	ldrh	r2, [r2, #0]
 8004fd6:	801a      	strh	r2, [r3, #0]
}
 8004fd8:	46c0      	nop			; (mov r8, r8)
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b002      	add	sp, #8
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20000a78 	.word	0x20000a78
 8004fe4:	40022000 	.word	0x40022000

08004fe8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004ff0:	f7ff fe5c 	bl	8004cac <HAL_GetTick>
 8004ff4:	0003      	movs	r3, r0
 8004ff6:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004ff8:	e00f      	b.n	800501a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	d00c      	beq.n	800501a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d007      	beq.n	8005016 <FLASH_WaitForLastOperation+0x2e>
 8005006:	f7ff fe51 	bl	8004cac <HAL_GetTick>
 800500a:	0002      	movs	r2, r0
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	429a      	cmp	r2, r3
 8005014:	d201      	bcs.n	800501a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e01f      	b.n	800505a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800501a:	4b12      	ldr	r3, [pc, #72]	; (8005064 <FLASH_WaitForLastOperation+0x7c>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	2201      	movs	r2, #1
 8005020:	4013      	ands	r3, r2
 8005022:	2b01      	cmp	r3, #1
 8005024:	d0e9      	beq.n	8004ffa <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005026:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <FLASH_WaitForLastOperation+0x7c>)
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	4013      	ands	r3, r2
 800502e:	2b20      	cmp	r3, #32
 8005030:	d102      	bne.n	8005038 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005032:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <FLASH_WaitForLastOperation+0x7c>)
 8005034:	2220      	movs	r2, #32
 8005036:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005038:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <FLASH_WaitForLastOperation+0x7c>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	2210      	movs	r2, #16
 800503e:	4013      	ands	r3, r2
 8005040:	2b10      	cmp	r3, #16
 8005042:	d005      	beq.n	8005050 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005044:	4b07      	ldr	r3, [pc, #28]	; (8005064 <FLASH_WaitForLastOperation+0x7c>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	2204      	movs	r2, #4
 800504a:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800504c:	2b04      	cmp	r3, #4
 800504e:	d103      	bne.n	8005058 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005050:	f000 f80a 	bl	8005068 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	0018      	movs	r0, r3
 800505c:	46bd      	mov	sp, r7
 800505e:	b004      	add	sp, #16
 8005060:	bd80      	pop	{r7, pc}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	40022000 	.word	0x40022000

08005068 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005072:	4b13      	ldr	r3, [pc, #76]	; (80050c0 <FLASH_SetErrorCode+0x58>)
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2210      	movs	r2, #16
 8005078:	4013      	ands	r3, r2
 800507a:	2b10      	cmp	r3, #16
 800507c:	d109      	bne.n	8005092 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800507e:	4b11      	ldr	r3, [pc, #68]	; (80050c4 <FLASH_SetErrorCode+0x5c>)
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	2202      	movs	r2, #2
 8005084:	431a      	orrs	r2, r3
 8005086:	4b0f      	ldr	r3, [pc, #60]	; (80050c4 <FLASH_SetErrorCode+0x5c>)
 8005088:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2210      	movs	r2, #16
 800508e:	4313      	orrs	r3, r2
 8005090:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005092:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <FLASH_SetErrorCode+0x58>)
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	2204      	movs	r2, #4
 8005098:	4013      	ands	r3, r2
 800509a:	2b04      	cmp	r3, #4
 800509c:	d109      	bne.n	80050b2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800509e:	4b09      	ldr	r3, [pc, #36]	; (80050c4 <FLASH_SetErrorCode+0x5c>)
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	2201      	movs	r2, #1
 80050a4:	431a      	orrs	r2, r3
 80050a6:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <FLASH_SetErrorCode+0x5c>)
 80050a8:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2204      	movs	r2, #4
 80050ae:	4313      	orrs	r3, r2
 80050b0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80050b2:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <FLASH_SetErrorCode+0x58>)
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	60da      	str	r2, [r3, #12]
}  
 80050b8:	46c0      	nop			; (mov r8, r8)
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b002      	add	sp, #8
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40022000 	.word	0x40022000
 80050c4:	20000a78 	.word	0x20000a78

080050c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80050c8:	b5b0      	push	{r4, r5, r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80050d2:	230f      	movs	r3, #15
 80050d4:	18fb      	adds	r3, r7, r3
 80050d6:	2201      	movs	r2, #1
 80050d8:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80050de:	4b32      	ldr	r3, [pc, #200]	; (80051a8 <HAL_FLASHEx_Erase+0xe0>)
 80050e0:	7e1b      	ldrb	r3, [r3, #24]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_FLASHEx_Erase+0x22>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e05a      	b.n	80051a0 <HAL_FLASHEx_Erase+0xd8>
 80050ea:	4b2f      	ldr	r3, [pc, #188]	; (80051a8 <HAL_FLASHEx_Erase+0xe0>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d116      	bne.n	8005126 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80050f8:	4b2c      	ldr	r3, [pc, #176]	; (80051ac <HAL_FLASHEx_Erase+0xe4>)
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7ff ff74 	bl	8004fe8 <FLASH_WaitForLastOperation>
 8005100:	1e03      	subs	r3, r0, #0
 8005102:	d147      	bne.n	8005194 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8005104:	f000 f856 	bl	80051b4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005108:	230f      	movs	r3, #15
 800510a:	18fc      	adds	r4, r7, r3
 800510c:	4b27      	ldr	r3, [pc, #156]	; (80051ac <HAL_FLASHEx_Erase+0xe4>)
 800510e:	0018      	movs	r0, r3
 8005110:	f7ff ff6a 	bl	8004fe8 <FLASH_WaitForLastOperation>
 8005114:	0003      	movs	r3, r0
 8005116:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005118:	4b25      	ldr	r3, [pc, #148]	; (80051b0 <HAL_FLASHEx_Erase+0xe8>)
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	4b24      	ldr	r3, [pc, #144]	; (80051b0 <HAL_FLASHEx_Erase+0xe8>)
 800511e:	2104      	movs	r1, #4
 8005120:	438a      	bics	r2, r1
 8005122:	611a      	str	r2, [r3, #16]
 8005124:	e036      	b.n	8005194 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005126:	4b21      	ldr	r3, [pc, #132]	; (80051ac <HAL_FLASHEx_Erase+0xe4>)
 8005128:	0018      	movs	r0, r3
 800512a:	f7ff ff5d 	bl	8004fe8 <FLASH_WaitForLastOperation>
 800512e:	1e03      	subs	r3, r0, #0
 8005130:	d130      	bne.n	8005194 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2201      	movs	r2, #1
 8005136:	4252      	negs	r2, r2
 8005138:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	e01f      	b.n	8005182 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	0018      	movs	r0, r3
 8005146:	f000 f84d 	bl	80051e4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800514a:	250f      	movs	r5, #15
 800514c:	197c      	adds	r4, r7, r5
 800514e:	4b17      	ldr	r3, [pc, #92]	; (80051ac <HAL_FLASHEx_Erase+0xe4>)
 8005150:	0018      	movs	r0, r3
 8005152:	f7ff ff49 	bl	8004fe8 <FLASH_WaitForLastOperation>
 8005156:	0003      	movs	r3, r0
 8005158:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800515a:	4b15      	ldr	r3, [pc, #84]	; (80051b0 <HAL_FLASHEx_Erase+0xe8>)
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	4b14      	ldr	r3, [pc, #80]	; (80051b0 <HAL_FLASHEx_Erase+0xe8>)
 8005160:	2102      	movs	r1, #2
 8005162:	438a      	bics	r2, r1
 8005164:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8005166:	197b      	adds	r3, r7, r5
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	601a      	str	r2, [r3, #0]
            break;
 8005174:	e00e      	b.n	8005194 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2280      	movs	r2, #128	; 0x80
 800517a:	0112      	lsls	r2, r2, #4
 800517c:	4694      	mov	ip, r2
 800517e:	4463      	add	r3, ip
 8005180:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	02da      	lsls	r2, r3, #11
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	18d3      	adds	r3, r2, r3
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	429a      	cmp	r2, r3
 8005192:	d3d6      	bcc.n	8005142 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005194:	4b04      	ldr	r3, [pc, #16]	; (80051a8 <HAL_FLASHEx_Erase+0xe0>)
 8005196:	2200      	movs	r2, #0
 8005198:	761a      	strb	r2, [r3, #24]

  return status;
 800519a:	230f      	movs	r3, #15
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	781b      	ldrb	r3, [r3, #0]
}
 80051a0:	0018      	movs	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b004      	add	sp, #16
 80051a6:	bdb0      	pop	{r4, r5, r7, pc}
 80051a8:	20000a78 	.word	0x20000a78
 80051ac:	0000c350 	.word	0x0000c350
 80051b0:	40022000 	.word	0x40022000

080051b4 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80051b8:	4b08      	ldr	r3, [pc, #32]	; (80051dc <FLASH_MassErase+0x28>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80051be:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <FLASH_MassErase+0x2c>)
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	4b07      	ldr	r3, [pc, #28]	; (80051e0 <FLASH_MassErase+0x2c>)
 80051c4:	2104      	movs	r1, #4
 80051c6:	430a      	orrs	r2, r1
 80051c8:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80051ca:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <FLASH_MassErase+0x2c>)
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	4b04      	ldr	r3, [pc, #16]	; (80051e0 <FLASH_MassErase+0x2c>)
 80051d0:	2140      	movs	r1, #64	; 0x40
 80051d2:	430a      	orrs	r2, r1
 80051d4:	611a      	str	r2, [r3, #16]
}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20000a78 	.word	0x20000a78
 80051e0:	40022000 	.word	0x40022000

080051e4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80051ec:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <FLASH_PageErase+0x34>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80051f2:	4b0a      	ldr	r3, [pc, #40]	; (800521c <FLASH_PageErase+0x38>)
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	4b09      	ldr	r3, [pc, #36]	; (800521c <FLASH_PageErase+0x38>)
 80051f8:	2102      	movs	r1, #2
 80051fa:	430a      	orrs	r2, r1
 80051fc:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80051fe:	4b07      	ldr	r3, [pc, #28]	; (800521c <FLASH_PageErase+0x38>)
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <FLASH_PageErase+0x38>)
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <FLASH_PageErase+0x38>)
 800520a:	2140      	movs	r1, #64	; 0x40
 800520c:	430a      	orrs	r2, r1
 800520e:	611a      	str	r2, [r3, #16]
}
 8005210:	46c0      	nop			; (mov r8, r8)
 8005212:	46bd      	mov	sp, r7
 8005214:	b002      	add	sp, #8
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20000a78 	.word	0x20000a78
 800521c:	40022000 	.word	0x40022000

08005220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800522e:	e14f      	b.n	80054d0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2101      	movs	r1, #1
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4091      	lsls	r1, r2
 800523a:	000a      	movs	r2, r1
 800523c:	4013      	ands	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d100      	bne.n	8005248 <HAL_GPIO_Init+0x28>
 8005246:	e140      	b.n	80054ca <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d00b      	beq.n	8005268 <HAL_GPIO_Init+0x48>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d007      	beq.n	8005268 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800525c:	2b11      	cmp	r3, #17
 800525e:	d003      	beq.n	8005268 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b12      	cmp	r3, #18
 8005266:	d130      	bne.n	80052ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	2203      	movs	r2, #3
 8005274:	409a      	lsls	r2, r3
 8005276:	0013      	movs	r3, r2
 8005278:	43da      	mvns	r2, r3
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	4013      	ands	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	409a      	lsls	r2, r3
 800528a:	0013      	movs	r3, r2
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800529e:	2201      	movs	r2, #1
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	409a      	lsls	r2, r3
 80052a4:	0013      	movs	r3, r2
 80052a6:	43da      	mvns	r2, r3
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	4013      	ands	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	091b      	lsrs	r3, r3, #4
 80052b4:	2201      	movs	r2, #1
 80052b6:	401a      	ands	r2, r3
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	409a      	lsls	r2, r3
 80052bc:	0013      	movs	r3, r2
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	2203      	movs	r2, #3
 80052d6:	409a      	lsls	r2, r3
 80052d8:	0013      	movs	r3, r2
 80052da:	43da      	mvns	r2, r3
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	4013      	ands	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	409a      	lsls	r2, r3
 80052ec:	0013      	movs	r3, r2
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d003      	beq.n	800530a <HAL_GPIO_Init+0xea>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b12      	cmp	r3, #18
 8005308:	d123      	bne.n	8005352 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	08da      	lsrs	r2, r3, #3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3208      	adds	r2, #8
 8005312:	0092      	lsls	r2, r2, #2
 8005314:	58d3      	ldr	r3, [r2, r3]
 8005316:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2207      	movs	r2, #7
 800531c:	4013      	ands	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	220f      	movs	r2, #15
 8005322:	409a      	lsls	r2, r3
 8005324:	0013      	movs	r3, r2
 8005326:	43da      	mvns	r2, r3
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4013      	ands	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2107      	movs	r1, #7
 8005336:	400b      	ands	r3, r1
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	409a      	lsls	r2, r3
 800533c:	0013      	movs	r3, r2
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	08da      	lsrs	r2, r3, #3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3208      	adds	r2, #8
 800534c:	0092      	lsls	r2, r2, #2
 800534e:	6939      	ldr	r1, [r7, #16]
 8005350:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	2203      	movs	r2, #3
 800535e:	409a      	lsls	r2, r3
 8005360:	0013      	movs	r3, r2
 8005362:	43da      	mvns	r2, r3
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	4013      	ands	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2203      	movs	r2, #3
 8005370:	401a      	ands	r2, r3
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	409a      	lsls	r2, r3
 8005378:	0013      	movs	r3, r2
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	2380      	movs	r3, #128	; 0x80
 800538c:	055b      	lsls	r3, r3, #21
 800538e:	4013      	ands	r3, r2
 8005390:	d100      	bne.n	8005394 <HAL_GPIO_Init+0x174>
 8005392:	e09a      	b.n	80054ca <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005394:	4b54      	ldr	r3, [pc, #336]	; (80054e8 <HAL_GPIO_Init+0x2c8>)
 8005396:	699a      	ldr	r2, [r3, #24]
 8005398:	4b53      	ldr	r3, [pc, #332]	; (80054e8 <HAL_GPIO_Init+0x2c8>)
 800539a:	2101      	movs	r1, #1
 800539c:	430a      	orrs	r2, r1
 800539e:	619a      	str	r2, [r3, #24]
 80053a0:	4b51      	ldr	r3, [pc, #324]	; (80054e8 <HAL_GPIO_Init+0x2c8>)
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	2201      	movs	r2, #1
 80053a6:	4013      	ands	r3, r2
 80053a8:	60bb      	str	r3, [r7, #8]
 80053aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80053ac:	4a4f      	ldr	r2, [pc, #316]	; (80054ec <HAL_GPIO_Init+0x2cc>)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	089b      	lsrs	r3, r3, #2
 80053b2:	3302      	adds	r3, #2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	589b      	ldr	r3, [r3, r2]
 80053b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2203      	movs	r2, #3
 80053be:	4013      	ands	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	220f      	movs	r2, #15
 80053c4:	409a      	lsls	r2, r3
 80053c6:	0013      	movs	r3, r2
 80053c8:	43da      	mvns	r2, r3
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4013      	ands	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	2390      	movs	r3, #144	; 0x90
 80053d4:	05db      	lsls	r3, r3, #23
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d013      	beq.n	8005402 <HAL_GPIO_Init+0x1e2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a44      	ldr	r2, [pc, #272]	; (80054f0 <HAL_GPIO_Init+0x2d0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00d      	beq.n	80053fe <HAL_GPIO_Init+0x1de>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a43      	ldr	r2, [pc, #268]	; (80054f4 <HAL_GPIO_Init+0x2d4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d007      	beq.n	80053fa <HAL_GPIO_Init+0x1da>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a42      	ldr	r2, [pc, #264]	; (80054f8 <HAL_GPIO_Init+0x2d8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d101      	bne.n	80053f6 <HAL_GPIO_Init+0x1d6>
 80053f2:	2303      	movs	r3, #3
 80053f4:	e006      	b.n	8005404 <HAL_GPIO_Init+0x1e4>
 80053f6:	2305      	movs	r3, #5
 80053f8:	e004      	b.n	8005404 <HAL_GPIO_Init+0x1e4>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e002      	b.n	8005404 <HAL_GPIO_Init+0x1e4>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <HAL_GPIO_Init+0x1e4>
 8005402:	2300      	movs	r3, #0
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	2103      	movs	r1, #3
 8005408:	400a      	ands	r2, r1
 800540a:	0092      	lsls	r2, r2, #2
 800540c:	4093      	lsls	r3, r2
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005414:	4935      	ldr	r1, [pc, #212]	; (80054ec <HAL_GPIO_Init+0x2cc>)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	089b      	lsrs	r3, r3, #2
 800541a:	3302      	adds	r3, #2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005422:	4b36      	ldr	r3, [pc, #216]	; (80054fc <HAL_GPIO_Init+0x2dc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	43da      	mvns	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	4013      	ands	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	2380      	movs	r3, #128	; 0x80
 8005438:	025b      	lsls	r3, r3, #9
 800543a:	4013      	ands	r3, r2
 800543c:	d003      	beq.n	8005446 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005446:	4b2d      	ldr	r3, [pc, #180]	; (80054fc <HAL_GPIO_Init+0x2dc>)
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800544c:	4b2b      	ldr	r3, [pc, #172]	; (80054fc <HAL_GPIO_Init+0x2dc>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	43da      	mvns	r2, r3
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	4013      	ands	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	029b      	lsls	r3, r3, #10
 8005464:	4013      	ands	r3, r2
 8005466:	d003      	beq.n	8005470 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005470:	4b22      	ldr	r3, [pc, #136]	; (80054fc <HAL_GPIO_Init+0x2dc>)
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005476:	4b21      	ldr	r3, [pc, #132]	; (80054fc <HAL_GPIO_Init+0x2dc>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	43da      	mvns	r2, r3
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	4013      	ands	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	2380      	movs	r3, #128	; 0x80
 800548c:	035b      	lsls	r3, r3, #13
 800548e:	4013      	ands	r3, r2
 8005490:	d003      	beq.n	800549a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800549a:	4b18      	ldr	r3, [pc, #96]	; (80054fc <HAL_GPIO_Init+0x2dc>)
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80054a0:	4b16      	ldr	r3, [pc, #88]	; (80054fc <HAL_GPIO_Init+0x2dc>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	43da      	mvns	r2, r3
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	4013      	ands	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	2380      	movs	r3, #128	; 0x80
 80054b6:	039b      	lsls	r3, r3, #14
 80054b8:	4013      	ands	r3, r2
 80054ba:	d003      	beq.n	80054c4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80054c4:	4b0d      	ldr	r3, [pc, #52]	; (80054fc <HAL_GPIO_Init+0x2dc>)
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	3301      	adds	r3, #1
 80054ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	40da      	lsrs	r2, r3
 80054d8:	1e13      	subs	r3, r2, #0
 80054da:	d000      	beq.n	80054de <HAL_GPIO_Init+0x2be>
 80054dc:	e6a8      	b.n	8005230 <HAL_GPIO_Init+0x10>
  } 
}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	46c0      	nop			; (mov r8, r8)
 80054e2:	46bd      	mov	sp, r7
 80054e4:	b006      	add	sp, #24
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40021000 	.word	0x40021000
 80054ec:	40010000 	.word	0x40010000
 80054f0:	48000400 	.word	0x48000400
 80054f4:	48000800 	.word	0x48000800
 80054f8:	48000c00 	.word	0x48000c00
 80054fc:	40010400 	.word	0x40010400

08005500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	000a      	movs	r2, r1
 800550a:	1cbb      	adds	r3, r7, #2
 800550c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	1cba      	adds	r2, r7, #2
 8005514:	8812      	ldrh	r2, [r2, #0]
 8005516:	4013      	ands	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800551a:	230f      	movs	r3, #15
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	2201      	movs	r2, #1
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	e003      	b.n	800552c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005524:	230f      	movs	r3, #15
 8005526:	18fb      	adds	r3, r7, r3
 8005528:	2200      	movs	r2, #0
 800552a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800552c:	230f      	movs	r3, #15
 800552e:	18fb      	adds	r3, r7, r3
 8005530:	781b      	ldrb	r3, [r3, #0]
  }
 8005532:	0018      	movs	r0, r3
 8005534:	46bd      	mov	sp, r7
 8005536:	b004      	add	sp, #16
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b082      	sub	sp, #8
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	0008      	movs	r0, r1
 8005544:	0011      	movs	r1, r2
 8005546:	1cbb      	adds	r3, r7, #2
 8005548:	1c02      	adds	r2, r0, #0
 800554a:	801a      	strh	r2, [r3, #0]
 800554c:	1c7b      	adds	r3, r7, #1
 800554e:	1c0a      	adds	r2, r1, #0
 8005550:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005552:	1c7b      	adds	r3, r7, #1
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d004      	beq.n	8005564 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800555a:	1cbb      	adds	r3, r7, #2
 800555c:	881a      	ldrh	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005562:	e003      	b.n	800556c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005564:	1cbb      	adds	r3, r7, #2
 8005566:	881a      	ldrh	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800556c:	46c0      	nop			; (mov r8, r8)
 800556e:	46bd      	mov	sp, r7
 8005570:	b002      	add	sp, #8
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e082      	b.n	800568c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2241      	movs	r2, #65	; 0x41
 800558a:	5c9b      	ldrb	r3, [r3, r2]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d107      	bne.n	80055a2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2240      	movs	r2, #64	; 0x40
 8005596:	2100      	movs	r1, #0
 8005598:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	0018      	movs	r0, r3
 800559e:	f7fe febf 	bl	8004320 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2241      	movs	r2, #65	; 0x41
 80055a6:	2124      	movs	r1, #36	; 0x24
 80055a8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2101      	movs	r1, #1
 80055b6:	438a      	bics	r2, r1
 80055b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4934      	ldr	r1, [pc, #208]	; (8005694 <HAL_I2C_Init+0x120>)
 80055c4:	400a      	ands	r2, r1
 80055c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4931      	ldr	r1, [pc, #196]	; (8005698 <HAL_I2C_Init+0x124>)
 80055d4:	400a      	ands	r2, r1
 80055d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d108      	bne.n	80055f2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2180      	movs	r1, #128	; 0x80
 80055ea:	0209      	lsls	r1, r1, #8
 80055ec:	430a      	orrs	r2, r1
 80055ee:	609a      	str	r2, [r3, #8]
 80055f0:	e007      	b.n	8005602 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2184      	movs	r1, #132	; 0x84
 80055fc:	0209      	lsls	r1, r1, #8
 80055fe:	430a      	orrs	r2, r1
 8005600:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d104      	bne.n	8005614 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2280      	movs	r2, #128	; 0x80
 8005610:	0112      	lsls	r2, r2, #4
 8005612:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	491f      	ldr	r1, [pc, #124]	; (800569c <HAL_I2C_Init+0x128>)
 8005620:	430a      	orrs	r2, r1
 8005622:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	491a      	ldr	r1, [pc, #104]	; (8005698 <HAL_I2C_Init+0x124>)
 8005630:	400a      	ands	r2, r1
 8005632:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	431a      	orrs	r2, r3
 800563e:	0011      	movs	r1, r2
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	021a      	lsls	r2, r3, #8
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69d9      	ldr	r1, [r3, #28]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1a      	ldr	r2, [r3, #32]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2101      	movs	r1, #1
 800566a:	430a      	orrs	r2, r1
 800566c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2241      	movs	r2, #65	; 0x41
 8005678:	2120      	movs	r1, #32
 800567a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2242      	movs	r2, #66	; 0x42
 8005686:	2100      	movs	r1, #0
 8005688:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	0018      	movs	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	b002      	add	sp, #8
 8005692:	bd80      	pop	{r7, pc}
 8005694:	f0ffffff 	.word	0xf0ffffff
 8005698:	ffff7fff 	.word	0xffff7fff
 800569c:	02008000 	.word	0x02008000

080056a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056a0:	b590      	push	{r4, r7, lr}
 80056a2:	b089      	sub	sp, #36	; 0x24
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	0008      	movs	r0, r1
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	0019      	movs	r1, r3
 80056ae:	230a      	movs	r3, #10
 80056b0:	18fb      	adds	r3, r7, r3
 80056b2:	1c02      	adds	r2, r0, #0
 80056b4:	801a      	strh	r2, [r3, #0]
 80056b6:	2308      	movs	r3, #8
 80056b8:	18fb      	adds	r3, r7, r3
 80056ba:	1c0a      	adds	r2, r1, #0
 80056bc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2241      	movs	r2, #65	; 0x41
 80056c2:	5c9b      	ldrb	r3, [r3, r2]
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d000      	beq.n	80056cc <HAL_I2C_Master_Transmit+0x2c>
 80056ca:	e0e7      	b.n	800589c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2240      	movs	r2, #64	; 0x40
 80056d0:	5c9b      	ldrb	r3, [r3, r2]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_I2C_Master_Transmit+0x3a>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e0e1      	b.n	800589e <HAL_I2C_Master_Transmit+0x1fe>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2240      	movs	r2, #64	; 0x40
 80056de:	2101      	movs	r1, #1
 80056e0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056e2:	f7ff fae3 	bl	8004cac <HAL_GetTick>
 80056e6:	0003      	movs	r3, r0
 80056e8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056ea:	2380      	movs	r3, #128	; 0x80
 80056ec:	0219      	lsls	r1, r3, #8
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	2319      	movs	r3, #25
 80056f6:	2201      	movs	r2, #1
 80056f8:	f000 fa16 	bl	8005b28 <I2C_WaitOnFlagUntilTimeout>
 80056fc:	1e03      	subs	r3, r0, #0
 80056fe:	d001      	beq.n	8005704 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e0cc      	b.n	800589e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2241      	movs	r2, #65	; 0x41
 8005708:	2121      	movs	r1, #33	; 0x21
 800570a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2242      	movs	r2, #66	; 0x42
 8005710:	2110      	movs	r1, #16
 8005712:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2208      	movs	r2, #8
 8005724:	18ba      	adds	r2, r7, r2
 8005726:	8812      	ldrh	r2, [r2, #0]
 8005728:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005734:	b29b      	uxth	r3, r3
 8005736:	2bff      	cmp	r3, #255	; 0xff
 8005738:	d911      	bls.n	800575e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	22ff      	movs	r2, #255	; 0xff
 800573e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005744:	b2da      	uxtb	r2, r3
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	045c      	lsls	r4, r3, #17
 800574a:	230a      	movs	r3, #10
 800574c:	18fb      	adds	r3, r7, r3
 800574e:	8819      	ldrh	r1, [r3, #0]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	4b55      	ldr	r3, [pc, #340]	; (80058a8 <HAL_I2C_Master_Transmit+0x208>)
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	0023      	movs	r3, r4
 8005758:	f000 fb06 	bl	8005d68 <I2C_TransferConfig>
 800575c:	e075      	b.n	800584a <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576c:	b2da      	uxtb	r2, r3
 800576e:	2380      	movs	r3, #128	; 0x80
 8005770:	049c      	lsls	r4, r3, #18
 8005772:	230a      	movs	r3, #10
 8005774:	18fb      	adds	r3, r7, r3
 8005776:	8819      	ldrh	r1, [r3, #0]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	4b4b      	ldr	r3, [pc, #300]	; (80058a8 <HAL_I2C_Master_Transmit+0x208>)
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	0023      	movs	r3, r4
 8005780:	f000 faf2 	bl	8005d68 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005784:	e061      	b.n	800584a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	0018      	movs	r0, r3
 800578e:	f000 fa0a 	bl	8005ba6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005792:	1e03      	subs	r3, r0, #0
 8005794:	d001      	beq.n	800579a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e081      	b.n	800589e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	781a      	ldrb	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d03a      	beq.n	800584a <HAL_I2C_Master_Transmit+0x1aa>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d136      	bne.n	800584a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	0013      	movs	r3, r2
 80057e6:	2200      	movs	r2, #0
 80057e8:	2180      	movs	r1, #128	; 0x80
 80057ea:	f000 f99d 	bl	8005b28 <I2C_WaitOnFlagUntilTimeout>
 80057ee:	1e03      	subs	r3, r0, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e053      	b.n	800589e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2bff      	cmp	r3, #255	; 0xff
 80057fe:	d911      	bls.n	8005824 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	22ff      	movs	r2, #255	; 0xff
 8005804:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580a:	b2da      	uxtb	r2, r3
 800580c:	2380      	movs	r3, #128	; 0x80
 800580e:	045c      	lsls	r4, r3, #17
 8005810:	230a      	movs	r3, #10
 8005812:	18fb      	adds	r3, r7, r3
 8005814:	8819      	ldrh	r1, [r3, #0]
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	2300      	movs	r3, #0
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	0023      	movs	r3, r4
 800581e:	f000 faa3 	bl	8005d68 <I2C_TransferConfig>
 8005822:	e012      	b.n	800584a <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005832:	b2da      	uxtb	r2, r3
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	049c      	lsls	r4, r3, #18
 8005838:	230a      	movs	r3, #10
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	8819      	ldrh	r1, [r3, #0]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	2300      	movs	r3, #0
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	0023      	movs	r3, r4
 8005846:	f000 fa8f 	bl	8005d68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d198      	bne.n	8005786 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	0018      	movs	r0, r3
 800585c:	f000 f9e2 	bl	8005c24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005860:	1e03      	subs	r3, r0, #0
 8005862:	d001      	beq.n	8005868 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e01a      	b.n	800589e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2220      	movs	r2, #32
 800586e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	490c      	ldr	r1, [pc, #48]	; (80058ac <HAL_I2C_Master_Transmit+0x20c>)
 800587c:	400a      	ands	r2, r1
 800587e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2241      	movs	r2, #65	; 0x41
 8005884:	2120      	movs	r1, #32
 8005886:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2242      	movs	r2, #66	; 0x42
 800588c:	2100      	movs	r1, #0
 800588e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2240      	movs	r2, #64	; 0x40
 8005894:	2100      	movs	r1, #0
 8005896:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	e000      	b.n	800589e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800589c:	2302      	movs	r3, #2
  }
}
 800589e:	0018      	movs	r0, r3
 80058a0:	46bd      	mov	sp, r7
 80058a2:	b007      	add	sp, #28
 80058a4:	bd90      	pop	{r4, r7, pc}
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	80002000 	.word	0x80002000
 80058ac:	fe00e800 	.word	0xfe00e800

080058b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08a      	sub	sp, #40	; 0x28
 80058b4:	af02      	add	r7, sp, #8
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	607a      	str	r2, [r7, #4]
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	230a      	movs	r3, #10
 80058be:	18fb      	adds	r3, r7, r3
 80058c0:	1c0a      	adds	r2, r1, #0
 80058c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2241      	movs	r2, #65	; 0x41
 80058cc:	5c9b      	ldrb	r3, [r3, r2]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d000      	beq.n	80058d6 <HAL_I2C_IsDeviceReady+0x26>
 80058d4:	e0fe      	b.n	8005ad4 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699a      	ldr	r2, [r3, #24]
 80058dc:	2380      	movs	r3, #128	; 0x80
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	401a      	ands	r2, r3
 80058e2:	2380      	movs	r3, #128	; 0x80
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d101      	bne.n	80058ee <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80058ea:	2302      	movs	r3, #2
 80058ec:	e0f3      	b.n	8005ad6 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2240      	movs	r2, #64	; 0x40
 80058f2:	5c9b      	ldrb	r3, [r3, r2]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_I2C_IsDeviceReady+0x4c>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e0ec      	b.n	8005ad6 <HAL_I2C_IsDeviceReady+0x226>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2240      	movs	r2, #64	; 0x40
 8005900:	2101      	movs	r1, #1
 8005902:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2241      	movs	r2, #65	; 0x41
 8005908:	2124      	movs	r1, #36	; 0x24
 800590a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d107      	bne.n	800592a <HAL_I2C_IsDeviceReady+0x7a>
 800591a:	230a      	movs	r3, #10
 800591c:	18fb      	adds	r3, r7, r3
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	059b      	lsls	r3, r3, #22
 8005922:	0d9b      	lsrs	r3, r3, #22
 8005924:	4a6e      	ldr	r2, [pc, #440]	; (8005ae0 <HAL_I2C_IsDeviceReady+0x230>)
 8005926:	431a      	orrs	r2, r3
 8005928:	e007      	b.n	800593a <HAL_I2C_IsDeviceReady+0x8a>
 800592a:	230a      	movs	r3, #10
 800592c:	18fb      	adds	r3, r7, r3
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	059b      	lsls	r3, r3, #22
 8005932:	0d9b      	lsrs	r3, r3, #22
 8005934:	22a0      	movs	r2, #160	; 0xa0
 8005936:	0192      	lsls	r2, r2, #6
 8005938:	431a      	orrs	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005940:	f7ff f9b4 	bl	8004cac <HAL_GetTick>
 8005944:	0003      	movs	r3, r0
 8005946:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	2220      	movs	r2, #32
 8005950:	4013      	ands	r3, r2
 8005952:	3b20      	subs	r3, #32
 8005954:	425a      	negs	r2, r3
 8005956:	4153      	adcs	r3, r2
 8005958:	b2da      	uxtb	r2, r3
 800595a:	231f      	movs	r3, #31
 800595c:	18fb      	adds	r3, r7, r3
 800595e:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	2210      	movs	r2, #16
 8005968:	4013      	ands	r3, r2
 800596a:	3b10      	subs	r3, #16
 800596c:	425a      	negs	r2, r3
 800596e:	4153      	adcs	r3, r2
 8005970:	b2da      	uxtb	r2, r3
 8005972:	231e      	movs	r3, #30
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005978:	e035      	b.n	80059e6 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	3301      	adds	r3, #1
 800597e:	d01a      	beq.n	80059b6 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005980:	f7ff f994 	bl	8004cac <HAL_GetTick>
 8005984:	0002      	movs	r2, r0
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d302      	bcc.n	8005996 <HAL_I2C_IsDeviceReady+0xe6>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10f      	bne.n	80059b6 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2241      	movs	r2, #65	; 0x41
 800599a:	2120      	movs	r1, #32
 800599c:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a2:	2220      	movs	r2, #32
 80059a4:	431a      	orrs	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2240      	movs	r2, #64	; 0x40
 80059ae:	2100      	movs	r1, #0
 80059b0:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e08f      	b.n	8005ad6 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2220      	movs	r2, #32
 80059be:	4013      	ands	r3, r2
 80059c0:	3b20      	subs	r3, #32
 80059c2:	425a      	negs	r2, r3
 80059c4:	4153      	adcs	r3, r2
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	231f      	movs	r3, #31
 80059ca:	18fb      	adds	r3, r7, r3
 80059cc:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	2210      	movs	r2, #16
 80059d6:	4013      	ands	r3, r2
 80059d8:	3b10      	subs	r3, #16
 80059da:	425a      	negs	r2, r3
 80059dc:	4153      	adcs	r3, r2
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	231e      	movs	r3, #30
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80059e6:	231f      	movs	r3, #31
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <HAL_I2C_IsDeviceReady+0x14a>
 80059f0:	231e      	movs	r3, #30
 80059f2:	18fb      	adds	r3, r7, r3
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0bf      	beq.n	800597a <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	2210      	movs	r2, #16
 8005a02:	4013      	ands	r3, r2
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d01a      	beq.n	8005a3e <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	0013      	movs	r3, r2
 8005a12:	2200      	movs	r2, #0
 8005a14:	2120      	movs	r1, #32
 8005a16:	f000 f887 	bl	8005b28 <I2C_WaitOnFlagUntilTimeout>
 8005a1a:	1e03      	subs	r3, r0, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e059      	b.n	8005ad6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2220      	movs	r2, #32
 8005a28:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2241      	movs	r2, #65	; 0x41
 8005a2e:	2120      	movs	r1, #32
 8005a30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2240      	movs	r2, #64	; 0x40
 8005a36:	2100      	movs	r1, #0
 8005a38:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e04b      	b.n	8005ad6 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	0013      	movs	r3, r2
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2120      	movs	r1, #32
 8005a4c:	f000 f86c 	bl	8005b28 <I2C_WaitOnFlagUntilTimeout>
 8005a50:	1e03      	subs	r3, r0, #0
 8005a52:	d001      	beq.n	8005a58 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e03e      	b.n	8005ad6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2210      	movs	r2, #16
 8005a5e:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2220      	movs	r2, #32
 8005a66:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d119      	bne.n	8005aa4 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2180      	movs	r1, #128	; 0x80
 8005a7c:	01c9      	lsls	r1, r1, #7
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	0013      	movs	r3, r2
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2120      	movs	r1, #32
 8005a90:	f000 f84a 	bl	8005b28 <I2C_WaitOnFlagUntilTimeout>
 8005a94:	1e03      	subs	r3, r0, #0
 8005a96:	d001      	beq.n	8005a9c <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e01c      	b.n	8005ad6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d900      	bls.n	8005ab4 <HAL_I2C_IsDeviceReady+0x204>
 8005ab2:	e72e      	b.n	8005912 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2241      	movs	r2, #65	; 0x41
 8005ab8:	2120      	movs	r1, #32
 8005aba:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2240      	movs	r2, #64	; 0x40
 8005acc:	2100      	movs	r1, #0
 8005ace:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e000      	b.n	8005ad6 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8005ad4:	2302      	movs	r3, #2
  }
}
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	b008      	add	sp, #32
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	46c0      	nop			; (mov r8, r8)
 8005ae0:	02002000 	.word	0x02002000

08005ae4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	2202      	movs	r2, #2
 8005af4:	4013      	ands	r3, r2
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d103      	bne.n	8005b02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2200      	movs	r2, #0
 8005b00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d007      	beq.n	8005b20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699a      	ldr	r2, [r3, #24]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	619a      	str	r2, [r3, #24]
  }
}
 8005b20:	46c0      	nop			; (mov r8, r8)
 8005b22:	46bd      	mov	sp, r7
 8005b24:	b002      	add	sp, #8
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	1dfb      	adds	r3, r7, #7
 8005b36:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b38:	e021      	b.n	8005b7e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	d01e      	beq.n	8005b7e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b40:	f7ff f8b4 	bl	8004cac <HAL_GetTick>
 8005b44:	0002      	movs	r2, r0
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d302      	bcc.n	8005b56 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d113      	bne.n	8005b7e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2241      	movs	r2, #65	; 0x41
 8005b66:	2120      	movs	r1, #32
 8005b68:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2242      	movs	r2, #66	; 0x42
 8005b6e:	2100      	movs	r1, #0
 8005b70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2240      	movs	r2, #64	; 0x40
 8005b76:	2100      	movs	r1, #0
 8005b78:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e00f      	b.n	8005b9e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	4013      	ands	r3, r2
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	425a      	negs	r2, r3
 8005b8e:	4153      	adcs	r3, r2
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	001a      	movs	r2, r3
 8005b94:	1dfb      	adds	r3, r7, #7
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d0ce      	beq.n	8005b3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b004      	add	sp, #16
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bb2:	e02b      	b.n	8005c0c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	68b9      	ldr	r1, [r7, #8]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f000 f86e 	bl	8005c9c <I2C_IsAcknowledgeFailed>
 8005bc0:	1e03      	subs	r3, r0, #0
 8005bc2:	d001      	beq.n	8005bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e029      	b.n	8005c1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	d01e      	beq.n	8005c0c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bce:	f7ff f86d 	bl	8004cac <HAL_GetTick>
 8005bd2:	0002      	movs	r2, r0
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d302      	bcc.n	8005be4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d113      	bne.n	8005c0c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be8:	2220      	movs	r2, #32
 8005bea:	431a      	orrs	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2241      	movs	r2, #65	; 0x41
 8005bf4:	2120      	movs	r1, #32
 8005bf6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2242      	movs	r2, #66	; 0x42
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2240      	movs	r2, #64	; 0x40
 8005c04:	2100      	movs	r1, #0
 8005c06:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e007      	b.n	8005c1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	2202      	movs	r2, #2
 8005c14:	4013      	ands	r3, r2
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d1cc      	bne.n	8005bb4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b004      	add	sp, #16
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c30:	e028      	b.n	8005c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	68b9      	ldr	r1, [r7, #8]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	0018      	movs	r0, r3
 8005c3a:	f000 f82f 	bl	8005c9c <I2C_IsAcknowledgeFailed>
 8005c3e:	1e03      	subs	r3, r0, #0
 8005c40:	d001      	beq.n	8005c46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e026      	b.n	8005c94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c46:	f7ff f831 	bl	8004cac <HAL_GetTick>
 8005c4a:	0002      	movs	r2, r0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d302      	bcc.n	8005c5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d113      	bne.n	8005c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c60:	2220      	movs	r2, #32
 8005c62:	431a      	orrs	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2241      	movs	r2, #65	; 0x41
 8005c6c:	2120      	movs	r1, #32
 8005c6e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2242      	movs	r2, #66	; 0x42
 8005c74:	2100      	movs	r1, #0
 8005c76:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2240      	movs	r2, #64	; 0x40
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e007      	b.n	8005c94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d1cf      	bne.n	8005c32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	0018      	movs	r0, r3
 8005c96:	46bd      	mov	sp, r7
 8005c98:	b004      	add	sp, #16
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	2210      	movs	r2, #16
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	d151      	bne.n	8005d5a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cb6:	e021      	b.n	8005cfc <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	d01e      	beq.n	8005cfc <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cbe:	f7fe fff5 	bl	8004cac <HAL_GetTick>
 8005cc2:	0002      	movs	r2, r0
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d302      	bcc.n	8005cd4 <I2C_IsAcknowledgeFailed+0x38>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d113      	bne.n	8005cfc <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd8:	2220      	movs	r2, #32
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2241      	movs	r2, #65	; 0x41
 8005ce4:	2120      	movs	r1, #32
 8005ce6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2242      	movs	r2, #66	; 0x42
 8005cec:	2100      	movs	r1, #0
 8005cee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2240      	movs	r2, #64	; 0x40
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e02f      	b.n	8005d5c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	2220      	movs	r2, #32
 8005d04:	4013      	ands	r3, r2
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d1d6      	bne.n	8005cb8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2210      	movs	r2, #16
 8005d10:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2220      	movs	r2, #32
 8005d18:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f7ff fee1 	bl	8005ae4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	490d      	ldr	r1, [pc, #52]	; (8005d64 <I2C_IsAcknowledgeFailed+0xc8>)
 8005d2e:	400a      	ands	r2, r1
 8005d30:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d36:	2204      	movs	r2, #4
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2241      	movs	r2, #65	; 0x41
 8005d42:	2120      	movs	r1, #32
 8005d44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2242      	movs	r2, #66	; 0x42
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2240      	movs	r2, #64	; 0x40
 8005d52:	2100      	movs	r1, #0
 8005d54:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	b004      	add	sp, #16
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	fe00e800 	.word	0xfe00e800

08005d68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d68:	b590      	push	{r4, r7, lr}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	0008      	movs	r0, r1
 8005d72:	0011      	movs	r1, r2
 8005d74:	607b      	str	r3, [r7, #4]
 8005d76:	240a      	movs	r4, #10
 8005d78:	193b      	adds	r3, r7, r4
 8005d7a:	1c02      	adds	r2, r0, #0
 8005d7c:	801a      	strh	r2, [r3, #0]
 8005d7e:	2009      	movs	r0, #9
 8005d80:	183b      	adds	r3, r7, r0
 8005d82:	1c0a      	adds	r2, r1, #0
 8005d84:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	6a3a      	ldr	r2, [r7, #32]
 8005d8e:	0d51      	lsrs	r1, r2, #21
 8005d90:	2280      	movs	r2, #128	; 0x80
 8005d92:	00d2      	lsls	r2, r2, #3
 8005d94:	400a      	ands	r2, r1
 8005d96:	490e      	ldr	r1, [pc, #56]	; (8005dd0 <I2C_TransferConfig+0x68>)
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	43d2      	mvns	r2, r2
 8005d9c:	401a      	ands	r2, r3
 8005d9e:	0011      	movs	r1, r2
 8005da0:	193b      	adds	r3, r7, r4
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	059b      	lsls	r3, r3, #22
 8005da6:	0d9a      	lsrs	r2, r3, #22
 8005da8:	183b      	adds	r3, r7, r0
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	0418      	lsls	r0, r3, #16
 8005dae:	23ff      	movs	r3, #255	; 0xff
 8005db0:	041b      	lsls	r3, r3, #16
 8005db2:	4003      	ands	r3, r0
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	431a      	orrs	r2, r3
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	b005      	add	sp, #20
 8005dcc:	bd90      	pop	{r4, r7, pc}
 8005dce:	46c0      	nop			; (mov r8, r8)
 8005dd0:	03ff63ff 	.word	0x03ff63ff

08005dd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2241      	movs	r2, #65	; 0x41
 8005de2:	5c9b      	ldrb	r3, [r3, r2]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d138      	bne.n	8005e5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2240      	movs	r2, #64	; 0x40
 8005dee:	5c9b      	ldrb	r3, [r3, r2]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e032      	b.n	8005e5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2240      	movs	r2, #64	; 0x40
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2241      	movs	r2, #65	; 0x41
 8005e04:	2124      	movs	r1, #36	; 0x24
 8005e06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2101      	movs	r1, #1
 8005e14:	438a      	bics	r2, r1
 8005e16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4911      	ldr	r1, [pc, #68]	; (8005e68 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005e24:	400a      	ands	r2, r1
 8005e26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6819      	ldr	r1, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2101      	movs	r1, #1
 8005e44:	430a      	orrs	r2, r1
 8005e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2241      	movs	r2, #65	; 0x41
 8005e4c:	2120      	movs	r1, #32
 8005e4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2240      	movs	r2, #64	; 0x40
 8005e54:	2100      	movs	r1, #0
 8005e56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	e000      	b.n	8005e5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e5c:	2302      	movs	r3, #2
  }
}
 8005e5e:	0018      	movs	r0, r3
 8005e60:	46bd      	mov	sp, r7
 8005e62:	b002      	add	sp, #8
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	46c0      	nop			; (mov r8, r8)
 8005e68:	ffffefff 	.word	0xffffefff

08005e6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2241      	movs	r2, #65	; 0x41
 8005e7a:	5c9b      	ldrb	r3, [r3, r2]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	d139      	bne.n	8005ef6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2240      	movs	r2, #64	; 0x40
 8005e86:	5c9b      	ldrb	r3, [r3, r2]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e033      	b.n	8005ef8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2240      	movs	r2, #64	; 0x40
 8005e94:	2101      	movs	r1, #1
 8005e96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2241      	movs	r2, #65	; 0x41
 8005e9c:	2124      	movs	r1, #36	; 0x24
 8005e9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2101      	movs	r1, #1
 8005eac:	438a      	bics	r2, r1
 8005eae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4a11      	ldr	r2, [pc, #68]	; (8005f00 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	021b      	lsls	r3, r3, #8
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2101      	movs	r1, #1
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2241      	movs	r2, #65	; 0x41
 8005ee6:	2120      	movs	r1, #32
 8005ee8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2240      	movs	r2, #64	; 0x40
 8005eee:	2100      	movs	r1, #0
 8005ef0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e000      	b.n	8005ef8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ef6:	2302      	movs	r3, #2
  }
}
 8005ef8:	0018      	movs	r0, r3
 8005efa:	46bd      	mov	sp, r7
 8005efc:	b004      	add	sp, #16
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	fffff0ff 	.word	0xfffff0ff

08005f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e305      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	d100      	bne.n	8005f22 <HAL_RCC_OscConfig+0x1e>
 8005f20:	e08d      	b.n	800603e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005f22:	4bc5      	ldr	r3, [pc, #788]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	220c      	movs	r2, #12
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d00e      	beq.n	8005f4c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f2e:	4bc2      	ldr	r3, [pc, #776]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	220c      	movs	r2, #12
 8005f34:	4013      	ands	r3, r2
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d116      	bne.n	8005f68 <HAL_RCC_OscConfig+0x64>
 8005f3a:	4bbf      	ldr	r3, [pc, #764]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	23c0      	movs	r3, #192	; 0xc0
 8005f40:	025b      	lsls	r3, r3, #9
 8005f42:	401a      	ands	r2, r3
 8005f44:	2380      	movs	r3, #128	; 0x80
 8005f46:	025b      	lsls	r3, r3, #9
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d10d      	bne.n	8005f68 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f4c:	4bba      	ldr	r3, [pc, #744]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	2380      	movs	r3, #128	; 0x80
 8005f52:	029b      	lsls	r3, r3, #10
 8005f54:	4013      	ands	r3, r2
 8005f56:	d100      	bne.n	8005f5a <HAL_RCC_OscConfig+0x56>
 8005f58:	e070      	b.n	800603c <HAL_RCC_OscConfig+0x138>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d000      	beq.n	8005f64 <HAL_RCC_OscConfig+0x60>
 8005f62:	e06b      	b.n	800603c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e2dc      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d107      	bne.n	8005f80 <HAL_RCC_OscConfig+0x7c>
 8005f70:	4bb1      	ldr	r3, [pc, #708]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	4bb0      	ldr	r3, [pc, #704]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005f76:	2180      	movs	r1, #128	; 0x80
 8005f78:	0249      	lsls	r1, r1, #9
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	e02f      	b.n	8005fe0 <HAL_RCC_OscConfig+0xdc>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10c      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x9e>
 8005f88:	4bab      	ldr	r3, [pc, #684]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	4baa      	ldr	r3, [pc, #680]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005f8e:	49ab      	ldr	r1, [pc, #684]	; (800623c <HAL_RCC_OscConfig+0x338>)
 8005f90:	400a      	ands	r2, r1
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	4ba8      	ldr	r3, [pc, #672]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	4ba7      	ldr	r3, [pc, #668]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005f9a:	49a9      	ldr	r1, [pc, #676]	; (8006240 <HAL_RCC_OscConfig+0x33c>)
 8005f9c:	400a      	ands	r2, r1
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	e01e      	b.n	8005fe0 <HAL_RCC_OscConfig+0xdc>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b05      	cmp	r3, #5
 8005fa8:	d10e      	bne.n	8005fc8 <HAL_RCC_OscConfig+0xc4>
 8005faa:	4ba3      	ldr	r3, [pc, #652]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	4ba2      	ldr	r3, [pc, #648]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005fb0:	2180      	movs	r1, #128	; 0x80
 8005fb2:	02c9      	lsls	r1, r1, #11
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	4b9f      	ldr	r3, [pc, #636]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	4b9e      	ldr	r3, [pc, #632]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005fbe:	2180      	movs	r1, #128	; 0x80
 8005fc0:	0249      	lsls	r1, r1, #9
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	e00b      	b.n	8005fe0 <HAL_RCC_OscConfig+0xdc>
 8005fc8:	4b9b      	ldr	r3, [pc, #620]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	4b9a      	ldr	r3, [pc, #616]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005fce:	499b      	ldr	r1, [pc, #620]	; (800623c <HAL_RCC_OscConfig+0x338>)
 8005fd0:	400a      	ands	r2, r1
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	4b98      	ldr	r3, [pc, #608]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	4b97      	ldr	r3, [pc, #604]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8005fda:	4999      	ldr	r1, [pc, #612]	; (8006240 <HAL_RCC_OscConfig+0x33c>)
 8005fdc:	400a      	ands	r2, r1
 8005fde:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d014      	beq.n	8006012 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe8:	f7fe fe60 	bl	8004cac <HAL_GetTick>
 8005fec:	0003      	movs	r3, r0
 8005fee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ff2:	f7fe fe5b 	bl	8004cac <HAL_GetTick>
 8005ff6:	0002      	movs	r2, r0
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b64      	cmp	r3, #100	; 0x64
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e28e      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006004:	4b8c      	ldr	r3, [pc, #560]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	2380      	movs	r3, #128	; 0x80
 800600a:	029b      	lsls	r3, r3, #10
 800600c:	4013      	ands	r3, r2
 800600e:	d0f0      	beq.n	8005ff2 <HAL_RCC_OscConfig+0xee>
 8006010:	e015      	b.n	800603e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006012:	f7fe fe4b 	bl	8004cac <HAL_GetTick>
 8006016:	0003      	movs	r3, r0
 8006018:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800601c:	f7fe fe46 	bl	8004cac <HAL_GetTick>
 8006020:	0002      	movs	r2, r0
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b64      	cmp	r3, #100	; 0x64
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e279      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800602e:	4b82      	ldr	r3, [pc, #520]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	2380      	movs	r3, #128	; 0x80
 8006034:	029b      	lsls	r3, r3, #10
 8006036:	4013      	ands	r3, r2
 8006038:	d1f0      	bne.n	800601c <HAL_RCC_OscConfig+0x118>
 800603a:	e000      	b.n	800603e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800603c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2202      	movs	r2, #2
 8006044:	4013      	ands	r3, r2
 8006046:	d100      	bne.n	800604a <HAL_RCC_OscConfig+0x146>
 8006048:	e06c      	b.n	8006124 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800604a:	4b7b      	ldr	r3, [pc, #492]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	220c      	movs	r2, #12
 8006050:	4013      	ands	r3, r2
 8006052:	d00e      	beq.n	8006072 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006054:	4b78      	ldr	r3, [pc, #480]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	220c      	movs	r2, #12
 800605a:	4013      	ands	r3, r2
 800605c:	2b08      	cmp	r3, #8
 800605e:	d11f      	bne.n	80060a0 <HAL_RCC_OscConfig+0x19c>
 8006060:	4b75      	ldr	r3, [pc, #468]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	23c0      	movs	r3, #192	; 0xc0
 8006066:	025b      	lsls	r3, r3, #9
 8006068:	401a      	ands	r2, r3
 800606a:	2380      	movs	r3, #128	; 0x80
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	429a      	cmp	r2, r3
 8006070:	d116      	bne.n	80060a0 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006072:	4b71      	ldr	r3, [pc, #452]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2202      	movs	r2, #2
 8006078:	4013      	ands	r3, r2
 800607a:	d005      	beq.n	8006088 <HAL_RCC_OscConfig+0x184>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d001      	beq.n	8006088 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e24c      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006088:	4b6b      	ldr	r3, [pc, #428]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	22f8      	movs	r2, #248	; 0xf8
 800608e:	4393      	bics	r3, r2
 8006090:	0019      	movs	r1, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	00da      	lsls	r2, r3, #3
 8006098:	4b67      	ldr	r3, [pc, #412]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 800609a:	430a      	orrs	r2, r1
 800609c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800609e:	e041      	b.n	8006124 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d024      	beq.n	80060f2 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060a8:	4b63      	ldr	r3, [pc, #396]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	4b62      	ldr	r3, [pc, #392]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 80060ae:	2101      	movs	r1, #1
 80060b0:	430a      	orrs	r2, r1
 80060b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b4:	f7fe fdfa 	bl	8004cac <HAL_GetTick>
 80060b8:	0003      	movs	r3, r0
 80060ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060be:	f7fe fdf5 	bl	8004cac <HAL_GetTick>
 80060c2:	0002      	movs	r2, r0
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e228      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d0:	4b59      	ldr	r3, [pc, #356]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2202      	movs	r2, #2
 80060d6:	4013      	ands	r3, r2
 80060d8:	d0f1      	beq.n	80060be <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060da:	4b57      	ldr	r3, [pc, #348]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	22f8      	movs	r2, #248	; 0xf8
 80060e0:	4393      	bics	r3, r2
 80060e2:	0019      	movs	r1, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	00da      	lsls	r2, r3, #3
 80060ea:	4b53      	ldr	r3, [pc, #332]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 80060ec:	430a      	orrs	r2, r1
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	e018      	b.n	8006124 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060f2:	4b51      	ldr	r3, [pc, #324]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b50      	ldr	r3, [pc, #320]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 80060f8:	2101      	movs	r1, #1
 80060fa:	438a      	bics	r2, r1
 80060fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fe:	f7fe fdd5 	bl	8004cac <HAL_GetTick>
 8006102:	0003      	movs	r3, r0
 8006104:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006108:	f7fe fdd0 	bl	8004cac <HAL_GetTick>
 800610c:	0002      	movs	r2, r0
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e203      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800611a:	4b47      	ldr	r3, [pc, #284]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2202      	movs	r2, #2
 8006120:	4013      	ands	r3, r2
 8006122:	d1f1      	bne.n	8006108 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2208      	movs	r2, #8
 800612a:	4013      	ands	r3, r2
 800612c:	d036      	beq.n	800619c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d019      	beq.n	800616a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006136:	4b40      	ldr	r3, [pc, #256]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8006138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800613a:	4b3f      	ldr	r3, [pc, #252]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 800613c:	2101      	movs	r1, #1
 800613e:	430a      	orrs	r2, r1
 8006140:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006142:	f7fe fdb3 	bl	8004cac <HAL_GetTick>
 8006146:	0003      	movs	r3, r0
 8006148:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800614c:	f7fe fdae 	bl	8004cac <HAL_GetTick>
 8006150:	0002      	movs	r2, r0
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e1e1      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800615e:	4b36      	ldr	r3, [pc, #216]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	2202      	movs	r2, #2
 8006164:	4013      	ands	r3, r2
 8006166:	d0f1      	beq.n	800614c <HAL_RCC_OscConfig+0x248>
 8006168:	e018      	b.n	800619c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800616a:	4b33      	ldr	r3, [pc, #204]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 800616c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800616e:	4b32      	ldr	r3, [pc, #200]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8006170:	2101      	movs	r1, #1
 8006172:	438a      	bics	r2, r1
 8006174:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006176:	f7fe fd99 	bl	8004cac <HAL_GetTick>
 800617a:	0003      	movs	r3, r0
 800617c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006180:	f7fe fd94 	bl	8004cac <HAL_GetTick>
 8006184:	0002      	movs	r2, r0
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e1c7      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006192:	4b29      	ldr	r3, [pc, #164]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	2202      	movs	r2, #2
 8006198:	4013      	ands	r3, r2
 800619a:	d1f1      	bne.n	8006180 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2204      	movs	r2, #4
 80061a2:	4013      	ands	r3, r2
 80061a4:	d100      	bne.n	80061a8 <HAL_RCC_OscConfig+0x2a4>
 80061a6:	e0b5      	b.n	8006314 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061a8:	201f      	movs	r0, #31
 80061aa:	183b      	adds	r3, r7, r0
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061b0:	4b21      	ldr	r3, [pc, #132]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	2380      	movs	r3, #128	; 0x80
 80061b6:	055b      	lsls	r3, r3, #21
 80061b8:	4013      	ands	r3, r2
 80061ba:	d110      	bne.n	80061de <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061bc:	4b1e      	ldr	r3, [pc, #120]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 80061be:	69da      	ldr	r2, [r3, #28]
 80061c0:	4b1d      	ldr	r3, [pc, #116]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 80061c2:	2180      	movs	r1, #128	; 0x80
 80061c4:	0549      	lsls	r1, r1, #21
 80061c6:	430a      	orrs	r2, r1
 80061c8:	61da      	str	r2, [r3, #28]
 80061ca:	4b1b      	ldr	r3, [pc, #108]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 80061cc:	69da      	ldr	r2, [r3, #28]
 80061ce:	2380      	movs	r3, #128	; 0x80
 80061d0:	055b      	lsls	r3, r3, #21
 80061d2:	4013      	ands	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80061d8:	183b      	adds	r3, r7, r0
 80061da:	2201      	movs	r2, #1
 80061dc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061de:	4b19      	ldr	r3, [pc, #100]	; (8006244 <HAL_RCC_OscConfig+0x340>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	2380      	movs	r3, #128	; 0x80
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	4013      	ands	r3, r2
 80061e8:	d11a      	bne.n	8006220 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061ea:	4b16      	ldr	r3, [pc, #88]	; (8006244 <HAL_RCC_OscConfig+0x340>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	4b15      	ldr	r3, [pc, #84]	; (8006244 <HAL_RCC_OscConfig+0x340>)
 80061f0:	2180      	movs	r1, #128	; 0x80
 80061f2:	0049      	lsls	r1, r1, #1
 80061f4:	430a      	orrs	r2, r1
 80061f6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061f8:	f7fe fd58 	bl	8004cac <HAL_GetTick>
 80061fc:	0003      	movs	r3, r0
 80061fe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006200:	e008      	b.n	8006214 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006202:	f7fe fd53 	bl	8004cac <HAL_GetTick>
 8006206:	0002      	movs	r2, r0
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b64      	cmp	r3, #100	; 0x64
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e186      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006214:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <HAL_RCC_OscConfig+0x340>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	2380      	movs	r3, #128	; 0x80
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	4013      	ands	r3, r2
 800621e:	d0f0      	beq.n	8006202 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d10f      	bne.n	8006248 <HAL_RCC_OscConfig+0x344>
 8006228:	4b03      	ldr	r3, [pc, #12]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 800622a:	6a1a      	ldr	r2, [r3, #32]
 800622c:	4b02      	ldr	r3, [pc, #8]	; (8006238 <HAL_RCC_OscConfig+0x334>)
 800622e:	2101      	movs	r1, #1
 8006230:	430a      	orrs	r2, r1
 8006232:	621a      	str	r2, [r3, #32]
 8006234:	e036      	b.n	80062a4 <HAL_RCC_OscConfig+0x3a0>
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	40021000 	.word	0x40021000
 800623c:	fffeffff 	.word	0xfffeffff
 8006240:	fffbffff 	.word	0xfffbffff
 8006244:	40007000 	.word	0x40007000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10c      	bne.n	800626a <HAL_RCC_OscConfig+0x366>
 8006250:	4bb6      	ldr	r3, [pc, #728]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006252:	6a1a      	ldr	r2, [r3, #32]
 8006254:	4bb5      	ldr	r3, [pc, #724]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006256:	2101      	movs	r1, #1
 8006258:	438a      	bics	r2, r1
 800625a:	621a      	str	r2, [r3, #32]
 800625c:	4bb3      	ldr	r3, [pc, #716]	; (800652c <HAL_RCC_OscConfig+0x628>)
 800625e:	6a1a      	ldr	r2, [r3, #32]
 8006260:	4bb2      	ldr	r3, [pc, #712]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006262:	2104      	movs	r1, #4
 8006264:	438a      	bics	r2, r1
 8006266:	621a      	str	r2, [r3, #32]
 8006268:	e01c      	b.n	80062a4 <HAL_RCC_OscConfig+0x3a0>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	2b05      	cmp	r3, #5
 8006270:	d10c      	bne.n	800628c <HAL_RCC_OscConfig+0x388>
 8006272:	4bae      	ldr	r3, [pc, #696]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006274:	6a1a      	ldr	r2, [r3, #32]
 8006276:	4bad      	ldr	r3, [pc, #692]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006278:	2104      	movs	r1, #4
 800627a:	430a      	orrs	r2, r1
 800627c:	621a      	str	r2, [r3, #32]
 800627e:	4bab      	ldr	r3, [pc, #684]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006280:	6a1a      	ldr	r2, [r3, #32]
 8006282:	4baa      	ldr	r3, [pc, #680]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006284:	2101      	movs	r1, #1
 8006286:	430a      	orrs	r2, r1
 8006288:	621a      	str	r2, [r3, #32]
 800628a:	e00b      	b.n	80062a4 <HAL_RCC_OscConfig+0x3a0>
 800628c:	4ba7      	ldr	r3, [pc, #668]	; (800652c <HAL_RCC_OscConfig+0x628>)
 800628e:	6a1a      	ldr	r2, [r3, #32]
 8006290:	4ba6      	ldr	r3, [pc, #664]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006292:	2101      	movs	r1, #1
 8006294:	438a      	bics	r2, r1
 8006296:	621a      	str	r2, [r3, #32]
 8006298:	4ba4      	ldr	r3, [pc, #656]	; (800652c <HAL_RCC_OscConfig+0x628>)
 800629a:	6a1a      	ldr	r2, [r3, #32]
 800629c:	4ba3      	ldr	r3, [pc, #652]	; (800652c <HAL_RCC_OscConfig+0x628>)
 800629e:	2104      	movs	r1, #4
 80062a0:	438a      	bics	r2, r1
 80062a2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d014      	beq.n	80062d6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062ac:	f7fe fcfe 	bl	8004cac <HAL_GetTick>
 80062b0:	0003      	movs	r3, r0
 80062b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b4:	e009      	b.n	80062ca <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062b6:	f7fe fcf9 	bl	8004cac <HAL_GetTick>
 80062ba:	0002      	movs	r2, r0
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	4a9b      	ldr	r2, [pc, #620]	; (8006530 <HAL_RCC_OscConfig+0x62c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e12b      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ca:	4b98      	ldr	r3, [pc, #608]	; (800652c <HAL_RCC_OscConfig+0x628>)
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	2202      	movs	r2, #2
 80062d0:	4013      	ands	r3, r2
 80062d2:	d0f0      	beq.n	80062b6 <HAL_RCC_OscConfig+0x3b2>
 80062d4:	e013      	b.n	80062fe <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062d6:	f7fe fce9 	bl	8004cac <HAL_GetTick>
 80062da:	0003      	movs	r3, r0
 80062dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062de:	e009      	b.n	80062f4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062e0:	f7fe fce4 	bl	8004cac <HAL_GetTick>
 80062e4:	0002      	movs	r2, r0
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	4a91      	ldr	r2, [pc, #580]	; (8006530 <HAL_RCC_OscConfig+0x62c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d901      	bls.n	80062f4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e116      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062f4:	4b8d      	ldr	r3, [pc, #564]	; (800652c <HAL_RCC_OscConfig+0x628>)
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	2202      	movs	r2, #2
 80062fa:	4013      	ands	r3, r2
 80062fc:	d1f0      	bne.n	80062e0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80062fe:	231f      	movs	r3, #31
 8006300:	18fb      	adds	r3, r7, r3
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d105      	bne.n	8006314 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006308:	4b88      	ldr	r3, [pc, #544]	; (800652c <HAL_RCC_OscConfig+0x628>)
 800630a:	69da      	ldr	r2, [r3, #28]
 800630c:	4b87      	ldr	r3, [pc, #540]	; (800652c <HAL_RCC_OscConfig+0x628>)
 800630e:	4989      	ldr	r1, [pc, #548]	; (8006534 <HAL_RCC_OscConfig+0x630>)
 8006310:	400a      	ands	r2, r1
 8006312:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2210      	movs	r2, #16
 800631a:	4013      	ands	r3, r2
 800631c:	d063      	beq.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d12a      	bne.n	800637c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006326:	4b81      	ldr	r3, [pc, #516]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800632a:	4b80      	ldr	r3, [pc, #512]	; (800652c <HAL_RCC_OscConfig+0x628>)
 800632c:	2104      	movs	r1, #4
 800632e:	430a      	orrs	r2, r1
 8006330:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006332:	4b7e      	ldr	r3, [pc, #504]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006336:	4b7d      	ldr	r3, [pc, #500]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006338:	2101      	movs	r1, #1
 800633a:	430a      	orrs	r2, r1
 800633c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800633e:	f7fe fcb5 	bl	8004cac <HAL_GetTick>
 8006342:	0003      	movs	r3, r0
 8006344:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006346:	e008      	b.n	800635a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006348:	f7fe fcb0 	bl	8004cac <HAL_GetTick>
 800634c:	0002      	movs	r2, r0
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d901      	bls.n	800635a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e0e3      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800635a:	4b74      	ldr	r3, [pc, #464]	; (800652c <HAL_RCC_OscConfig+0x628>)
 800635c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635e:	2202      	movs	r2, #2
 8006360:	4013      	ands	r3, r2
 8006362:	d0f1      	beq.n	8006348 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006364:	4b71      	ldr	r3, [pc, #452]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006368:	22f8      	movs	r2, #248	; 0xf8
 800636a:	4393      	bics	r3, r2
 800636c:	0019      	movs	r1, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	00da      	lsls	r2, r3, #3
 8006374:	4b6d      	ldr	r3, [pc, #436]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006376:	430a      	orrs	r2, r1
 8006378:	635a      	str	r2, [r3, #52]	; 0x34
 800637a:	e034      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	3305      	adds	r3, #5
 8006382:	d111      	bne.n	80063a8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006384:	4b69      	ldr	r3, [pc, #420]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006388:	4b68      	ldr	r3, [pc, #416]	; (800652c <HAL_RCC_OscConfig+0x628>)
 800638a:	2104      	movs	r1, #4
 800638c:	438a      	bics	r2, r1
 800638e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006390:	4b66      	ldr	r3, [pc, #408]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006394:	22f8      	movs	r2, #248	; 0xf8
 8006396:	4393      	bics	r3, r2
 8006398:	0019      	movs	r1, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	00da      	lsls	r2, r3, #3
 80063a0:	4b62      	ldr	r3, [pc, #392]	; (800652c <HAL_RCC_OscConfig+0x628>)
 80063a2:	430a      	orrs	r2, r1
 80063a4:	635a      	str	r2, [r3, #52]	; 0x34
 80063a6:	e01e      	b.n	80063e6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80063a8:	4b60      	ldr	r3, [pc, #384]	; (800652c <HAL_RCC_OscConfig+0x628>)
 80063aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ac:	4b5f      	ldr	r3, [pc, #380]	; (800652c <HAL_RCC_OscConfig+0x628>)
 80063ae:	2104      	movs	r1, #4
 80063b0:	430a      	orrs	r2, r1
 80063b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80063b4:	4b5d      	ldr	r3, [pc, #372]	; (800652c <HAL_RCC_OscConfig+0x628>)
 80063b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063b8:	4b5c      	ldr	r3, [pc, #368]	; (800652c <HAL_RCC_OscConfig+0x628>)
 80063ba:	2101      	movs	r1, #1
 80063bc:	438a      	bics	r2, r1
 80063be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063c0:	f7fe fc74 	bl	8004cac <HAL_GetTick>
 80063c4:	0003      	movs	r3, r0
 80063c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80063c8:	e008      	b.n	80063dc <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80063ca:	f7fe fc6f 	bl	8004cac <HAL_GetTick>
 80063ce:	0002      	movs	r2, r0
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d901      	bls.n	80063dc <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e0a2      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80063dc:	4b53      	ldr	r3, [pc, #332]	; (800652c <HAL_RCC_OscConfig+0x628>)
 80063de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e0:	2202      	movs	r2, #2
 80063e2:	4013      	ands	r3, r2
 80063e4:	d1f1      	bne.n	80063ca <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d100      	bne.n	80063f0 <HAL_RCC_OscConfig+0x4ec>
 80063ee:	e097      	b.n	8006520 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063f0:	4b4e      	ldr	r3, [pc, #312]	; (800652c <HAL_RCC_OscConfig+0x628>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	220c      	movs	r2, #12
 80063f6:	4013      	ands	r3, r2
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d100      	bne.n	80063fe <HAL_RCC_OscConfig+0x4fa>
 80063fc:	e06b      	b.n	80064d6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	2b02      	cmp	r3, #2
 8006404:	d14c      	bne.n	80064a0 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006406:	4b49      	ldr	r3, [pc, #292]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	4b48      	ldr	r3, [pc, #288]	; (800652c <HAL_RCC_OscConfig+0x628>)
 800640c:	494a      	ldr	r1, [pc, #296]	; (8006538 <HAL_RCC_OscConfig+0x634>)
 800640e:	400a      	ands	r2, r1
 8006410:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006412:	f7fe fc4b 	bl	8004cac <HAL_GetTick>
 8006416:	0003      	movs	r3, r0
 8006418:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800641c:	f7fe fc46 	bl	8004cac <HAL_GetTick>
 8006420:	0002      	movs	r2, r0
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e079      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800642e:	4b3f      	ldr	r3, [pc, #252]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	2380      	movs	r3, #128	; 0x80
 8006434:	049b      	lsls	r3, r3, #18
 8006436:	4013      	ands	r3, r2
 8006438:	d1f0      	bne.n	800641c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800643a:	4b3c      	ldr	r3, [pc, #240]	; (800652c <HAL_RCC_OscConfig+0x628>)
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	220f      	movs	r2, #15
 8006440:	4393      	bics	r3, r2
 8006442:	0019      	movs	r1, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006448:	4b38      	ldr	r3, [pc, #224]	; (800652c <HAL_RCC_OscConfig+0x628>)
 800644a:	430a      	orrs	r2, r1
 800644c:	62da      	str	r2, [r3, #44]	; 0x2c
 800644e:	4b37      	ldr	r3, [pc, #220]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	4a3a      	ldr	r2, [pc, #232]	; (800653c <HAL_RCC_OscConfig+0x638>)
 8006454:	4013      	ands	r3, r2
 8006456:	0019      	movs	r1, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	431a      	orrs	r2, r3
 8006462:	4b32      	ldr	r3, [pc, #200]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006464:	430a      	orrs	r2, r1
 8006466:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006468:	4b30      	ldr	r3, [pc, #192]	; (800652c <HAL_RCC_OscConfig+0x628>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	4b2f      	ldr	r3, [pc, #188]	; (800652c <HAL_RCC_OscConfig+0x628>)
 800646e:	2180      	movs	r1, #128	; 0x80
 8006470:	0449      	lsls	r1, r1, #17
 8006472:	430a      	orrs	r2, r1
 8006474:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006476:	f7fe fc19 	bl	8004cac <HAL_GetTick>
 800647a:	0003      	movs	r3, r0
 800647c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006480:	f7fe fc14 	bl	8004cac <HAL_GetTick>
 8006484:	0002      	movs	r2, r0
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e047      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006492:	4b26      	ldr	r3, [pc, #152]	; (800652c <HAL_RCC_OscConfig+0x628>)
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	2380      	movs	r3, #128	; 0x80
 8006498:	049b      	lsls	r3, r3, #18
 800649a:	4013      	ands	r3, r2
 800649c:	d0f0      	beq.n	8006480 <HAL_RCC_OscConfig+0x57c>
 800649e:	e03f      	b.n	8006520 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064a0:	4b22      	ldr	r3, [pc, #136]	; (800652c <HAL_RCC_OscConfig+0x628>)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	4b21      	ldr	r3, [pc, #132]	; (800652c <HAL_RCC_OscConfig+0x628>)
 80064a6:	4924      	ldr	r1, [pc, #144]	; (8006538 <HAL_RCC_OscConfig+0x634>)
 80064a8:	400a      	ands	r2, r1
 80064aa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ac:	f7fe fbfe 	bl	8004cac <HAL_GetTick>
 80064b0:	0003      	movs	r3, r0
 80064b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064b6:	f7fe fbf9 	bl	8004cac <HAL_GetTick>
 80064ba:	0002      	movs	r2, r0
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e02c      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064c8:	4b18      	ldr	r3, [pc, #96]	; (800652c <HAL_RCC_OscConfig+0x628>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	2380      	movs	r3, #128	; 0x80
 80064ce:	049b      	lsls	r3, r3, #18
 80064d0:	4013      	ands	r3, r2
 80064d2:	d1f0      	bne.n	80064b6 <HAL_RCC_OscConfig+0x5b2>
 80064d4:	e024      	b.n	8006520 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e01f      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80064e2:	4b12      	ldr	r3, [pc, #72]	; (800652c <HAL_RCC_OscConfig+0x628>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80064e8:	4b10      	ldr	r3, [pc, #64]	; (800652c <HAL_RCC_OscConfig+0x628>)
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	23c0      	movs	r3, #192	; 0xc0
 80064f2:	025b      	lsls	r3, r3, #9
 80064f4:	401a      	ands	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d10e      	bne.n	800651c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	220f      	movs	r2, #15
 8006502:	401a      	ands	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006508:	429a      	cmp	r2, r3
 800650a:	d107      	bne.n	800651c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	23f0      	movs	r3, #240	; 0xf0
 8006510:	039b      	lsls	r3, r3, #14
 8006512:	401a      	ands	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006518:	429a      	cmp	r2, r3
 800651a:	d001      	beq.n	8006520 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	0018      	movs	r0, r3
 8006524:	46bd      	mov	sp, r7
 8006526:	b008      	add	sp, #32
 8006528:	bd80      	pop	{r7, pc}
 800652a:	46c0      	nop			; (mov r8, r8)
 800652c:	40021000 	.word	0x40021000
 8006530:	00001388 	.word	0x00001388
 8006534:	efffffff 	.word	0xefffffff
 8006538:	feffffff 	.word	0xfeffffff
 800653c:	ffc27fff 	.word	0xffc27fff

08006540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e0b3      	b.n	80066bc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006554:	4b5b      	ldr	r3, [pc, #364]	; (80066c4 <HAL_RCC_ClockConfig+0x184>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2201      	movs	r2, #1
 800655a:	4013      	ands	r3, r2
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d911      	bls.n	8006586 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006562:	4b58      	ldr	r3, [pc, #352]	; (80066c4 <HAL_RCC_ClockConfig+0x184>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2201      	movs	r2, #1
 8006568:	4393      	bics	r3, r2
 800656a:	0019      	movs	r1, r3
 800656c:	4b55      	ldr	r3, [pc, #340]	; (80066c4 <HAL_RCC_ClockConfig+0x184>)
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006574:	4b53      	ldr	r3, [pc, #332]	; (80066c4 <HAL_RCC_ClockConfig+0x184>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2201      	movs	r2, #1
 800657a:	4013      	ands	r3, r2
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	429a      	cmp	r2, r3
 8006580:	d001      	beq.n	8006586 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e09a      	b.n	80066bc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2202      	movs	r2, #2
 800658c:	4013      	ands	r3, r2
 800658e:	d015      	beq.n	80065bc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2204      	movs	r2, #4
 8006596:	4013      	ands	r3, r2
 8006598:	d006      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800659a:	4b4b      	ldr	r3, [pc, #300]	; (80066c8 <HAL_RCC_ClockConfig+0x188>)
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	4b4a      	ldr	r3, [pc, #296]	; (80066c8 <HAL_RCC_ClockConfig+0x188>)
 80065a0:	21e0      	movs	r1, #224	; 0xe0
 80065a2:	00c9      	lsls	r1, r1, #3
 80065a4:	430a      	orrs	r2, r1
 80065a6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065a8:	4b47      	ldr	r3, [pc, #284]	; (80066c8 <HAL_RCC_ClockConfig+0x188>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	22f0      	movs	r2, #240	; 0xf0
 80065ae:	4393      	bics	r3, r2
 80065b0:	0019      	movs	r1, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	4b44      	ldr	r3, [pc, #272]	; (80066c8 <HAL_RCC_ClockConfig+0x188>)
 80065b8:	430a      	orrs	r2, r1
 80065ba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2201      	movs	r2, #1
 80065c2:	4013      	ands	r3, r2
 80065c4:	d040      	beq.n	8006648 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d107      	bne.n	80065de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ce:	4b3e      	ldr	r3, [pc, #248]	; (80066c8 <HAL_RCC_ClockConfig+0x188>)
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	2380      	movs	r3, #128	; 0x80
 80065d4:	029b      	lsls	r3, r3, #10
 80065d6:	4013      	ands	r3, r2
 80065d8:	d114      	bne.n	8006604 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e06e      	b.n	80066bc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d107      	bne.n	80065f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065e6:	4b38      	ldr	r3, [pc, #224]	; (80066c8 <HAL_RCC_ClockConfig+0x188>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	2380      	movs	r3, #128	; 0x80
 80065ec:	049b      	lsls	r3, r3, #18
 80065ee:	4013      	ands	r3, r2
 80065f0:	d108      	bne.n	8006604 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e062      	b.n	80066bc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065f6:	4b34      	ldr	r3, [pc, #208]	; (80066c8 <HAL_RCC_ClockConfig+0x188>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2202      	movs	r2, #2
 80065fc:	4013      	ands	r3, r2
 80065fe:	d101      	bne.n	8006604 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e05b      	b.n	80066bc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006604:	4b30      	ldr	r3, [pc, #192]	; (80066c8 <HAL_RCC_ClockConfig+0x188>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	2203      	movs	r2, #3
 800660a:	4393      	bics	r3, r2
 800660c:	0019      	movs	r1, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	4b2d      	ldr	r3, [pc, #180]	; (80066c8 <HAL_RCC_ClockConfig+0x188>)
 8006614:	430a      	orrs	r2, r1
 8006616:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006618:	f7fe fb48 	bl	8004cac <HAL_GetTick>
 800661c:	0003      	movs	r3, r0
 800661e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006620:	e009      	b.n	8006636 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006622:	f7fe fb43 	bl	8004cac <HAL_GetTick>
 8006626:	0002      	movs	r2, r0
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	4a27      	ldr	r2, [pc, #156]	; (80066cc <HAL_RCC_ClockConfig+0x18c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e042      	b.n	80066bc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006636:	4b24      	ldr	r3, [pc, #144]	; (80066c8 <HAL_RCC_ClockConfig+0x188>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	220c      	movs	r2, #12
 800663c:	401a      	ands	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	429a      	cmp	r2, r3
 8006646:	d1ec      	bne.n	8006622 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006648:	4b1e      	ldr	r3, [pc, #120]	; (80066c4 <HAL_RCC_ClockConfig+0x184>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2201      	movs	r2, #1
 800664e:	4013      	ands	r3, r2
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d211      	bcs.n	800667a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006656:	4b1b      	ldr	r3, [pc, #108]	; (80066c4 <HAL_RCC_ClockConfig+0x184>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2201      	movs	r2, #1
 800665c:	4393      	bics	r3, r2
 800665e:	0019      	movs	r1, r3
 8006660:	4b18      	ldr	r3, [pc, #96]	; (80066c4 <HAL_RCC_ClockConfig+0x184>)
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006668:	4b16      	ldr	r3, [pc, #88]	; (80066c4 <HAL_RCC_ClockConfig+0x184>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2201      	movs	r2, #1
 800666e:	4013      	ands	r3, r2
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d001      	beq.n	800667a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e020      	b.n	80066bc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2204      	movs	r2, #4
 8006680:	4013      	ands	r3, r2
 8006682:	d009      	beq.n	8006698 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006684:	4b10      	ldr	r3, [pc, #64]	; (80066c8 <HAL_RCC_ClockConfig+0x188>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	4a11      	ldr	r2, [pc, #68]	; (80066d0 <HAL_RCC_ClockConfig+0x190>)
 800668a:	4013      	ands	r3, r2
 800668c:	0019      	movs	r1, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	4b0d      	ldr	r3, [pc, #52]	; (80066c8 <HAL_RCC_ClockConfig+0x188>)
 8006694:	430a      	orrs	r2, r1
 8006696:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006698:	f000 f820 	bl	80066dc <HAL_RCC_GetSysClockFreq>
 800669c:	0001      	movs	r1, r0
 800669e:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <HAL_RCC_ClockConfig+0x188>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	091b      	lsrs	r3, r3, #4
 80066a4:	220f      	movs	r2, #15
 80066a6:	4013      	ands	r3, r2
 80066a8:	4a0a      	ldr	r2, [pc, #40]	; (80066d4 <HAL_RCC_ClockConfig+0x194>)
 80066aa:	5cd3      	ldrb	r3, [r2, r3]
 80066ac:	000a      	movs	r2, r1
 80066ae:	40da      	lsrs	r2, r3
 80066b0:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <HAL_RCC_ClockConfig+0x198>)
 80066b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80066b4:	2000      	movs	r0, #0
 80066b6:	f7fd ff47 	bl	8004548 <HAL_InitTick>
  
  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	0018      	movs	r0, r3
 80066be:	46bd      	mov	sp, r7
 80066c0:	b004      	add	sp, #16
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	40022000 	.word	0x40022000
 80066c8:	40021000 	.word	0x40021000
 80066cc:	00001388 	.word	0x00001388
 80066d0:	fffff8ff 	.word	0xfffff8ff
 80066d4:	0800dd78 	.word	0x0800dd78
 80066d8:	20000018 	.word	0x20000018

080066dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066dc:	b590      	push	{r4, r7, lr}
 80066de:	b08f      	sub	sp, #60	; 0x3c
 80066e0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80066e2:	2314      	movs	r3, #20
 80066e4:	18fb      	adds	r3, r7, r3
 80066e6:	4a2c      	ldr	r2, [pc, #176]	; (8006798 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80066ea:	c313      	stmia	r3!, {r0, r1, r4}
 80066ec:	6812      	ldr	r2, [r2, #0]
 80066ee:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80066f0:	1d3b      	adds	r3, r7, #4
 80066f2:	4a2a      	ldr	r2, [pc, #168]	; (800679c <HAL_RCC_GetSysClockFreq+0xc0>)
 80066f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80066f6:	c313      	stmia	r3!, {r0, r1, r4}
 80066f8:	6812      	ldr	r2, [r2, #0]
 80066fa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006700:	2300      	movs	r3, #0
 8006702:	62bb      	str	r3, [r7, #40]	; 0x28
 8006704:	2300      	movs	r3, #0
 8006706:	637b      	str	r3, [r7, #52]	; 0x34
 8006708:	2300      	movs	r3, #0
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006710:	4b23      	ldr	r3, [pc, #140]	; (80067a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	220c      	movs	r2, #12
 800671a:	4013      	ands	r3, r2
 800671c:	2b04      	cmp	r3, #4
 800671e:	d002      	beq.n	8006726 <HAL_RCC_GetSysClockFreq+0x4a>
 8006720:	2b08      	cmp	r3, #8
 8006722:	d003      	beq.n	800672c <HAL_RCC_GetSysClockFreq+0x50>
 8006724:	e02f      	b.n	8006786 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006726:	4b1f      	ldr	r3, [pc, #124]	; (80067a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006728:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800672a:	e02f      	b.n	800678c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	0c9b      	lsrs	r3, r3, #18
 8006730:	220f      	movs	r2, #15
 8006732:	4013      	ands	r3, r2
 8006734:	2214      	movs	r2, #20
 8006736:	18ba      	adds	r2, r7, r2
 8006738:	5cd3      	ldrb	r3, [r2, r3]
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800673c:	4b18      	ldr	r3, [pc, #96]	; (80067a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	220f      	movs	r2, #15
 8006742:	4013      	ands	r3, r2
 8006744:	1d3a      	adds	r2, r7, #4
 8006746:	5cd3      	ldrb	r3, [r2, r3]
 8006748:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800674a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800674c:	23c0      	movs	r3, #192	; 0xc0
 800674e:	025b      	lsls	r3, r3, #9
 8006750:	401a      	ands	r2, r3
 8006752:	2380      	movs	r3, #128	; 0x80
 8006754:	025b      	lsls	r3, r3, #9
 8006756:	429a      	cmp	r2, r3
 8006758:	d109      	bne.n	800676e <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800675a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800675c:	4811      	ldr	r0, [pc, #68]	; (80067a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800675e:	f7f9 fcdd 	bl	800011c <__udivsi3>
 8006762:	0003      	movs	r3, r0
 8006764:	001a      	movs	r2, r3
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	4353      	muls	r3, r2
 800676a:	637b      	str	r3, [r7, #52]	; 0x34
 800676c:	e008      	b.n	8006780 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800676e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006770:	480c      	ldr	r0, [pc, #48]	; (80067a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006772:	f7f9 fcd3 	bl	800011c <__udivsi3>
 8006776:	0003      	movs	r3, r0
 8006778:	001a      	movs	r2, r3
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	4353      	muls	r3, r2
 800677e:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006782:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006784:	e002      	b.n	800678c <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006786:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006788:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800678a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800678e:	0018      	movs	r0, r3
 8006790:	46bd      	mov	sp, r7
 8006792:	b00f      	add	sp, #60	; 0x3c
 8006794:	bd90      	pop	{r4, r7, pc}
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	0800ac8c 	.word	0x0800ac8c
 800679c:	0800ac9c 	.word	0x0800ac9c
 80067a0:	40021000 	.word	0x40021000
 80067a4:	007a1200 	.word	0x007a1200

080067a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067ac:	4b02      	ldr	r3, [pc, #8]	; (80067b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80067ae:	681b      	ldr	r3, [r3, #0]
}
 80067b0:	0018      	movs	r0, r3
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	46c0      	nop			; (mov r8, r8)
 80067b8:	20000018 	.word	0x20000018

080067bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80067c0:	f7ff fff2 	bl	80067a8 <HAL_RCC_GetHCLKFreq>
 80067c4:	0001      	movs	r1, r0
 80067c6:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	0a1b      	lsrs	r3, r3, #8
 80067cc:	2207      	movs	r2, #7
 80067ce:	4013      	ands	r3, r2
 80067d0:	4a04      	ldr	r2, [pc, #16]	; (80067e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067d2:	5cd3      	ldrb	r3, [r2, r3]
 80067d4:	40d9      	lsrs	r1, r3
 80067d6:	000b      	movs	r3, r1
}    
 80067d8:	0018      	movs	r0, r3
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	40021000 	.word	0x40021000
 80067e4:	0800dd88 	.word	0x0800dd88

080067e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2207      	movs	r2, #7
 80067f6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80067f8:	4b0e      	ldr	r3, [pc, #56]	; (8006834 <HAL_RCC_GetClockConfig+0x4c>)
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2203      	movs	r2, #3
 80067fe:	401a      	ands	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006804:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <HAL_RCC_GetClockConfig+0x4c>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	22f0      	movs	r2, #240	; 0xf0
 800680a:	401a      	ands	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8006810:	4b08      	ldr	r3, [pc, #32]	; (8006834 <HAL_RCC_GetClockConfig+0x4c>)
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	23e0      	movs	r3, #224	; 0xe0
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	401a      	ands	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800681e:	4b06      	ldr	r3, [pc, #24]	; (8006838 <HAL_RCC_GetClockConfig+0x50>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2201      	movs	r2, #1
 8006824:	401a      	ands	r2, r3
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	601a      	str	r2, [r3, #0]
}
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	46bd      	mov	sp, r7
 800682e:	b002      	add	sp, #8
 8006830:	bd80      	pop	{r7, pc}
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	40021000 	.word	0x40021000
 8006838:	40022000 	.word	0x40022000

0800683c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	2380      	movs	r3, #128	; 0x80
 8006852:	025b      	lsls	r3, r3, #9
 8006854:	4013      	ands	r3, r2
 8006856:	d100      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006858:	e08e      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800685a:	2017      	movs	r0, #23
 800685c:	183b      	adds	r3, r7, r0
 800685e:	2200      	movs	r2, #0
 8006860:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006862:	4b5f      	ldr	r3, [pc, #380]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006864:	69da      	ldr	r2, [r3, #28]
 8006866:	2380      	movs	r3, #128	; 0x80
 8006868:	055b      	lsls	r3, r3, #21
 800686a:	4013      	ands	r3, r2
 800686c:	d110      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800686e:	4b5c      	ldr	r3, [pc, #368]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006870:	69da      	ldr	r2, [r3, #28]
 8006872:	4b5b      	ldr	r3, [pc, #364]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006874:	2180      	movs	r1, #128	; 0x80
 8006876:	0549      	lsls	r1, r1, #21
 8006878:	430a      	orrs	r2, r1
 800687a:	61da      	str	r2, [r3, #28]
 800687c:	4b58      	ldr	r3, [pc, #352]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800687e:	69da      	ldr	r2, [r3, #28]
 8006880:	2380      	movs	r3, #128	; 0x80
 8006882:	055b      	lsls	r3, r3, #21
 8006884:	4013      	ands	r3, r2
 8006886:	60bb      	str	r3, [r7, #8]
 8006888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800688a:	183b      	adds	r3, r7, r0
 800688c:	2201      	movs	r2, #1
 800688e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006890:	4b54      	ldr	r3, [pc, #336]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	2380      	movs	r3, #128	; 0x80
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	4013      	ands	r3, r2
 800689a:	d11a      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800689c:	4b51      	ldr	r3, [pc, #324]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	4b50      	ldr	r3, [pc, #320]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80068a2:	2180      	movs	r1, #128	; 0x80
 80068a4:	0049      	lsls	r1, r1, #1
 80068a6:	430a      	orrs	r2, r1
 80068a8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068aa:	f7fe f9ff 	bl	8004cac <HAL_GetTick>
 80068ae:	0003      	movs	r3, r0
 80068b0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b2:	e008      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068b4:	f7fe f9fa 	bl	8004cac <HAL_GetTick>
 80068b8:	0002      	movs	r2, r0
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b64      	cmp	r3, #100	; 0x64
 80068c0:	d901      	bls.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e087      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068c6:	4b47      	ldr	r3, [pc, #284]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	2380      	movs	r3, #128	; 0x80
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	4013      	ands	r3, r2
 80068d0:	d0f0      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068d2:	4b43      	ldr	r3, [pc, #268]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80068d4:	6a1a      	ldr	r2, [r3, #32]
 80068d6:	23c0      	movs	r3, #192	; 0xc0
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4013      	ands	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d034      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	23c0      	movs	r3, #192	; 0xc0
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4013      	ands	r3, r2
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d02c      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068f4:	4b3a      	ldr	r3, [pc, #232]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	4a3b      	ldr	r2, [pc, #236]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068fe:	4b38      	ldr	r3, [pc, #224]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006900:	6a1a      	ldr	r2, [r3, #32]
 8006902:	4b37      	ldr	r3, [pc, #220]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006904:	2180      	movs	r1, #128	; 0x80
 8006906:	0249      	lsls	r1, r1, #9
 8006908:	430a      	orrs	r2, r1
 800690a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800690c:	4b34      	ldr	r3, [pc, #208]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800690e:	6a1a      	ldr	r2, [r3, #32]
 8006910:	4b33      	ldr	r3, [pc, #204]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006912:	4936      	ldr	r1, [pc, #216]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006914:	400a      	ands	r2, r1
 8006916:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006918:	4b31      	ldr	r3, [pc, #196]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	4013      	ands	r3, r2
 8006924:	d013      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006926:	f7fe f9c1 	bl	8004cac <HAL_GetTick>
 800692a:	0003      	movs	r3, r0
 800692c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800692e:	e009      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006930:	f7fe f9bc 	bl	8004cac <HAL_GetTick>
 8006934:	0002      	movs	r2, r0
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	4a2d      	ldr	r2, [pc, #180]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d901      	bls.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e048      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006944:	4b26      	ldr	r3, [pc, #152]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	2202      	movs	r2, #2
 800694a:	4013      	ands	r3, r2
 800694c:	d0f0      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800694e:	4b24      	ldr	r3, [pc, #144]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	4a25      	ldr	r2, [pc, #148]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006954:	4013      	ands	r3, r2
 8006956:	0019      	movs	r1, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800695e:	430a      	orrs	r2, r1
 8006960:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006962:	2317      	movs	r3, #23
 8006964:	18fb      	adds	r3, r7, r3
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d105      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800696c:	4b1c      	ldr	r3, [pc, #112]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800696e:	69da      	ldr	r2, [r3, #28]
 8006970:	4b1b      	ldr	r3, [pc, #108]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006972:	4920      	ldr	r1, [pc, #128]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006974:	400a      	ands	r2, r1
 8006976:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2201      	movs	r2, #1
 800697e:	4013      	ands	r3, r2
 8006980:	d009      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006982:	4b17      	ldr	r3, [pc, #92]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006986:	2203      	movs	r2, #3
 8006988:	4393      	bics	r3, r2
 800698a:	0019      	movs	r1, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	4b13      	ldr	r3, [pc, #76]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006992:	430a      	orrs	r2, r1
 8006994:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2220      	movs	r2, #32
 800699c:	4013      	ands	r3, r2
 800699e:	d009      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069a0:	4b0f      	ldr	r3, [pc, #60]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80069a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a4:	2210      	movs	r2, #16
 80069a6:	4393      	bics	r3, r2
 80069a8:	0019      	movs	r1, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	4b0c      	ldr	r3, [pc, #48]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80069b0:	430a      	orrs	r2, r1
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	2380      	movs	r3, #128	; 0x80
 80069ba:	029b      	lsls	r3, r3, #10
 80069bc:	4013      	ands	r3, r2
 80069be:	d009      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069c0:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80069c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c4:	2280      	movs	r2, #128	; 0x80
 80069c6:	4393      	bics	r3, r2
 80069c8:	0019      	movs	r1, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691a      	ldr	r2, [r3, #16]
 80069ce:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80069d0:	430a      	orrs	r2, r1
 80069d2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	0018      	movs	r0, r3
 80069d8:	46bd      	mov	sp, r7
 80069da:	b006      	add	sp, #24
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	46c0      	nop			; (mov r8, r8)
 80069e0:	40021000 	.word	0x40021000
 80069e4:	40007000 	.word	0x40007000
 80069e8:	fffffcff 	.word	0xfffffcff
 80069ec:	fffeffff 	.word	0xfffeffff
 80069f0:	00001388 	.word	0x00001388
 80069f4:	efffffff 	.word	0xefffffff

080069f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e042      	b.n	8006a90 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	223d      	movs	r2, #61	; 0x3d
 8006a0e:	5c9b      	ldrb	r3, [r3, r2]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d107      	bne.n	8006a26 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	223c      	movs	r2, #60	; 0x3c
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	0018      	movs	r0, r3
 8006a22:	f000 f839 	bl	8006a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	223d      	movs	r2, #61	; 0x3d
 8006a2a:	2102      	movs	r1, #2
 8006a2c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3304      	adds	r3, #4
 8006a36:	0019      	movs	r1, r3
 8006a38:	0010      	movs	r0, r2
 8006a3a:	f000 f9b7 	bl	8006dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2246      	movs	r2, #70	; 0x46
 8006a42:	2101      	movs	r1, #1
 8006a44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	223e      	movs	r2, #62	; 0x3e
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	5499      	strb	r1, [r3, r2]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	223f      	movs	r2, #63	; 0x3f
 8006a52:	2101      	movs	r1, #1
 8006a54:	5499      	strb	r1, [r3, r2]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2240      	movs	r2, #64	; 0x40
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	5499      	strb	r1, [r3, r2]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2241      	movs	r2, #65	; 0x41
 8006a62:	2101      	movs	r1, #1
 8006a64:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2242      	movs	r2, #66	; 0x42
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	5499      	strb	r1, [r3, r2]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2243      	movs	r2, #67	; 0x43
 8006a72:	2101      	movs	r1, #1
 8006a74:	5499      	strb	r1, [r3, r2]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2244      	movs	r2, #68	; 0x44
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	5499      	strb	r1, [r3, r2]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2245      	movs	r2, #69	; 0x45
 8006a82:	2101      	movs	r1, #1
 8006a84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	223d      	movs	r2, #61	; 0x3d
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	0018      	movs	r0, r3
 8006a92:	46bd      	mov	sp, r7
 8006a94:	b002      	add	sp, #8
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006aa0:	46c0      	nop			; (mov r8, r8)
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b002      	add	sp, #8
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	223d      	movs	r2, #61	; 0x3d
 8006ab4:	5c9b      	ldrb	r3, [r3, r2]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d001      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e035      	b.n	8006b2c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	223d      	movs	r2, #61	; 0x3d
 8006ac4:	2102      	movs	r1, #2
 8006ac6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a15      	ldr	r2, [pc, #84]	; (8006b34 <HAL_TIM_Base_Start_IT+0x8c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d009      	beq.n	8006af6 <HAL_TIM_Base_Start_IT+0x4e>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a14      	ldr	r2, [pc, #80]	; (8006b38 <HAL_TIM_Base_Start_IT+0x90>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d004      	beq.n	8006af6 <HAL_TIM_Base_Start_IT+0x4e>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a12      	ldr	r2, [pc, #72]	; (8006b3c <HAL_TIM_Base_Start_IT+0x94>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d111      	bne.n	8006b1a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2207      	movs	r2, #7
 8006afe:	4013      	ands	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b06      	cmp	r3, #6
 8006b06:	d010      	beq.n	8006b2a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2101      	movs	r1, #1
 8006b14:	430a      	orrs	r2, r1
 8006b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b18:	e007      	b.n	8006b2a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2101      	movs	r1, #1
 8006b26:	430a      	orrs	r2, r1
 8006b28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	b004      	add	sp, #16
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	40012c00 	.word	0x40012c00
 8006b38:	40000400 	.word	0x40000400
 8006b3c:	40014000 	.word	0x40014000

08006b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	4013      	ands	r3, r2
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d124      	bne.n	8006ba0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	4013      	ands	r3, r2
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d11d      	bne.n	8006ba0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2203      	movs	r2, #3
 8006b6a:	4252      	negs	r2, r2
 8006b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	2203      	movs	r2, #3
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	d004      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	0018      	movs	r0, r3
 8006b84:	f000 f8fa 	bl	8006d7c <HAL_TIM_IC_CaptureCallback>
 8006b88:	e007      	b.n	8006b9a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	f000 f8ed 	bl	8006d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	0018      	movs	r0, r3
 8006b96:	f000 f8f9 	bl	8006d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	4013      	ands	r3, r2
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	d125      	bne.n	8006bfa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	2204      	movs	r2, #4
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	2b04      	cmp	r3, #4
 8006bba:	d11e      	bne.n	8006bfa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2205      	movs	r2, #5
 8006bc2:	4252      	negs	r2, r2
 8006bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2202      	movs	r2, #2
 8006bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699a      	ldr	r2, [r3, #24]
 8006bd2:	23c0      	movs	r3, #192	; 0xc0
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	d004      	beq.n	8006be4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f000 f8cd 	bl	8006d7c <HAL_TIM_IC_CaptureCallback>
 8006be2:	e007      	b.n	8006bf4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	0018      	movs	r0, r3
 8006be8:	f000 f8c0 	bl	8006d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	0018      	movs	r0, r3
 8006bf0:	f000 f8cc 	bl	8006d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	2208      	movs	r2, #8
 8006c02:	4013      	ands	r3, r2
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d124      	bne.n	8006c52 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	2208      	movs	r2, #8
 8006c10:	4013      	ands	r3, r2
 8006c12:	2b08      	cmp	r3, #8
 8006c14:	d11d      	bne.n	8006c52 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2209      	movs	r2, #9
 8006c1c:	4252      	negs	r2, r2
 8006c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2204      	movs	r2, #4
 8006c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	4013      	ands	r3, r2
 8006c30:	d004      	beq.n	8006c3c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	0018      	movs	r0, r3
 8006c36:	f000 f8a1 	bl	8006d7c <HAL_TIM_IC_CaptureCallback>
 8006c3a:	e007      	b.n	8006c4c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f000 f894 	bl	8006d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	0018      	movs	r0, r3
 8006c48:	f000 f8a0 	bl	8006d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	2210      	movs	r2, #16
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2b10      	cmp	r3, #16
 8006c5e:	d125      	bne.n	8006cac <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	2210      	movs	r2, #16
 8006c68:	4013      	ands	r3, r2
 8006c6a:	2b10      	cmp	r3, #16
 8006c6c:	d11e      	bne.n	8006cac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2211      	movs	r2, #17
 8006c74:	4252      	negs	r2, r2
 8006c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2208      	movs	r2, #8
 8006c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	23c0      	movs	r3, #192	; 0xc0
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4013      	ands	r3, r2
 8006c8a:	d004      	beq.n	8006c96 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	0018      	movs	r0, r3
 8006c90:	f000 f874 	bl	8006d7c <HAL_TIM_IC_CaptureCallback>
 8006c94:	e007      	b.n	8006ca6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f000 f867 	bl	8006d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	f000 f873 	bl	8006d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d10f      	bne.n	8006cda <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d108      	bne.n	8006cda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2202      	movs	r2, #2
 8006cce:	4252      	negs	r2, r2
 8006cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	f7fc fae1 	bl	800329c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	2280      	movs	r2, #128	; 0x80
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	2b80      	cmp	r3, #128	; 0x80
 8006ce6:	d10f      	bne.n	8006d08 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	2280      	movs	r2, #128	; 0x80
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	2b80      	cmp	r3, #128	; 0x80
 8006cf4:	d108      	bne.n	8006d08 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2281      	movs	r2, #129	; 0x81
 8006cfc:	4252      	negs	r2, r2
 8006cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	0018      	movs	r0, r3
 8006d04:	f000 f8d0 	bl	8006ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	2240      	movs	r2, #64	; 0x40
 8006d10:	4013      	ands	r3, r2
 8006d12:	2b40      	cmp	r3, #64	; 0x40
 8006d14:	d10f      	bne.n	8006d36 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	2240      	movs	r2, #64	; 0x40
 8006d1e:	4013      	ands	r3, r2
 8006d20:	2b40      	cmp	r3, #64	; 0x40
 8006d22:	d108      	bne.n	8006d36 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2241      	movs	r2, #65	; 0x41
 8006d2a:	4252      	negs	r2, r2
 8006d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	0018      	movs	r0, r3
 8006d32:	f000 f833 	bl	8006d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	4013      	ands	r3, r2
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	d10f      	bne.n	8006d64 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d108      	bne.n	8006d64 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2221      	movs	r2, #33	; 0x21
 8006d58:	4252      	negs	r2, r2
 8006d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f000 f89a 	bl	8006e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d64:	46c0      	nop			; (mov r8, r8)
 8006d66:	46bd      	mov	sp, r7
 8006d68:	b002      	add	sp, #8
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d74:	46c0      	nop			; (mov r8, r8)
 8006d76:	46bd      	mov	sp, r7
 8006d78:	b002      	add	sp, #8
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d84:	46c0      	nop			; (mov r8, r8)
 8006d86:	46bd      	mov	sp, r7
 8006d88:	b002      	add	sp, #8
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d94:	46c0      	nop			; (mov r8, r8)
 8006d96:	46bd      	mov	sp, r7
 8006d98:	b002      	add	sp, #8
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006da4:	46c0      	nop			; (mov r8, r8)
 8006da6:	46bd      	mov	sp, r7
 8006da8:	b002      	add	sp, #8
 8006daa:	bd80      	pop	{r7, pc}

08006dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a2f      	ldr	r2, [pc, #188]	; (8006e7c <TIM_Base_SetConfig+0xd0>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d003      	beq.n	8006dcc <TIM_Base_SetConfig+0x20>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a2e      	ldr	r2, [pc, #184]	; (8006e80 <TIM_Base_SetConfig+0xd4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d108      	bne.n	8006dde <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2270      	movs	r2, #112	; 0x70
 8006dd0:	4393      	bics	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a26      	ldr	r2, [pc, #152]	; (8006e7c <TIM_Base_SetConfig+0xd0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d013      	beq.n	8006e0e <TIM_Base_SetConfig+0x62>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a25      	ldr	r2, [pc, #148]	; (8006e80 <TIM_Base_SetConfig+0xd4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00f      	beq.n	8006e0e <TIM_Base_SetConfig+0x62>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a24      	ldr	r2, [pc, #144]	; (8006e84 <TIM_Base_SetConfig+0xd8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00b      	beq.n	8006e0e <TIM_Base_SetConfig+0x62>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a23      	ldr	r2, [pc, #140]	; (8006e88 <TIM_Base_SetConfig+0xdc>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d007      	beq.n	8006e0e <TIM_Base_SetConfig+0x62>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a22      	ldr	r2, [pc, #136]	; (8006e8c <TIM_Base_SetConfig+0xe0>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d003      	beq.n	8006e0e <TIM_Base_SetConfig+0x62>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a21      	ldr	r2, [pc, #132]	; (8006e90 <TIM_Base_SetConfig+0xe4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d108      	bne.n	8006e20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4a20      	ldr	r2, [pc, #128]	; (8006e94 <TIM_Base_SetConfig+0xe8>)
 8006e12:	4013      	ands	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2280      	movs	r2, #128	; 0x80
 8006e24:	4393      	bics	r3, r2
 8006e26:	001a      	movs	r2, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a0c      	ldr	r2, [pc, #48]	; (8006e7c <TIM_Base_SetConfig+0xd0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d00b      	beq.n	8006e66 <TIM_Base_SetConfig+0xba>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a0d      	ldr	r2, [pc, #52]	; (8006e88 <TIM_Base_SetConfig+0xdc>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d007      	beq.n	8006e66 <TIM_Base_SetConfig+0xba>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a0c      	ldr	r2, [pc, #48]	; (8006e8c <TIM_Base_SetConfig+0xe0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d003      	beq.n	8006e66 <TIM_Base_SetConfig+0xba>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a0b      	ldr	r2, [pc, #44]	; (8006e90 <TIM_Base_SetConfig+0xe4>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d103      	bne.n	8006e6e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	691a      	ldr	r2, [r3, #16]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	615a      	str	r2, [r3, #20]
}
 8006e74:	46c0      	nop			; (mov r8, r8)
 8006e76:	46bd      	mov	sp, r7
 8006e78:	b004      	add	sp, #16
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	40012c00 	.word	0x40012c00
 8006e80:	40000400 	.word	0x40000400
 8006e84:	40002000 	.word	0x40002000
 8006e88:	40014000 	.word	0x40014000
 8006e8c:	40014400 	.word	0x40014400
 8006e90:	40014800 	.word	0x40014800
 8006e94:	fffffcff 	.word	0xfffffcff

08006e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ea0:	46c0      	nop			; (mov r8, r8)
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	b002      	add	sp, #8
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006eb0:	46c0      	nop			; (mov r8, r8)
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b002      	add	sp, #8
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ec0:	231e      	movs	r3, #30
 8006ec2:	18fb      	adds	r3, r7, r3
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a97      	ldr	r2, [pc, #604]	; (8007144 <UART_SetConfig+0x28c>)
 8006ee8:	4013      	ands	r3, r2
 8006eea:	0019      	movs	r1, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	4a92      	ldr	r2, [pc, #584]	; (8007148 <UART_SetConfig+0x290>)
 8006efe:	4013      	ands	r3, r2
 8006f00:	0019      	movs	r1, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	4a89      	ldr	r2, [pc, #548]	; (800714c <UART_SetConfig+0x294>)
 8006f26:	4013      	ands	r3, r2
 8006f28:	0019      	movs	r1, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a85      	ldr	r2, [pc, #532]	; (8007150 <UART_SetConfig+0x298>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d127      	bne.n	8006f8e <UART_SetConfig+0xd6>
 8006f3e:	4b85      	ldr	r3, [pc, #532]	; (8007154 <UART_SetConfig+0x29c>)
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	2203      	movs	r2, #3
 8006f44:	4013      	ands	r3, r2
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d00d      	beq.n	8006f66 <UART_SetConfig+0xae>
 8006f4a:	d81b      	bhi.n	8006f84 <UART_SetConfig+0xcc>
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d014      	beq.n	8006f7a <UART_SetConfig+0xc2>
 8006f50:	d818      	bhi.n	8006f84 <UART_SetConfig+0xcc>
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <UART_SetConfig+0xa4>
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d00a      	beq.n	8006f70 <UART_SetConfig+0xb8>
 8006f5a:	e013      	b.n	8006f84 <UART_SetConfig+0xcc>
 8006f5c:	231f      	movs	r3, #31
 8006f5e:	18fb      	adds	r3, r7, r3
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]
 8006f64:	e035      	b.n	8006fd2 <UART_SetConfig+0x11a>
 8006f66:	231f      	movs	r3, #31
 8006f68:	18fb      	adds	r3, r7, r3
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	e030      	b.n	8006fd2 <UART_SetConfig+0x11a>
 8006f70:	231f      	movs	r3, #31
 8006f72:	18fb      	adds	r3, r7, r3
 8006f74:	2204      	movs	r2, #4
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	e02b      	b.n	8006fd2 <UART_SetConfig+0x11a>
 8006f7a:	231f      	movs	r3, #31
 8006f7c:	18fb      	adds	r3, r7, r3
 8006f7e:	2208      	movs	r2, #8
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	e026      	b.n	8006fd2 <UART_SetConfig+0x11a>
 8006f84:	231f      	movs	r3, #31
 8006f86:	18fb      	adds	r3, r7, r3
 8006f88:	2210      	movs	r2, #16
 8006f8a:	701a      	strb	r2, [r3, #0]
 8006f8c:	e021      	b.n	8006fd2 <UART_SetConfig+0x11a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a71      	ldr	r2, [pc, #452]	; (8007158 <UART_SetConfig+0x2a0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d104      	bne.n	8006fa2 <UART_SetConfig+0xea>
 8006f98:	231f      	movs	r3, #31
 8006f9a:	18fb      	adds	r3, r7, r3
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	e017      	b.n	8006fd2 <UART_SetConfig+0x11a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a6d      	ldr	r2, [pc, #436]	; (800715c <UART_SetConfig+0x2a4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d104      	bne.n	8006fb6 <UART_SetConfig+0xfe>
 8006fac:	231f      	movs	r3, #31
 8006fae:	18fb      	adds	r3, r7, r3
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	e00d      	b.n	8006fd2 <UART_SetConfig+0x11a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a69      	ldr	r2, [pc, #420]	; (8007160 <UART_SetConfig+0x2a8>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d104      	bne.n	8006fca <UART_SetConfig+0x112>
 8006fc0:	231f      	movs	r3, #31
 8006fc2:	18fb      	adds	r3, r7, r3
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	701a      	strb	r2, [r3, #0]
 8006fc8:	e003      	b.n	8006fd2 <UART_SetConfig+0x11a>
 8006fca:	231f      	movs	r3, #31
 8006fcc:	18fb      	adds	r3, r7, r3
 8006fce:	2210      	movs	r2, #16
 8006fd0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	69da      	ldr	r2, [r3, #28]
 8006fd6:	2380      	movs	r3, #128	; 0x80
 8006fd8:	021b      	lsls	r3, r3, #8
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d15d      	bne.n	800709a <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8006fde:	231f      	movs	r3, #31
 8006fe0:	18fb      	adds	r3, r7, r3
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b08      	cmp	r3, #8
 8006fe6:	d015      	beq.n	8007014 <UART_SetConfig+0x15c>
 8006fe8:	dc18      	bgt.n	800701c <UART_SetConfig+0x164>
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	d00d      	beq.n	800700a <UART_SetConfig+0x152>
 8006fee:	dc15      	bgt.n	800701c <UART_SetConfig+0x164>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <UART_SetConfig+0x142>
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d005      	beq.n	8007004 <UART_SetConfig+0x14c>
 8006ff8:	e010      	b.n	800701c <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ffa:	f7ff fbdf 	bl	80067bc <HAL_RCC_GetPCLK1Freq>
 8006ffe:	0003      	movs	r3, r0
 8007000:	61bb      	str	r3, [r7, #24]
        break;
 8007002:	e012      	b.n	800702a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007004:	4b57      	ldr	r3, [pc, #348]	; (8007164 <UART_SetConfig+0x2ac>)
 8007006:	61bb      	str	r3, [r7, #24]
        break;
 8007008:	e00f      	b.n	800702a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800700a:	f7ff fb67 	bl	80066dc <HAL_RCC_GetSysClockFreq>
 800700e:	0003      	movs	r3, r0
 8007010:	61bb      	str	r3, [r7, #24]
        break;
 8007012:	e00a      	b.n	800702a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007014:	2380      	movs	r3, #128	; 0x80
 8007016:	021b      	lsls	r3, r3, #8
 8007018:	61bb      	str	r3, [r7, #24]
        break;
 800701a:	e006      	b.n	800702a <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007020:	231e      	movs	r3, #30
 8007022:	18fb      	adds	r3, r7, r3
 8007024:	2201      	movs	r2, #1
 8007026:	701a      	strb	r2, [r3, #0]
        break;
 8007028:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d100      	bne.n	8007032 <UART_SetConfig+0x17a>
 8007030:	e07b      	b.n	800712a <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	005a      	lsls	r2, r3, #1
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	085b      	lsrs	r3, r3, #1
 800703c:	18d2      	adds	r2, r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	0019      	movs	r1, r3
 8007044:	0010      	movs	r0, r2
 8007046:	f7f9 f869 	bl	800011c <__udivsi3>
 800704a:	0003      	movs	r3, r0
 800704c:	b29b      	uxth	r3, r3
 800704e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	2b0f      	cmp	r3, #15
 8007054:	d91c      	bls.n	8007090 <UART_SetConfig+0x1d8>
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	2380      	movs	r3, #128	; 0x80
 800705a:	025b      	lsls	r3, r3, #9
 800705c:	429a      	cmp	r2, r3
 800705e:	d217      	bcs.n	8007090 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	b29a      	uxth	r2, r3
 8007064:	200e      	movs	r0, #14
 8007066:	183b      	adds	r3, r7, r0
 8007068:	210f      	movs	r1, #15
 800706a:	438a      	bics	r2, r1
 800706c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	085b      	lsrs	r3, r3, #1
 8007072:	b29b      	uxth	r3, r3
 8007074:	2207      	movs	r2, #7
 8007076:	4013      	ands	r3, r2
 8007078:	b299      	uxth	r1, r3
 800707a:	183b      	adds	r3, r7, r0
 800707c:	183a      	adds	r2, r7, r0
 800707e:	8812      	ldrh	r2, [r2, #0]
 8007080:	430a      	orrs	r2, r1
 8007082:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	183a      	adds	r2, r7, r0
 800708a:	8812      	ldrh	r2, [r2, #0]
 800708c:	60da      	str	r2, [r3, #12]
 800708e:	e04c      	b.n	800712a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8007090:	231e      	movs	r3, #30
 8007092:	18fb      	adds	r3, r7, r3
 8007094:	2201      	movs	r2, #1
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	e047      	b.n	800712a <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 800709a:	231f      	movs	r3, #31
 800709c:	18fb      	adds	r3, r7, r3
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d015      	beq.n	80070d0 <UART_SetConfig+0x218>
 80070a4:	dc18      	bgt.n	80070d8 <UART_SetConfig+0x220>
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d00d      	beq.n	80070c6 <UART_SetConfig+0x20e>
 80070aa:	dc15      	bgt.n	80070d8 <UART_SetConfig+0x220>
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <UART_SetConfig+0x1fe>
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d005      	beq.n	80070c0 <UART_SetConfig+0x208>
 80070b4:	e010      	b.n	80070d8 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070b6:	f7ff fb81 	bl	80067bc <HAL_RCC_GetPCLK1Freq>
 80070ba:	0003      	movs	r3, r0
 80070bc:	61bb      	str	r3, [r7, #24]
        break;
 80070be:	e012      	b.n	80070e6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070c0:	4b28      	ldr	r3, [pc, #160]	; (8007164 <UART_SetConfig+0x2ac>)
 80070c2:	61bb      	str	r3, [r7, #24]
        break;
 80070c4:	e00f      	b.n	80070e6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070c6:	f7ff fb09 	bl	80066dc <HAL_RCC_GetSysClockFreq>
 80070ca:	0003      	movs	r3, r0
 80070cc:	61bb      	str	r3, [r7, #24]
        break;
 80070ce:	e00a      	b.n	80070e6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070d0:	2380      	movs	r3, #128	; 0x80
 80070d2:	021b      	lsls	r3, r3, #8
 80070d4:	61bb      	str	r3, [r7, #24]
        break;
 80070d6:	e006      	b.n	80070e6 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070dc:	231e      	movs	r3, #30
 80070de:	18fb      	adds	r3, r7, r3
 80070e0:	2201      	movs	r2, #1
 80070e2:	701a      	strb	r2, [r3, #0]
        break;
 80070e4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d01e      	beq.n	800712a <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	085a      	lsrs	r2, r3, #1
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	18d2      	adds	r2, r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	0019      	movs	r1, r3
 80070fc:	0010      	movs	r0, r2
 80070fe:	f7f9 f80d 	bl	800011c <__udivsi3>
 8007102:	0003      	movs	r3, r0
 8007104:	b29b      	uxth	r3, r3
 8007106:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2b0f      	cmp	r3, #15
 800710c:	d909      	bls.n	8007122 <UART_SetConfig+0x26a>
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	2380      	movs	r3, #128	; 0x80
 8007112:	025b      	lsls	r3, r3, #9
 8007114:	429a      	cmp	r2, r3
 8007116:	d204      	bcs.n	8007122 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	60da      	str	r2, [r3, #12]
 8007120:	e003      	b.n	800712a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8007122:	231e      	movs	r3, #30
 8007124:	18fb      	adds	r3, r7, r3
 8007126:	2201      	movs	r2, #1
 8007128:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007136:	231e      	movs	r3, #30
 8007138:	18fb      	adds	r3, r7, r3
 800713a:	781b      	ldrb	r3, [r3, #0]
}
 800713c:	0018      	movs	r0, r3
 800713e:	46bd      	mov	sp, r7
 8007140:	b008      	add	sp, #32
 8007142:	bd80      	pop	{r7, pc}
 8007144:	efff69f3 	.word	0xefff69f3
 8007148:	ffffcfff 	.word	0xffffcfff
 800714c:	fffff4ff 	.word	0xfffff4ff
 8007150:	40013800 	.word	0x40013800
 8007154:	40021000 	.word	0x40021000
 8007158:	40004400 	.word	0x40004400
 800715c:	40004800 	.word	0x40004800
 8007160:	40004c00 	.word	0x40004c00
 8007164:	007a1200 	.word	0x007a1200

08007168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	2201      	movs	r2, #1
 8007176:	4013      	ands	r3, r2
 8007178:	d00b      	beq.n	8007192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	4a4a      	ldr	r2, [pc, #296]	; (80072ac <UART_AdvFeatureConfig+0x144>)
 8007182:	4013      	ands	r3, r2
 8007184:	0019      	movs	r1, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	2202      	movs	r2, #2
 8007198:	4013      	ands	r3, r2
 800719a:	d00b      	beq.n	80071b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	4a43      	ldr	r2, [pc, #268]	; (80072b0 <UART_AdvFeatureConfig+0x148>)
 80071a4:	4013      	ands	r3, r2
 80071a6:	0019      	movs	r1, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	2204      	movs	r2, #4
 80071ba:	4013      	ands	r3, r2
 80071bc:	d00b      	beq.n	80071d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	4a3b      	ldr	r2, [pc, #236]	; (80072b4 <UART_AdvFeatureConfig+0x14c>)
 80071c6:	4013      	ands	r3, r2
 80071c8:	0019      	movs	r1, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	2208      	movs	r2, #8
 80071dc:	4013      	ands	r3, r2
 80071de:	d00b      	beq.n	80071f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	4a34      	ldr	r2, [pc, #208]	; (80072b8 <UART_AdvFeatureConfig+0x150>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	0019      	movs	r1, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	2210      	movs	r2, #16
 80071fe:	4013      	ands	r3, r2
 8007200:	d00b      	beq.n	800721a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	4a2c      	ldr	r2, [pc, #176]	; (80072bc <UART_AdvFeatureConfig+0x154>)
 800720a:	4013      	ands	r3, r2
 800720c:	0019      	movs	r1, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	2220      	movs	r2, #32
 8007220:	4013      	ands	r3, r2
 8007222:	d00b      	beq.n	800723c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	4a25      	ldr	r2, [pc, #148]	; (80072c0 <UART_AdvFeatureConfig+0x158>)
 800722c:	4013      	ands	r3, r2
 800722e:	0019      	movs	r1, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	2240      	movs	r2, #64	; 0x40
 8007242:	4013      	ands	r3, r2
 8007244:	d01d      	beq.n	8007282 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	4a1d      	ldr	r2, [pc, #116]	; (80072c4 <UART_AdvFeatureConfig+0x15c>)
 800724e:	4013      	ands	r3, r2
 8007250:	0019      	movs	r1, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007262:	2380      	movs	r3, #128	; 0x80
 8007264:	035b      	lsls	r3, r3, #13
 8007266:	429a      	cmp	r2, r3
 8007268:	d10b      	bne.n	8007282 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	4a15      	ldr	r2, [pc, #84]	; (80072c8 <UART_AdvFeatureConfig+0x160>)
 8007272:	4013      	ands	r3, r2
 8007274:	0019      	movs	r1, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	2280      	movs	r2, #128	; 0x80
 8007288:	4013      	ands	r3, r2
 800728a:	d00b      	beq.n	80072a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	4a0e      	ldr	r2, [pc, #56]	; (80072cc <UART_AdvFeatureConfig+0x164>)
 8007294:	4013      	ands	r3, r2
 8007296:	0019      	movs	r1, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	605a      	str	r2, [r3, #4]
  }
}
 80072a4:	46c0      	nop			; (mov r8, r8)
 80072a6:	46bd      	mov	sp, r7
 80072a8:	b002      	add	sp, #8
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	fffdffff 	.word	0xfffdffff
 80072b0:	fffeffff 	.word	0xfffeffff
 80072b4:	fffbffff 	.word	0xfffbffff
 80072b8:	ffff7fff 	.word	0xffff7fff
 80072bc:	ffffefff 	.word	0xffffefff
 80072c0:	ffffdfff 	.word	0xffffdfff
 80072c4:	ffefffff 	.word	0xffefffff
 80072c8:	ff9fffff 	.word	0xff9fffff
 80072cc:	fff7ffff 	.word	0xfff7ffff

080072d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2280      	movs	r2, #128	; 0x80
 80072dc:	2100      	movs	r1, #0
 80072de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072e0:	f7fd fce4 	bl	8004cac <HAL_GetTick>
 80072e4:	0003      	movs	r3, r0
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2208      	movs	r2, #8
 80072f0:	4013      	ands	r3, r2
 80072f2:	2b08      	cmp	r3, #8
 80072f4:	d10c      	bne.n	8007310 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2280      	movs	r2, #128	; 0x80
 80072fa:	0391      	lsls	r1, r2, #14
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	4a17      	ldr	r2, [pc, #92]	; (800735c <UART_CheckIdleState+0x8c>)
 8007300:	9200      	str	r2, [sp, #0]
 8007302:	2200      	movs	r2, #0
 8007304:	f000 f82c 	bl	8007360 <UART_WaitOnFlagUntilTimeout>
 8007308:	1e03      	subs	r3, r0, #0
 800730a:	d001      	beq.n	8007310 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e021      	b.n	8007354 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2204      	movs	r2, #4
 8007318:	4013      	ands	r3, r2
 800731a:	2b04      	cmp	r3, #4
 800731c:	d10c      	bne.n	8007338 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2280      	movs	r2, #128	; 0x80
 8007322:	03d1      	lsls	r1, r2, #15
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	4a0d      	ldr	r2, [pc, #52]	; (800735c <UART_CheckIdleState+0x8c>)
 8007328:	9200      	str	r2, [sp, #0]
 800732a:	2200      	movs	r2, #0
 800732c:	f000 f818 	bl	8007360 <UART_WaitOnFlagUntilTimeout>
 8007330:	1e03      	subs	r3, r0, #0
 8007332:	d001      	beq.n	8007338 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e00d      	b.n	8007354 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2220      	movs	r2, #32
 800733c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2220      	movs	r2, #32
 8007342:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2274      	movs	r2, #116	; 0x74
 800734e:	2100      	movs	r1, #0
 8007350:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	0018      	movs	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	b004      	add	sp, #16
 800735a:	bd80      	pop	{r7, pc}
 800735c:	01ffffff 	.word	0x01ffffff

08007360 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	603b      	str	r3, [r7, #0]
 800736c:	1dfb      	adds	r3, r7, #7
 800736e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007370:	e05e      	b.n	8007430 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	3301      	adds	r3, #1
 8007376:	d05b      	beq.n	8007430 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007378:	f7fd fc98 	bl	8004cac <HAL_GetTick>
 800737c:	0002      	movs	r2, r0
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	429a      	cmp	r2, r3
 8007386:	d302      	bcc.n	800738e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d11b      	bne.n	80073c6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	492f      	ldr	r1, [pc, #188]	; (8007458 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800739a:	400a      	ands	r2, r1
 800739c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2101      	movs	r1, #1
 80073aa:	438a      	bics	r2, r1
 80073ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2220      	movs	r2, #32
 80073b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2220      	movs	r2, #32
 80073b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2274      	movs	r2, #116	; 0x74
 80073be:	2100      	movs	r1, #0
 80073c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e044      	b.n	8007450 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2204      	movs	r2, #4
 80073ce:	4013      	ands	r3, r2
 80073d0:	d02e      	beq.n	8007430 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69da      	ldr	r2, [r3, #28]
 80073d8:	2380      	movs	r3, #128	; 0x80
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	401a      	ands	r2, r3
 80073de:	2380      	movs	r3, #128	; 0x80
 80073e0:	011b      	lsls	r3, r3, #4
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d124      	bne.n	8007430 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2280      	movs	r2, #128	; 0x80
 80073ec:	0112      	lsls	r2, r2, #4
 80073ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4917      	ldr	r1, [pc, #92]	; (8007458 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80073fc:	400a      	ands	r2, r1
 80073fe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2101      	movs	r1, #1
 800740c:	438a      	bics	r2, r1
 800740e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2220      	movs	r2, #32
 8007414:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2220      	movs	r2, #32
 800741a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2280      	movs	r2, #128	; 0x80
 8007420:	2120      	movs	r1, #32
 8007422:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2274      	movs	r2, #116	; 0x74
 8007428:	2100      	movs	r1, #0
 800742a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e00f      	b.n	8007450 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	4013      	ands	r3, r2
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	425a      	negs	r2, r3
 8007440:	4153      	adcs	r3, r2
 8007442:	b2db      	uxtb	r3, r3
 8007444:	001a      	movs	r2, r3
 8007446:	1dfb      	adds	r3, r7, #7
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	429a      	cmp	r2, r3
 800744c:	d091      	beq.n	8007372 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	0018      	movs	r0, r3
 8007452:	46bd      	mov	sp, r7
 8007454:	b004      	add	sp, #16
 8007456:	bd80      	pop	{r7, pc}
 8007458:	fffffe5f 	.word	0xfffffe5f

0800745c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e05b      	b.n	800752c <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007478:	2b00      	cmp	r3, #0
 800747a:	d107      	bne.n	800748c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2274      	movs	r2, #116	; 0x74
 8007480:	2100      	movs	r1, #0
 8007482:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	0018      	movs	r0, r3
 8007488:	f7fc ff98 	bl	80043bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2224      	movs	r2, #36	; 0x24
 8007490:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2101      	movs	r1, #1
 800749e:	438a      	bics	r2, r1
 80074a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	0018      	movs	r0, r3
 80074a6:	f7ff fd07 	bl	8006eb8 <UART_SetConfig>
 80074aa:	0003      	movs	r3, r0
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d101      	bne.n	80074b4 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e03b      	b.n	800752c <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	0018      	movs	r0, r3
 80074c0:	f7ff fe52 	bl	8007168 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689a      	ldr	r2, [r3, #8]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2180      	movs	r1, #128	; 0x80
 80074d0:	01c9      	lsls	r1, r1, #7
 80074d2:	430a      	orrs	r2, r1
 80074d4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	4a15      	ldr	r2, [pc, #84]	; (8007534 <HAL_RS485Ex_Init+0xd8>)
 80074de:	4013      	ands	r3, r2
 80074e0:	0019      	movs	r1, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	055b      	lsls	r3, r3, #21
 80074f0:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	041b      	lsls	r3, r3, #16
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a0d      	ldr	r2, [pc, #52]	; (8007538 <HAL_RS485Ex_Init+0xdc>)
 8007504:	4013      	ands	r3, r2
 8007506:	0019      	movs	r1, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	430a      	orrs	r2, r1
 8007510:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2101      	movs	r1, #1
 800751e:	430a      	orrs	r2, r1
 8007520:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	0018      	movs	r0, r3
 8007526:	f7ff fed3 	bl	80072d0 <UART_CheckIdleState>
 800752a:	0003      	movs	r3, r0
}
 800752c:	0018      	movs	r0, r3
 800752e:	46bd      	mov	sp, r7
 8007530:	b006      	add	sp, #24
 8007532:	bd80      	pop	{r7, pc}
 8007534:	ffff7fff 	.word	0xffff7fff
 8007538:	fc00ffff 	.word	0xfc00ffff

0800753c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007542:	f3ef 8305 	mrs	r3, IPSR
 8007546:	60bb      	str	r3, [r7, #8]
  return(result);
 8007548:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800754a:	2b00      	cmp	r3, #0
 800754c:	d109      	bne.n	8007562 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800754e:	f3ef 8310 	mrs	r3, PRIMASK
 8007552:	607b      	str	r3, [r7, #4]
  return(result);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d007      	beq.n	800756a <osKernelInitialize+0x2e>
 800755a:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <osKernelInitialize+0x54>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b02      	cmp	r3, #2
 8007560:	d103      	bne.n	800756a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8007562:	2306      	movs	r3, #6
 8007564:	425b      	negs	r3, r3
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	e00c      	b.n	8007584 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800756a:	4b09      	ldr	r3, [pc, #36]	; (8007590 <osKernelInitialize+0x54>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d105      	bne.n	800757e <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007572:	4b07      	ldr	r3, [pc, #28]	; (8007590 <osKernelInitialize+0x54>)
 8007574:	2201      	movs	r2, #1
 8007576:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007578:	2300      	movs	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	e002      	b.n	8007584 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 800757e:	2301      	movs	r3, #1
 8007580:	425b      	negs	r3, r3
 8007582:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007584:	68fb      	ldr	r3, [r7, #12]
}
 8007586:	0018      	movs	r0, r3
 8007588:	46bd      	mov	sp, r7
 800758a:	b004      	add	sp, #16
 800758c:	bd80      	pop	{r7, pc}
 800758e:	46c0      	nop			; (mov r8, r8)
 8007590:	20000a98 	.word	0x20000a98

08007594 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800759a:	f3ef 8305 	mrs	r3, IPSR
 800759e:	60bb      	str	r3, [r7, #8]
  return(result);
 80075a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075a6:	f3ef 8310 	mrs	r3, PRIMASK
 80075aa:	607b      	str	r3, [r7, #4]
  return(result);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d007      	beq.n	80075c2 <osKernelStart+0x2e>
 80075b2:	4b0e      	ldr	r3, [pc, #56]	; (80075ec <osKernelStart+0x58>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d103      	bne.n	80075c2 <osKernelStart+0x2e>
    stat = osErrorISR;
 80075ba:	2306      	movs	r3, #6
 80075bc:	425b      	negs	r3, r3
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	e00e      	b.n	80075e0 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 80075c2:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <osKernelStart+0x58>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d107      	bne.n	80075da <osKernelStart+0x46>
      KernelState = osKernelRunning;
 80075ca:	4b08      	ldr	r3, [pc, #32]	; (80075ec <osKernelStart+0x58>)
 80075cc:	2202      	movs	r2, #2
 80075ce:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80075d0:	f000 ff7e 	bl	80084d0 <vTaskStartScheduler>
      stat = osOK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	e002      	b.n	80075e0 <osKernelStart+0x4c>
    } else {
      stat = osError;
 80075da:	2301      	movs	r3, #1
 80075dc:	425b      	negs	r3, r3
 80075de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80075e0:	68fb      	ldr	r3, [r7, #12]
}
 80075e2:	0018      	movs	r0, r3
 80075e4:	46bd      	mov	sp, r7
 80075e6:	b004      	add	sp, #16
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	46c0      	nop			; (mov r8, r8)
 80075ec:	20000a98 	.word	0x20000a98

080075f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075f0:	b5b0      	push	{r4, r5, r7, lr}
 80075f2:	b090      	sub	sp, #64	; 0x40
 80075f4:	af04      	add	r7, sp, #16
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075fc:	2300      	movs	r3, #0
 80075fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007600:	f3ef 8305 	mrs	r3, IPSR
 8007604:	61fb      	str	r3, [r7, #28]
  return(result);
 8007606:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007608:	2b00      	cmp	r3, #0
 800760a:	d000      	beq.n	800760e <osThreadNew+0x1e>
 800760c:	e090      	b.n	8007730 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800760e:	f3ef 8310 	mrs	r3, PRIMASK
 8007612:	61bb      	str	r3, [r7, #24]
  return(result);
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d004      	beq.n	8007624 <osThreadNew+0x34>
 800761a:	4b48      	ldr	r3, [pc, #288]	; (800773c <osThreadNew+0x14c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b02      	cmp	r3, #2
 8007620:	d100      	bne.n	8007624 <osThreadNew+0x34>
 8007622:	e085      	b.n	8007730 <osThreadNew+0x140>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d100      	bne.n	800762c <osThreadNew+0x3c>
 800762a:	e081      	b.n	8007730 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 800762c:	2380      	movs	r3, #128	; 0x80
 800762e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007630:	2318      	movs	r3, #24
 8007632:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8007634:	2117      	movs	r1, #23
 8007636:	187b      	adds	r3, r7, r1
 8007638:	2200      	movs	r2, #0
 800763a:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 800763c:	187b      	adds	r3, r7, r1
 800763e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8007640:	2301      	movs	r3, #1
 8007642:	425b      	negs	r3, r3
 8007644:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d044      	beq.n	80076d6 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <osThreadNew+0x6a>
        name = attr->name;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	d007      	beq.n	800767e <osThreadNew+0x8e>
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	2b38      	cmp	r3, #56	; 0x38
 8007672:	d804      	bhi.n	800767e <osThreadNew+0x8e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	4013      	ands	r3, r2
 800767c:	d001      	beq.n	8007682 <osThreadNew+0x92>
        return (NULL);
 800767e:	2300      	movs	r3, #0
 8007680:	e057      	b.n	8007732 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	089b      	lsrs	r3, r3, #2
 8007690:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00e      	beq.n	80076b8 <osThreadNew+0xc8>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	2b5b      	cmp	r3, #91	; 0x5b
 80076a0:	d90a      	bls.n	80076b8 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d006      	beq.n	80076b8 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <osThreadNew+0xc8>
        mem = 1;
 80076b2:	2301      	movs	r3, #1
 80076b4:	623b      	str	r3, [r7, #32]
 80076b6:	e010      	b.n	80076da <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10c      	bne.n	80076da <osThreadNew+0xea>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d108      	bne.n	80076da <osThreadNew+0xea>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d104      	bne.n	80076da <osThreadNew+0xea>
          mem = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	623b      	str	r3, [r7, #32]
 80076d4:	e001      	b.n	80076da <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d112      	bne.n	8007706 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076e8:	68bd      	ldr	r5, [r7, #8]
 80076ea:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80076ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	9302      	str	r3, [sp, #8]
 80076f2:	9201      	str	r2, [sp, #4]
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	002b      	movs	r3, r5
 80076fa:	0022      	movs	r2, r4
 80076fc:	f000 fd49 	bl	8008192 <xTaskCreateStatic>
 8007700:	0003      	movs	r3, r0
 8007702:	613b      	str	r3, [r7, #16]
 8007704:	e014      	b.n	8007730 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d111      	bne.n	8007730 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770e:	b29a      	uxth	r2, r3
 8007710:	68bc      	ldr	r4, [r7, #8]
 8007712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	2310      	movs	r3, #16
 8007718:	18fb      	adds	r3, r7, r3
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	0023      	movs	r3, r4
 8007722:	f000 fd79 	bl	8008218 <xTaskCreate>
 8007726:	0003      	movs	r3, r0
 8007728:	2b01      	cmp	r3, #1
 800772a:	d001      	beq.n	8007730 <osThreadNew+0x140>
          hTask = NULL;
 800772c:	2300      	movs	r3, #0
 800772e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007730:	693b      	ldr	r3, [r7, #16]
}
 8007732:	0018      	movs	r0, r3
 8007734:	46bd      	mov	sp, r7
 8007736:	b00c      	add	sp, #48	; 0x30
 8007738:	bdb0      	pop	{r4, r5, r7, pc}
 800773a:	46c0      	nop			; (mov r8, r8)
 800773c:	20000a98 	.word	0x20000a98

08007740 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007748:	f3ef 8305 	mrs	r3, IPSR
 800774c:	613b      	str	r3, [r7, #16]
  return(result);
 800774e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007750:	2b00      	cmp	r3, #0
 8007752:	d109      	bne.n	8007768 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007754:	f3ef 8310 	mrs	r3, PRIMASK
 8007758:	60fb      	str	r3, [r7, #12]
  return(result);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d007      	beq.n	8007770 <osDelay+0x30>
 8007760:	4b0a      	ldr	r3, [pc, #40]	; (800778c <osDelay+0x4c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b02      	cmp	r3, #2
 8007766:	d103      	bne.n	8007770 <osDelay+0x30>
    stat = osErrorISR;
 8007768:	2306      	movs	r3, #6
 800776a:	425b      	negs	r3, r3
 800776c:	617b      	str	r3, [r7, #20]
 800776e:	e008      	b.n	8007782 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8007770:	2300      	movs	r3, #0
 8007772:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <osDelay+0x42>
      vTaskDelay(ticks);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	0018      	movs	r0, r3
 800777e:	f000 fe81 	bl	8008484 <vTaskDelay>
    }
  }

  return (stat);
 8007782:	697b      	ldr	r3, [r7, #20]
}
 8007784:	0018      	movs	r0, r3
 8007786:	46bd      	mov	sp, r7
 8007788:	b006      	add	sp, #24
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20000a98 	.word	0x20000a98

08007790 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4a06      	ldr	r2, [pc, #24]	; (80077b8 <vApplicationGetIdleTaskMemory+0x28>)
 80077a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	4a05      	ldr	r2, [pc, #20]	; (80077bc <vApplicationGetIdleTaskMemory+0x2c>)
 80077a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2280      	movs	r2, #128	; 0x80
 80077ac:	601a      	str	r2, [r3, #0]
}
 80077ae:	46c0      	nop			; (mov r8, r8)
 80077b0:	46bd      	mov	sp, r7
 80077b2:	b004      	add	sp, #16
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	46c0      	nop			; (mov r8, r8)
 80077b8:	20000a9c 	.word	0x20000a9c
 80077bc:	20000af8 	.word	0x20000af8

080077c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4a06      	ldr	r2, [pc, #24]	; (80077e8 <vApplicationGetTimerTaskMemory+0x28>)
 80077d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	4a05      	ldr	r2, [pc, #20]	; (80077ec <vApplicationGetTimerTaskMemory+0x2c>)
 80077d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2280      	movs	r2, #128	; 0x80
 80077dc:	0052      	lsls	r2, r2, #1
 80077de:	601a      	str	r2, [r3, #0]
}
 80077e0:	46c0      	nop			; (mov r8, r8)
 80077e2:	46bd      	mov	sp, r7
 80077e4:	b004      	add	sp, #16
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20000cf8 	.word	0x20000cf8
 80077ec:	20000d54 	.word	0x20000d54

080077f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3308      	adds	r3, #8
 80077fc:	001a      	movs	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	4252      	negs	r2, r2
 8007808:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3308      	adds	r3, #8
 800780e:	001a      	movs	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3308      	adds	r3, #8
 8007818:	001a      	movs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007824:	46c0      	nop			; (mov r8, r8)
 8007826:	46bd      	mov	sp, r7
 8007828:	b002      	add	sp, #8
 800782a:	bd80      	pop	{r7, pc}

0800782c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800783a:	46c0      	nop			; (mov r8, r8)
 800783c:	46bd      	mov	sp, r7
 800783e:	b002      	add	sp, #8
 8007840:	bd80      	pop	{r7, pc}

08007842 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	601a      	str	r2, [r3, #0]
}
 800787e:	46c0      	nop			; (mov r8, r8)
 8007880:	46bd      	mov	sp, r7
 8007882:	b004      	add	sp, #16
 8007884:	bd80      	pop	{r7, pc}

08007886 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	3301      	adds	r3, #1
 800789a:	d103      	bne.n	80078a4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	e00c      	b.n	80078be <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3308      	adds	r3, #8
 80078a8:	60fb      	str	r3, [r7, #12]
 80078aa:	e002      	b.n	80078b2 <vListInsert+0x2c>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	60fb      	str	r3, [r7, #12]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d2f6      	bcs.n	80078ac <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	1c5a      	adds	r2, r3, #1
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	601a      	str	r2, [r3, #0]
}
 80078ea:	46c0      	nop			; (mov r8, r8)
 80078ec:	46bd      	mov	sp, r7
 80078ee:	b004      	add	sp, #16
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6892      	ldr	r2, [r2, #8]
 8007908:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	6852      	ldr	r2, [r2, #4]
 8007912:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	429a      	cmp	r2, r3
 800791c:	d103      	bne.n	8007926 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	1e5a      	subs	r2, r3, #1
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
}
 800793a:	0018      	movs	r0, r3
 800793c:	46bd      	mov	sp, r7
 800793e:	b004      	add	sp, #16
 8007940:	bd80      	pop	{r7, pc}

08007942 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <xQueueGenericReset+0x18>
 8007956:	b672      	cpsid	i
 8007958:	e7fe      	b.n	8007958 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800795a:	f001 fdc9 	bl	80094f0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796a:	434b      	muls	r3, r1
 800796c:	18d2      	adds	r2, r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007988:	1e59      	subs	r1, r3, #1
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	434b      	muls	r3, r1
 8007990:	18d2      	adds	r2, r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2244      	movs	r2, #68	; 0x44
 800799a:	21ff      	movs	r1, #255	; 0xff
 800799c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2245      	movs	r2, #69	; 0x45
 80079a2:	21ff      	movs	r1, #255	; 0xff
 80079a4:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10d      	bne.n	80079c8 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d013      	beq.n	80079dc <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3310      	adds	r3, #16
 80079b8:	0018      	movs	r0, r3
 80079ba:	f000 ffcd 	bl	8008958 <xTaskRemoveFromEventList>
 80079be:	1e03      	subs	r3, r0, #0
 80079c0:	d00c      	beq.n	80079dc <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079c2:	f001 fd85 	bl	80094d0 <vPortYield>
 80079c6:	e009      	b.n	80079dc <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3310      	adds	r3, #16
 80079cc:	0018      	movs	r0, r3
 80079ce:	f7ff ff0f 	bl	80077f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3324      	adds	r3, #36	; 0x24
 80079d6:	0018      	movs	r0, r3
 80079d8:	f7ff ff0a 	bl	80077f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079dc:	f001 fd9a 	bl	8009514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079e0:	2301      	movs	r3, #1
}
 80079e2:	0018      	movs	r0, r3
 80079e4:	46bd      	mov	sp, r7
 80079e6:	b004      	add	sp, #16
 80079e8:	bd80      	pop	{r7, pc}

080079ea <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079ea:	b590      	push	{r4, r7, lr}
 80079ec:	b089      	sub	sp, #36	; 0x24
 80079ee:	af02      	add	r7, sp, #8
 80079f0:	60f8      	str	r0, [r7, #12]
 80079f2:	60b9      	str	r1, [r7, #8]
 80079f4:	607a      	str	r2, [r7, #4]
 80079f6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <xQueueGenericCreateStatic+0x18>
 80079fe:	b672      	cpsid	i
 8007a00:	e7fe      	b.n	8007a00 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <xQueueGenericCreateStatic+0x22>
 8007a08:	b672      	cpsid	i
 8007a0a:	e7fe      	b.n	8007a0a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <xQueueGenericCreateStatic+0x2e>
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <xQueueGenericCreateStatic+0x32>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e000      	b.n	8007a1e <xQueueGenericCreateStatic+0x34>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <xQueueGenericCreateStatic+0x3c>
 8007a22:	b672      	cpsid	i
 8007a24:	e7fe      	b.n	8007a24 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d102      	bne.n	8007a32 <xQueueGenericCreateStatic+0x48>
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <xQueueGenericCreateStatic+0x4c>
 8007a32:	2301      	movs	r3, #1
 8007a34:	e000      	b.n	8007a38 <xQueueGenericCreateStatic+0x4e>
 8007a36:	2300      	movs	r3, #0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <xQueueGenericCreateStatic+0x56>
 8007a3c:	b672      	cpsid	i
 8007a3e:	e7fe      	b.n	8007a3e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a40:	2350      	movs	r3, #80	; 0x50
 8007a42:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	2b50      	cmp	r3, #80	; 0x50
 8007a48:	d001      	beq.n	8007a4e <xQueueGenericCreateStatic+0x64>
 8007a4a:	b672      	cpsid	i
 8007a4c:	e7fe      	b.n	8007a4c <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00e      	beq.n	8007a76 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2246      	movs	r2, #70	; 0x46
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a60:	2328      	movs	r3, #40	; 0x28
 8007a62:	18fb      	adds	r3, r7, r3
 8007a64:	781c      	ldrb	r4, [r3, #0]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	0023      	movs	r3, r4
 8007a72:	f000 f805 	bl	8007a80 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007a76:	697b      	ldr	r3, [r7, #20]
	}
 8007a78:	0018      	movs	r0, r3
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	b007      	add	sp, #28
 8007a7e:	bd90      	pop	{r4, r7, pc}

08007a80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	001a      	movs	r2, r3
 8007a8e:	1cfb      	adds	r3, r7, #3
 8007a90:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d103      	bne.n	8007aa0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	e002      	b.n	8007aa6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	f7ff ff43 	bl	8007942 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	1cfa      	adds	r2, r7, #3
 8007ac0:	214c      	movs	r1, #76	; 0x4c
 8007ac2:	7812      	ldrb	r2, [r2, #0]
 8007ac4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ac6:	46c0      	nop			; (mov r8, r8)
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	b004      	add	sp, #16
 8007acc:	bd80      	pop	{r7, pc}

08007ace <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b08a      	sub	sp, #40	; 0x28
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	60b9      	str	r1, [r7, #8]
 8007ad8:	607a      	str	r2, [r7, #4]
 8007ada:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007adc:	2300      	movs	r3, #0
 8007ade:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <xQueueGenericSend+0x20>
 8007aea:	b672      	cpsid	i
 8007aec:	e7fe      	b.n	8007aec <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d103      	bne.n	8007afc <xQueueGenericSend+0x2e>
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <xQueueGenericSend+0x32>
 8007afc:	2301      	movs	r3, #1
 8007afe:	e000      	b.n	8007b02 <xQueueGenericSend+0x34>
 8007b00:	2300      	movs	r3, #0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <xQueueGenericSend+0x3c>
 8007b06:	b672      	cpsid	i
 8007b08:	e7fe      	b.n	8007b08 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d103      	bne.n	8007b18 <xQueueGenericSend+0x4a>
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d101      	bne.n	8007b1c <xQueueGenericSend+0x4e>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e000      	b.n	8007b1e <xQueueGenericSend+0x50>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <xQueueGenericSend+0x58>
 8007b22:	b672      	cpsid	i
 8007b24:	e7fe      	b.n	8007b24 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b26:	f001 f8af 	bl	8008c88 <xTaskGetSchedulerState>
 8007b2a:	1e03      	subs	r3, r0, #0
 8007b2c:	d102      	bne.n	8007b34 <xQueueGenericSend+0x66>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <xQueueGenericSend+0x6a>
 8007b34:	2301      	movs	r3, #1
 8007b36:	e000      	b.n	8007b3a <xQueueGenericSend+0x6c>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <xQueueGenericSend+0x74>
 8007b3e:	b672      	cpsid	i
 8007b40:	e7fe      	b.n	8007b40 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b42:	f001 fcd5 	bl	80094f0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d302      	bcc.n	8007b58 <xQueueGenericSend+0x8a>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d11e      	bne.n	8007b96 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	0018      	movs	r0, r3
 8007b60:	f000 f99f 	bl	8007ea2 <prvCopyDataToQueue>
 8007b64:	0003      	movs	r3, r0
 8007b66:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d009      	beq.n	8007b84 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	3324      	adds	r3, #36	; 0x24
 8007b74:	0018      	movs	r0, r3
 8007b76:	f000 feef 	bl	8008958 <xTaskRemoveFromEventList>
 8007b7a:	1e03      	subs	r3, r0, #0
 8007b7c:	d007      	beq.n	8007b8e <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b7e:	f001 fca7 	bl	80094d0 <vPortYield>
 8007b82:	e004      	b.n	8007b8e <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b8a:	f001 fca1 	bl	80094d0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b8e:	f001 fcc1 	bl	8009514 <vPortExitCritical>
				return pdPASS;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e05b      	b.n	8007c4e <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d103      	bne.n	8007ba4 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b9c:	f001 fcba 	bl	8009514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e054      	b.n	8007c4e <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d106      	bne.n	8007bb8 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007baa:	2314      	movs	r3, #20
 8007bac:	18fb      	adds	r3, r7, r3
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f000 ff2e 	bl	8008a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bb8:	f001 fcac 	bl	8009514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bbc:	f000 fcdc 	bl	8008578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bc0:	f001 fc96 	bl	80094f0 <vPortEnterCritical>
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	2244      	movs	r2, #68	; 0x44
 8007bc8:	5c9b      	ldrb	r3, [r3, r2]
 8007bca:	b25b      	sxtb	r3, r3
 8007bcc:	3301      	adds	r3, #1
 8007bce:	d103      	bne.n	8007bd8 <xQueueGenericSend+0x10a>
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	2244      	movs	r2, #68	; 0x44
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	5499      	strb	r1, [r3, r2]
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	2245      	movs	r2, #69	; 0x45
 8007bdc:	5c9b      	ldrb	r3, [r3, r2]
 8007bde:	b25b      	sxtb	r3, r3
 8007be0:	3301      	adds	r3, #1
 8007be2:	d103      	bne.n	8007bec <xQueueGenericSend+0x11e>
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	2245      	movs	r2, #69	; 0x45
 8007be8:	2100      	movs	r1, #0
 8007bea:	5499      	strb	r1, [r3, r2]
 8007bec:	f001 fc92 	bl	8009514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bf0:	1d3a      	adds	r2, r7, #4
 8007bf2:	2314      	movs	r3, #20
 8007bf4:	18fb      	adds	r3, r7, r3
 8007bf6:	0011      	movs	r1, r2
 8007bf8:	0018      	movs	r0, r3
 8007bfa:	f000 ff1d 	bl	8008a38 <xTaskCheckForTimeOut>
 8007bfe:	1e03      	subs	r3, r0, #0
 8007c00:	d11e      	bne.n	8007c40 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	0018      	movs	r0, r3
 8007c06:	f000 fa51 	bl	80080ac <prvIsQueueFull>
 8007c0a:	1e03      	subs	r3, r0, #0
 8007c0c:	d011      	beq.n	8007c32 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	3310      	adds	r3, #16
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	0011      	movs	r1, r2
 8007c16:	0018      	movs	r0, r3
 8007c18:	f000 fe5a 	bl	80088d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	0018      	movs	r0, r3
 8007c20:	f000 f9d0 	bl	8007fc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c24:	f000 fcb4 	bl	8008590 <xTaskResumeAll>
 8007c28:	1e03      	subs	r3, r0, #0
 8007c2a:	d18a      	bne.n	8007b42 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8007c2c:	f001 fc50 	bl	80094d0 <vPortYield>
 8007c30:	e787      	b.n	8007b42 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	0018      	movs	r0, r3
 8007c36:	f000 f9c5 	bl	8007fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c3a:	f000 fca9 	bl	8008590 <xTaskResumeAll>
 8007c3e:	e780      	b.n	8007b42 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	0018      	movs	r0, r3
 8007c44:	f000 f9be 	bl	8007fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c48:	f000 fca2 	bl	8008590 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c4c:	2300      	movs	r3, #0
		}
	}
}
 8007c4e:	0018      	movs	r0, r3
 8007c50:	46bd      	mov	sp, r7
 8007c52:	b00a      	add	sp, #40	; 0x28
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c56:	b590      	push	{r4, r7, lr}
 8007c58:	b089      	sub	sp, #36	; 0x24
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	60b9      	str	r1, [r7, #8]
 8007c60:	607a      	str	r2, [r7, #4]
 8007c62:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d101      	bne.n	8007c72 <xQueueGenericSendFromISR+0x1c>
 8007c6e:	b672      	cpsid	i
 8007c70:	e7fe      	b.n	8007c70 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d103      	bne.n	8007c80 <xQueueGenericSendFromISR+0x2a>
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <xQueueGenericSendFromISR+0x2e>
 8007c80:	2301      	movs	r3, #1
 8007c82:	e000      	b.n	8007c86 <xQueueGenericSendFromISR+0x30>
 8007c84:	2300      	movs	r3, #0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <xQueueGenericSendFromISR+0x38>
 8007c8a:	b672      	cpsid	i
 8007c8c:	e7fe      	b.n	8007c8c <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d103      	bne.n	8007c9c <xQueueGenericSendFromISR+0x46>
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d101      	bne.n	8007ca0 <xQueueGenericSendFromISR+0x4a>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e000      	b.n	8007ca2 <xQueueGenericSendFromISR+0x4c>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <xQueueGenericSendFromISR+0x54>
 8007ca6:	b672      	cpsid	i
 8007ca8:	e7fe      	b.n	8007ca8 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007caa:	f001 fc4b 	bl	8009544 <ulSetInterruptMaskFromISR>
 8007cae:	0003      	movs	r3, r0
 8007cb0:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d302      	bcc.n	8007cc4 <xQueueGenericSendFromISR+0x6e>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d12e      	bne.n	8007d22 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007cc4:	2413      	movs	r4, #19
 8007cc6:	193b      	adds	r3, r7, r4
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	2145      	movs	r1, #69	; 0x45
 8007ccc:	5c52      	ldrb	r2, [r2, r1]
 8007cce:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	68b9      	ldr	r1, [r7, #8]
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f000 f8e3 	bl	8007ea2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007cdc:	193b      	adds	r3, r7, r4
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	b25b      	sxtb	r3, r3
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	d111      	bne.n	8007d0a <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d016      	beq.n	8007d1c <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	3324      	adds	r3, #36	; 0x24
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	f000 fe30 	bl	8008958 <xTaskRemoveFromEventList>
 8007cf8:	1e03      	subs	r3, r0, #0
 8007cfa:	d00f      	beq.n	8007d1c <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00c      	beq.n	8007d1c <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	e008      	b.n	8007d1c <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d0a:	2313      	movs	r3, #19
 8007d0c:	18fb      	adds	r3, r7, r3
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	3301      	adds	r3, #1
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	b259      	sxtb	r1, r3
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	2245      	movs	r2, #69	; 0x45
 8007d1a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	61fb      	str	r3, [r7, #28]
		{
 8007d20:	e001      	b.n	8007d26 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d22:	2300      	movs	r3, #0
 8007d24:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	0018      	movs	r0, r3
 8007d2a:	f001 fc11 	bl	8009550 <vClearInterruptMaskFromISR>

	return xReturn;
 8007d2e:	69fb      	ldr	r3, [r7, #28]
}
 8007d30:	0018      	movs	r0, r3
 8007d32:	46bd      	mov	sp, r7
 8007d34:	b009      	add	sp, #36	; 0x24
 8007d36:	bd90      	pop	{r4, r7, pc}

08007d38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08a      	sub	sp, #40	; 0x28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d44:	2300      	movs	r3, #0
 8007d46:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <xQueueReceive+0x1e>
 8007d52:	b672      	cpsid	i
 8007d54:	e7fe      	b.n	8007d54 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d103      	bne.n	8007d64 <xQueueReceive+0x2c>
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <xQueueReceive+0x30>
 8007d64:	2301      	movs	r3, #1
 8007d66:	e000      	b.n	8007d6a <xQueueReceive+0x32>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <xQueueReceive+0x3a>
 8007d6e:	b672      	cpsid	i
 8007d70:	e7fe      	b.n	8007d70 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d72:	f000 ff89 	bl	8008c88 <xTaskGetSchedulerState>
 8007d76:	1e03      	subs	r3, r0, #0
 8007d78:	d102      	bne.n	8007d80 <xQueueReceive+0x48>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <xQueueReceive+0x4c>
 8007d80:	2301      	movs	r3, #1
 8007d82:	e000      	b.n	8007d86 <xQueueReceive+0x4e>
 8007d84:	2300      	movs	r3, #0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <xQueueReceive+0x56>
 8007d8a:	b672      	cpsid	i
 8007d8c:	e7fe      	b.n	8007d8c <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d8e:	f001 fbaf 	bl	80094f0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d96:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d01a      	beq.n	8007dd4 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	0011      	movs	r1, r2
 8007da4:	0018      	movs	r0, r3
 8007da6:	f000 f8e7 	bl	8007f78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	1e5a      	subs	r2, r3, #1
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d008      	beq.n	8007dcc <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	3310      	adds	r3, #16
 8007dbe:	0018      	movs	r0, r3
 8007dc0:	f000 fdca 	bl	8008958 <xTaskRemoveFromEventList>
 8007dc4:	1e03      	subs	r3, r0, #0
 8007dc6:	d001      	beq.n	8007dcc <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007dc8:	f001 fb82 	bl	80094d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007dcc:	f001 fba2 	bl	8009514 <vPortExitCritical>
				return pdPASS;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e062      	b.n	8007e9a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d103      	bne.n	8007de2 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dda:	f001 fb9b 	bl	8009514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007dde:	2300      	movs	r3, #0
 8007de0:	e05b      	b.n	8007e9a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d106      	bne.n	8007df6 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007de8:	2314      	movs	r3, #20
 8007dea:	18fb      	adds	r3, r7, r3
 8007dec:	0018      	movs	r0, r3
 8007dee:	f000 fe0f 	bl	8008a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007df2:	2301      	movs	r3, #1
 8007df4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007df6:	f001 fb8d 	bl	8009514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007dfa:	f000 fbbd 	bl	8008578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dfe:	f001 fb77 	bl	80094f0 <vPortEnterCritical>
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	2244      	movs	r2, #68	; 0x44
 8007e06:	5c9b      	ldrb	r3, [r3, r2]
 8007e08:	b25b      	sxtb	r3, r3
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	d103      	bne.n	8007e16 <xQueueReceive+0xde>
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	2244      	movs	r2, #68	; 0x44
 8007e12:	2100      	movs	r1, #0
 8007e14:	5499      	strb	r1, [r3, r2]
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	2245      	movs	r2, #69	; 0x45
 8007e1a:	5c9b      	ldrb	r3, [r3, r2]
 8007e1c:	b25b      	sxtb	r3, r3
 8007e1e:	3301      	adds	r3, #1
 8007e20:	d103      	bne.n	8007e2a <xQueueReceive+0xf2>
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	2245      	movs	r2, #69	; 0x45
 8007e26:	2100      	movs	r1, #0
 8007e28:	5499      	strb	r1, [r3, r2]
 8007e2a:	f001 fb73 	bl	8009514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e2e:	1d3a      	adds	r2, r7, #4
 8007e30:	2314      	movs	r3, #20
 8007e32:	18fb      	adds	r3, r7, r3
 8007e34:	0011      	movs	r1, r2
 8007e36:	0018      	movs	r0, r3
 8007e38:	f000 fdfe 	bl	8008a38 <xTaskCheckForTimeOut>
 8007e3c:	1e03      	subs	r3, r0, #0
 8007e3e:	d11e      	bne.n	8007e7e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	0018      	movs	r0, r3
 8007e44:	f000 f91c 	bl	8008080 <prvIsQueueEmpty>
 8007e48:	1e03      	subs	r3, r0, #0
 8007e4a:	d011      	beq.n	8007e70 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	3324      	adds	r3, #36	; 0x24
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	0011      	movs	r1, r2
 8007e54:	0018      	movs	r0, r3
 8007e56:	f000 fd3b 	bl	80088d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	0018      	movs	r0, r3
 8007e5e:	f000 f8b1 	bl	8007fc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e62:	f000 fb95 	bl	8008590 <xTaskResumeAll>
 8007e66:	1e03      	subs	r3, r0, #0
 8007e68:	d191      	bne.n	8007d8e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8007e6a:	f001 fb31 	bl	80094d0 <vPortYield>
 8007e6e:	e78e      	b.n	8007d8e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	0018      	movs	r0, r3
 8007e74:	f000 f8a6 	bl	8007fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e78:	f000 fb8a 	bl	8008590 <xTaskResumeAll>
 8007e7c:	e787      	b.n	8007d8e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	0018      	movs	r0, r3
 8007e82:	f000 f89f 	bl	8007fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e86:	f000 fb83 	bl	8008590 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	0018      	movs	r0, r3
 8007e8e:	f000 f8f7 	bl	8008080 <prvIsQueueEmpty>
 8007e92:	1e03      	subs	r3, r0, #0
 8007e94:	d100      	bne.n	8007e98 <xQueueReceive+0x160>
 8007e96:	e77a      	b.n	8007d8e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	b00a      	add	sp, #40	; 0x28
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b086      	sub	sp, #24
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10e      	bne.n	8007ede <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d14e      	bne.n	8007f66 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	0018      	movs	r0, r3
 8007ece:	f000 fef7 	bl	8008cc0 <xTaskPriorityDisinherit>
 8007ed2:	0003      	movs	r3, r0
 8007ed4:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	605a      	str	r2, [r3, #4]
 8007edc:	e043      	b.n	8007f66 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d119      	bne.n	8007f18 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6898      	ldr	r0, [r3, #8]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	0019      	movs	r1, r3
 8007ef0:	f001 ff43 	bl	8009d7a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efc:	18d2      	adds	r2, r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	689a      	ldr	r2, [r3, #8]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d32b      	bcc.n	8007f66 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	609a      	str	r2, [r3, #8]
 8007f16:	e026      	b.n	8007f66 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	68d8      	ldr	r0, [r3, #12]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	0019      	movs	r1, r3
 8007f24:	f001 ff29 	bl	8009d7a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f30:	425b      	negs	r3, r3
 8007f32:	18d2      	adds	r2, r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d207      	bcs.n	8007f54 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4c:	425b      	negs	r3, r3
 8007f4e:	18d2      	adds	r2, r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d105      	bne.n	8007f66 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f6e:	697b      	ldr	r3, [r7, #20]
}
 8007f70:	0018      	movs	r0, r3
 8007f72:	46bd      	mov	sp, r7
 8007f74:	b006      	add	sp, #24
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d018      	beq.n	8007fbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68da      	ldr	r2, [r3, #12]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f92:	18d2      	adds	r2, r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68da      	ldr	r2, [r3, #12]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d303      	bcc.n	8007fac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68d9      	ldr	r1, [r3, #12]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	0018      	movs	r0, r3
 8007fb8:	f001 fedf 	bl	8009d7a <memcpy>
	}
}
 8007fbc:	46c0      	nop			; (mov r8, r8)
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	b002      	add	sp, #8
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007fcc:	f001 fa90 	bl	80094f0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007fd0:	230f      	movs	r3, #15
 8007fd2:	18fb      	adds	r3, r7, r3
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	2145      	movs	r1, #69	; 0x45
 8007fd8:	5c52      	ldrb	r2, [r2, r1]
 8007fda:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fdc:	e013      	b.n	8008006 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d016      	beq.n	8008014 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	3324      	adds	r3, #36	; 0x24
 8007fea:	0018      	movs	r0, r3
 8007fec:	f000 fcb4 	bl	8008958 <xTaskRemoveFromEventList>
 8007ff0:	1e03      	subs	r3, r0, #0
 8007ff2:	d001      	beq.n	8007ff8 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ff4:	f000 fd70 	bl	8008ad8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ff8:	210f      	movs	r1, #15
 8007ffa:	187b      	adds	r3, r7, r1
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	b2da      	uxtb	r2, r3
 8008002:	187b      	adds	r3, r7, r1
 8008004:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008006:	230f      	movs	r3, #15
 8008008:	18fb      	adds	r3, r7, r3
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	b25b      	sxtb	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	dce5      	bgt.n	8007fde <prvUnlockQueue+0x1a>
 8008012:	e000      	b.n	8008016 <prvUnlockQueue+0x52>
					break;
 8008014:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2245      	movs	r2, #69	; 0x45
 800801a:	21ff      	movs	r1, #255	; 0xff
 800801c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800801e:	f001 fa79 	bl	8009514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008022:	f001 fa65 	bl	80094f0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008026:	230e      	movs	r3, #14
 8008028:	18fb      	adds	r3, r7, r3
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	2144      	movs	r1, #68	; 0x44
 800802e:	5c52      	ldrb	r2, [r2, r1]
 8008030:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008032:	e013      	b.n	800805c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d016      	beq.n	800806a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3310      	adds	r3, #16
 8008040:	0018      	movs	r0, r3
 8008042:	f000 fc89 	bl	8008958 <xTaskRemoveFromEventList>
 8008046:	1e03      	subs	r3, r0, #0
 8008048:	d001      	beq.n	800804e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800804a:	f000 fd45 	bl	8008ad8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800804e:	210e      	movs	r1, #14
 8008050:	187b      	adds	r3, r7, r1
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	3b01      	subs	r3, #1
 8008056:	b2da      	uxtb	r2, r3
 8008058:	187b      	adds	r3, r7, r1
 800805a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800805c:	230e      	movs	r3, #14
 800805e:	18fb      	adds	r3, r7, r3
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	b25b      	sxtb	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	dce5      	bgt.n	8008034 <prvUnlockQueue+0x70>
 8008068:	e000      	b.n	800806c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800806a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2244      	movs	r2, #68	; 0x44
 8008070:	21ff      	movs	r1, #255	; 0xff
 8008072:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008074:	f001 fa4e 	bl	8009514 <vPortExitCritical>
}
 8008078:	46c0      	nop			; (mov r8, r8)
 800807a:	46bd      	mov	sp, r7
 800807c:	b004      	add	sp, #16
 800807e:	bd80      	pop	{r7, pc}

08008080 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008088:	f001 fa32 	bl	80094f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008090:	2b00      	cmp	r3, #0
 8008092:	d102      	bne.n	800809a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008094:	2301      	movs	r3, #1
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	e001      	b.n	800809e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800809e:	f001 fa39 	bl	8009514 <vPortExitCritical>

	return xReturn;
 80080a2:	68fb      	ldr	r3, [r7, #12]
}
 80080a4:	0018      	movs	r0, r3
 80080a6:	46bd      	mov	sp, r7
 80080a8:	b004      	add	sp, #16
 80080aa:	bd80      	pop	{r7, pc}

080080ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080b4:	f001 fa1c 	bl	80094f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d102      	bne.n	80080ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80080c4:	2301      	movs	r3, #1
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	e001      	b.n	80080ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080ce:	f001 fa21 	bl	8009514 <vPortExitCritical>

	return xReturn;
 80080d2:	68fb      	ldr	r3, [r7, #12]
}
 80080d4:	0018      	movs	r0, r3
 80080d6:	46bd      	mov	sp, r7
 80080d8:	b004      	add	sp, #16
 80080da:	bd80      	pop	{r7, pc}

080080dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	e015      	b.n	8008118 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080ec:	4b0e      	ldr	r3, [pc, #56]	; (8008128 <vQueueAddToRegistry+0x4c>)
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	00d2      	lsls	r2, r2, #3
 80080f2:	58d3      	ldr	r3, [r2, r3]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10c      	bne.n	8008112 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80080f8:	4b0b      	ldr	r3, [pc, #44]	; (8008128 <vQueueAddToRegistry+0x4c>)
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	00d2      	lsls	r2, r2, #3
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008102:	4a09      	ldr	r2, [pc, #36]	; (8008128 <vQueueAddToRegistry+0x4c>)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	18d3      	adds	r3, r2, r3
 800810a:	3304      	adds	r3, #4
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008110:	e006      	b.n	8008120 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3301      	adds	r3, #1
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2b07      	cmp	r3, #7
 800811c:	d9e6      	bls.n	80080ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800811e:	46c0      	nop			; (mov r8, r8)
 8008120:	46c0      	nop			; (mov r8, r8)
 8008122:	46bd      	mov	sp, r7
 8008124:	b004      	add	sp, #16
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20001154 	.word	0x20001154

0800812c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800813c:	f001 f9d8 	bl	80094f0 <vPortEnterCritical>
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2244      	movs	r2, #68	; 0x44
 8008144:	5c9b      	ldrb	r3, [r3, r2]
 8008146:	b25b      	sxtb	r3, r3
 8008148:	3301      	adds	r3, #1
 800814a:	d103      	bne.n	8008154 <vQueueWaitForMessageRestricted+0x28>
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	2244      	movs	r2, #68	; 0x44
 8008150:	2100      	movs	r1, #0
 8008152:	5499      	strb	r1, [r3, r2]
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	2245      	movs	r2, #69	; 0x45
 8008158:	5c9b      	ldrb	r3, [r3, r2]
 800815a:	b25b      	sxtb	r3, r3
 800815c:	3301      	adds	r3, #1
 800815e:	d103      	bne.n	8008168 <vQueueWaitForMessageRestricted+0x3c>
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2245      	movs	r2, #69	; 0x45
 8008164:	2100      	movs	r1, #0
 8008166:	5499      	strb	r1, [r3, r2]
 8008168:	f001 f9d4 	bl	8009514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	2b00      	cmp	r3, #0
 8008172:	d106      	bne.n	8008182 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	3324      	adds	r3, #36	; 0x24
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	68b9      	ldr	r1, [r7, #8]
 800817c:	0018      	movs	r0, r3
 800817e:	f000 fbc5 	bl	800890c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	0018      	movs	r0, r3
 8008186:	f7ff ff1d 	bl	8007fc4 <prvUnlockQueue>
	}
 800818a:	46c0      	nop			; (mov r8, r8)
 800818c:	46bd      	mov	sp, r7
 800818e:	b006      	add	sp, #24
 8008190:	bd80      	pop	{r7, pc}

08008192 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008192:	b590      	push	{r4, r7, lr}
 8008194:	b08d      	sub	sp, #52	; 0x34
 8008196:	af04      	add	r7, sp, #16
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	60b9      	str	r1, [r7, #8]
 800819c:	607a      	str	r2, [r7, #4]
 800819e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <xTaskCreateStatic+0x18>
 80081a6:	b672      	cpsid	i
 80081a8:	e7fe      	b.n	80081a8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80081aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <xTaskCreateStatic+0x22>
 80081b0:	b672      	cpsid	i
 80081b2:	e7fe      	b.n	80081b2 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081b4:	235c      	movs	r3, #92	; 0x5c
 80081b6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2b5c      	cmp	r3, #92	; 0x5c
 80081bc:	d001      	beq.n	80081c2 <xTaskCreateStatic+0x30>
 80081be:	b672      	cpsid	i
 80081c0:	e7fe      	b.n	80081c0 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d020      	beq.n	800820a <xTaskCreateStatic+0x78>
 80081c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d01d      	beq.n	800820a <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081d6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	2259      	movs	r2, #89	; 0x59
 80081dc:	2102      	movs	r1, #2
 80081de:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80081e0:	683c      	ldr	r4, [r7, #0]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	68b9      	ldr	r1, [r7, #8]
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	2300      	movs	r3, #0
 80081ea:	9303      	str	r3, [sp, #12]
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	9302      	str	r3, [sp, #8]
 80081f0:	2318      	movs	r3, #24
 80081f2:	18fb      	adds	r3, r7, r3
 80081f4:	9301      	str	r3, [sp, #4]
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	0023      	movs	r3, r4
 80081fc:	f000 f858 	bl	80082b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	0018      	movs	r0, r3
 8008204:	f000 f8d6 	bl	80083b4 <prvAddNewTaskToReadyList>
 8008208:	e001      	b.n	800820e <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800820a:	2300      	movs	r3, #0
 800820c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800820e:	69bb      	ldr	r3, [r7, #24]
	}
 8008210:	0018      	movs	r0, r3
 8008212:	46bd      	mov	sp, r7
 8008214:	b009      	add	sp, #36	; 0x24
 8008216:	bd90      	pop	{r4, r7, pc}

08008218 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008218:	b590      	push	{r4, r7, lr}
 800821a:	b08d      	sub	sp, #52	; 0x34
 800821c:	af04      	add	r7, sp, #16
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	1dbb      	adds	r3, r7, #6
 8008226:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008228:	1dbb      	adds	r3, r7, #6
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	0018      	movs	r0, r3
 8008230:	f001 f9f6 	bl	8009620 <pvPortMalloc>
 8008234:	0003      	movs	r3, r0
 8008236:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d010      	beq.n	8008260 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800823e:	205c      	movs	r0, #92	; 0x5c
 8008240:	f001 f9ee 	bl	8009620 <pvPortMalloc>
 8008244:	0003      	movs	r3, r0
 8008246:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	631a      	str	r2, [r3, #48]	; 0x30
 8008254:	e006      	b.n	8008264 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	0018      	movs	r0, r3
 800825a:	f001 fa87 	bl	800976c <vPortFree>
 800825e:	e001      	b.n	8008264 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008260:	2300      	movs	r3, #0
 8008262:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d01a      	beq.n	80082a0 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	2259      	movs	r2, #89	; 0x59
 800826e:	2100      	movs	r1, #0
 8008270:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008272:	1dbb      	adds	r3, r7, #6
 8008274:	881a      	ldrh	r2, [r3, #0]
 8008276:	683c      	ldr	r4, [r7, #0]
 8008278:	68b9      	ldr	r1, [r7, #8]
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	2300      	movs	r3, #0
 800827e:	9303      	str	r3, [sp, #12]
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	9302      	str	r3, [sp, #8]
 8008284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	0023      	movs	r3, r4
 800828e:	f000 f80f 	bl	80082b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	0018      	movs	r0, r3
 8008296:	f000 f88d 	bl	80083b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800829a:	2301      	movs	r3, #1
 800829c:	61bb      	str	r3, [r7, #24]
 800829e:	e002      	b.n	80082a6 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082a0:	2301      	movs	r3, #1
 80082a2:	425b      	negs	r3, r3
 80082a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082a6:	69bb      	ldr	r3, [r7, #24]
	}
 80082a8:	0018      	movs	r0, r3
 80082aa:	46bd      	mov	sp, r7
 80082ac:	b009      	add	sp, #36	; 0x24
 80082ae:	bd90      	pop	{r4, r7, pc}

080082b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
 80082bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80082be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	001a      	movs	r2, r3
 80082c8:	21a5      	movs	r1, #165	; 0xa5
 80082ca:	f001 fd0f 	bl	8009cec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80082ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4936      	ldr	r1, [pc, #216]	; (80083b0 <prvInitialiseNewTask+0x100>)
 80082d6:	468c      	mov	ip, r1
 80082d8:	4463      	add	r3, ip
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	18d3      	adds	r3, r2, r3
 80082de:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	2207      	movs	r2, #7
 80082e4:	4393      	bics	r3, r2
 80082e6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	2207      	movs	r2, #7
 80082ec:	4013      	ands	r3, r2
 80082ee:	d001      	beq.n	80082f4 <prvInitialiseNewTask+0x44>
 80082f0:	b672      	cpsid	i
 80082f2:	e7fe      	b.n	80082f2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082f4:	2300      	movs	r3, #0
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	e013      	b.n	8008322 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	18d3      	adds	r3, r2, r3
 8008300:	7818      	ldrb	r0, [r3, #0]
 8008302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008304:	2134      	movs	r1, #52	; 0x34
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	18d3      	adds	r3, r2, r3
 800830a:	185b      	adds	r3, r3, r1
 800830c:	1c02      	adds	r2, r0, #0
 800830e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	18d3      	adds	r3, r2, r3
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d006      	beq.n	800832a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	3301      	adds	r3, #1
 8008320:	617b      	str	r3, [r7, #20]
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b0f      	cmp	r3, #15
 8008326:	d9e8      	bls.n	80082fa <prvInitialiseNewTask+0x4a>
 8008328:	e000      	b.n	800832c <prvInitialiseNewTask+0x7c>
		{
			break;
 800832a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	2243      	movs	r2, #67	; 0x43
 8008330:	2100      	movs	r1, #0
 8008332:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	2b37      	cmp	r3, #55	; 0x37
 8008338:	d901      	bls.n	800833e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800833a:	2337      	movs	r3, #55	; 0x37
 800833c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	6a3a      	ldr	r2, [r7, #32]
 8008342:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	6a3a      	ldr	r2, [r7, #32]
 8008348:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	2200      	movs	r2, #0
 800834e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	3304      	adds	r3, #4
 8008354:	0018      	movs	r0, r3
 8008356:	f7ff fa69 	bl	800782c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	3318      	adds	r3, #24
 800835e:	0018      	movs	r0, r3
 8008360:	f7ff fa64 	bl	800782c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008368:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	2238      	movs	r2, #56	; 0x38
 800836e:	1ad2      	subs	r2, r2, r3
 8008370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008372:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008378:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	2200      	movs	r2, #0
 800837e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	2258      	movs	r2, #88	; 0x58
 8008384:	2100      	movs	r1, #0
 8008386:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	68f9      	ldr	r1, [r7, #12]
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	0018      	movs	r0, r3
 8008390:	f001 f816 	bl	80093c0 <pxPortInitialiseStack>
 8008394:	0002      	movs	r2, r0
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083a6:	46c0      	nop			; (mov r8, r8)
 80083a8:	46bd      	mov	sp, r7
 80083aa:	b006      	add	sp, #24
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	46c0      	nop			; (mov r8, r8)
 80083b0:	3fffffff 	.word	0x3fffffff

080083b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80083bc:	f001 f898 	bl	80094f0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80083c0:	4b2a      	ldr	r3, [pc, #168]	; (800846c <prvAddNewTaskToReadyList+0xb8>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	4b29      	ldr	r3, [pc, #164]	; (800846c <prvAddNewTaskToReadyList+0xb8>)
 80083c8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80083ca:	4b29      	ldr	r3, [pc, #164]	; (8008470 <prvAddNewTaskToReadyList+0xbc>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d109      	bne.n	80083e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80083d2:	4b27      	ldr	r3, [pc, #156]	; (8008470 <prvAddNewTaskToReadyList+0xbc>)
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80083d8:	4b24      	ldr	r3, [pc, #144]	; (800846c <prvAddNewTaskToReadyList+0xb8>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d110      	bne.n	8008402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80083e0:	f000 fb94 	bl	8008b0c <prvInitialiseTaskLists>
 80083e4:	e00d      	b.n	8008402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80083e6:	4b23      	ldr	r3, [pc, #140]	; (8008474 <prvAddNewTaskToReadyList+0xc0>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d109      	bne.n	8008402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80083ee:	4b20      	ldr	r3, [pc, #128]	; (8008470 <prvAddNewTaskToReadyList+0xbc>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d802      	bhi.n	8008402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80083fc:	4b1c      	ldr	r3, [pc, #112]	; (8008470 <prvAddNewTaskToReadyList+0xbc>)
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008402:	4b1d      	ldr	r3, [pc, #116]	; (8008478 <prvAddNewTaskToReadyList+0xc4>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	1c5a      	adds	r2, r3, #1
 8008408:	4b1b      	ldr	r3, [pc, #108]	; (8008478 <prvAddNewTaskToReadyList+0xc4>)
 800840a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800840c:	4b1a      	ldr	r3, [pc, #104]	; (8008478 <prvAddNewTaskToReadyList+0xc4>)
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008418:	4b18      	ldr	r3, [pc, #96]	; (800847c <prvAddNewTaskToReadyList+0xc8>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	429a      	cmp	r2, r3
 800841e:	d903      	bls.n	8008428 <prvAddNewTaskToReadyList+0x74>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008424:	4b15      	ldr	r3, [pc, #84]	; (800847c <prvAddNewTaskToReadyList+0xc8>)
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800842c:	0013      	movs	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	189b      	adds	r3, r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4a12      	ldr	r2, [pc, #72]	; (8008480 <prvAddNewTaskToReadyList+0xcc>)
 8008436:	189a      	adds	r2, r3, r2
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3304      	adds	r3, #4
 800843c:	0019      	movs	r1, r3
 800843e:	0010      	movs	r0, r2
 8008440:	f7ff f9ff 	bl	8007842 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008444:	f001 f866 	bl	8009514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008448:	4b0a      	ldr	r3, [pc, #40]	; (8008474 <prvAddNewTaskToReadyList+0xc0>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d008      	beq.n	8008462 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008450:	4b07      	ldr	r3, [pc, #28]	; (8008470 <prvAddNewTaskToReadyList+0xbc>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845a:	429a      	cmp	r2, r3
 800845c:	d201      	bcs.n	8008462 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800845e:	f001 f837 	bl	80094d0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008462:	46c0      	nop			; (mov r8, r8)
 8008464:	46bd      	mov	sp, r7
 8008466:	b002      	add	sp, #8
 8008468:	bd80      	pop	{r7, pc}
 800846a:	46c0      	nop			; (mov r8, r8)
 800846c:	20001668 	.word	0x20001668
 8008470:	20001194 	.word	0x20001194
 8008474:	20001674 	.word	0x20001674
 8008478:	20001684 	.word	0x20001684
 800847c:	20001670 	.word	0x20001670
 8008480:	20001198 	.word	0x20001198

08008484 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800848c:	2300      	movs	r3, #0
 800848e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d010      	beq.n	80084b8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008496:	4b0d      	ldr	r3, [pc, #52]	; (80084cc <vTaskDelay+0x48>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <vTaskDelay+0x1e>
 800849e:	b672      	cpsid	i
 80084a0:	e7fe      	b.n	80084a0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80084a2:	f000 f869 	bl	8008578 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2100      	movs	r1, #0
 80084aa:	0018      	movs	r0, r3
 80084ac:	f000 fc64 	bl	8008d78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80084b0:	f000 f86e 	bl	8008590 <xTaskResumeAll>
 80084b4:	0003      	movs	r3, r0
 80084b6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80084be:	f001 f807 	bl	80094d0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084c2:	46c0      	nop			; (mov r8, r8)
 80084c4:	46bd      	mov	sp, r7
 80084c6:	b004      	add	sp, #16
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	46c0      	nop			; (mov r8, r8)
 80084cc:	20001690 	.word	0x20001690

080084d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084d0:	b590      	push	{r4, r7, lr}
 80084d2:	b089      	sub	sp, #36	; 0x24
 80084d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084d6:	2300      	movs	r3, #0
 80084d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084de:	003a      	movs	r2, r7
 80084e0:	1d39      	adds	r1, r7, #4
 80084e2:	2308      	movs	r3, #8
 80084e4:	18fb      	adds	r3, r7, r3
 80084e6:	0018      	movs	r0, r3
 80084e8:	f7ff f952 	bl	8007790 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084ec:	683c      	ldr	r4, [r7, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	491b      	ldr	r1, [pc, #108]	; (8008560 <vTaskStartScheduler+0x90>)
 80084f4:	481b      	ldr	r0, [pc, #108]	; (8008564 <vTaskStartScheduler+0x94>)
 80084f6:	9202      	str	r2, [sp, #8]
 80084f8:	9301      	str	r3, [sp, #4]
 80084fa:	2300      	movs	r3, #0
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	2300      	movs	r3, #0
 8008500:	0022      	movs	r2, r4
 8008502:	f7ff fe46 	bl	8008192 <xTaskCreateStatic>
 8008506:	0002      	movs	r2, r0
 8008508:	4b17      	ldr	r3, [pc, #92]	; (8008568 <vTaskStartScheduler+0x98>)
 800850a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800850c:	4b16      	ldr	r3, [pc, #88]	; (8008568 <vTaskStartScheduler+0x98>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008514:	2301      	movs	r3, #1
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	e001      	b.n	800851e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800851a:	2300      	movs	r3, #0
 800851c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d103      	bne.n	800852c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8008524:	f000 fc7c 	bl	8008e20 <xTimerCreateTimerTask>
 8008528:	0003      	movs	r3, r0
 800852a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d10d      	bne.n	800854e <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8008532:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008534:	4b0d      	ldr	r3, [pc, #52]	; (800856c <vTaskStartScheduler+0x9c>)
 8008536:	2201      	movs	r2, #1
 8008538:	4252      	negs	r2, r2
 800853a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800853c:	4b0c      	ldr	r3, [pc, #48]	; (8008570 <vTaskStartScheduler+0xa0>)
 800853e:	2201      	movs	r2, #1
 8008540:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008542:	4b0c      	ldr	r3, [pc, #48]	; (8008574 <vTaskStartScheduler+0xa4>)
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008548:	f000 ff9e 	bl	8009488 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800854c:	e004      	b.n	8008558 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3301      	adds	r3, #1
 8008552:	d101      	bne.n	8008558 <vTaskStartScheduler+0x88>
 8008554:	b672      	cpsid	i
 8008556:	e7fe      	b.n	8008556 <vTaskStartScheduler+0x86>
}
 8008558:	46c0      	nop			; (mov r8, r8)
 800855a:	46bd      	mov	sp, r7
 800855c:	b005      	add	sp, #20
 800855e:	bd90      	pop	{r4, r7, pc}
 8008560:	0800acac 	.word	0x0800acac
 8008564:	08008aed 	.word	0x08008aed
 8008568:	2000168c 	.word	0x2000168c
 800856c:	20001688 	.word	0x20001688
 8008570:	20001674 	.word	0x20001674
 8008574:	2000166c 	.word	0x2000166c

08008578 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800857c:	4b03      	ldr	r3, [pc, #12]	; (800858c <vTaskSuspendAll+0x14>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	4b02      	ldr	r3, [pc, #8]	; (800858c <vTaskSuspendAll+0x14>)
 8008584:	601a      	str	r2, [r3, #0]
}
 8008586:	46c0      	nop			; (mov r8, r8)
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	20001690 	.word	0x20001690

08008590 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008596:	2300      	movs	r3, #0
 8008598:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800859a:	2300      	movs	r3, #0
 800859c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800859e:	4b3a      	ldr	r3, [pc, #232]	; (8008688 <xTaskResumeAll+0xf8>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <xTaskResumeAll+0x1a>
 80085a6:	b672      	cpsid	i
 80085a8:	e7fe      	b.n	80085a8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085aa:	f000 ffa1 	bl	80094f0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085ae:	4b36      	ldr	r3, [pc, #216]	; (8008688 <xTaskResumeAll+0xf8>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	1e5a      	subs	r2, r3, #1
 80085b4:	4b34      	ldr	r3, [pc, #208]	; (8008688 <xTaskResumeAll+0xf8>)
 80085b6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085b8:	4b33      	ldr	r3, [pc, #204]	; (8008688 <xTaskResumeAll+0xf8>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d15b      	bne.n	8008678 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085c0:	4b32      	ldr	r3, [pc, #200]	; (800868c <xTaskResumeAll+0xfc>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d057      	beq.n	8008678 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085c8:	e02f      	b.n	800862a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80085ca:	4b31      	ldr	r3, [pc, #196]	; (8008690 <xTaskResumeAll+0x100>)
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3318      	adds	r3, #24
 80085d6:	0018      	movs	r0, r3
 80085d8:	f7ff f98b 	bl	80078f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3304      	adds	r3, #4
 80085e0:	0018      	movs	r0, r3
 80085e2:	f7ff f986 	bl	80078f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ea:	4b2a      	ldr	r3, [pc, #168]	; (8008694 <xTaskResumeAll+0x104>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d903      	bls.n	80085fa <xTaskResumeAll+0x6a>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f6:	4b27      	ldr	r3, [pc, #156]	; (8008694 <xTaskResumeAll+0x104>)
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fe:	0013      	movs	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	189b      	adds	r3, r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4a24      	ldr	r2, [pc, #144]	; (8008698 <xTaskResumeAll+0x108>)
 8008608:	189a      	adds	r2, r3, r2
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3304      	adds	r3, #4
 800860e:	0019      	movs	r1, r3
 8008610:	0010      	movs	r0, r2
 8008612:	f7ff f916 	bl	8007842 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861a:	4b20      	ldr	r3, [pc, #128]	; (800869c <xTaskResumeAll+0x10c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	429a      	cmp	r2, r3
 8008622:	d302      	bcc.n	800862a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8008624:	4b1e      	ldr	r3, [pc, #120]	; (80086a0 <xTaskResumeAll+0x110>)
 8008626:	2201      	movs	r2, #1
 8008628:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800862a:	4b19      	ldr	r3, [pc, #100]	; (8008690 <xTaskResumeAll+0x100>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1cb      	bne.n	80085ca <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008638:	f000 fb02 	bl	8008c40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800863c:	4b19      	ldr	r3, [pc, #100]	; (80086a4 <xTaskResumeAll+0x114>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00f      	beq.n	8008668 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008648:	f000 f83c 	bl	80086c4 <xTaskIncrementTick>
 800864c:	1e03      	subs	r3, r0, #0
 800864e:	d002      	beq.n	8008656 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8008650:	4b13      	ldr	r3, [pc, #76]	; (80086a0 <xTaskResumeAll+0x110>)
 8008652:	2201      	movs	r2, #1
 8008654:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	3b01      	subs	r3, #1
 800865a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1f2      	bne.n	8008648 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8008662:	4b10      	ldr	r3, [pc, #64]	; (80086a4 <xTaskResumeAll+0x114>)
 8008664:	2200      	movs	r2, #0
 8008666:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008668:	4b0d      	ldr	r3, [pc, #52]	; (80086a0 <xTaskResumeAll+0x110>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d003      	beq.n	8008678 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008670:	2301      	movs	r3, #1
 8008672:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008674:	f000 ff2c 	bl	80094d0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008678:	f000 ff4c 	bl	8009514 <vPortExitCritical>

	return xAlreadyYielded;
 800867c:	68bb      	ldr	r3, [r7, #8]
}
 800867e:	0018      	movs	r0, r3
 8008680:	46bd      	mov	sp, r7
 8008682:	b004      	add	sp, #16
 8008684:	bd80      	pop	{r7, pc}
 8008686:	46c0      	nop			; (mov r8, r8)
 8008688:	20001690 	.word	0x20001690
 800868c:	20001668 	.word	0x20001668
 8008690:	20001628 	.word	0x20001628
 8008694:	20001670 	.word	0x20001670
 8008698:	20001198 	.word	0x20001198
 800869c:	20001194 	.word	0x20001194
 80086a0:	2000167c 	.word	0x2000167c
 80086a4:	20001678 	.word	0x20001678

080086a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086ae:	4b04      	ldr	r3, [pc, #16]	; (80086c0 <xTaskGetTickCount+0x18>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086b4:	687b      	ldr	r3, [r7, #4]
}
 80086b6:	0018      	movs	r0, r3
 80086b8:	46bd      	mov	sp, r7
 80086ba:	b002      	add	sp, #8
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	46c0      	nop			; (mov r8, r8)
 80086c0:	2000166c 	.word	0x2000166c

080086c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086ca:	2300      	movs	r3, #0
 80086cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ce:	4b4c      	ldr	r3, [pc, #304]	; (8008800 <xTaskIncrementTick+0x13c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d000      	beq.n	80086d8 <xTaskIncrementTick+0x14>
 80086d6:	e083      	b.n	80087e0 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086d8:	4b4a      	ldr	r3, [pc, #296]	; (8008804 <xTaskIncrementTick+0x140>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	3301      	adds	r3, #1
 80086de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80086e0:	4b48      	ldr	r3, [pc, #288]	; (8008804 <xTaskIncrementTick+0x140>)
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d117      	bne.n	800871c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80086ec:	4b46      	ldr	r3, [pc, #280]	; (8008808 <xTaskIncrementTick+0x144>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d001      	beq.n	80086fa <xTaskIncrementTick+0x36>
 80086f6:	b672      	cpsid	i
 80086f8:	e7fe      	b.n	80086f8 <xTaskIncrementTick+0x34>
 80086fa:	4b43      	ldr	r3, [pc, #268]	; (8008808 <xTaskIncrementTick+0x144>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	4b42      	ldr	r3, [pc, #264]	; (800880c <xTaskIncrementTick+0x148>)
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	4b40      	ldr	r3, [pc, #256]	; (8008808 <xTaskIncrementTick+0x144>)
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	4b40      	ldr	r3, [pc, #256]	; (800880c <xTaskIncrementTick+0x148>)
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	4b40      	ldr	r3, [pc, #256]	; (8008810 <xTaskIncrementTick+0x14c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	4b3e      	ldr	r3, [pc, #248]	; (8008810 <xTaskIncrementTick+0x14c>)
 8008716:	601a      	str	r2, [r3, #0]
 8008718:	f000 fa92 	bl	8008c40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800871c:	4b3d      	ldr	r3, [pc, #244]	; (8008814 <xTaskIncrementTick+0x150>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	429a      	cmp	r2, r3
 8008724:	d34e      	bcc.n	80087c4 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008726:	4b38      	ldr	r3, [pc, #224]	; (8008808 <xTaskIncrementTick+0x144>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <xTaskIncrementTick+0x70>
 8008730:	2301      	movs	r3, #1
 8008732:	e000      	b.n	8008736 <xTaskIncrementTick+0x72>
 8008734:	2300      	movs	r3, #0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d004      	beq.n	8008744 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800873a:	4b36      	ldr	r3, [pc, #216]	; (8008814 <xTaskIncrementTick+0x150>)
 800873c:	2201      	movs	r2, #1
 800873e:	4252      	negs	r2, r2
 8008740:	601a      	str	r2, [r3, #0]
					break;
 8008742:	e03f      	b.n	80087c4 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008744:	4b30      	ldr	r3, [pc, #192]	; (8008808 <xTaskIncrementTick+0x144>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	429a      	cmp	r2, r3
 800875a:	d203      	bcs.n	8008764 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800875c:	4b2d      	ldr	r3, [pc, #180]	; (8008814 <xTaskIncrementTick+0x150>)
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	601a      	str	r2, [r3, #0]
						break;
 8008762:	e02f      	b.n	80087c4 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	3304      	adds	r3, #4
 8008768:	0018      	movs	r0, r3
 800876a:	f7ff f8c2 	bl	80078f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008772:	2b00      	cmp	r3, #0
 8008774:	d004      	beq.n	8008780 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	3318      	adds	r3, #24
 800877a:	0018      	movs	r0, r3
 800877c:	f7ff f8b9 	bl	80078f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008784:	4b24      	ldr	r3, [pc, #144]	; (8008818 <xTaskIncrementTick+0x154>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	429a      	cmp	r2, r3
 800878a:	d903      	bls.n	8008794 <xTaskIncrementTick+0xd0>
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008790:	4b21      	ldr	r3, [pc, #132]	; (8008818 <xTaskIncrementTick+0x154>)
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008798:	0013      	movs	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	189b      	adds	r3, r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4a1e      	ldr	r2, [pc, #120]	; (800881c <xTaskIncrementTick+0x158>)
 80087a2:	189a      	adds	r2, r3, r2
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	3304      	adds	r3, #4
 80087a8:	0019      	movs	r1, r3
 80087aa:	0010      	movs	r0, r2
 80087ac:	f7ff f849 	bl	8007842 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b4:	4b1a      	ldr	r3, [pc, #104]	; (8008820 <xTaskIncrementTick+0x15c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d3b3      	bcc.n	8008726 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80087be:	2301      	movs	r3, #1
 80087c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087c2:	e7b0      	b.n	8008726 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087c4:	4b16      	ldr	r3, [pc, #88]	; (8008820 <xTaskIncrementTick+0x15c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ca:	4914      	ldr	r1, [pc, #80]	; (800881c <xTaskIncrementTick+0x158>)
 80087cc:	0013      	movs	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	189b      	adds	r3, r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	585b      	ldr	r3, [r3, r1]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d907      	bls.n	80087ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80087da:	2301      	movs	r3, #1
 80087dc:	617b      	str	r3, [r7, #20]
 80087de:	e004      	b.n	80087ea <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80087e0:	4b10      	ldr	r3, [pc, #64]	; (8008824 <xTaskIncrementTick+0x160>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	4b0f      	ldr	r3, [pc, #60]	; (8008824 <xTaskIncrementTick+0x160>)
 80087e8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80087ea:	4b0f      	ldr	r3, [pc, #60]	; (8008828 <xTaskIncrementTick+0x164>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80087f2:	2301      	movs	r3, #1
 80087f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80087f6:	697b      	ldr	r3, [r7, #20]
}
 80087f8:	0018      	movs	r0, r3
 80087fa:	46bd      	mov	sp, r7
 80087fc:	b006      	add	sp, #24
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	20001690 	.word	0x20001690
 8008804:	2000166c 	.word	0x2000166c
 8008808:	20001620 	.word	0x20001620
 800880c:	20001624 	.word	0x20001624
 8008810:	20001680 	.word	0x20001680
 8008814:	20001688 	.word	0x20001688
 8008818:	20001670 	.word	0x20001670
 800881c:	20001198 	.word	0x20001198
 8008820:	20001194 	.word	0x20001194
 8008824:	20001678 	.word	0x20001678
 8008828:	2000167c 	.word	0x2000167c

0800882c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008832:	4b22      	ldr	r3, [pc, #136]	; (80088bc <vTaskSwitchContext+0x90>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800883a:	4b21      	ldr	r3, [pc, #132]	; (80088c0 <vTaskSwitchContext+0x94>)
 800883c:	2201      	movs	r2, #1
 800883e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008840:	e037      	b.n	80088b2 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8008842:	4b1f      	ldr	r3, [pc, #124]	; (80088c0 <vTaskSwitchContext+0x94>)
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008848:	4b1e      	ldr	r3, [pc, #120]	; (80088c4 <vTaskSwitchContext+0x98>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	607b      	str	r3, [r7, #4]
 800884e:	e007      	b.n	8008860 <vTaskSwitchContext+0x34>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <vTaskSwitchContext+0x2e>
 8008856:	b672      	cpsid	i
 8008858:	e7fe      	b.n	8008858 <vTaskSwitchContext+0x2c>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	3b01      	subs	r3, #1
 800885e:	607b      	str	r3, [r7, #4]
 8008860:	4919      	ldr	r1, [pc, #100]	; (80088c8 <vTaskSwitchContext+0x9c>)
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	0013      	movs	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	189b      	adds	r3, r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	585b      	ldr	r3, [r3, r1]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d0ee      	beq.n	8008850 <vTaskSwitchContext+0x24>
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	0013      	movs	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	189b      	adds	r3, r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4a12      	ldr	r2, [pc, #72]	; (80088c8 <vTaskSwitchContext+0x9c>)
 800887e:	189b      	adds	r3, r3, r2
 8008880:	603b      	str	r3, [r7, #0]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	685a      	ldr	r2, [r3, #4]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	605a      	str	r2, [r3, #4]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	3308      	adds	r3, #8
 8008894:	429a      	cmp	r2, r3
 8008896:	d104      	bne.n	80088a2 <vTaskSwitchContext+0x76>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	605a      	str	r2, [r3, #4]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	68da      	ldr	r2, [r3, #12]
 80088a8:	4b08      	ldr	r3, [pc, #32]	; (80088cc <vTaskSwitchContext+0xa0>)
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	4b05      	ldr	r3, [pc, #20]	; (80088c4 <vTaskSwitchContext+0x98>)
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	601a      	str	r2, [r3, #0]
}
 80088b2:	46c0      	nop			; (mov r8, r8)
 80088b4:	46bd      	mov	sp, r7
 80088b6:	b002      	add	sp, #8
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	46c0      	nop			; (mov r8, r8)
 80088bc:	20001690 	.word	0x20001690
 80088c0:	2000167c 	.word	0x2000167c
 80088c4:	20001670 	.word	0x20001670
 80088c8:	20001198 	.word	0x20001198
 80088cc:	20001194 	.word	0x20001194

080088d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <vTaskPlaceOnEventList+0x14>
 80088e0:	b672      	cpsid	i
 80088e2:	e7fe      	b.n	80088e2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088e4:	4b08      	ldr	r3, [pc, #32]	; (8008908 <vTaskPlaceOnEventList+0x38>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3318      	adds	r3, #24
 80088ea:	001a      	movs	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	0011      	movs	r1, r2
 80088f0:	0018      	movs	r0, r3
 80088f2:	f7fe ffc8 	bl	8007886 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2101      	movs	r1, #1
 80088fa:	0018      	movs	r0, r3
 80088fc:	f000 fa3c 	bl	8008d78 <prvAddCurrentTaskToDelayedList>
}
 8008900:	46c0      	nop			; (mov r8, r8)
 8008902:	46bd      	mov	sp, r7
 8008904:	b002      	add	sp, #8
 8008906:	bd80      	pop	{r7, pc}
 8008908:	20001194 	.word	0x20001194

0800890c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <vTaskPlaceOnEventListRestricted+0x16>
 800891e:	b672      	cpsid	i
 8008920:	e7fe      	b.n	8008920 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008922:	4b0c      	ldr	r3, [pc, #48]	; (8008954 <vTaskPlaceOnEventListRestricted+0x48>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3318      	adds	r3, #24
 8008928:	001a      	movs	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	0011      	movs	r1, r2
 800892e:	0018      	movs	r0, r3
 8008930:	f7fe ff87 	bl	8007842 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d002      	beq.n	8008940 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800893a:	2301      	movs	r3, #1
 800893c:	425b      	negs	r3, r3
 800893e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	0011      	movs	r1, r2
 8008946:	0018      	movs	r0, r3
 8008948:	f000 fa16 	bl	8008d78 <prvAddCurrentTaskToDelayedList>
	}
 800894c:	46c0      	nop			; (mov r8, r8)
 800894e:	46bd      	mov	sp, r7
 8008950:	b004      	add	sp, #16
 8008952:	bd80      	pop	{r7, pc}
 8008954:	20001194 	.word	0x20001194

08008958 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <xTaskRemoveFromEventList+0x1a>
 800896e:	b672      	cpsid	i
 8008970:	e7fe      	b.n	8008970 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	3318      	adds	r3, #24
 8008976:	0018      	movs	r0, r3
 8008978:	f7fe ffbb 	bl	80078f2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800897c:	4b1e      	ldr	r3, [pc, #120]	; (80089f8 <xTaskRemoveFromEventList+0xa0>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d11d      	bne.n	80089c0 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	3304      	adds	r3, #4
 8008988:	0018      	movs	r0, r3
 800898a:	f7fe ffb2 	bl	80078f2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008992:	4b1a      	ldr	r3, [pc, #104]	; (80089fc <xTaskRemoveFromEventList+0xa4>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	429a      	cmp	r2, r3
 8008998:	d903      	bls.n	80089a2 <xTaskRemoveFromEventList+0x4a>
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899e:	4b17      	ldr	r3, [pc, #92]	; (80089fc <xTaskRemoveFromEventList+0xa4>)
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a6:	0013      	movs	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	189b      	adds	r3, r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4a14      	ldr	r2, [pc, #80]	; (8008a00 <xTaskRemoveFromEventList+0xa8>)
 80089b0:	189a      	adds	r2, r3, r2
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	3304      	adds	r3, #4
 80089b6:	0019      	movs	r1, r3
 80089b8:	0010      	movs	r0, r2
 80089ba:	f7fe ff42 	bl	8007842 <vListInsertEnd>
 80089be:	e007      	b.n	80089d0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	3318      	adds	r3, #24
 80089c4:	001a      	movs	r2, r3
 80089c6:	4b0f      	ldr	r3, [pc, #60]	; (8008a04 <xTaskRemoveFromEventList+0xac>)
 80089c8:	0011      	movs	r1, r2
 80089ca:	0018      	movs	r0, r3
 80089cc:	f7fe ff39 	bl	8007842 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d4:	4b0c      	ldr	r3, [pc, #48]	; (8008a08 <xTaskRemoveFromEventList+0xb0>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089da:	429a      	cmp	r2, r3
 80089dc:	d905      	bls.n	80089ea <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80089de:	2301      	movs	r3, #1
 80089e0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80089e2:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <xTaskRemoveFromEventList+0xb4>)
 80089e4:	2201      	movs	r2, #1
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	e001      	b.n	80089ee <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80089ea:	2300      	movs	r3, #0
 80089ec:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80089ee:	68fb      	ldr	r3, [r7, #12]
}
 80089f0:	0018      	movs	r0, r3
 80089f2:	46bd      	mov	sp, r7
 80089f4:	b004      	add	sp, #16
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20001690 	.word	0x20001690
 80089fc:	20001670 	.word	0x20001670
 8008a00:	20001198 	.word	0x20001198
 8008a04:	20001628 	.word	0x20001628
 8008a08:	20001194 	.word	0x20001194
 8008a0c:	2000167c 	.word	0x2000167c

08008a10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a18:	4b05      	ldr	r3, [pc, #20]	; (8008a30 <vTaskInternalSetTimeOutState+0x20>)
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a20:	4b04      	ldr	r3, [pc, #16]	; (8008a34 <vTaskInternalSetTimeOutState+0x24>)
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	605a      	str	r2, [r3, #4]
}
 8008a28:	46c0      	nop			; (mov r8, r8)
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	b002      	add	sp, #8
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	20001680 	.word	0x20001680
 8008a34:	2000166c 	.word	0x2000166c

08008a38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <xTaskCheckForTimeOut+0x14>
 8008a48:	b672      	cpsid	i
 8008a4a:	e7fe      	b.n	8008a4a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <xTaskCheckForTimeOut+0x1e>
 8008a52:	b672      	cpsid	i
 8008a54:	e7fe      	b.n	8008a54 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8008a56:	f000 fd4b 	bl	80094f0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a5a:	4b1d      	ldr	r3, [pc, #116]	; (8008ad0 <xTaskCheckForTimeOut+0x98>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	d102      	bne.n	8008a78 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a72:	2300      	movs	r3, #0
 8008a74:	617b      	str	r3, [r7, #20]
 8008a76:	e024      	b.n	8008ac2 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	4b15      	ldr	r3, [pc, #84]	; (8008ad4 <xTaskCheckForTimeOut+0x9c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d007      	beq.n	8008a94 <xTaskCheckForTimeOut+0x5c>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d302      	bcc.n	8008a94 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	617b      	str	r3, [r7, #20]
 8008a92:	e016      	b.n	8008ac2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d20c      	bcs.n	8008ab8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	1ad2      	subs	r2, r2, r3
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	0018      	movs	r0, r3
 8008aae:	f7ff ffaf 	bl	8008a10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	617b      	str	r3, [r7, #20]
 8008ab6:	e004      	b.n	8008ac2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2200      	movs	r2, #0
 8008abc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008ac2:	f000 fd27 	bl	8009514 <vPortExitCritical>

	return xReturn;
 8008ac6:	697b      	ldr	r3, [r7, #20]
}
 8008ac8:	0018      	movs	r0, r3
 8008aca:	46bd      	mov	sp, r7
 8008acc:	b006      	add	sp, #24
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	2000166c 	.word	0x2000166c
 8008ad4:	20001680 	.word	0x20001680

08008ad8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008adc:	4b02      	ldr	r3, [pc, #8]	; (8008ae8 <vTaskMissedYield+0x10>)
 8008ade:	2201      	movs	r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]
}
 8008ae2:	46c0      	nop			; (mov r8, r8)
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	2000167c 	.word	0x2000167c

08008aec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008af4:	f000 f84e 	bl	8008b94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008af8:	4b03      	ldr	r3, [pc, #12]	; (8008b08 <prvIdleTask+0x1c>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d9f9      	bls.n	8008af4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b00:	f000 fce6 	bl	80094d0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8008b04:	e7f6      	b.n	8008af4 <prvIdleTask+0x8>
 8008b06:	46c0      	nop			; (mov r8, r8)
 8008b08:	20001198 	.word	0x20001198

08008b0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b12:	2300      	movs	r3, #0
 8008b14:	607b      	str	r3, [r7, #4]
 8008b16:	e00c      	b.n	8008b32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	0013      	movs	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	189b      	adds	r3, r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4a14      	ldr	r2, [pc, #80]	; (8008b74 <prvInitialiseTaskLists+0x68>)
 8008b24:	189b      	adds	r3, r3, r2
 8008b26:	0018      	movs	r0, r3
 8008b28:	f7fe fe62 	bl	80077f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	607b      	str	r3, [r7, #4]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b37      	cmp	r3, #55	; 0x37
 8008b36:	d9ef      	bls.n	8008b18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b38:	4b0f      	ldr	r3, [pc, #60]	; (8008b78 <prvInitialiseTaskLists+0x6c>)
 8008b3a:	0018      	movs	r0, r3
 8008b3c:	f7fe fe58 	bl	80077f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b40:	4b0e      	ldr	r3, [pc, #56]	; (8008b7c <prvInitialiseTaskLists+0x70>)
 8008b42:	0018      	movs	r0, r3
 8008b44:	f7fe fe54 	bl	80077f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b48:	4b0d      	ldr	r3, [pc, #52]	; (8008b80 <prvInitialiseTaskLists+0x74>)
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f7fe fe50 	bl	80077f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b50:	4b0c      	ldr	r3, [pc, #48]	; (8008b84 <prvInitialiseTaskLists+0x78>)
 8008b52:	0018      	movs	r0, r3
 8008b54:	f7fe fe4c 	bl	80077f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b58:	4b0b      	ldr	r3, [pc, #44]	; (8008b88 <prvInitialiseTaskLists+0x7c>)
 8008b5a:	0018      	movs	r0, r3
 8008b5c:	f7fe fe48 	bl	80077f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b60:	4b0a      	ldr	r3, [pc, #40]	; (8008b8c <prvInitialiseTaskLists+0x80>)
 8008b62:	4a05      	ldr	r2, [pc, #20]	; (8008b78 <prvInitialiseTaskLists+0x6c>)
 8008b64:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b66:	4b0a      	ldr	r3, [pc, #40]	; (8008b90 <prvInitialiseTaskLists+0x84>)
 8008b68:	4a04      	ldr	r2, [pc, #16]	; (8008b7c <prvInitialiseTaskLists+0x70>)
 8008b6a:	601a      	str	r2, [r3, #0]
}
 8008b6c:	46c0      	nop			; (mov r8, r8)
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	b002      	add	sp, #8
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	20001198 	.word	0x20001198
 8008b78:	200015f8 	.word	0x200015f8
 8008b7c:	2000160c 	.word	0x2000160c
 8008b80:	20001628 	.word	0x20001628
 8008b84:	2000163c 	.word	0x2000163c
 8008b88:	20001654 	.word	0x20001654
 8008b8c:	20001620 	.word	0x20001620
 8008b90:	20001624 	.word	0x20001624

08008b94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b9a:	e01a      	b.n	8008bd2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8008b9c:	f000 fca8 	bl	80094f0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008ba0:	4b10      	ldr	r3, [pc, #64]	; (8008be4 <prvCheckTasksWaitingTermination+0x50>)
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3304      	adds	r3, #4
 8008bac:	0018      	movs	r0, r3
 8008bae:	f7fe fea0 	bl	80078f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008bb2:	4b0d      	ldr	r3, [pc, #52]	; (8008be8 <prvCheckTasksWaitingTermination+0x54>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	1e5a      	subs	r2, r3, #1
 8008bb8:	4b0b      	ldr	r3, [pc, #44]	; (8008be8 <prvCheckTasksWaitingTermination+0x54>)
 8008bba:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008bbc:	4b0b      	ldr	r3, [pc, #44]	; (8008bec <prvCheckTasksWaitingTermination+0x58>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	1e5a      	subs	r2, r3, #1
 8008bc2:	4b0a      	ldr	r3, [pc, #40]	; (8008bec <prvCheckTasksWaitingTermination+0x58>)
 8008bc4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8008bc6:	f000 fca5 	bl	8009514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	0018      	movs	r0, r3
 8008bce:	f000 f80f 	bl	8008bf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bd2:	4b06      	ldr	r3, [pc, #24]	; (8008bec <prvCheckTasksWaitingTermination+0x58>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1e0      	bne.n	8008b9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008bda:	46c0      	nop			; (mov r8, r8)
 8008bdc:	46c0      	nop			; (mov r8, r8)
 8008bde:	46bd      	mov	sp, r7
 8008be0:	b002      	add	sp, #8
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	2000163c 	.word	0x2000163c
 8008be8:	20001668 	.word	0x20001668
 8008bec:	20001650 	.word	0x20001650

08008bf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2259      	movs	r2, #89	; 0x59
 8008bfc:	5c9b      	ldrb	r3, [r3, r2]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d109      	bne.n	8008c16 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c06:	0018      	movs	r0, r3
 8008c08:	f000 fdb0 	bl	800976c <vPortFree>
				vPortFree( pxTCB );
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	0018      	movs	r0, r3
 8008c10:	f000 fdac 	bl	800976c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c14:	e010      	b.n	8008c38 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2259      	movs	r2, #89	; 0x59
 8008c1a:	5c9b      	ldrb	r3, [r3, r2]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d104      	bne.n	8008c2a <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	0018      	movs	r0, r3
 8008c24:	f000 fda2 	bl	800976c <vPortFree>
	}
 8008c28:	e006      	b.n	8008c38 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2259      	movs	r2, #89	; 0x59
 8008c2e:	5c9b      	ldrb	r3, [r3, r2]
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d001      	beq.n	8008c38 <prvDeleteTCB+0x48>
 8008c34:	b672      	cpsid	i
 8008c36:	e7fe      	b.n	8008c36 <prvDeleteTCB+0x46>
	}
 8008c38:	46c0      	nop			; (mov r8, r8)
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	b002      	add	sp, #8
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c46:	4b0e      	ldr	r3, [pc, #56]	; (8008c80 <prvResetNextTaskUnblockTime+0x40>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <prvResetNextTaskUnblockTime+0x14>
 8008c50:	2301      	movs	r3, #1
 8008c52:	e000      	b.n	8008c56 <prvResetNextTaskUnblockTime+0x16>
 8008c54:	2300      	movs	r3, #0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d004      	beq.n	8008c64 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c5a:	4b0a      	ldr	r3, [pc, #40]	; (8008c84 <prvResetNextTaskUnblockTime+0x44>)
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	4252      	negs	r2, r2
 8008c60:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c62:	e008      	b.n	8008c76 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008c64:	4b06      	ldr	r3, [pc, #24]	; (8008c80 <prvResetNextTaskUnblockTime+0x40>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	4b04      	ldr	r3, [pc, #16]	; (8008c84 <prvResetNextTaskUnblockTime+0x44>)
 8008c74:	601a      	str	r2, [r3, #0]
}
 8008c76:	46c0      	nop			; (mov r8, r8)
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	b002      	add	sp, #8
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	20001620 	.word	0x20001620
 8008c84:	20001688 	.word	0x20001688

08008c88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c8e:	4b0a      	ldr	r3, [pc, #40]	; (8008cb8 <xTaskGetSchedulerState+0x30>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d102      	bne.n	8008c9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c96:	2301      	movs	r3, #1
 8008c98:	607b      	str	r3, [r7, #4]
 8008c9a:	e008      	b.n	8008cae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c9c:	4b07      	ldr	r3, [pc, #28]	; (8008cbc <xTaskGetSchedulerState+0x34>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d102      	bne.n	8008caa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	607b      	str	r3, [r7, #4]
 8008ca8:	e001      	b.n	8008cae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008caa:	2300      	movs	r3, #0
 8008cac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008cae:	687b      	ldr	r3, [r7, #4]
	}
 8008cb0:	0018      	movs	r0, r3
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	b002      	add	sp, #8
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	20001674 	.word	0x20001674
 8008cbc:	20001690 	.word	0x20001690

08008cc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d044      	beq.n	8008d60 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008cd6:	4b25      	ldr	r3, [pc, #148]	; (8008d6c <xTaskPriorityDisinherit+0xac>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d001      	beq.n	8008ce4 <xTaskPriorityDisinherit+0x24>
 8008ce0:	b672      	cpsid	i
 8008ce2:	e7fe      	b.n	8008ce2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <xTaskPriorityDisinherit+0x30>
 8008cec:	b672      	cpsid	i
 8008cee:	e7fe      	b.n	8008cee <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cf4:	1e5a      	subs	r2, r3, #1
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d02c      	beq.n	8008d60 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d128      	bne.n	8008d60 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	3304      	adds	r3, #4
 8008d12:	0018      	movs	r0, r3
 8008d14:	f7fe fded 	bl	80078f2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d24:	2238      	movs	r2, #56	; 0x38
 8008d26:	1ad2      	subs	r2, r2, r3
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d30:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <xTaskPriorityDisinherit+0xb0>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d903      	bls.n	8008d40 <xTaskPriorityDisinherit+0x80>
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3c:	4b0c      	ldr	r3, [pc, #48]	; (8008d70 <xTaskPriorityDisinherit+0xb0>)
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d44:	0013      	movs	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	189b      	adds	r3, r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4a09      	ldr	r2, [pc, #36]	; (8008d74 <xTaskPriorityDisinherit+0xb4>)
 8008d4e:	189a      	adds	r2, r3, r2
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	3304      	adds	r3, #4
 8008d54:	0019      	movs	r1, r3
 8008d56:	0010      	movs	r0, r2
 8008d58:	f7fe fd73 	bl	8007842 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d60:	68fb      	ldr	r3, [r7, #12]
	}
 8008d62:	0018      	movs	r0, r3
 8008d64:	46bd      	mov	sp, r7
 8008d66:	b004      	add	sp, #16
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	46c0      	nop			; (mov r8, r8)
 8008d6c:	20001194 	.word	0x20001194
 8008d70:	20001670 	.word	0x20001670
 8008d74:	20001198 	.word	0x20001198

08008d78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d82:	4b21      	ldr	r3, [pc, #132]	; (8008e08 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d88:	4b20      	ldr	r3, [pc, #128]	; (8008e0c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	0018      	movs	r0, r3
 8008d90:	f7fe fdaf 	bl	80078f2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3301      	adds	r3, #1
 8008d98:	d10b      	bne.n	8008db2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d008      	beq.n	8008db2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008da0:	4b1a      	ldr	r3, [pc, #104]	; (8008e0c <prvAddCurrentTaskToDelayedList+0x94>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	1d1a      	adds	r2, r3, #4
 8008da6:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <prvAddCurrentTaskToDelayedList+0x98>)
 8008da8:	0011      	movs	r1, r2
 8008daa:	0018      	movs	r0, r3
 8008dac:	f7fe fd49 	bl	8007842 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008db0:	e026      	b.n	8008e00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	18d3      	adds	r3, r2, r3
 8008db8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008dba:	4b14      	ldr	r3, [pc, #80]	; (8008e0c <prvAddCurrentTaskToDelayedList+0x94>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d209      	bcs.n	8008dde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dca:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	4b0f      	ldr	r3, [pc, #60]	; (8008e0c <prvAddCurrentTaskToDelayedList+0x94>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	0019      	movs	r1, r3
 8008dd6:	0010      	movs	r0, r2
 8008dd8:	f7fe fd55 	bl	8007886 <vListInsert>
}
 8008ddc:	e010      	b.n	8008e00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dde:	4b0e      	ldr	r3, [pc, #56]	; (8008e18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	4b0a      	ldr	r3, [pc, #40]	; (8008e0c <prvAddCurrentTaskToDelayedList+0x94>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3304      	adds	r3, #4
 8008de8:	0019      	movs	r1, r3
 8008dea:	0010      	movs	r0, r2
 8008dec:	f7fe fd4b 	bl	8007886 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008df0:	4b0a      	ldr	r3, [pc, #40]	; (8008e1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d202      	bcs.n	8008e00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008dfa:	4b08      	ldr	r3, [pc, #32]	; (8008e1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	601a      	str	r2, [r3, #0]
}
 8008e00:	46c0      	nop			; (mov r8, r8)
 8008e02:	46bd      	mov	sp, r7
 8008e04:	b004      	add	sp, #16
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	2000166c 	.word	0x2000166c
 8008e0c:	20001194 	.word	0x20001194
 8008e10:	20001654 	.word	0x20001654
 8008e14:	20001624 	.word	0x20001624
 8008e18:	20001620 	.word	0x20001620
 8008e1c:	20001688 	.word	0x20001688

08008e20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e20:	b590      	push	{r4, r7, lr}
 8008e22:	b089      	sub	sp, #36	; 0x24
 8008e24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e2a:	f000 fa87 	bl	800933c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e2e:	4b17      	ldr	r3, [pc, #92]	; (8008e8c <xTimerCreateTimerTask+0x6c>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d020      	beq.n	8008e78 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e36:	2300      	movs	r3, #0
 8008e38:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e3e:	003a      	movs	r2, r7
 8008e40:	1d39      	adds	r1, r7, #4
 8008e42:	2308      	movs	r3, #8
 8008e44:	18fb      	adds	r3, r7, r3
 8008e46:	0018      	movs	r0, r3
 8008e48:	f7fe fcba 	bl	80077c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e4c:	683c      	ldr	r4, [r7, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	490f      	ldr	r1, [pc, #60]	; (8008e90 <xTimerCreateTimerTask+0x70>)
 8008e54:	480f      	ldr	r0, [pc, #60]	; (8008e94 <xTimerCreateTimerTask+0x74>)
 8008e56:	9202      	str	r2, [sp, #8]
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	2300      	movs	r3, #0
 8008e60:	0022      	movs	r2, r4
 8008e62:	f7ff f996 	bl	8008192 <xTaskCreateStatic>
 8008e66:	0002      	movs	r2, r0
 8008e68:	4b0b      	ldr	r3, [pc, #44]	; (8008e98 <xTimerCreateTimerTask+0x78>)
 8008e6a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e6c:	4b0a      	ldr	r3, [pc, #40]	; (8008e98 <xTimerCreateTimerTask+0x78>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d001      	beq.n	8008e78 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8008e74:	2301      	movs	r3, #1
 8008e76:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <xTimerCreateTimerTask+0x62>
 8008e7e:	b672      	cpsid	i
 8008e80:	e7fe      	b.n	8008e80 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8008e82:	68fb      	ldr	r3, [r7, #12]
}
 8008e84:	0018      	movs	r0, r3
 8008e86:	46bd      	mov	sp, r7
 8008e88:	b005      	add	sp, #20
 8008e8a:	bd90      	pop	{r4, r7, pc}
 8008e8c:	200016c4 	.word	0x200016c4
 8008e90:	0800acb4 	.word	0x0800acb4
 8008e94:	08008fa1 	.word	0x08008fa1
 8008e98:	200016c8 	.word	0x200016c8

08008e9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e9c:	b590      	push	{r4, r7, lr}
 8008e9e:	b08b      	sub	sp, #44	; 0x2c
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
 8008ea8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <xTimerGenericCommand+0x1c>
 8008eb4:	b672      	cpsid	i
 8008eb6:	e7fe      	b.n	8008eb6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008eb8:	4b1c      	ldr	r3, [pc, #112]	; (8008f2c <xTimerGenericCommand+0x90>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d030      	beq.n	8008f22 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008ec0:	2414      	movs	r4, #20
 8008ec2:	193b      	adds	r3, r7, r4
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ec8:	193b      	adds	r3, r7, r4
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008ece:	193b      	adds	r3, r7, r4
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2b05      	cmp	r3, #5
 8008ed8:	dc19      	bgt.n	8008f0e <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008eda:	f7ff fed5 	bl	8008c88 <xTaskGetSchedulerState>
 8008ede:	0003      	movs	r3, r0
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d109      	bne.n	8008ef8 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ee4:	4b11      	ldr	r3, [pc, #68]	; (8008f2c <xTimerGenericCommand+0x90>)
 8008ee6:	6818      	ldr	r0, [r3, #0]
 8008ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008eea:	1939      	adds	r1, r7, r4
 8008eec:	2300      	movs	r3, #0
 8008eee:	f7fe fdee 	bl	8007ace <xQueueGenericSend>
 8008ef2:	0003      	movs	r3, r0
 8008ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ef6:	e014      	b.n	8008f22 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ef8:	4b0c      	ldr	r3, [pc, #48]	; (8008f2c <xTimerGenericCommand+0x90>)
 8008efa:	6818      	ldr	r0, [r3, #0]
 8008efc:	2314      	movs	r3, #20
 8008efe:	18f9      	adds	r1, r7, r3
 8008f00:	2300      	movs	r3, #0
 8008f02:	2200      	movs	r2, #0
 8008f04:	f7fe fde3 	bl	8007ace <xQueueGenericSend>
 8008f08:	0003      	movs	r3, r0
 8008f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f0c:	e009      	b.n	8008f22 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f0e:	4b07      	ldr	r3, [pc, #28]	; (8008f2c <xTimerGenericCommand+0x90>)
 8008f10:	6818      	ldr	r0, [r3, #0]
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	2314      	movs	r3, #20
 8008f16:	18f9      	adds	r1, r7, r3
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f7fe fe9c 	bl	8007c56 <xQueueGenericSendFromISR>
 8008f1e:	0003      	movs	r3, r0
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f24:	0018      	movs	r0, r3
 8008f26:	46bd      	mov	sp, r7
 8008f28:	b00b      	add	sp, #44	; 0x2c
 8008f2a:	bd90      	pop	{r4, r7, pc}
 8008f2c:	200016c4 	.word	0x200016c4

08008f30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af02      	add	r7, sp, #8
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f3a:	4b18      	ldr	r3, [pc, #96]	; (8008f9c <prvProcessExpiredTimer+0x6c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3304      	adds	r3, #4
 8008f48:	0018      	movs	r0, r3
 8008f4a:	f7fe fcd2 	bl	80078f2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	69db      	ldr	r3, [r3, #28]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d119      	bne.n	8008f8a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	699a      	ldr	r2, [r3, #24]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	18d1      	adds	r1, r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 f8b6 	bl	80090d4 <prvInsertTimerInActiveList>
 8008f68:	1e03      	subs	r3, r0, #0
 8008f6a:	d00e      	beq.n	8008f8a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	2300      	movs	r3, #0
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	2300      	movs	r3, #0
 8008f76:	2100      	movs	r1, #0
 8008f78:	f7ff ff90 	bl	8008e9c <xTimerGenericCommand>
 8008f7c:	0003      	movs	r3, r0
 8008f7e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <prvProcessExpiredTimer+0x5a>
 8008f86:	b672      	cpsid	i
 8008f88:	e7fe      	b.n	8008f88 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	0010      	movs	r0, r2
 8008f92:	4798      	blx	r3
}
 8008f94:	46c0      	nop			; (mov r8, r8)
 8008f96:	46bd      	mov	sp, r7
 8008f98:	b004      	add	sp, #16
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	200016bc 	.word	0x200016bc

08008fa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fa8:	2308      	movs	r3, #8
 8008faa:	18fb      	adds	r3, r7, r3
 8008fac:	0018      	movs	r0, r3
 8008fae:	f000 f851 	bl	8009054 <prvGetNextExpireTime>
 8008fb2:	0003      	movs	r3, r0
 8008fb4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	0011      	movs	r1, r2
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	f000 f803 	bl	8008fc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008fc2:	f000 f8c9 	bl	8009158 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fc6:	e7ef      	b.n	8008fa8 <prvTimerTask+0x8>

08008fc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008fd2:	f7ff fad1 	bl	8008578 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fd6:	2308      	movs	r3, #8
 8008fd8:	18fb      	adds	r3, r7, r3
 8008fda:	0018      	movs	r0, r3
 8008fdc:	f000 f85a 	bl	8009094 <prvSampleTimeNow>
 8008fe0:	0003      	movs	r3, r0
 8008fe2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d129      	bne.n	800903e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10c      	bne.n	800900a <prvProcessTimerOrBlockTask+0x42>
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d808      	bhi.n	800900a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8008ff8:	f7ff faca 	bl	8008590 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	0011      	movs	r1, r2
 8009002:	0018      	movs	r0, r3
 8009004:	f7ff ff94 	bl	8008f30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009008:	e01b      	b.n	8009042 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d006      	beq.n	800901e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009010:	4b0e      	ldr	r3, [pc, #56]	; (800904c <prvProcessTimerOrBlockTask+0x84>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	425a      	negs	r2, r3
 8009018:	4153      	adcs	r3, r2
 800901a:	b2db      	uxtb	r3, r3
 800901c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800901e:	4b0c      	ldr	r3, [pc, #48]	; (8009050 <prvProcessTimerOrBlockTask+0x88>)
 8009020:	6818      	ldr	r0, [r3, #0]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	0019      	movs	r1, r3
 800902c:	f7ff f87e 	bl	800812c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009030:	f7ff faae 	bl	8008590 <xTaskResumeAll>
 8009034:	1e03      	subs	r3, r0, #0
 8009036:	d104      	bne.n	8009042 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8009038:	f000 fa4a 	bl	80094d0 <vPortYield>
}
 800903c:	e001      	b.n	8009042 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800903e:	f7ff faa7 	bl	8008590 <xTaskResumeAll>
}
 8009042:	46c0      	nop			; (mov r8, r8)
 8009044:	46bd      	mov	sp, r7
 8009046:	b004      	add	sp, #16
 8009048:	bd80      	pop	{r7, pc}
 800904a:	46c0      	nop			; (mov r8, r8)
 800904c:	200016c0 	.word	0x200016c0
 8009050:	200016c4 	.word	0x200016c4

08009054 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800905c:	4b0c      	ldr	r3, [pc, #48]	; (8009090 <prvGetNextExpireTime+0x3c>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	425a      	negs	r2, r3
 8009064:	4153      	adcs	r3, r2
 8009066:	b2db      	uxtb	r3, r3
 8009068:	001a      	movs	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d105      	bne.n	8009082 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009076:	4b06      	ldr	r3, [pc, #24]	; (8009090 <prvGetNextExpireTime+0x3c>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	e001      	b.n	8009086 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009082:	2300      	movs	r3, #0
 8009084:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009086:	68fb      	ldr	r3, [r7, #12]
}
 8009088:	0018      	movs	r0, r3
 800908a:	46bd      	mov	sp, r7
 800908c:	b004      	add	sp, #16
 800908e:	bd80      	pop	{r7, pc}
 8009090:	200016bc 	.word	0x200016bc

08009094 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800909c:	f7ff fb04 	bl	80086a8 <xTaskGetTickCount>
 80090a0:	0003      	movs	r3, r0
 80090a2:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80090a4:	4b0a      	ldr	r3, [pc, #40]	; (80090d0 <prvSampleTimeNow+0x3c>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d205      	bcs.n	80090ba <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80090ae:	f000 f8eb 	bl	8009288 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	601a      	str	r2, [r3, #0]
 80090b8:	e002      	b.n	80090c0 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80090c0:	4b03      	ldr	r3, [pc, #12]	; (80090d0 <prvSampleTimeNow+0x3c>)
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80090c6:	68fb      	ldr	r3, [r7, #12]
}
 80090c8:	0018      	movs	r0, r3
 80090ca:	46bd      	mov	sp, r7
 80090cc:	b004      	add	sp, #16
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	200016cc 	.word	0x200016cc

080090d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
 80090e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80090e2:	2300      	movs	r3, #0
 80090e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d812      	bhi.n	8009120 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	1ad2      	subs	r2, r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	429a      	cmp	r2, r3
 8009106:	d302      	bcc.n	800910e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009108:	2301      	movs	r3, #1
 800910a:	617b      	str	r3, [r7, #20]
 800910c:	e01b      	b.n	8009146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800910e:	4b10      	ldr	r3, [pc, #64]	; (8009150 <prvInsertTimerInActiveList+0x7c>)
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3304      	adds	r3, #4
 8009116:	0019      	movs	r1, r3
 8009118:	0010      	movs	r0, r2
 800911a:	f7fe fbb4 	bl	8007886 <vListInsert>
 800911e:	e012      	b.n	8009146 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	429a      	cmp	r2, r3
 8009126:	d206      	bcs.n	8009136 <prvInsertTimerInActiveList+0x62>
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	429a      	cmp	r2, r3
 800912e:	d302      	bcc.n	8009136 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009130:	2301      	movs	r3, #1
 8009132:	617b      	str	r3, [r7, #20]
 8009134:	e007      	b.n	8009146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009136:	4b07      	ldr	r3, [pc, #28]	; (8009154 <prvInsertTimerInActiveList+0x80>)
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	3304      	adds	r3, #4
 800913e:	0019      	movs	r1, r3
 8009140:	0010      	movs	r0, r2
 8009142:	f7fe fba0 	bl	8007886 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009146:	697b      	ldr	r3, [r7, #20]
}
 8009148:	0018      	movs	r0, r3
 800914a:	46bd      	mov	sp, r7
 800914c:	b006      	add	sp, #24
 800914e:	bd80      	pop	{r7, pc}
 8009150:	200016c0 	.word	0x200016c0
 8009154:	200016bc 	.word	0x200016bc

08009158 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009158:	b590      	push	{r4, r7, lr}
 800915a:	b08d      	sub	sp, #52	; 0x34
 800915c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800915e:	e07f      	b.n	8009260 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009160:	2208      	movs	r2, #8
 8009162:	18bb      	adds	r3, r7, r2
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	da0f      	bge.n	800918a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800916a:	18bb      	adds	r3, r7, r2
 800916c:	3304      	adds	r3, #4
 800916e:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <prvProcessReceivedCommands+0x22>
 8009176:	b672      	cpsid	i
 8009178:	e7fe      	b.n	8009178 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	6858      	ldr	r0, [r3, #4]
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	0019      	movs	r1, r3
 8009188:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800918a:	2208      	movs	r2, #8
 800918c:	18bb      	adds	r3, r7, r2
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	db65      	blt.n	8009260 <prvProcessReceivedCommands+0x108>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009194:	18bb      	adds	r3, r7, r2
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800919a:	6a3b      	ldr	r3, [r7, #32]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d004      	beq.n	80091ac <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091a2:	6a3b      	ldr	r3, [r7, #32]
 80091a4:	3304      	adds	r3, #4
 80091a6:	0018      	movs	r0, r3
 80091a8:	f7fe fba3 	bl	80078f2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091ac:	1d3b      	adds	r3, r7, #4
 80091ae:	0018      	movs	r0, r3
 80091b0:	f7ff ff70 	bl	8009094 <prvSampleTimeNow>
 80091b4:	0003      	movs	r3, r0
 80091b6:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80091b8:	2308      	movs	r3, #8
 80091ba:	18fb      	adds	r3, r7, r3
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b09      	cmp	r3, #9
 80091c0:	d84d      	bhi.n	800925e <prvProcessReceivedCommands+0x106>
 80091c2:	009a      	lsls	r2, r3, #2
 80091c4:	4b2e      	ldr	r3, [pc, #184]	; (8009280 <prvProcessReceivedCommands+0x128>)
 80091c6:	18d3      	adds	r3, r2, r3
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80091cc:	2408      	movs	r4, #8
 80091ce:	193b      	adds	r3, r7, r4
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	18d1      	adds	r1, r2, r3
 80091d8:	193b      	adds	r3, r7, r4
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	69fa      	ldr	r2, [r7, #28]
 80091de:	6a38      	ldr	r0, [r7, #32]
 80091e0:	f7ff ff78 	bl	80090d4 <prvInsertTimerInActiveList>
 80091e4:	1e03      	subs	r3, r0, #0
 80091e6:	d03b      	beq.n	8009260 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091e8:	6a3b      	ldr	r3, [r7, #32]
 80091ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ec:	6a3a      	ldr	r2, [r7, #32]
 80091ee:	0010      	movs	r0, r2
 80091f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80091f2:	6a3b      	ldr	r3, [r7, #32]
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d132      	bne.n	8009260 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091fa:	193b      	adds	r3, r7, r4
 80091fc:	685a      	ldr	r2, [r3, #4]
 80091fe:	6a3b      	ldr	r3, [r7, #32]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	18d2      	adds	r2, r2, r3
 8009204:	6a38      	ldr	r0, [r7, #32]
 8009206:	2300      	movs	r3, #0
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	2300      	movs	r3, #0
 800920c:	2100      	movs	r1, #0
 800920e:	f7ff fe45 	bl	8008e9c <xTimerGenericCommand>
 8009212:	0003      	movs	r3, r0
 8009214:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d121      	bne.n	8009260 <prvProcessReceivedCommands+0x108>
 800921c:	b672      	cpsid	i
 800921e:	e7fe      	b.n	800921e <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009220:	2308      	movs	r3, #8
 8009222:	18fb      	adds	r3, r7, r3
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	6a3b      	ldr	r3, [r7, #32]
 8009228:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <prvProcessReceivedCommands+0xde>
 8009232:	b672      	cpsid	i
 8009234:	e7fe      	b.n	8009234 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	699a      	ldr	r2, [r3, #24]
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	18d1      	adds	r1, r2, r3
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	69fa      	ldr	r2, [r7, #28]
 8009242:	6a38      	ldr	r0, [r7, #32]
 8009244:	f7ff ff46 	bl	80090d4 <prvInsertTimerInActiveList>
					break;
 8009248:	e00a      	b.n	8009260 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	222c      	movs	r2, #44	; 0x2c
 800924e:	5c9b      	ldrb	r3, [r3, r2]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d105      	bne.n	8009260 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8009254:	6a3b      	ldr	r3, [r7, #32]
 8009256:	0018      	movs	r0, r3
 8009258:	f000 fa88 	bl	800976c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800925c:	e000      	b.n	8009260 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
 800925e:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009260:	4b08      	ldr	r3, [pc, #32]	; (8009284 <prvProcessReceivedCommands+0x12c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2208      	movs	r2, #8
 8009266:	18b9      	adds	r1, r7, r2
 8009268:	2200      	movs	r2, #0
 800926a:	0018      	movs	r0, r3
 800926c:	f7fe fd64 	bl	8007d38 <xQueueReceive>
 8009270:	1e03      	subs	r3, r0, #0
 8009272:	d000      	beq.n	8009276 <prvProcessReceivedCommands+0x11e>
 8009274:	e774      	b.n	8009160 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009276:	46c0      	nop			; (mov r8, r8)
 8009278:	46c0      	nop			; (mov r8, r8)
 800927a:	46bd      	mov	sp, r7
 800927c:	b00b      	add	sp, #44	; 0x2c
 800927e:	bd90      	pop	{r4, r7, pc}
 8009280:	0800dd90 	.word	0x0800dd90
 8009284:	200016c4 	.word	0x200016c4

08009288 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b088      	sub	sp, #32
 800928c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800928e:	e03e      	b.n	800930e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009290:	4b28      	ldr	r3, [pc, #160]	; (8009334 <prvSwitchTimerLists+0xac>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800929a:	4b26      	ldr	r3, [pc, #152]	; (8009334 <prvSwitchTimerLists+0xac>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3304      	adds	r3, #4
 80092a8:	0018      	movs	r0, r3
 80092aa:	f7fe fb22 	bl	80078f2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	0010      	movs	r0, r2
 80092b6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d126      	bne.n	800930e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	18d3      	adds	r3, r2, r3
 80092c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d90e      	bls.n	80092f0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092de:	4b15      	ldr	r3, [pc, #84]	; (8009334 <prvSwitchTimerLists+0xac>)
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3304      	adds	r3, #4
 80092e6:	0019      	movs	r1, r3
 80092e8:	0010      	movs	r0, r2
 80092ea:	f7fe facc 	bl	8007886 <vListInsert>
 80092ee:	e00e      	b.n	800930e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	2300      	movs	r3, #0
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	2300      	movs	r3, #0
 80092fa:	2100      	movs	r1, #0
 80092fc:	f7ff fdce 	bl	8008e9c <xTimerGenericCommand>
 8009300:	0003      	movs	r3, r0
 8009302:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <prvSwitchTimerLists+0x86>
 800930a:	b672      	cpsid	i
 800930c:	e7fe      	b.n	800930c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800930e:	4b09      	ldr	r3, [pc, #36]	; (8009334 <prvSwitchTimerLists+0xac>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1bb      	bne.n	8009290 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009318:	4b06      	ldr	r3, [pc, #24]	; (8009334 <prvSwitchTimerLists+0xac>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800931e:	4b06      	ldr	r3, [pc, #24]	; (8009338 <prvSwitchTimerLists+0xb0>)
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	4b04      	ldr	r3, [pc, #16]	; (8009334 <prvSwitchTimerLists+0xac>)
 8009324:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8009326:	4b04      	ldr	r3, [pc, #16]	; (8009338 <prvSwitchTimerLists+0xb0>)
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	601a      	str	r2, [r3, #0]
}
 800932c:	46c0      	nop			; (mov r8, r8)
 800932e:	46bd      	mov	sp, r7
 8009330:	b006      	add	sp, #24
 8009332:	bd80      	pop	{r7, pc}
 8009334:	200016bc 	.word	0x200016bc
 8009338:	200016c0 	.word	0x200016c0

0800933c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009342:	f000 f8d5 	bl	80094f0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009346:	4b16      	ldr	r3, [pc, #88]	; (80093a0 <prvCheckForValidListAndQueue+0x64>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d123      	bne.n	8009396 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800934e:	4b15      	ldr	r3, [pc, #84]	; (80093a4 <prvCheckForValidListAndQueue+0x68>)
 8009350:	0018      	movs	r0, r3
 8009352:	f7fe fa4d 	bl	80077f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009356:	4b14      	ldr	r3, [pc, #80]	; (80093a8 <prvCheckForValidListAndQueue+0x6c>)
 8009358:	0018      	movs	r0, r3
 800935a:	f7fe fa49 	bl	80077f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800935e:	4b13      	ldr	r3, [pc, #76]	; (80093ac <prvCheckForValidListAndQueue+0x70>)
 8009360:	4a10      	ldr	r2, [pc, #64]	; (80093a4 <prvCheckForValidListAndQueue+0x68>)
 8009362:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009364:	4b12      	ldr	r3, [pc, #72]	; (80093b0 <prvCheckForValidListAndQueue+0x74>)
 8009366:	4a10      	ldr	r2, [pc, #64]	; (80093a8 <prvCheckForValidListAndQueue+0x6c>)
 8009368:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800936a:	4b12      	ldr	r3, [pc, #72]	; (80093b4 <prvCheckForValidListAndQueue+0x78>)
 800936c:	4a12      	ldr	r2, [pc, #72]	; (80093b8 <prvCheckForValidListAndQueue+0x7c>)
 800936e:	2100      	movs	r1, #0
 8009370:	9100      	str	r1, [sp, #0]
 8009372:	2110      	movs	r1, #16
 8009374:	200a      	movs	r0, #10
 8009376:	f7fe fb38 	bl	80079ea <xQueueGenericCreateStatic>
 800937a:	0002      	movs	r2, r0
 800937c:	4b08      	ldr	r3, [pc, #32]	; (80093a0 <prvCheckForValidListAndQueue+0x64>)
 800937e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009380:	4b07      	ldr	r3, [pc, #28]	; (80093a0 <prvCheckForValidListAndQueue+0x64>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d006      	beq.n	8009396 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009388:	4b05      	ldr	r3, [pc, #20]	; (80093a0 <prvCheckForValidListAndQueue+0x64>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a0b      	ldr	r2, [pc, #44]	; (80093bc <prvCheckForValidListAndQueue+0x80>)
 800938e:	0011      	movs	r1, r2
 8009390:	0018      	movs	r0, r3
 8009392:	f7fe fea3 	bl	80080dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009396:	f000 f8bd 	bl	8009514 <vPortExitCritical>
}
 800939a:	46c0      	nop			; (mov r8, r8)
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	200016c4 	.word	0x200016c4
 80093a4:	20001694 	.word	0x20001694
 80093a8:	200016a8 	.word	0x200016a8
 80093ac:	200016bc 	.word	0x200016bc
 80093b0:	200016c0 	.word	0x200016c0
 80093b4:	20001770 	.word	0x20001770
 80093b8:	200016d0 	.word	0x200016d0
 80093bc:	0800acbc 	.word	0x0800acbc

080093c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	3b04      	subs	r3, #4
 80093d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2280      	movs	r2, #128	; 0x80
 80093d6:	0452      	lsls	r2, r2, #17
 80093d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3b04      	subs	r3, #4
 80093de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3b04      	subs	r3, #4
 80093ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80093ec:	4a08      	ldr	r2, [pc, #32]	; (8009410 <pxPortInitialiseStack+0x50>)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3b14      	subs	r3, #20
 80093f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	3b20      	subs	r3, #32
 8009402:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009404:	68fb      	ldr	r3, [r7, #12]
}
 8009406:	0018      	movs	r0, r3
 8009408:	46bd      	mov	sp, r7
 800940a:	b004      	add	sp, #16
 800940c:	bd80      	pop	{r7, pc}
 800940e:	46c0      	nop			; (mov r8, r8)
 8009410:	08009415 	.word	0x08009415

08009414 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800941a:	2300      	movs	r3, #0
 800941c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800941e:	4b08      	ldr	r3, [pc, #32]	; (8009440 <prvTaskExitError+0x2c>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3301      	adds	r3, #1
 8009424:	d001      	beq.n	800942a <prvTaskExitError+0x16>
 8009426:	b672      	cpsid	i
 8009428:	e7fe      	b.n	8009428 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800942a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800942c:	46c0      	nop			; (mov r8, r8)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0fc      	beq.n	800942e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009434:	46c0      	nop			; (mov r8, r8)
 8009436:	46c0      	nop			; (mov r8, r8)
 8009438:	46bd      	mov	sp, r7
 800943a:	b002      	add	sp, #8
 800943c:	bd80      	pop	{r7, pc}
 800943e:	46c0      	nop			; (mov r8, r8)
 8009440:	20000020 	.word	0x20000020

08009444 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8009448:	46c0      	nop			; (mov r8, r8)
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
	...

08009450 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8009450:	4a0b      	ldr	r2, [pc, #44]	; (8009480 <pxCurrentTCBConst2>)
 8009452:	6813      	ldr	r3, [r2, #0]
 8009454:	6818      	ldr	r0, [r3, #0]
 8009456:	3020      	adds	r0, #32
 8009458:	f380 8809 	msr	PSP, r0
 800945c:	2002      	movs	r0, #2
 800945e:	f380 8814 	msr	CONTROL, r0
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8009468:	46ae      	mov	lr, r5
 800946a:	bc08      	pop	{r3}
 800946c:	bc04      	pop	{r2}
 800946e:	b662      	cpsie	i
 8009470:	4718      	bx	r3
 8009472:	46c0      	nop			; (mov r8, r8)
 8009474:	46c0      	nop			; (mov r8, r8)
 8009476:	46c0      	nop			; (mov r8, r8)
 8009478:	46c0      	nop			; (mov r8, r8)
 800947a:	46c0      	nop			; (mov r8, r8)
 800947c:	46c0      	nop			; (mov r8, r8)
 800947e:	46c0      	nop			; (mov r8, r8)

08009480 <pxCurrentTCBConst2>:
 8009480:	20001194 	.word	0x20001194
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8009484:	46c0      	nop			; (mov r8, r8)
 8009486:	46c0      	nop			; (mov r8, r8)

08009488 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800948c:	4b0e      	ldr	r3, [pc, #56]	; (80094c8 <xPortStartScheduler+0x40>)
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	4b0d      	ldr	r3, [pc, #52]	; (80094c8 <xPortStartScheduler+0x40>)
 8009492:	21ff      	movs	r1, #255	; 0xff
 8009494:	0409      	lsls	r1, r1, #16
 8009496:	430a      	orrs	r2, r1
 8009498:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800949a:	4b0b      	ldr	r3, [pc, #44]	; (80094c8 <xPortStartScheduler+0x40>)
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <xPortStartScheduler+0x40>)
 80094a0:	21ff      	movs	r1, #255	; 0xff
 80094a2:	0609      	lsls	r1, r1, #24
 80094a4:	430a      	orrs	r2, r1
 80094a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80094a8:	f000 f898 	bl	80095dc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094ac:	4b07      	ldr	r3, [pc, #28]	; (80094cc <xPortStartScheduler+0x44>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80094b2:	f7ff ffcd 	bl	8009450 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094b6:	f7ff f9b9 	bl	800882c <vTaskSwitchContext>
	prvTaskExitError();
 80094ba:	f7ff ffab 	bl	8009414 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	0018      	movs	r0, r3
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	46c0      	nop			; (mov r8, r8)
 80094c8:	e000ed20 	.word	0xe000ed20
 80094cc:	20000020 	.word	0x20000020

080094d0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80094d4:	4b05      	ldr	r3, [pc, #20]	; (80094ec <vPortYield+0x1c>)
 80094d6:	2280      	movs	r2, #128	; 0x80
 80094d8:	0552      	lsls	r2, r2, #21
 80094da:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80094dc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80094e0:	f3bf 8f6f 	isb	sy
}
 80094e4:	46c0      	nop			; (mov r8, r8)
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	46c0      	nop			; (mov r8, r8)
 80094ec:	e000ed04 	.word	0xe000ed04

080094f0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80094f4:	b672      	cpsid	i
    uxCriticalNesting++;
 80094f6:	4b06      	ldr	r3, [pc, #24]	; (8009510 <vPortEnterCritical+0x20>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	1c5a      	adds	r2, r3, #1
 80094fc:	4b04      	ldr	r3, [pc, #16]	; (8009510 <vPortEnterCritical+0x20>)
 80094fe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8009500:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009504:	f3bf 8f6f 	isb	sy
}
 8009508:	46c0      	nop			; (mov r8, r8)
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	46c0      	nop			; (mov r8, r8)
 8009510:	20000020 	.word	0x20000020

08009514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009518:	4b09      	ldr	r3, [pc, #36]	; (8009540 <vPortExitCritical+0x2c>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d101      	bne.n	8009524 <vPortExitCritical+0x10>
 8009520:	b672      	cpsid	i
 8009522:	e7fe      	b.n	8009522 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8009524:	4b06      	ldr	r3, [pc, #24]	; (8009540 <vPortExitCritical+0x2c>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	1e5a      	subs	r2, r3, #1
 800952a:	4b05      	ldr	r3, [pc, #20]	; (8009540 <vPortExitCritical+0x2c>)
 800952c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800952e:	4b04      	ldr	r3, [pc, #16]	; (8009540 <vPortExitCritical+0x2c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d100      	bne.n	8009538 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8009536:	b662      	cpsie	i
    }
}
 8009538:	46c0      	nop			; (mov r8, r8)
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	46c0      	nop			; (mov r8, r8)
 8009540:	20000020 	.word	0x20000020

08009544 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8009544:	f3ef 8010 	mrs	r0, PRIMASK
 8009548:	b672      	cpsid	i
 800954a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800954c:	46c0      	nop			; (mov r8, r8)
 800954e:	0018      	movs	r0, r3

08009550 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8009550:	f380 8810 	msr	PRIMASK, r0
 8009554:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8009556:	46c0      	nop			; (mov r8, r8)
	...

08009560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009560:	f3ef 8009 	mrs	r0, PSP
 8009564:	4b0e      	ldr	r3, [pc, #56]	; (80095a0 <pxCurrentTCBConst>)
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	3820      	subs	r0, #32
 800956a:	6010      	str	r0, [r2, #0]
 800956c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800956e:	4644      	mov	r4, r8
 8009570:	464d      	mov	r5, r9
 8009572:	4656      	mov	r6, sl
 8009574:	465f      	mov	r7, fp
 8009576:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8009578:	b508      	push	{r3, lr}
 800957a:	b672      	cpsid	i
 800957c:	f7ff f956 	bl	800882c <vTaskSwitchContext>
 8009580:	b662      	cpsie	i
 8009582:	bc0c      	pop	{r2, r3}
 8009584:	6811      	ldr	r1, [r2, #0]
 8009586:	6808      	ldr	r0, [r1, #0]
 8009588:	3010      	adds	r0, #16
 800958a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800958c:	46a0      	mov	r8, r4
 800958e:	46a9      	mov	r9, r5
 8009590:	46b2      	mov	sl, r6
 8009592:	46bb      	mov	fp, r7
 8009594:	f380 8809 	msr	PSP, r0
 8009598:	3820      	subs	r0, #32
 800959a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800959c:	4718      	bx	r3
 800959e:	46c0      	nop			; (mov r8, r8)

080095a0 <pxCurrentTCBConst>:
 80095a0:	20001194 	.word	0x20001194
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80095a4:	46c0      	nop			; (mov r8, r8)
 80095a6:	46c0      	nop			; (mov r8, r8)

080095a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80095ae:	f7ff ffc9 	bl	8009544 <ulSetInterruptMaskFromISR>
 80095b2:	0003      	movs	r3, r0
 80095b4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095b6:	f7ff f885 	bl	80086c4 <xTaskIncrementTick>
 80095ba:	1e03      	subs	r3, r0, #0
 80095bc:	d003      	beq.n	80095c6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80095be:	4b06      	ldr	r3, [pc, #24]	; (80095d8 <SysTick_Handler+0x30>)
 80095c0:	2280      	movs	r2, #128	; 0x80
 80095c2:	0552      	lsls	r2, r2, #21
 80095c4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	0018      	movs	r0, r3
 80095ca:	f7ff ffc1 	bl	8009550 <vClearInterruptMaskFromISR>
}
 80095ce:	46c0      	nop			; (mov r8, r8)
 80095d0:	46bd      	mov	sp, r7
 80095d2:	b002      	add	sp, #8
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	46c0      	nop			; (mov r8, r8)
 80095d8:	e000ed04 	.word	0xe000ed04

080095dc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80095e0:	4b0b      	ldr	r3, [pc, #44]	; (8009610 <prvSetupTimerInterrupt+0x34>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80095e6:	4b0b      	ldr	r3, [pc, #44]	; (8009614 <prvSetupTimerInterrupt+0x38>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095ec:	4b0a      	ldr	r3, [pc, #40]	; (8009618 <prvSetupTimerInterrupt+0x3c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	22fa      	movs	r2, #250	; 0xfa
 80095f2:	0091      	lsls	r1, r2, #2
 80095f4:	0018      	movs	r0, r3
 80095f6:	f7f6 fd91 	bl	800011c <__udivsi3>
 80095fa:	0003      	movs	r3, r0
 80095fc:	001a      	movs	r2, r3
 80095fe:	4b07      	ldr	r3, [pc, #28]	; (800961c <prvSetupTimerInterrupt+0x40>)
 8009600:	3a01      	subs	r2, #1
 8009602:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8009604:	4b02      	ldr	r3, [pc, #8]	; (8009610 <prvSetupTimerInterrupt+0x34>)
 8009606:	2207      	movs	r2, #7
 8009608:	601a      	str	r2, [r3, #0]
}
 800960a:	46c0      	nop			; (mov r8, r8)
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	e000e010 	.word	0xe000e010
 8009614:	e000e018 	.word	0xe000e018
 8009618:	20000018 	.word	0x20000018
 800961c:	e000e014 	.word	0xe000e014

08009620 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009628:	2300      	movs	r3, #0
 800962a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800962c:	f7fe ffa4 	bl	8008578 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009630:	4b49      	ldr	r3, [pc, #292]	; (8009758 <pvPortMalloc+0x138>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d101      	bne.n	800963c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009638:	f000 f8e0 	bl	80097fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800963c:	4b47      	ldr	r3, [pc, #284]	; (800975c <pvPortMalloc+0x13c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	4013      	ands	r3, r2
 8009644:	d000      	beq.n	8009648 <pvPortMalloc+0x28>
 8009646:	e079      	b.n	800973c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d012      	beq.n	8009674 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800964e:	2208      	movs	r2, #8
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	189b      	adds	r3, r3, r2
 8009654:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2207      	movs	r2, #7
 800965a:	4013      	ands	r3, r2
 800965c:	d00a      	beq.n	8009674 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2207      	movs	r2, #7
 8009662:	4393      	bics	r3, r2
 8009664:	3308      	adds	r3, #8
 8009666:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2207      	movs	r2, #7
 800966c:	4013      	ands	r3, r2
 800966e:	d001      	beq.n	8009674 <pvPortMalloc+0x54>
 8009670:	b672      	cpsid	i
 8009672:	e7fe      	b.n	8009672 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d060      	beq.n	800973c <pvPortMalloc+0x11c>
 800967a:	4b39      	ldr	r3, [pc, #228]	; (8009760 <pvPortMalloc+0x140>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	429a      	cmp	r2, r3
 8009682:	d85b      	bhi.n	800973c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009684:	4b37      	ldr	r3, [pc, #220]	; (8009764 <pvPortMalloc+0x144>)
 8009686:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8009688:	4b36      	ldr	r3, [pc, #216]	; (8009764 <pvPortMalloc+0x144>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800968e:	e004      	b.n	800969a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d903      	bls.n	80096ac <pvPortMalloc+0x8c>
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1f1      	bne.n	8009690 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096ac:	4b2a      	ldr	r3, [pc, #168]	; (8009758 <pvPortMalloc+0x138>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	697a      	ldr	r2, [r7, #20]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d042      	beq.n	800973c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2208      	movs	r2, #8
 80096bc:	189b      	adds	r3, r3, r2
 80096be:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	685a      	ldr	r2, [r3, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	1ad2      	subs	r2, r2, r3
 80096d0:	2308      	movs	r3, #8
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d916      	bls.n	8009706 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	18d3      	adds	r3, r2, r3
 80096de:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	2207      	movs	r2, #7
 80096e4:	4013      	ands	r3, r2
 80096e6:	d001      	beq.n	80096ec <pvPortMalloc+0xcc>
 80096e8:	b672      	cpsid	i
 80096ea:	e7fe      	b.n	80096ea <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	1ad2      	subs	r2, r2, r3
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	0018      	movs	r0, r3
 8009702:	f000 f8db 	bl	80098bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009706:	4b16      	ldr	r3, [pc, #88]	; (8009760 <pvPortMalloc+0x140>)
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	1ad2      	subs	r2, r2, r3
 8009710:	4b13      	ldr	r3, [pc, #76]	; (8009760 <pvPortMalloc+0x140>)
 8009712:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009714:	4b12      	ldr	r3, [pc, #72]	; (8009760 <pvPortMalloc+0x140>)
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	4b13      	ldr	r3, [pc, #76]	; (8009768 <pvPortMalloc+0x148>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	429a      	cmp	r2, r3
 800971e:	d203      	bcs.n	8009728 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009720:	4b0f      	ldr	r3, [pc, #60]	; (8009760 <pvPortMalloc+0x140>)
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	4b10      	ldr	r3, [pc, #64]	; (8009768 <pvPortMalloc+0x148>)
 8009726:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	4b0b      	ldr	r3, [pc, #44]	; (800975c <pvPortMalloc+0x13c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	431a      	orrs	r2, r3
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	2200      	movs	r2, #0
 800973a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800973c:	f7fe ff28 	bl	8008590 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2207      	movs	r2, #7
 8009744:	4013      	ands	r3, r2
 8009746:	d001      	beq.n	800974c <pvPortMalloc+0x12c>
 8009748:	b672      	cpsid	i
 800974a:	e7fe      	b.n	800974a <pvPortMalloc+0x12a>
	return pvReturn;
 800974c:	68fb      	ldr	r3, [r7, #12]
}
 800974e:	0018      	movs	r0, r3
 8009750:	46bd      	mov	sp, r7
 8009752:	b006      	add	sp, #24
 8009754:	bd80      	pop	{r7, pc}
 8009756:	46c0      	nop			; (mov r8, r8)
 8009758:	200023c8 	.word	0x200023c8
 800975c:	200023d4 	.word	0x200023d4
 8009760:	200023cc 	.word	0x200023cc
 8009764:	200023c0 	.word	0x200023c0
 8009768:	200023d0 	.word	0x200023d0

0800976c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d035      	beq.n	80097ea <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800977e:	2308      	movs	r3, #8
 8009780:	425b      	negs	r3, r3
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	18d3      	adds	r3, r2, r3
 8009786:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	685a      	ldr	r2, [r3, #4]
 8009790:	4b18      	ldr	r3, [pc, #96]	; (80097f4 <vPortFree+0x88>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4013      	ands	r3, r2
 8009796:	d101      	bne.n	800979c <vPortFree+0x30>
 8009798:	b672      	cpsid	i
 800979a:	e7fe      	b.n	800979a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <vPortFree+0x3c>
 80097a4:	b672      	cpsid	i
 80097a6:	e7fe      	b.n	80097a6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	4b11      	ldr	r3, [pc, #68]	; (80097f4 <vPortFree+0x88>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4013      	ands	r3, r2
 80097b2:	d01a      	beq.n	80097ea <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d116      	bne.n	80097ea <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	4b0c      	ldr	r3, [pc, #48]	; (80097f4 <vPortFree+0x88>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	43db      	mvns	r3, r3
 80097c6:	401a      	ands	r2, r3
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097cc:	f7fe fed4 	bl	8008578 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	4b08      	ldr	r3, [pc, #32]	; (80097f8 <vPortFree+0x8c>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	18d2      	adds	r2, r2, r3
 80097da:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <vPortFree+0x8c>)
 80097dc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	0018      	movs	r0, r3
 80097e2:	f000 f86b 	bl	80098bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80097e6:	f7fe fed3 	bl	8008590 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80097ea:	46c0      	nop			; (mov r8, r8)
 80097ec:	46bd      	mov	sp, r7
 80097ee:	b004      	add	sp, #16
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	46c0      	nop			; (mov r8, r8)
 80097f4:	200023d4 	.word	0x200023d4
 80097f8:	200023cc 	.word	0x200023cc

080097fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009802:	23c0      	movs	r3, #192	; 0xc0
 8009804:	011b      	lsls	r3, r3, #4
 8009806:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009808:	4b26      	ldr	r3, [pc, #152]	; (80098a4 <prvHeapInit+0xa8>)
 800980a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2207      	movs	r2, #7
 8009810:	4013      	ands	r3, r2
 8009812:	d00c      	beq.n	800982e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	3307      	adds	r3, #7
 8009818:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2207      	movs	r2, #7
 800981e:	4393      	bics	r3, r2
 8009820:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	1ad2      	subs	r2, r2, r3
 8009828:	4b1e      	ldr	r3, [pc, #120]	; (80098a4 <prvHeapInit+0xa8>)
 800982a:	18d3      	adds	r3, r2, r3
 800982c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009832:	4b1d      	ldr	r3, [pc, #116]	; (80098a8 <prvHeapInit+0xac>)
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009838:	4b1b      	ldr	r3, [pc, #108]	; (80098a8 <prvHeapInit+0xac>)
 800983a:	2200      	movs	r2, #0
 800983c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	18d3      	adds	r3, r2, r3
 8009844:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009846:	2208      	movs	r2, #8
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	1a9b      	subs	r3, r3, r2
 800984c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2207      	movs	r2, #7
 8009852:	4393      	bics	r3, r2
 8009854:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	4b14      	ldr	r3, [pc, #80]	; (80098ac <prvHeapInit+0xb0>)
 800985a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800985c:	4b13      	ldr	r3, [pc, #76]	; (80098ac <prvHeapInit+0xb0>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2200      	movs	r2, #0
 8009862:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009864:	4b11      	ldr	r3, [pc, #68]	; (80098ac <prvHeapInit+0xb0>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	1ad2      	subs	r2, r2, r3
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800987a:	4b0c      	ldr	r3, [pc, #48]	; (80098ac <prvHeapInit+0xb0>)
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	4b0a      	ldr	r3, [pc, #40]	; (80098b0 <prvHeapInit+0xb4>)
 8009888:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	4b09      	ldr	r3, [pc, #36]	; (80098b4 <prvHeapInit+0xb8>)
 8009890:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009892:	4b09      	ldr	r3, [pc, #36]	; (80098b8 <prvHeapInit+0xbc>)
 8009894:	2280      	movs	r2, #128	; 0x80
 8009896:	0612      	lsls	r2, r2, #24
 8009898:	601a      	str	r2, [r3, #0]
}
 800989a:	46c0      	nop			; (mov r8, r8)
 800989c:	46bd      	mov	sp, r7
 800989e:	b004      	add	sp, #16
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	46c0      	nop			; (mov r8, r8)
 80098a4:	200017c0 	.word	0x200017c0
 80098a8:	200023c0 	.word	0x200023c0
 80098ac:	200023c8 	.word	0x200023c8
 80098b0:	200023d0 	.word	0x200023d0
 80098b4:	200023cc 	.word	0x200023cc
 80098b8:	200023d4 	.word	0x200023d4

080098bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098c4:	4b27      	ldr	r3, [pc, #156]	; (8009964 <prvInsertBlockIntoFreeList+0xa8>)
 80098c6:	60fb      	str	r3, [r7, #12]
 80098c8:	e002      	b.n	80098d0 <prvInsertBlockIntoFreeList+0x14>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d8f7      	bhi.n	80098ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	18d3      	adds	r3, r2, r3
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d108      	bne.n	80098fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	18d2      	adds	r2, r2, r3
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	18d2      	adds	r2, r2, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	429a      	cmp	r2, r3
 8009910:	d118      	bne.n	8009944 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	4b14      	ldr	r3, [pc, #80]	; (8009968 <prvInsertBlockIntoFreeList+0xac>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	429a      	cmp	r2, r3
 800991c:	d00d      	beq.n	800993a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685a      	ldr	r2, [r3, #4]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	18d2      	adds	r2, r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	e008      	b.n	800994c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800993a:	4b0b      	ldr	r3, [pc, #44]	; (8009968 <prvInsertBlockIntoFreeList+0xac>)
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	601a      	str	r2, [r3, #0]
 8009942:	e003      	b.n	800994c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	429a      	cmp	r2, r3
 8009952:	d002      	beq.n	800995a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800995a:	46c0      	nop			; (mov r8, r8)
 800995c:	46bd      	mov	sp, r7
 800995e:	b004      	add	sp, #16
 8009960:	bd80      	pop	{r7, pc}
 8009962:	46c0      	nop			; (mov r8, r8)
 8009964:	200023c0 	.word	0x200023c0
 8009968:	200023c8 	.word	0x200023c8

0800996c <malloc>:
 800996c:	b510      	push	{r4, lr}
 800996e:	4b03      	ldr	r3, [pc, #12]	; (800997c <malloc+0x10>)
 8009970:	0001      	movs	r1, r0
 8009972:	6818      	ldr	r0, [r3, #0]
 8009974:	f000 f826 	bl	80099c4 <_malloc_r>
 8009978:	bd10      	pop	{r4, pc}
 800997a:	46c0      	nop			; (mov r8, r8)
 800997c:	2000007c 	.word	0x2000007c

08009980 <sbrk_aligned>:
 8009980:	b570      	push	{r4, r5, r6, lr}
 8009982:	4e0f      	ldr	r6, [pc, #60]	; (80099c0 <sbrk_aligned+0x40>)
 8009984:	000d      	movs	r5, r1
 8009986:	6831      	ldr	r1, [r6, #0]
 8009988:	0004      	movs	r4, r0
 800998a:	2900      	cmp	r1, #0
 800998c:	d102      	bne.n	8009994 <sbrk_aligned+0x14>
 800998e:	f000 f9b5 	bl	8009cfc <_sbrk_r>
 8009992:	6030      	str	r0, [r6, #0]
 8009994:	0029      	movs	r1, r5
 8009996:	0020      	movs	r0, r4
 8009998:	f000 f9b0 	bl	8009cfc <_sbrk_r>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	d00a      	beq.n	80099b6 <sbrk_aligned+0x36>
 80099a0:	2303      	movs	r3, #3
 80099a2:	1cc5      	adds	r5, r0, #3
 80099a4:	439d      	bics	r5, r3
 80099a6:	42a8      	cmp	r0, r5
 80099a8:	d007      	beq.n	80099ba <sbrk_aligned+0x3a>
 80099aa:	1a29      	subs	r1, r5, r0
 80099ac:	0020      	movs	r0, r4
 80099ae:	f000 f9a5 	bl	8009cfc <_sbrk_r>
 80099b2:	3001      	adds	r0, #1
 80099b4:	d101      	bne.n	80099ba <sbrk_aligned+0x3a>
 80099b6:	2501      	movs	r5, #1
 80099b8:	426d      	negs	r5, r5
 80099ba:	0028      	movs	r0, r5
 80099bc:	bd70      	pop	{r4, r5, r6, pc}
 80099be:	46c0      	nop			; (mov r8, r8)
 80099c0:	200023dc 	.word	0x200023dc

080099c4 <_malloc_r>:
 80099c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099c6:	2203      	movs	r2, #3
 80099c8:	1ccb      	adds	r3, r1, #3
 80099ca:	4393      	bics	r3, r2
 80099cc:	3308      	adds	r3, #8
 80099ce:	0006      	movs	r6, r0
 80099d0:	001f      	movs	r7, r3
 80099d2:	2b0c      	cmp	r3, #12
 80099d4:	d238      	bcs.n	8009a48 <_malloc_r+0x84>
 80099d6:	270c      	movs	r7, #12
 80099d8:	42b9      	cmp	r1, r7
 80099da:	d837      	bhi.n	8009a4c <_malloc_r+0x88>
 80099dc:	0030      	movs	r0, r6
 80099de:	f000 f873 	bl	8009ac8 <__malloc_lock>
 80099e2:	4b38      	ldr	r3, [pc, #224]	; (8009ac4 <_malloc_r+0x100>)
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	001c      	movs	r4, r3
 80099ea:	2c00      	cmp	r4, #0
 80099ec:	d133      	bne.n	8009a56 <_malloc_r+0x92>
 80099ee:	0039      	movs	r1, r7
 80099f0:	0030      	movs	r0, r6
 80099f2:	f7ff ffc5 	bl	8009980 <sbrk_aligned>
 80099f6:	0004      	movs	r4, r0
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d15e      	bne.n	8009aba <_malloc_r+0xf6>
 80099fc:	9b00      	ldr	r3, [sp, #0]
 80099fe:	681c      	ldr	r4, [r3, #0]
 8009a00:	0025      	movs	r5, r4
 8009a02:	2d00      	cmp	r5, #0
 8009a04:	d14e      	bne.n	8009aa4 <_malloc_r+0xe0>
 8009a06:	2c00      	cmp	r4, #0
 8009a08:	d051      	beq.n	8009aae <_malloc_r+0xea>
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	0029      	movs	r1, r5
 8009a0e:	18e3      	adds	r3, r4, r3
 8009a10:	0030      	movs	r0, r6
 8009a12:	9301      	str	r3, [sp, #4]
 8009a14:	f000 f972 	bl	8009cfc <_sbrk_r>
 8009a18:	9b01      	ldr	r3, [sp, #4]
 8009a1a:	4283      	cmp	r3, r0
 8009a1c:	d147      	bne.n	8009aae <_malloc_r+0xea>
 8009a1e:	6823      	ldr	r3, [r4, #0]
 8009a20:	0030      	movs	r0, r6
 8009a22:	1aff      	subs	r7, r7, r3
 8009a24:	0039      	movs	r1, r7
 8009a26:	f7ff ffab 	bl	8009980 <sbrk_aligned>
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	d03f      	beq.n	8009aae <_malloc_r+0xea>
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	19db      	adds	r3, r3, r7
 8009a32:	6023      	str	r3, [r4, #0]
 8009a34:	9b00      	ldr	r3, [sp, #0]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d040      	beq.n	8009abe <_malloc_r+0xfa>
 8009a3c:	685a      	ldr	r2, [r3, #4]
 8009a3e:	42a2      	cmp	r2, r4
 8009a40:	d133      	bne.n	8009aaa <_malloc_r+0xe6>
 8009a42:	2200      	movs	r2, #0
 8009a44:	605a      	str	r2, [r3, #4]
 8009a46:	e014      	b.n	8009a72 <_malloc_r+0xae>
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	dac5      	bge.n	80099d8 <_malloc_r+0x14>
 8009a4c:	230c      	movs	r3, #12
 8009a4e:	2500      	movs	r5, #0
 8009a50:	6033      	str	r3, [r6, #0]
 8009a52:	0028      	movs	r0, r5
 8009a54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a56:	6821      	ldr	r1, [r4, #0]
 8009a58:	1bc9      	subs	r1, r1, r7
 8009a5a:	d420      	bmi.n	8009a9e <_malloc_r+0xda>
 8009a5c:	290b      	cmp	r1, #11
 8009a5e:	d918      	bls.n	8009a92 <_malloc_r+0xce>
 8009a60:	19e2      	adds	r2, r4, r7
 8009a62:	6027      	str	r7, [r4, #0]
 8009a64:	42a3      	cmp	r3, r4
 8009a66:	d112      	bne.n	8009a8e <_malloc_r+0xca>
 8009a68:	9b00      	ldr	r3, [sp, #0]
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	6863      	ldr	r3, [r4, #4]
 8009a6e:	6011      	str	r1, [r2, #0]
 8009a70:	6053      	str	r3, [r2, #4]
 8009a72:	0030      	movs	r0, r6
 8009a74:	0025      	movs	r5, r4
 8009a76:	f000 f82f 	bl	8009ad8 <__malloc_unlock>
 8009a7a:	2207      	movs	r2, #7
 8009a7c:	350b      	adds	r5, #11
 8009a7e:	1d23      	adds	r3, r4, #4
 8009a80:	4395      	bics	r5, r2
 8009a82:	1aea      	subs	r2, r5, r3
 8009a84:	429d      	cmp	r5, r3
 8009a86:	d0e4      	beq.n	8009a52 <_malloc_r+0x8e>
 8009a88:	1b5b      	subs	r3, r3, r5
 8009a8a:	50a3      	str	r3, [r4, r2]
 8009a8c:	e7e1      	b.n	8009a52 <_malloc_r+0x8e>
 8009a8e:	605a      	str	r2, [r3, #4]
 8009a90:	e7ec      	b.n	8009a6c <_malloc_r+0xa8>
 8009a92:	6862      	ldr	r2, [r4, #4]
 8009a94:	42a3      	cmp	r3, r4
 8009a96:	d1d5      	bne.n	8009a44 <_malloc_r+0x80>
 8009a98:	9b00      	ldr	r3, [sp, #0]
 8009a9a:	601a      	str	r2, [r3, #0]
 8009a9c:	e7e9      	b.n	8009a72 <_malloc_r+0xae>
 8009a9e:	0023      	movs	r3, r4
 8009aa0:	6864      	ldr	r4, [r4, #4]
 8009aa2:	e7a2      	b.n	80099ea <_malloc_r+0x26>
 8009aa4:	002c      	movs	r4, r5
 8009aa6:	686d      	ldr	r5, [r5, #4]
 8009aa8:	e7ab      	b.n	8009a02 <_malloc_r+0x3e>
 8009aaa:	0013      	movs	r3, r2
 8009aac:	e7c4      	b.n	8009a38 <_malloc_r+0x74>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	0030      	movs	r0, r6
 8009ab2:	6033      	str	r3, [r6, #0]
 8009ab4:	f000 f810 	bl	8009ad8 <__malloc_unlock>
 8009ab8:	e7cb      	b.n	8009a52 <_malloc_r+0x8e>
 8009aba:	6027      	str	r7, [r4, #0]
 8009abc:	e7d9      	b.n	8009a72 <_malloc_r+0xae>
 8009abe:	605b      	str	r3, [r3, #4]
 8009ac0:	deff      	udf	#255	; 0xff
 8009ac2:	46c0      	nop			; (mov r8, r8)
 8009ac4:	200023d8 	.word	0x200023d8

08009ac8 <__malloc_lock>:
 8009ac8:	b510      	push	{r4, lr}
 8009aca:	4802      	ldr	r0, [pc, #8]	; (8009ad4 <__malloc_lock+0xc>)
 8009acc:	f000 f953 	bl	8009d76 <__retarget_lock_acquire_recursive>
 8009ad0:	bd10      	pop	{r4, pc}
 8009ad2:	46c0      	nop			; (mov r8, r8)
 8009ad4:	2000251c 	.word	0x2000251c

08009ad8 <__malloc_unlock>:
 8009ad8:	b510      	push	{r4, lr}
 8009ada:	4802      	ldr	r0, [pc, #8]	; (8009ae4 <__malloc_unlock+0xc>)
 8009adc:	f000 f94c 	bl	8009d78 <__retarget_lock_release_recursive>
 8009ae0:	bd10      	pop	{r4, pc}
 8009ae2:	46c0      	nop			; (mov r8, r8)
 8009ae4:	2000251c 	.word	0x2000251c

08009ae8 <rand>:
 8009ae8:	4b16      	ldr	r3, [pc, #88]	; (8009b44 <rand+0x5c>)
 8009aea:	b510      	push	{r4, lr}
 8009aec:	681c      	ldr	r4, [r3, #0]
 8009aee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d116      	bne.n	8009b22 <rand+0x3a>
 8009af4:	2018      	movs	r0, #24
 8009af6:	f7ff ff39 	bl	800996c <malloc>
 8009afa:	1e02      	subs	r2, r0, #0
 8009afc:	6320      	str	r0, [r4, #48]	; 0x30
 8009afe:	d104      	bne.n	8009b0a <rand+0x22>
 8009b00:	2152      	movs	r1, #82	; 0x52
 8009b02:	4b11      	ldr	r3, [pc, #68]	; (8009b48 <rand+0x60>)
 8009b04:	4811      	ldr	r0, [pc, #68]	; (8009b4c <rand+0x64>)
 8009b06:	f000 f941 	bl	8009d8c <__assert_func>
 8009b0a:	4b11      	ldr	r3, [pc, #68]	; (8009b50 <rand+0x68>)
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	6003      	str	r3, [r0, #0]
 8009b10:	4b10      	ldr	r3, [pc, #64]	; (8009b54 <rand+0x6c>)
 8009b12:	6043      	str	r3, [r0, #4]
 8009b14:	4b10      	ldr	r3, [pc, #64]	; (8009b58 <rand+0x70>)
 8009b16:	6083      	str	r3, [r0, #8]
 8009b18:	230b      	movs	r3, #11
 8009b1a:	8183      	strh	r3, [r0, #12]
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	6110      	str	r0, [r2, #16]
 8009b20:	6151      	str	r1, [r2, #20]
 8009b22:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8009b24:	4a0d      	ldr	r2, [pc, #52]	; (8009b5c <rand+0x74>)
 8009b26:	6920      	ldr	r0, [r4, #16]
 8009b28:	6961      	ldr	r1, [r4, #20]
 8009b2a:	4b0d      	ldr	r3, [pc, #52]	; (8009b60 <rand+0x78>)
 8009b2c:	f7f6 fc6c 	bl	8000408 <__aeabi_lmul>
 8009b30:	2201      	movs	r2, #1
 8009b32:	2300      	movs	r3, #0
 8009b34:	1880      	adds	r0, r0, r2
 8009b36:	4159      	adcs	r1, r3
 8009b38:	6120      	str	r0, [r4, #16]
 8009b3a:	6161      	str	r1, [r4, #20]
 8009b3c:	0048      	lsls	r0, r1, #1
 8009b3e:	0840      	lsrs	r0, r0, #1
 8009b40:	bd10      	pop	{r4, pc}
 8009b42:	46c0      	nop			; (mov r8, r8)
 8009b44:	2000007c 	.word	0x2000007c
 8009b48:	0800ddb8 	.word	0x0800ddb8
 8009b4c:	0800ddcf 	.word	0x0800ddcf
 8009b50:	abcd330e 	.word	0xabcd330e
 8009b54:	e66d1234 	.word	0xe66d1234
 8009b58:	0005deec 	.word	0x0005deec
 8009b5c:	4c957f2d 	.word	0x4c957f2d
 8009b60:	5851f42d 	.word	0x5851f42d

08009b64 <std>:
 8009b64:	2300      	movs	r3, #0
 8009b66:	b510      	push	{r4, lr}
 8009b68:	0004      	movs	r4, r0
 8009b6a:	6003      	str	r3, [r0, #0]
 8009b6c:	6043      	str	r3, [r0, #4]
 8009b6e:	6083      	str	r3, [r0, #8]
 8009b70:	8181      	strh	r1, [r0, #12]
 8009b72:	6643      	str	r3, [r0, #100]	; 0x64
 8009b74:	81c2      	strh	r2, [r0, #14]
 8009b76:	6103      	str	r3, [r0, #16]
 8009b78:	6143      	str	r3, [r0, #20]
 8009b7a:	6183      	str	r3, [r0, #24]
 8009b7c:	0019      	movs	r1, r3
 8009b7e:	2208      	movs	r2, #8
 8009b80:	305c      	adds	r0, #92	; 0x5c
 8009b82:	f000 f8b3 	bl	8009cec <memset>
 8009b86:	4b0b      	ldr	r3, [pc, #44]	; (8009bb4 <std+0x50>)
 8009b88:	6224      	str	r4, [r4, #32]
 8009b8a:	6263      	str	r3, [r4, #36]	; 0x24
 8009b8c:	4b0a      	ldr	r3, [pc, #40]	; (8009bb8 <std+0x54>)
 8009b8e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b90:	4b0a      	ldr	r3, [pc, #40]	; (8009bbc <std+0x58>)
 8009b92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b94:	4b0a      	ldr	r3, [pc, #40]	; (8009bc0 <std+0x5c>)
 8009b96:	6323      	str	r3, [r4, #48]	; 0x30
 8009b98:	4b0a      	ldr	r3, [pc, #40]	; (8009bc4 <std+0x60>)
 8009b9a:	429c      	cmp	r4, r3
 8009b9c:	d005      	beq.n	8009baa <std+0x46>
 8009b9e:	4b0a      	ldr	r3, [pc, #40]	; (8009bc8 <std+0x64>)
 8009ba0:	429c      	cmp	r4, r3
 8009ba2:	d002      	beq.n	8009baa <std+0x46>
 8009ba4:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <std+0x68>)
 8009ba6:	429c      	cmp	r4, r3
 8009ba8:	d103      	bne.n	8009bb2 <std+0x4e>
 8009baa:	0020      	movs	r0, r4
 8009bac:	3058      	adds	r0, #88	; 0x58
 8009bae:	f000 f8e1 	bl	8009d74 <__retarget_lock_init_recursive>
 8009bb2:	bd10      	pop	{r4, pc}
 8009bb4:	08009fc9 	.word	0x08009fc9
 8009bb8:	08009ff1 	.word	0x08009ff1
 8009bbc:	0800a029 	.word	0x0800a029
 8009bc0:	0800a055 	.word	0x0800a055
 8009bc4:	200023e0 	.word	0x200023e0
 8009bc8:	20002448 	.word	0x20002448
 8009bcc:	200024b0 	.word	0x200024b0

08009bd0 <stdio_exit_handler>:
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	4a03      	ldr	r2, [pc, #12]	; (8009be0 <stdio_exit_handler+0x10>)
 8009bd4:	4903      	ldr	r1, [pc, #12]	; (8009be4 <stdio_exit_handler+0x14>)
 8009bd6:	4804      	ldr	r0, [pc, #16]	; (8009be8 <stdio_exit_handler+0x18>)
 8009bd8:	f000 f86c 	bl	8009cb4 <_fwalk_sglue>
 8009bdc:	bd10      	pop	{r4, pc}
 8009bde:	46c0      	nop			; (mov r8, r8)
 8009be0:	20000024 	.word	0x20000024
 8009be4:	08009f71 	.word	0x08009f71
 8009be8:	20000030 	.word	0x20000030

08009bec <cleanup_stdio>:
 8009bec:	6841      	ldr	r1, [r0, #4]
 8009bee:	4b0b      	ldr	r3, [pc, #44]	; (8009c1c <cleanup_stdio+0x30>)
 8009bf0:	b510      	push	{r4, lr}
 8009bf2:	0004      	movs	r4, r0
 8009bf4:	4299      	cmp	r1, r3
 8009bf6:	d001      	beq.n	8009bfc <cleanup_stdio+0x10>
 8009bf8:	f000 f9ba 	bl	8009f70 <_fflush_r>
 8009bfc:	68a1      	ldr	r1, [r4, #8]
 8009bfe:	4b08      	ldr	r3, [pc, #32]	; (8009c20 <cleanup_stdio+0x34>)
 8009c00:	4299      	cmp	r1, r3
 8009c02:	d002      	beq.n	8009c0a <cleanup_stdio+0x1e>
 8009c04:	0020      	movs	r0, r4
 8009c06:	f000 f9b3 	bl	8009f70 <_fflush_r>
 8009c0a:	68e1      	ldr	r1, [r4, #12]
 8009c0c:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <cleanup_stdio+0x38>)
 8009c0e:	4299      	cmp	r1, r3
 8009c10:	d002      	beq.n	8009c18 <cleanup_stdio+0x2c>
 8009c12:	0020      	movs	r0, r4
 8009c14:	f000 f9ac 	bl	8009f70 <_fflush_r>
 8009c18:	bd10      	pop	{r4, pc}
 8009c1a:	46c0      	nop			; (mov r8, r8)
 8009c1c:	200023e0 	.word	0x200023e0
 8009c20:	20002448 	.word	0x20002448
 8009c24:	200024b0 	.word	0x200024b0

08009c28 <global_stdio_init.part.0>:
 8009c28:	b510      	push	{r4, lr}
 8009c2a:	4b09      	ldr	r3, [pc, #36]	; (8009c50 <global_stdio_init.part.0+0x28>)
 8009c2c:	4a09      	ldr	r2, [pc, #36]	; (8009c54 <global_stdio_init.part.0+0x2c>)
 8009c2e:	2104      	movs	r1, #4
 8009c30:	601a      	str	r2, [r3, #0]
 8009c32:	4809      	ldr	r0, [pc, #36]	; (8009c58 <global_stdio_init.part.0+0x30>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	f7ff ff95 	bl	8009b64 <std>
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	2109      	movs	r1, #9
 8009c3e:	4807      	ldr	r0, [pc, #28]	; (8009c5c <global_stdio_init.part.0+0x34>)
 8009c40:	f7ff ff90 	bl	8009b64 <std>
 8009c44:	2202      	movs	r2, #2
 8009c46:	2112      	movs	r1, #18
 8009c48:	4805      	ldr	r0, [pc, #20]	; (8009c60 <global_stdio_init.part.0+0x38>)
 8009c4a:	f7ff ff8b 	bl	8009b64 <std>
 8009c4e:	bd10      	pop	{r4, pc}
 8009c50:	20002518 	.word	0x20002518
 8009c54:	08009bd1 	.word	0x08009bd1
 8009c58:	200023e0 	.word	0x200023e0
 8009c5c:	20002448 	.word	0x20002448
 8009c60:	200024b0 	.word	0x200024b0

08009c64 <__sfp_lock_acquire>:
 8009c64:	b510      	push	{r4, lr}
 8009c66:	4802      	ldr	r0, [pc, #8]	; (8009c70 <__sfp_lock_acquire+0xc>)
 8009c68:	f000 f885 	bl	8009d76 <__retarget_lock_acquire_recursive>
 8009c6c:	bd10      	pop	{r4, pc}
 8009c6e:	46c0      	nop			; (mov r8, r8)
 8009c70:	2000251d 	.word	0x2000251d

08009c74 <__sfp_lock_release>:
 8009c74:	b510      	push	{r4, lr}
 8009c76:	4802      	ldr	r0, [pc, #8]	; (8009c80 <__sfp_lock_release+0xc>)
 8009c78:	f000 f87e 	bl	8009d78 <__retarget_lock_release_recursive>
 8009c7c:	bd10      	pop	{r4, pc}
 8009c7e:	46c0      	nop			; (mov r8, r8)
 8009c80:	2000251d 	.word	0x2000251d

08009c84 <__sinit>:
 8009c84:	b510      	push	{r4, lr}
 8009c86:	0004      	movs	r4, r0
 8009c88:	f7ff ffec 	bl	8009c64 <__sfp_lock_acquire>
 8009c8c:	6a23      	ldr	r3, [r4, #32]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d002      	beq.n	8009c98 <__sinit+0x14>
 8009c92:	f7ff ffef 	bl	8009c74 <__sfp_lock_release>
 8009c96:	bd10      	pop	{r4, pc}
 8009c98:	4b04      	ldr	r3, [pc, #16]	; (8009cac <__sinit+0x28>)
 8009c9a:	6223      	str	r3, [r4, #32]
 8009c9c:	4b04      	ldr	r3, [pc, #16]	; (8009cb0 <__sinit+0x2c>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1f6      	bne.n	8009c92 <__sinit+0xe>
 8009ca4:	f7ff ffc0 	bl	8009c28 <global_stdio_init.part.0>
 8009ca8:	e7f3      	b.n	8009c92 <__sinit+0xe>
 8009caa:	46c0      	nop			; (mov r8, r8)
 8009cac:	08009bed 	.word	0x08009bed
 8009cb0:	20002518 	.word	0x20002518

08009cb4 <_fwalk_sglue>:
 8009cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cb6:	0014      	movs	r4, r2
 8009cb8:	2600      	movs	r6, #0
 8009cba:	9000      	str	r0, [sp, #0]
 8009cbc:	9101      	str	r1, [sp, #4]
 8009cbe:	68a5      	ldr	r5, [r4, #8]
 8009cc0:	6867      	ldr	r7, [r4, #4]
 8009cc2:	3f01      	subs	r7, #1
 8009cc4:	d504      	bpl.n	8009cd0 <_fwalk_sglue+0x1c>
 8009cc6:	6824      	ldr	r4, [r4, #0]
 8009cc8:	2c00      	cmp	r4, #0
 8009cca:	d1f8      	bne.n	8009cbe <_fwalk_sglue+0xa>
 8009ccc:	0030      	movs	r0, r6
 8009cce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cd0:	89ab      	ldrh	r3, [r5, #12]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d908      	bls.n	8009ce8 <_fwalk_sglue+0x34>
 8009cd6:	220e      	movs	r2, #14
 8009cd8:	5eab      	ldrsh	r3, [r5, r2]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	d004      	beq.n	8009ce8 <_fwalk_sglue+0x34>
 8009cde:	0029      	movs	r1, r5
 8009ce0:	9800      	ldr	r0, [sp, #0]
 8009ce2:	9b01      	ldr	r3, [sp, #4]
 8009ce4:	4798      	blx	r3
 8009ce6:	4306      	orrs	r6, r0
 8009ce8:	3568      	adds	r5, #104	; 0x68
 8009cea:	e7ea      	b.n	8009cc2 <_fwalk_sglue+0xe>

08009cec <memset>:
 8009cec:	0003      	movs	r3, r0
 8009cee:	1882      	adds	r2, r0, r2
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d100      	bne.n	8009cf6 <memset+0xa>
 8009cf4:	4770      	bx	lr
 8009cf6:	7019      	strb	r1, [r3, #0]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	e7f9      	b.n	8009cf0 <memset+0x4>

08009cfc <_sbrk_r>:
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	b570      	push	{r4, r5, r6, lr}
 8009d00:	4d06      	ldr	r5, [pc, #24]	; (8009d1c <_sbrk_r+0x20>)
 8009d02:	0004      	movs	r4, r0
 8009d04:	0008      	movs	r0, r1
 8009d06:	602b      	str	r3, [r5, #0]
 8009d08:	f7fa ff44 	bl	8004b94 <_sbrk>
 8009d0c:	1c43      	adds	r3, r0, #1
 8009d0e:	d103      	bne.n	8009d18 <_sbrk_r+0x1c>
 8009d10:	682b      	ldr	r3, [r5, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d000      	beq.n	8009d18 <_sbrk_r+0x1c>
 8009d16:	6023      	str	r3, [r4, #0]
 8009d18:	bd70      	pop	{r4, r5, r6, pc}
 8009d1a:	46c0      	nop			; (mov r8, r8)
 8009d1c:	20002520 	.word	0x20002520

08009d20 <__errno>:
 8009d20:	4b01      	ldr	r3, [pc, #4]	; (8009d28 <__errno+0x8>)
 8009d22:	6818      	ldr	r0, [r3, #0]
 8009d24:	4770      	bx	lr
 8009d26:	46c0      	nop			; (mov r8, r8)
 8009d28:	2000007c 	.word	0x2000007c

08009d2c <__libc_init_array>:
 8009d2c:	b570      	push	{r4, r5, r6, lr}
 8009d2e:	2600      	movs	r6, #0
 8009d30:	4c0c      	ldr	r4, [pc, #48]	; (8009d64 <__libc_init_array+0x38>)
 8009d32:	4d0d      	ldr	r5, [pc, #52]	; (8009d68 <__libc_init_array+0x3c>)
 8009d34:	1b64      	subs	r4, r4, r5
 8009d36:	10a4      	asrs	r4, r4, #2
 8009d38:	42a6      	cmp	r6, r4
 8009d3a:	d109      	bne.n	8009d50 <__libc_init_array+0x24>
 8009d3c:	2600      	movs	r6, #0
 8009d3e:	f000 fe3d 	bl	800a9bc <_init>
 8009d42:	4c0a      	ldr	r4, [pc, #40]	; (8009d6c <__libc_init_array+0x40>)
 8009d44:	4d0a      	ldr	r5, [pc, #40]	; (8009d70 <__libc_init_array+0x44>)
 8009d46:	1b64      	subs	r4, r4, r5
 8009d48:	10a4      	asrs	r4, r4, #2
 8009d4a:	42a6      	cmp	r6, r4
 8009d4c:	d105      	bne.n	8009d5a <__libc_init_array+0x2e>
 8009d4e:	bd70      	pop	{r4, r5, r6, pc}
 8009d50:	00b3      	lsls	r3, r6, #2
 8009d52:	58eb      	ldr	r3, [r5, r3]
 8009d54:	4798      	blx	r3
 8009d56:	3601      	adds	r6, #1
 8009d58:	e7ee      	b.n	8009d38 <__libc_init_array+0xc>
 8009d5a:	00b3      	lsls	r3, r6, #2
 8009d5c:	58eb      	ldr	r3, [r5, r3]
 8009d5e:	4798      	blx	r3
 8009d60:	3601      	adds	r6, #1
 8009d62:	e7f2      	b.n	8009d4a <__libc_init_array+0x1e>
 8009d64:	0800de98 	.word	0x0800de98
 8009d68:	0800de98 	.word	0x0800de98
 8009d6c:	0800de9c 	.word	0x0800de9c
 8009d70:	0800de98 	.word	0x0800de98

08009d74 <__retarget_lock_init_recursive>:
 8009d74:	4770      	bx	lr

08009d76 <__retarget_lock_acquire_recursive>:
 8009d76:	4770      	bx	lr

08009d78 <__retarget_lock_release_recursive>:
 8009d78:	4770      	bx	lr

08009d7a <memcpy>:
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	b510      	push	{r4, lr}
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d100      	bne.n	8009d84 <memcpy+0xa>
 8009d82:	bd10      	pop	{r4, pc}
 8009d84:	5ccc      	ldrb	r4, [r1, r3]
 8009d86:	54c4      	strb	r4, [r0, r3]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	e7f8      	b.n	8009d7e <memcpy+0x4>

08009d8c <__assert_func>:
 8009d8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009d8e:	0014      	movs	r4, r2
 8009d90:	001a      	movs	r2, r3
 8009d92:	4b09      	ldr	r3, [pc, #36]	; (8009db8 <__assert_func+0x2c>)
 8009d94:	0005      	movs	r5, r0
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	000e      	movs	r6, r1
 8009d9a:	68d8      	ldr	r0, [r3, #12]
 8009d9c:	4b07      	ldr	r3, [pc, #28]	; (8009dbc <__assert_func+0x30>)
 8009d9e:	2c00      	cmp	r4, #0
 8009da0:	d101      	bne.n	8009da6 <__assert_func+0x1a>
 8009da2:	4b07      	ldr	r3, [pc, #28]	; (8009dc0 <__assert_func+0x34>)
 8009da4:	001c      	movs	r4, r3
 8009da6:	4907      	ldr	r1, [pc, #28]	; (8009dc4 <__assert_func+0x38>)
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	9402      	str	r4, [sp, #8]
 8009dac:	002b      	movs	r3, r5
 8009dae:	9600      	str	r6, [sp, #0]
 8009db0:	f000 f956 	bl	800a060 <fiprintf>
 8009db4:	f000 f9b2 	bl	800a11c <abort>
 8009db8:	2000007c 	.word	0x2000007c
 8009dbc:	0800de27 	.word	0x0800de27
 8009dc0:	0800de62 	.word	0x0800de62
 8009dc4:	0800de34 	.word	0x0800de34

08009dc8 <_free_r>:
 8009dc8:	b570      	push	{r4, r5, r6, lr}
 8009dca:	0005      	movs	r5, r0
 8009dcc:	2900      	cmp	r1, #0
 8009dce:	d010      	beq.n	8009df2 <_free_r+0x2a>
 8009dd0:	1f0c      	subs	r4, r1, #4
 8009dd2:	6823      	ldr	r3, [r4, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	da00      	bge.n	8009dda <_free_r+0x12>
 8009dd8:	18e4      	adds	r4, r4, r3
 8009dda:	0028      	movs	r0, r5
 8009ddc:	f7ff fe74 	bl	8009ac8 <__malloc_lock>
 8009de0:	4a1d      	ldr	r2, [pc, #116]	; (8009e58 <_free_r+0x90>)
 8009de2:	6813      	ldr	r3, [r2, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d105      	bne.n	8009df4 <_free_r+0x2c>
 8009de8:	6063      	str	r3, [r4, #4]
 8009dea:	6014      	str	r4, [r2, #0]
 8009dec:	0028      	movs	r0, r5
 8009dee:	f7ff fe73 	bl	8009ad8 <__malloc_unlock>
 8009df2:	bd70      	pop	{r4, r5, r6, pc}
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	d908      	bls.n	8009e0a <_free_r+0x42>
 8009df8:	6820      	ldr	r0, [r4, #0]
 8009dfa:	1821      	adds	r1, r4, r0
 8009dfc:	428b      	cmp	r3, r1
 8009dfe:	d1f3      	bne.n	8009de8 <_free_r+0x20>
 8009e00:	6819      	ldr	r1, [r3, #0]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	1809      	adds	r1, r1, r0
 8009e06:	6021      	str	r1, [r4, #0]
 8009e08:	e7ee      	b.n	8009de8 <_free_r+0x20>
 8009e0a:	001a      	movs	r2, r3
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <_free_r+0x4e>
 8009e12:	42a3      	cmp	r3, r4
 8009e14:	d9f9      	bls.n	8009e0a <_free_r+0x42>
 8009e16:	6811      	ldr	r1, [r2, #0]
 8009e18:	1850      	adds	r0, r2, r1
 8009e1a:	42a0      	cmp	r0, r4
 8009e1c:	d10b      	bne.n	8009e36 <_free_r+0x6e>
 8009e1e:	6820      	ldr	r0, [r4, #0]
 8009e20:	1809      	adds	r1, r1, r0
 8009e22:	1850      	adds	r0, r2, r1
 8009e24:	6011      	str	r1, [r2, #0]
 8009e26:	4283      	cmp	r3, r0
 8009e28:	d1e0      	bne.n	8009dec <_free_r+0x24>
 8009e2a:	6818      	ldr	r0, [r3, #0]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	1841      	adds	r1, r0, r1
 8009e30:	6011      	str	r1, [r2, #0]
 8009e32:	6053      	str	r3, [r2, #4]
 8009e34:	e7da      	b.n	8009dec <_free_r+0x24>
 8009e36:	42a0      	cmp	r0, r4
 8009e38:	d902      	bls.n	8009e40 <_free_r+0x78>
 8009e3a:	230c      	movs	r3, #12
 8009e3c:	602b      	str	r3, [r5, #0]
 8009e3e:	e7d5      	b.n	8009dec <_free_r+0x24>
 8009e40:	6820      	ldr	r0, [r4, #0]
 8009e42:	1821      	adds	r1, r4, r0
 8009e44:	428b      	cmp	r3, r1
 8009e46:	d103      	bne.n	8009e50 <_free_r+0x88>
 8009e48:	6819      	ldr	r1, [r3, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	1809      	adds	r1, r1, r0
 8009e4e:	6021      	str	r1, [r4, #0]
 8009e50:	6063      	str	r3, [r4, #4]
 8009e52:	6054      	str	r4, [r2, #4]
 8009e54:	e7ca      	b.n	8009dec <_free_r+0x24>
 8009e56:	46c0      	nop			; (mov r8, r8)
 8009e58:	200023d8 	.word	0x200023d8

08009e5c <__sflush_r>:
 8009e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e5e:	898b      	ldrh	r3, [r1, #12]
 8009e60:	0005      	movs	r5, r0
 8009e62:	000c      	movs	r4, r1
 8009e64:	071a      	lsls	r2, r3, #28
 8009e66:	d45c      	bmi.n	8009f22 <__sflush_r+0xc6>
 8009e68:	684a      	ldr	r2, [r1, #4]
 8009e6a:	2a00      	cmp	r2, #0
 8009e6c:	dc04      	bgt.n	8009e78 <__sflush_r+0x1c>
 8009e6e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009e70:	2a00      	cmp	r2, #0
 8009e72:	dc01      	bgt.n	8009e78 <__sflush_r+0x1c>
 8009e74:	2000      	movs	r0, #0
 8009e76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e78:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009e7a:	2f00      	cmp	r7, #0
 8009e7c:	d0fa      	beq.n	8009e74 <__sflush_r+0x18>
 8009e7e:	2200      	movs	r2, #0
 8009e80:	2080      	movs	r0, #128	; 0x80
 8009e82:	682e      	ldr	r6, [r5, #0]
 8009e84:	602a      	str	r2, [r5, #0]
 8009e86:	001a      	movs	r2, r3
 8009e88:	0140      	lsls	r0, r0, #5
 8009e8a:	6a21      	ldr	r1, [r4, #32]
 8009e8c:	4002      	ands	r2, r0
 8009e8e:	4203      	tst	r3, r0
 8009e90:	d034      	beq.n	8009efc <__sflush_r+0xa0>
 8009e92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	075b      	lsls	r3, r3, #29
 8009e98:	d506      	bpl.n	8009ea8 <__sflush_r+0x4c>
 8009e9a:	6863      	ldr	r3, [r4, #4]
 8009e9c:	1ac0      	subs	r0, r0, r3
 8009e9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <__sflush_r+0x4c>
 8009ea4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ea6:	1ac0      	subs	r0, r0, r3
 8009ea8:	0002      	movs	r2, r0
 8009eaa:	2300      	movs	r3, #0
 8009eac:	0028      	movs	r0, r5
 8009eae:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009eb0:	6a21      	ldr	r1, [r4, #32]
 8009eb2:	47b8      	blx	r7
 8009eb4:	89a2      	ldrh	r2, [r4, #12]
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	d106      	bne.n	8009ec8 <__sflush_r+0x6c>
 8009eba:	6829      	ldr	r1, [r5, #0]
 8009ebc:	291d      	cmp	r1, #29
 8009ebe:	d82c      	bhi.n	8009f1a <__sflush_r+0xbe>
 8009ec0:	4b2a      	ldr	r3, [pc, #168]	; (8009f6c <__sflush_r+0x110>)
 8009ec2:	410b      	asrs	r3, r1
 8009ec4:	07db      	lsls	r3, r3, #31
 8009ec6:	d428      	bmi.n	8009f1a <__sflush_r+0xbe>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	6063      	str	r3, [r4, #4]
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	6023      	str	r3, [r4, #0]
 8009ed0:	04d2      	lsls	r2, r2, #19
 8009ed2:	d505      	bpl.n	8009ee0 <__sflush_r+0x84>
 8009ed4:	1c43      	adds	r3, r0, #1
 8009ed6:	d102      	bne.n	8009ede <__sflush_r+0x82>
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d100      	bne.n	8009ee0 <__sflush_r+0x84>
 8009ede:	6560      	str	r0, [r4, #84]	; 0x54
 8009ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ee2:	602e      	str	r6, [r5, #0]
 8009ee4:	2900      	cmp	r1, #0
 8009ee6:	d0c5      	beq.n	8009e74 <__sflush_r+0x18>
 8009ee8:	0023      	movs	r3, r4
 8009eea:	3344      	adds	r3, #68	; 0x44
 8009eec:	4299      	cmp	r1, r3
 8009eee:	d002      	beq.n	8009ef6 <__sflush_r+0x9a>
 8009ef0:	0028      	movs	r0, r5
 8009ef2:	f7ff ff69 	bl	8009dc8 <_free_r>
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	6360      	str	r0, [r4, #52]	; 0x34
 8009efa:	e7bc      	b.n	8009e76 <__sflush_r+0x1a>
 8009efc:	2301      	movs	r3, #1
 8009efe:	0028      	movs	r0, r5
 8009f00:	47b8      	blx	r7
 8009f02:	1c43      	adds	r3, r0, #1
 8009f04:	d1c6      	bne.n	8009e94 <__sflush_r+0x38>
 8009f06:	682b      	ldr	r3, [r5, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d0c3      	beq.n	8009e94 <__sflush_r+0x38>
 8009f0c:	2b1d      	cmp	r3, #29
 8009f0e:	d001      	beq.n	8009f14 <__sflush_r+0xb8>
 8009f10:	2b16      	cmp	r3, #22
 8009f12:	d101      	bne.n	8009f18 <__sflush_r+0xbc>
 8009f14:	602e      	str	r6, [r5, #0]
 8009f16:	e7ad      	b.n	8009e74 <__sflush_r+0x18>
 8009f18:	89a2      	ldrh	r2, [r4, #12]
 8009f1a:	2340      	movs	r3, #64	; 0x40
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	81a3      	strh	r3, [r4, #12]
 8009f20:	e7a9      	b.n	8009e76 <__sflush_r+0x1a>
 8009f22:	690e      	ldr	r6, [r1, #16]
 8009f24:	2e00      	cmp	r6, #0
 8009f26:	d0a5      	beq.n	8009e74 <__sflush_r+0x18>
 8009f28:	680f      	ldr	r7, [r1, #0]
 8009f2a:	600e      	str	r6, [r1, #0]
 8009f2c:	1bba      	subs	r2, r7, r6
 8009f2e:	9201      	str	r2, [sp, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	079b      	lsls	r3, r3, #30
 8009f34:	d100      	bne.n	8009f38 <__sflush_r+0xdc>
 8009f36:	694a      	ldr	r2, [r1, #20]
 8009f38:	60a2      	str	r2, [r4, #8]
 8009f3a:	9b01      	ldr	r3, [sp, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	dd99      	ble.n	8009e74 <__sflush_r+0x18>
 8009f40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009f42:	0032      	movs	r2, r6
 8009f44:	001f      	movs	r7, r3
 8009f46:	0028      	movs	r0, r5
 8009f48:	9b01      	ldr	r3, [sp, #4]
 8009f4a:	6a21      	ldr	r1, [r4, #32]
 8009f4c:	47b8      	blx	r7
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	dc06      	bgt.n	8009f60 <__sflush_r+0x104>
 8009f52:	2340      	movs	r3, #64	; 0x40
 8009f54:	2001      	movs	r0, #1
 8009f56:	89a2      	ldrh	r2, [r4, #12]
 8009f58:	4240      	negs	r0, r0
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	81a3      	strh	r3, [r4, #12]
 8009f5e:	e78a      	b.n	8009e76 <__sflush_r+0x1a>
 8009f60:	9b01      	ldr	r3, [sp, #4]
 8009f62:	1836      	adds	r6, r6, r0
 8009f64:	1a1b      	subs	r3, r3, r0
 8009f66:	9301      	str	r3, [sp, #4]
 8009f68:	e7e7      	b.n	8009f3a <__sflush_r+0xde>
 8009f6a:	46c0      	nop			; (mov r8, r8)
 8009f6c:	dfbffffe 	.word	0xdfbffffe

08009f70 <_fflush_r>:
 8009f70:	690b      	ldr	r3, [r1, #16]
 8009f72:	b570      	push	{r4, r5, r6, lr}
 8009f74:	0005      	movs	r5, r0
 8009f76:	000c      	movs	r4, r1
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d102      	bne.n	8009f82 <_fflush_r+0x12>
 8009f7c:	2500      	movs	r5, #0
 8009f7e:	0028      	movs	r0, r5
 8009f80:	bd70      	pop	{r4, r5, r6, pc}
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d004      	beq.n	8009f90 <_fflush_r+0x20>
 8009f86:	6a03      	ldr	r3, [r0, #32]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d101      	bne.n	8009f90 <_fflush_r+0x20>
 8009f8c:	f7ff fe7a 	bl	8009c84 <__sinit>
 8009f90:	220c      	movs	r2, #12
 8009f92:	5ea3      	ldrsh	r3, [r4, r2]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d0f1      	beq.n	8009f7c <_fflush_r+0xc>
 8009f98:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f9a:	07d2      	lsls	r2, r2, #31
 8009f9c:	d404      	bmi.n	8009fa8 <_fflush_r+0x38>
 8009f9e:	059b      	lsls	r3, r3, #22
 8009fa0:	d402      	bmi.n	8009fa8 <_fflush_r+0x38>
 8009fa2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fa4:	f7ff fee7 	bl	8009d76 <__retarget_lock_acquire_recursive>
 8009fa8:	0028      	movs	r0, r5
 8009faa:	0021      	movs	r1, r4
 8009fac:	f7ff ff56 	bl	8009e5c <__sflush_r>
 8009fb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fb2:	0005      	movs	r5, r0
 8009fb4:	07db      	lsls	r3, r3, #31
 8009fb6:	d4e2      	bmi.n	8009f7e <_fflush_r+0xe>
 8009fb8:	89a3      	ldrh	r3, [r4, #12]
 8009fba:	059b      	lsls	r3, r3, #22
 8009fbc:	d4df      	bmi.n	8009f7e <_fflush_r+0xe>
 8009fbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fc0:	f7ff feda 	bl	8009d78 <__retarget_lock_release_recursive>
 8009fc4:	e7db      	b.n	8009f7e <_fflush_r+0xe>
	...

08009fc8 <__sread>:
 8009fc8:	b570      	push	{r4, r5, r6, lr}
 8009fca:	000c      	movs	r4, r1
 8009fcc:	250e      	movs	r5, #14
 8009fce:	5f49      	ldrsh	r1, [r1, r5]
 8009fd0:	f000 f87c 	bl	800a0cc <_read_r>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	db03      	blt.n	8009fe0 <__sread+0x18>
 8009fd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009fda:	181b      	adds	r3, r3, r0
 8009fdc:	6563      	str	r3, [r4, #84]	; 0x54
 8009fde:	bd70      	pop	{r4, r5, r6, pc}
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	4a02      	ldr	r2, [pc, #8]	; (8009fec <__sread+0x24>)
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	81a3      	strh	r3, [r4, #12]
 8009fe8:	e7f9      	b.n	8009fde <__sread+0x16>
 8009fea:	46c0      	nop			; (mov r8, r8)
 8009fec:	ffffefff 	.word	0xffffefff

08009ff0 <__swrite>:
 8009ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff2:	001f      	movs	r7, r3
 8009ff4:	898b      	ldrh	r3, [r1, #12]
 8009ff6:	0005      	movs	r5, r0
 8009ff8:	000c      	movs	r4, r1
 8009ffa:	0016      	movs	r6, r2
 8009ffc:	05db      	lsls	r3, r3, #23
 8009ffe:	d505      	bpl.n	800a00c <__swrite+0x1c>
 800a000:	230e      	movs	r3, #14
 800a002:	5ec9      	ldrsh	r1, [r1, r3]
 800a004:	2200      	movs	r2, #0
 800a006:	2302      	movs	r3, #2
 800a008:	f000 f84c 	bl	800a0a4 <_lseek_r>
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	4a05      	ldr	r2, [pc, #20]	; (800a024 <__swrite+0x34>)
 800a010:	0028      	movs	r0, r5
 800a012:	4013      	ands	r3, r2
 800a014:	81a3      	strh	r3, [r4, #12]
 800a016:	0032      	movs	r2, r6
 800a018:	230e      	movs	r3, #14
 800a01a:	5ee1      	ldrsh	r1, [r4, r3]
 800a01c:	003b      	movs	r3, r7
 800a01e:	f000 f869 	bl	800a0f4 <_write_r>
 800a022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a024:	ffffefff 	.word	0xffffefff

0800a028 <__sseek>:
 800a028:	b570      	push	{r4, r5, r6, lr}
 800a02a:	000c      	movs	r4, r1
 800a02c:	250e      	movs	r5, #14
 800a02e:	5f49      	ldrsh	r1, [r1, r5]
 800a030:	f000 f838 	bl	800a0a4 <_lseek_r>
 800a034:	89a3      	ldrh	r3, [r4, #12]
 800a036:	1c42      	adds	r2, r0, #1
 800a038:	d103      	bne.n	800a042 <__sseek+0x1a>
 800a03a:	4a05      	ldr	r2, [pc, #20]	; (800a050 <__sseek+0x28>)
 800a03c:	4013      	ands	r3, r2
 800a03e:	81a3      	strh	r3, [r4, #12]
 800a040:	bd70      	pop	{r4, r5, r6, pc}
 800a042:	2280      	movs	r2, #128	; 0x80
 800a044:	0152      	lsls	r2, r2, #5
 800a046:	4313      	orrs	r3, r2
 800a048:	81a3      	strh	r3, [r4, #12]
 800a04a:	6560      	str	r0, [r4, #84]	; 0x54
 800a04c:	e7f8      	b.n	800a040 <__sseek+0x18>
 800a04e:	46c0      	nop			; (mov r8, r8)
 800a050:	ffffefff 	.word	0xffffefff

0800a054 <__sclose>:
 800a054:	b510      	push	{r4, lr}
 800a056:	230e      	movs	r3, #14
 800a058:	5ec9      	ldrsh	r1, [r1, r3]
 800a05a:	f000 f811 	bl	800a080 <_close_r>
 800a05e:	bd10      	pop	{r4, pc}

0800a060 <fiprintf>:
 800a060:	b40e      	push	{r1, r2, r3}
 800a062:	b517      	push	{r0, r1, r2, r4, lr}
 800a064:	4c05      	ldr	r4, [pc, #20]	; (800a07c <fiprintf+0x1c>)
 800a066:	ab05      	add	r3, sp, #20
 800a068:	cb04      	ldmia	r3!, {r2}
 800a06a:	0001      	movs	r1, r0
 800a06c:	6820      	ldr	r0, [r4, #0]
 800a06e:	9301      	str	r3, [sp, #4]
 800a070:	f000 f882 	bl	800a178 <_vfiprintf_r>
 800a074:	bc1e      	pop	{r1, r2, r3, r4}
 800a076:	bc08      	pop	{r3}
 800a078:	b003      	add	sp, #12
 800a07a:	4718      	bx	r3
 800a07c:	2000007c 	.word	0x2000007c

0800a080 <_close_r>:
 800a080:	2300      	movs	r3, #0
 800a082:	b570      	push	{r4, r5, r6, lr}
 800a084:	4d06      	ldr	r5, [pc, #24]	; (800a0a0 <_close_r+0x20>)
 800a086:	0004      	movs	r4, r0
 800a088:	0008      	movs	r0, r1
 800a08a:	602b      	str	r3, [r5, #0]
 800a08c:	f7fa fd55 	bl	8004b3a <_close>
 800a090:	1c43      	adds	r3, r0, #1
 800a092:	d103      	bne.n	800a09c <_close_r+0x1c>
 800a094:	682b      	ldr	r3, [r5, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d000      	beq.n	800a09c <_close_r+0x1c>
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	bd70      	pop	{r4, r5, r6, pc}
 800a09e:	46c0      	nop			; (mov r8, r8)
 800a0a0:	20002520 	.word	0x20002520

0800a0a4 <_lseek_r>:
 800a0a4:	b570      	push	{r4, r5, r6, lr}
 800a0a6:	0004      	movs	r4, r0
 800a0a8:	0008      	movs	r0, r1
 800a0aa:	0011      	movs	r1, r2
 800a0ac:	001a      	movs	r2, r3
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	4d05      	ldr	r5, [pc, #20]	; (800a0c8 <_lseek_r+0x24>)
 800a0b2:	602b      	str	r3, [r5, #0]
 800a0b4:	f7fa fd62 	bl	8004b7c <_lseek>
 800a0b8:	1c43      	adds	r3, r0, #1
 800a0ba:	d103      	bne.n	800a0c4 <_lseek_r+0x20>
 800a0bc:	682b      	ldr	r3, [r5, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d000      	beq.n	800a0c4 <_lseek_r+0x20>
 800a0c2:	6023      	str	r3, [r4, #0]
 800a0c4:	bd70      	pop	{r4, r5, r6, pc}
 800a0c6:	46c0      	nop			; (mov r8, r8)
 800a0c8:	20002520 	.word	0x20002520

0800a0cc <_read_r>:
 800a0cc:	b570      	push	{r4, r5, r6, lr}
 800a0ce:	0004      	movs	r4, r0
 800a0d0:	0008      	movs	r0, r1
 800a0d2:	0011      	movs	r1, r2
 800a0d4:	001a      	movs	r2, r3
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	4d05      	ldr	r5, [pc, #20]	; (800a0f0 <_read_r+0x24>)
 800a0da:	602b      	str	r3, [r5, #0]
 800a0dc:	f7fa fcf4 	bl	8004ac8 <_read>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d103      	bne.n	800a0ec <_read_r+0x20>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d000      	beq.n	800a0ec <_read_r+0x20>
 800a0ea:	6023      	str	r3, [r4, #0]
 800a0ec:	bd70      	pop	{r4, r5, r6, pc}
 800a0ee:	46c0      	nop			; (mov r8, r8)
 800a0f0:	20002520 	.word	0x20002520

0800a0f4 <_write_r>:
 800a0f4:	b570      	push	{r4, r5, r6, lr}
 800a0f6:	0004      	movs	r4, r0
 800a0f8:	0008      	movs	r0, r1
 800a0fa:	0011      	movs	r1, r2
 800a0fc:	001a      	movs	r2, r3
 800a0fe:	2300      	movs	r3, #0
 800a100:	4d05      	ldr	r5, [pc, #20]	; (800a118 <_write_r+0x24>)
 800a102:	602b      	str	r3, [r5, #0]
 800a104:	f7fa fcfd 	bl	8004b02 <_write>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d103      	bne.n	800a114 <_write_r+0x20>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d000      	beq.n	800a114 <_write_r+0x20>
 800a112:	6023      	str	r3, [r4, #0]
 800a114:	bd70      	pop	{r4, r5, r6, pc}
 800a116:	46c0      	nop			; (mov r8, r8)
 800a118:	20002520 	.word	0x20002520

0800a11c <abort>:
 800a11c:	2006      	movs	r0, #6
 800a11e:	b510      	push	{r4, lr}
 800a120:	f000 fc20 	bl	800a964 <raise>
 800a124:	2001      	movs	r0, #1
 800a126:	f7fa fcc3 	bl	8004ab0 <_exit>

0800a12a <__sfputc_r>:
 800a12a:	6893      	ldr	r3, [r2, #8]
 800a12c:	b510      	push	{r4, lr}
 800a12e:	3b01      	subs	r3, #1
 800a130:	6093      	str	r3, [r2, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	da04      	bge.n	800a140 <__sfputc_r+0x16>
 800a136:	6994      	ldr	r4, [r2, #24]
 800a138:	42a3      	cmp	r3, r4
 800a13a:	db07      	blt.n	800a14c <__sfputc_r+0x22>
 800a13c:	290a      	cmp	r1, #10
 800a13e:	d005      	beq.n	800a14c <__sfputc_r+0x22>
 800a140:	6813      	ldr	r3, [r2, #0]
 800a142:	1c58      	adds	r0, r3, #1
 800a144:	6010      	str	r0, [r2, #0]
 800a146:	7019      	strb	r1, [r3, #0]
 800a148:	0008      	movs	r0, r1
 800a14a:	bd10      	pop	{r4, pc}
 800a14c:	f000 fab0 	bl	800a6b0 <__swbuf_r>
 800a150:	0001      	movs	r1, r0
 800a152:	e7f9      	b.n	800a148 <__sfputc_r+0x1e>

0800a154 <__sfputs_r>:
 800a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a156:	0006      	movs	r6, r0
 800a158:	000f      	movs	r7, r1
 800a15a:	0014      	movs	r4, r2
 800a15c:	18d5      	adds	r5, r2, r3
 800a15e:	42ac      	cmp	r4, r5
 800a160:	d101      	bne.n	800a166 <__sfputs_r+0x12>
 800a162:	2000      	movs	r0, #0
 800a164:	e007      	b.n	800a176 <__sfputs_r+0x22>
 800a166:	7821      	ldrb	r1, [r4, #0]
 800a168:	003a      	movs	r2, r7
 800a16a:	0030      	movs	r0, r6
 800a16c:	f7ff ffdd 	bl	800a12a <__sfputc_r>
 800a170:	3401      	adds	r4, #1
 800a172:	1c43      	adds	r3, r0, #1
 800a174:	d1f3      	bne.n	800a15e <__sfputs_r+0xa>
 800a176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a178 <_vfiprintf_r>:
 800a178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a17a:	b0a1      	sub	sp, #132	; 0x84
 800a17c:	000f      	movs	r7, r1
 800a17e:	0015      	movs	r5, r2
 800a180:	001e      	movs	r6, r3
 800a182:	9003      	str	r0, [sp, #12]
 800a184:	2800      	cmp	r0, #0
 800a186:	d004      	beq.n	800a192 <_vfiprintf_r+0x1a>
 800a188:	6a03      	ldr	r3, [r0, #32]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <_vfiprintf_r+0x1a>
 800a18e:	f7ff fd79 	bl	8009c84 <__sinit>
 800a192:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a194:	07db      	lsls	r3, r3, #31
 800a196:	d405      	bmi.n	800a1a4 <_vfiprintf_r+0x2c>
 800a198:	89bb      	ldrh	r3, [r7, #12]
 800a19a:	059b      	lsls	r3, r3, #22
 800a19c:	d402      	bmi.n	800a1a4 <_vfiprintf_r+0x2c>
 800a19e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a1a0:	f7ff fde9 	bl	8009d76 <__retarget_lock_acquire_recursive>
 800a1a4:	89bb      	ldrh	r3, [r7, #12]
 800a1a6:	071b      	lsls	r3, r3, #28
 800a1a8:	d502      	bpl.n	800a1b0 <_vfiprintf_r+0x38>
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d113      	bne.n	800a1d8 <_vfiprintf_r+0x60>
 800a1b0:	0039      	movs	r1, r7
 800a1b2:	9803      	ldr	r0, [sp, #12]
 800a1b4:	f000 fabe 	bl	800a734 <__swsetup_r>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d00d      	beq.n	800a1d8 <_vfiprintf_r+0x60>
 800a1bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1be:	07db      	lsls	r3, r3, #31
 800a1c0:	d503      	bpl.n	800a1ca <_vfiprintf_r+0x52>
 800a1c2:	2001      	movs	r0, #1
 800a1c4:	4240      	negs	r0, r0
 800a1c6:	b021      	add	sp, #132	; 0x84
 800a1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1ca:	89bb      	ldrh	r3, [r7, #12]
 800a1cc:	059b      	lsls	r3, r3, #22
 800a1ce:	d4f8      	bmi.n	800a1c2 <_vfiprintf_r+0x4a>
 800a1d0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a1d2:	f7ff fdd1 	bl	8009d78 <__retarget_lock_release_recursive>
 800a1d6:	e7f4      	b.n	800a1c2 <_vfiprintf_r+0x4a>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	ac08      	add	r4, sp, #32
 800a1dc:	6163      	str	r3, [r4, #20]
 800a1de:	3320      	adds	r3, #32
 800a1e0:	7663      	strb	r3, [r4, #25]
 800a1e2:	3310      	adds	r3, #16
 800a1e4:	76a3      	strb	r3, [r4, #26]
 800a1e6:	9607      	str	r6, [sp, #28]
 800a1e8:	002e      	movs	r6, r5
 800a1ea:	7833      	ldrb	r3, [r6, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d001      	beq.n	800a1f4 <_vfiprintf_r+0x7c>
 800a1f0:	2b25      	cmp	r3, #37	; 0x25
 800a1f2:	d148      	bne.n	800a286 <_vfiprintf_r+0x10e>
 800a1f4:	1b73      	subs	r3, r6, r5
 800a1f6:	9305      	str	r3, [sp, #20]
 800a1f8:	42ae      	cmp	r6, r5
 800a1fa:	d00b      	beq.n	800a214 <_vfiprintf_r+0x9c>
 800a1fc:	002a      	movs	r2, r5
 800a1fe:	0039      	movs	r1, r7
 800a200:	9803      	ldr	r0, [sp, #12]
 800a202:	f7ff ffa7 	bl	800a154 <__sfputs_r>
 800a206:	3001      	adds	r0, #1
 800a208:	d100      	bne.n	800a20c <_vfiprintf_r+0x94>
 800a20a:	e0af      	b.n	800a36c <_vfiprintf_r+0x1f4>
 800a20c:	6963      	ldr	r3, [r4, #20]
 800a20e:	9a05      	ldr	r2, [sp, #20]
 800a210:	189b      	adds	r3, r3, r2
 800a212:	6163      	str	r3, [r4, #20]
 800a214:	7833      	ldrb	r3, [r6, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d100      	bne.n	800a21c <_vfiprintf_r+0xa4>
 800a21a:	e0a7      	b.n	800a36c <_vfiprintf_r+0x1f4>
 800a21c:	2201      	movs	r2, #1
 800a21e:	2300      	movs	r3, #0
 800a220:	4252      	negs	r2, r2
 800a222:	6062      	str	r2, [r4, #4]
 800a224:	a904      	add	r1, sp, #16
 800a226:	3254      	adds	r2, #84	; 0x54
 800a228:	1852      	adds	r2, r2, r1
 800a22a:	1c75      	adds	r5, r6, #1
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	60e3      	str	r3, [r4, #12]
 800a230:	60a3      	str	r3, [r4, #8]
 800a232:	7013      	strb	r3, [r2, #0]
 800a234:	65a3      	str	r3, [r4, #88]	; 0x58
 800a236:	4b59      	ldr	r3, [pc, #356]	; (800a39c <_vfiprintf_r+0x224>)
 800a238:	2205      	movs	r2, #5
 800a23a:	0018      	movs	r0, r3
 800a23c:	7829      	ldrb	r1, [r5, #0]
 800a23e:	9305      	str	r3, [sp, #20]
 800a240:	f000 fbb0 	bl	800a9a4 <memchr>
 800a244:	1c6e      	adds	r6, r5, #1
 800a246:	2800      	cmp	r0, #0
 800a248:	d11f      	bne.n	800a28a <_vfiprintf_r+0x112>
 800a24a:	6822      	ldr	r2, [r4, #0]
 800a24c:	06d3      	lsls	r3, r2, #27
 800a24e:	d504      	bpl.n	800a25a <_vfiprintf_r+0xe2>
 800a250:	2353      	movs	r3, #83	; 0x53
 800a252:	a904      	add	r1, sp, #16
 800a254:	185b      	adds	r3, r3, r1
 800a256:	2120      	movs	r1, #32
 800a258:	7019      	strb	r1, [r3, #0]
 800a25a:	0713      	lsls	r3, r2, #28
 800a25c:	d504      	bpl.n	800a268 <_vfiprintf_r+0xf0>
 800a25e:	2353      	movs	r3, #83	; 0x53
 800a260:	a904      	add	r1, sp, #16
 800a262:	185b      	adds	r3, r3, r1
 800a264:	212b      	movs	r1, #43	; 0x2b
 800a266:	7019      	strb	r1, [r3, #0]
 800a268:	782b      	ldrb	r3, [r5, #0]
 800a26a:	2b2a      	cmp	r3, #42	; 0x2a
 800a26c:	d016      	beq.n	800a29c <_vfiprintf_r+0x124>
 800a26e:	002e      	movs	r6, r5
 800a270:	2100      	movs	r1, #0
 800a272:	200a      	movs	r0, #10
 800a274:	68e3      	ldr	r3, [r4, #12]
 800a276:	7832      	ldrb	r2, [r6, #0]
 800a278:	1c75      	adds	r5, r6, #1
 800a27a:	3a30      	subs	r2, #48	; 0x30
 800a27c:	2a09      	cmp	r2, #9
 800a27e:	d94e      	bls.n	800a31e <_vfiprintf_r+0x1a6>
 800a280:	2900      	cmp	r1, #0
 800a282:	d111      	bne.n	800a2a8 <_vfiprintf_r+0x130>
 800a284:	e017      	b.n	800a2b6 <_vfiprintf_r+0x13e>
 800a286:	3601      	adds	r6, #1
 800a288:	e7af      	b.n	800a1ea <_vfiprintf_r+0x72>
 800a28a:	9b05      	ldr	r3, [sp, #20]
 800a28c:	6822      	ldr	r2, [r4, #0]
 800a28e:	1ac0      	subs	r0, r0, r3
 800a290:	2301      	movs	r3, #1
 800a292:	4083      	lsls	r3, r0
 800a294:	4313      	orrs	r3, r2
 800a296:	0035      	movs	r5, r6
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	e7cc      	b.n	800a236 <_vfiprintf_r+0xbe>
 800a29c:	9b07      	ldr	r3, [sp, #28]
 800a29e:	1d19      	adds	r1, r3, #4
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	9107      	str	r1, [sp, #28]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	db01      	blt.n	800a2ac <_vfiprintf_r+0x134>
 800a2a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2aa:	e004      	b.n	800a2b6 <_vfiprintf_r+0x13e>
 800a2ac:	425b      	negs	r3, r3
 800a2ae:	60e3      	str	r3, [r4, #12]
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	7833      	ldrb	r3, [r6, #0]
 800a2b8:	2b2e      	cmp	r3, #46	; 0x2e
 800a2ba:	d10a      	bne.n	800a2d2 <_vfiprintf_r+0x15a>
 800a2bc:	7873      	ldrb	r3, [r6, #1]
 800a2be:	2b2a      	cmp	r3, #42	; 0x2a
 800a2c0:	d135      	bne.n	800a32e <_vfiprintf_r+0x1b6>
 800a2c2:	9b07      	ldr	r3, [sp, #28]
 800a2c4:	3602      	adds	r6, #2
 800a2c6:	1d1a      	adds	r2, r3, #4
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	9207      	str	r2, [sp, #28]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	db2b      	blt.n	800a328 <_vfiprintf_r+0x1b0>
 800a2d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d2:	4d33      	ldr	r5, [pc, #204]	; (800a3a0 <_vfiprintf_r+0x228>)
 800a2d4:	2203      	movs	r2, #3
 800a2d6:	0028      	movs	r0, r5
 800a2d8:	7831      	ldrb	r1, [r6, #0]
 800a2da:	f000 fb63 	bl	800a9a4 <memchr>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d006      	beq.n	800a2f0 <_vfiprintf_r+0x178>
 800a2e2:	2340      	movs	r3, #64	; 0x40
 800a2e4:	1b40      	subs	r0, r0, r5
 800a2e6:	4083      	lsls	r3, r0
 800a2e8:	6822      	ldr	r2, [r4, #0]
 800a2ea:	3601      	adds	r6, #1
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	6023      	str	r3, [r4, #0]
 800a2f0:	7831      	ldrb	r1, [r6, #0]
 800a2f2:	2206      	movs	r2, #6
 800a2f4:	482b      	ldr	r0, [pc, #172]	; (800a3a4 <_vfiprintf_r+0x22c>)
 800a2f6:	1c75      	adds	r5, r6, #1
 800a2f8:	7621      	strb	r1, [r4, #24]
 800a2fa:	f000 fb53 	bl	800a9a4 <memchr>
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d043      	beq.n	800a38a <_vfiprintf_r+0x212>
 800a302:	4b29      	ldr	r3, [pc, #164]	; (800a3a8 <_vfiprintf_r+0x230>)
 800a304:	2b00      	cmp	r3, #0
 800a306:	d125      	bne.n	800a354 <_vfiprintf_r+0x1dc>
 800a308:	2207      	movs	r2, #7
 800a30a:	9b07      	ldr	r3, [sp, #28]
 800a30c:	3307      	adds	r3, #7
 800a30e:	4393      	bics	r3, r2
 800a310:	3308      	adds	r3, #8
 800a312:	9307      	str	r3, [sp, #28]
 800a314:	6963      	ldr	r3, [r4, #20]
 800a316:	9a04      	ldr	r2, [sp, #16]
 800a318:	189b      	adds	r3, r3, r2
 800a31a:	6163      	str	r3, [r4, #20]
 800a31c:	e764      	b.n	800a1e8 <_vfiprintf_r+0x70>
 800a31e:	4343      	muls	r3, r0
 800a320:	002e      	movs	r6, r5
 800a322:	2101      	movs	r1, #1
 800a324:	189b      	adds	r3, r3, r2
 800a326:	e7a6      	b.n	800a276 <_vfiprintf_r+0xfe>
 800a328:	2301      	movs	r3, #1
 800a32a:	425b      	negs	r3, r3
 800a32c:	e7d0      	b.n	800a2d0 <_vfiprintf_r+0x158>
 800a32e:	2300      	movs	r3, #0
 800a330:	200a      	movs	r0, #10
 800a332:	001a      	movs	r2, r3
 800a334:	3601      	adds	r6, #1
 800a336:	6063      	str	r3, [r4, #4]
 800a338:	7831      	ldrb	r1, [r6, #0]
 800a33a:	1c75      	adds	r5, r6, #1
 800a33c:	3930      	subs	r1, #48	; 0x30
 800a33e:	2909      	cmp	r1, #9
 800a340:	d903      	bls.n	800a34a <_vfiprintf_r+0x1d2>
 800a342:	2b00      	cmp	r3, #0
 800a344:	d0c5      	beq.n	800a2d2 <_vfiprintf_r+0x15a>
 800a346:	9209      	str	r2, [sp, #36]	; 0x24
 800a348:	e7c3      	b.n	800a2d2 <_vfiprintf_r+0x15a>
 800a34a:	4342      	muls	r2, r0
 800a34c:	002e      	movs	r6, r5
 800a34e:	2301      	movs	r3, #1
 800a350:	1852      	adds	r2, r2, r1
 800a352:	e7f1      	b.n	800a338 <_vfiprintf_r+0x1c0>
 800a354:	aa07      	add	r2, sp, #28
 800a356:	9200      	str	r2, [sp, #0]
 800a358:	0021      	movs	r1, r4
 800a35a:	003a      	movs	r2, r7
 800a35c:	4b13      	ldr	r3, [pc, #76]	; (800a3ac <_vfiprintf_r+0x234>)
 800a35e:	9803      	ldr	r0, [sp, #12]
 800a360:	e000      	b.n	800a364 <_vfiprintf_r+0x1ec>
 800a362:	bf00      	nop
 800a364:	9004      	str	r0, [sp, #16]
 800a366:	9b04      	ldr	r3, [sp, #16]
 800a368:	3301      	adds	r3, #1
 800a36a:	d1d3      	bne.n	800a314 <_vfiprintf_r+0x19c>
 800a36c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a36e:	07db      	lsls	r3, r3, #31
 800a370:	d405      	bmi.n	800a37e <_vfiprintf_r+0x206>
 800a372:	89bb      	ldrh	r3, [r7, #12]
 800a374:	059b      	lsls	r3, r3, #22
 800a376:	d402      	bmi.n	800a37e <_vfiprintf_r+0x206>
 800a378:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a37a:	f7ff fcfd 	bl	8009d78 <__retarget_lock_release_recursive>
 800a37e:	89bb      	ldrh	r3, [r7, #12]
 800a380:	065b      	lsls	r3, r3, #25
 800a382:	d500      	bpl.n	800a386 <_vfiprintf_r+0x20e>
 800a384:	e71d      	b.n	800a1c2 <_vfiprintf_r+0x4a>
 800a386:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a388:	e71d      	b.n	800a1c6 <_vfiprintf_r+0x4e>
 800a38a:	aa07      	add	r2, sp, #28
 800a38c:	9200      	str	r2, [sp, #0]
 800a38e:	0021      	movs	r1, r4
 800a390:	003a      	movs	r2, r7
 800a392:	4b06      	ldr	r3, [pc, #24]	; (800a3ac <_vfiprintf_r+0x234>)
 800a394:	9803      	ldr	r0, [sp, #12]
 800a396:	f000 f87b 	bl	800a490 <_printf_i>
 800a39a:	e7e3      	b.n	800a364 <_vfiprintf_r+0x1ec>
 800a39c:	0800de63 	.word	0x0800de63
 800a3a0:	0800de69 	.word	0x0800de69
 800a3a4:	0800de6d 	.word	0x0800de6d
 800a3a8:	00000000 	.word	0x00000000
 800a3ac:	0800a155 	.word	0x0800a155

0800a3b0 <_printf_common>:
 800a3b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3b2:	0016      	movs	r6, r2
 800a3b4:	9301      	str	r3, [sp, #4]
 800a3b6:	688a      	ldr	r2, [r1, #8]
 800a3b8:	690b      	ldr	r3, [r1, #16]
 800a3ba:	000c      	movs	r4, r1
 800a3bc:	9000      	str	r0, [sp, #0]
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	da00      	bge.n	800a3c4 <_printf_common+0x14>
 800a3c2:	0013      	movs	r3, r2
 800a3c4:	0022      	movs	r2, r4
 800a3c6:	6033      	str	r3, [r6, #0]
 800a3c8:	3243      	adds	r2, #67	; 0x43
 800a3ca:	7812      	ldrb	r2, [r2, #0]
 800a3cc:	2a00      	cmp	r2, #0
 800a3ce:	d001      	beq.n	800a3d4 <_printf_common+0x24>
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	6033      	str	r3, [r6, #0]
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	069b      	lsls	r3, r3, #26
 800a3d8:	d502      	bpl.n	800a3e0 <_printf_common+0x30>
 800a3da:	6833      	ldr	r3, [r6, #0]
 800a3dc:	3302      	adds	r3, #2
 800a3de:	6033      	str	r3, [r6, #0]
 800a3e0:	6822      	ldr	r2, [r4, #0]
 800a3e2:	2306      	movs	r3, #6
 800a3e4:	0015      	movs	r5, r2
 800a3e6:	401d      	ands	r5, r3
 800a3e8:	421a      	tst	r2, r3
 800a3ea:	d027      	beq.n	800a43c <_printf_common+0x8c>
 800a3ec:	0023      	movs	r3, r4
 800a3ee:	3343      	adds	r3, #67	; 0x43
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	1e5a      	subs	r2, r3, #1
 800a3f4:	4193      	sbcs	r3, r2
 800a3f6:	6822      	ldr	r2, [r4, #0]
 800a3f8:	0692      	lsls	r2, r2, #26
 800a3fa:	d430      	bmi.n	800a45e <_printf_common+0xae>
 800a3fc:	0022      	movs	r2, r4
 800a3fe:	9901      	ldr	r1, [sp, #4]
 800a400:	9800      	ldr	r0, [sp, #0]
 800a402:	9d08      	ldr	r5, [sp, #32]
 800a404:	3243      	adds	r2, #67	; 0x43
 800a406:	47a8      	blx	r5
 800a408:	3001      	adds	r0, #1
 800a40a:	d025      	beq.n	800a458 <_printf_common+0xa8>
 800a40c:	2206      	movs	r2, #6
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	2500      	movs	r5, #0
 800a412:	4013      	ands	r3, r2
 800a414:	2b04      	cmp	r3, #4
 800a416:	d105      	bne.n	800a424 <_printf_common+0x74>
 800a418:	6833      	ldr	r3, [r6, #0]
 800a41a:	68e5      	ldr	r5, [r4, #12]
 800a41c:	1aed      	subs	r5, r5, r3
 800a41e:	43eb      	mvns	r3, r5
 800a420:	17db      	asrs	r3, r3, #31
 800a422:	401d      	ands	r5, r3
 800a424:	68a3      	ldr	r3, [r4, #8]
 800a426:	6922      	ldr	r2, [r4, #16]
 800a428:	4293      	cmp	r3, r2
 800a42a:	dd01      	ble.n	800a430 <_printf_common+0x80>
 800a42c:	1a9b      	subs	r3, r3, r2
 800a42e:	18ed      	adds	r5, r5, r3
 800a430:	2600      	movs	r6, #0
 800a432:	42b5      	cmp	r5, r6
 800a434:	d120      	bne.n	800a478 <_printf_common+0xc8>
 800a436:	2000      	movs	r0, #0
 800a438:	e010      	b.n	800a45c <_printf_common+0xac>
 800a43a:	3501      	adds	r5, #1
 800a43c:	68e3      	ldr	r3, [r4, #12]
 800a43e:	6832      	ldr	r2, [r6, #0]
 800a440:	1a9b      	subs	r3, r3, r2
 800a442:	42ab      	cmp	r3, r5
 800a444:	ddd2      	ble.n	800a3ec <_printf_common+0x3c>
 800a446:	0022      	movs	r2, r4
 800a448:	2301      	movs	r3, #1
 800a44a:	9901      	ldr	r1, [sp, #4]
 800a44c:	9800      	ldr	r0, [sp, #0]
 800a44e:	9f08      	ldr	r7, [sp, #32]
 800a450:	3219      	adds	r2, #25
 800a452:	47b8      	blx	r7
 800a454:	3001      	adds	r0, #1
 800a456:	d1f0      	bne.n	800a43a <_printf_common+0x8a>
 800a458:	2001      	movs	r0, #1
 800a45a:	4240      	negs	r0, r0
 800a45c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a45e:	2030      	movs	r0, #48	; 0x30
 800a460:	18e1      	adds	r1, r4, r3
 800a462:	3143      	adds	r1, #67	; 0x43
 800a464:	7008      	strb	r0, [r1, #0]
 800a466:	0021      	movs	r1, r4
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	3145      	adds	r1, #69	; 0x45
 800a46c:	7809      	ldrb	r1, [r1, #0]
 800a46e:	18a2      	adds	r2, r4, r2
 800a470:	3243      	adds	r2, #67	; 0x43
 800a472:	3302      	adds	r3, #2
 800a474:	7011      	strb	r1, [r2, #0]
 800a476:	e7c1      	b.n	800a3fc <_printf_common+0x4c>
 800a478:	0022      	movs	r2, r4
 800a47a:	2301      	movs	r3, #1
 800a47c:	9901      	ldr	r1, [sp, #4]
 800a47e:	9800      	ldr	r0, [sp, #0]
 800a480:	9f08      	ldr	r7, [sp, #32]
 800a482:	321a      	adds	r2, #26
 800a484:	47b8      	blx	r7
 800a486:	3001      	adds	r0, #1
 800a488:	d0e6      	beq.n	800a458 <_printf_common+0xa8>
 800a48a:	3601      	adds	r6, #1
 800a48c:	e7d1      	b.n	800a432 <_printf_common+0x82>
	...

0800a490 <_printf_i>:
 800a490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a492:	b08b      	sub	sp, #44	; 0x2c
 800a494:	9206      	str	r2, [sp, #24]
 800a496:	000a      	movs	r2, r1
 800a498:	3243      	adds	r2, #67	; 0x43
 800a49a:	9307      	str	r3, [sp, #28]
 800a49c:	9005      	str	r0, [sp, #20]
 800a49e:	9204      	str	r2, [sp, #16]
 800a4a0:	7e0a      	ldrb	r2, [r1, #24]
 800a4a2:	000c      	movs	r4, r1
 800a4a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4a6:	2a78      	cmp	r2, #120	; 0x78
 800a4a8:	d809      	bhi.n	800a4be <_printf_i+0x2e>
 800a4aa:	2a62      	cmp	r2, #98	; 0x62
 800a4ac:	d80b      	bhi.n	800a4c6 <_printf_i+0x36>
 800a4ae:	2a00      	cmp	r2, #0
 800a4b0:	d100      	bne.n	800a4b4 <_printf_i+0x24>
 800a4b2:	e0be      	b.n	800a632 <_printf_i+0x1a2>
 800a4b4:	497c      	ldr	r1, [pc, #496]	; (800a6a8 <_printf_i+0x218>)
 800a4b6:	9103      	str	r1, [sp, #12]
 800a4b8:	2a58      	cmp	r2, #88	; 0x58
 800a4ba:	d100      	bne.n	800a4be <_printf_i+0x2e>
 800a4bc:	e093      	b.n	800a5e6 <_printf_i+0x156>
 800a4be:	0026      	movs	r6, r4
 800a4c0:	3642      	adds	r6, #66	; 0x42
 800a4c2:	7032      	strb	r2, [r6, #0]
 800a4c4:	e022      	b.n	800a50c <_printf_i+0x7c>
 800a4c6:	0010      	movs	r0, r2
 800a4c8:	3863      	subs	r0, #99	; 0x63
 800a4ca:	2815      	cmp	r0, #21
 800a4cc:	d8f7      	bhi.n	800a4be <_printf_i+0x2e>
 800a4ce:	f7f5 fe1b 	bl	8000108 <__gnu_thumb1_case_shi>
 800a4d2:	0016      	.short	0x0016
 800a4d4:	fff6001f 	.word	0xfff6001f
 800a4d8:	fff6fff6 	.word	0xfff6fff6
 800a4dc:	001ffff6 	.word	0x001ffff6
 800a4e0:	fff6fff6 	.word	0xfff6fff6
 800a4e4:	fff6fff6 	.word	0xfff6fff6
 800a4e8:	003600a3 	.word	0x003600a3
 800a4ec:	fff60083 	.word	0xfff60083
 800a4f0:	00b4fff6 	.word	0x00b4fff6
 800a4f4:	0036fff6 	.word	0x0036fff6
 800a4f8:	fff6fff6 	.word	0xfff6fff6
 800a4fc:	0087      	.short	0x0087
 800a4fe:	0026      	movs	r6, r4
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	3642      	adds	r6, #66	; 0x42
 800a504:	1d11      	adds	r1, r2, #4
 800a506:	6019      	str	r1, [r3, #0]
 800a508:	6813      	ldr	r3, [r2, #0]
 800a50a:	7033      	strb	r3, [r6, #0]
 800a50c:	2301      	movs	r3, #1
 800a50e:	e0a2      	b.n	800a656 <_printf_i+0x1c6>
 800a510:	6818      	ldr	r0, [r3, #0]
 800a512:	6809      	ldr	r1, [r1, #0]
 800a514:	1d02      	adds	r2, r0, #4
 800a516:	060d      	lsls	r5, r1, #24
 800a518:	d50b      	bpl.n	800a532 <_printf_i+0xa2>
 800a51a:	6805      	ldr	r5, [r0, #0]
 800a51c:	601a      	str	r2, [r3, #0]
 800a51e:	2d00      	cmp	r5, #0
 800a520:	da03      	bge.n	800a52a <_printf_i+0x9a>
 800a522:	232d      	movs	r3, #45	; 0x2d
 800a524:	9a04      	ldr	r2, [sp, #16]
 800a526:	426d      	negs	r5, r5
 800a528:	7013      	strb	r3, [r2, #0]
 800a52a:	4b5f      	ldr	r3, [pc, #380]	; (800a6a8 <_printf_i+0x218>)
 800a52c:	270a      	movs	r7, #10
 800a52e:	9303      	str	r3, [sp, #12]
 800a530:	e01b      	b.n	800a56a <_printf_i+0xda>
 800a532:	6805      	ldr	r5, [r0, #0]
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	0649      	lsls	r1, r1, #25
 800a538:	d5f1      	bpl.n	800a51e <_printf_i+0x8e>
 800a53a:	b22d      	sxth	r5, r5
 800a53c:	e7ef      	b.n	800a51e <_printf_i+0x8e>
 800a53e:	680d      	ldr	r5, [r1, #0]
 800a540:	6819      	ldr	r1, [r3, #0]
 800a542:	1d08      	adds	r0, r1, #4
 800a544:	6018      	str	r0, [r3, #0]
 800a546:	062e      	lsls	r6, r5, #24
 800a548:	d501      	bpl.n	800a54e <_printf_i+0xbe>
 800a54a:	680d      	ldr	r5, [r1, #0]
 800a54c:	e003      	b.n	800a556 <_printf_i+0xc6>
 800a54e:	066d      	lsls	r5, r5, #25
 800a550:	d5fb      	bpl.n	800a54a <_printf_i+0xba>
 800a552:	680d      	ldr	r5, [r1, #0]
 800a554:	b2ad      	uxth	r5, r5
 800a556:	4b54      	ldr	r3, [pc, #336]	; (800a6a8 <_printf_i+0x218>)
 800a558:	2708      	movs	r7, #8
 800a55a:	9303      	str	r3, [sp, #12]
 800a55c:	2a6f      	cmp	r2, #111	; 0x6f
 800a55e:	d000      	beq.n	800a562 <_printf_i+0xd2>
 800a560:	3702      	adds	r7, #2
 800a562:	0023      	movs	r3, r4
 800a564:	2200      	movs	r2, #0
 800a566:	3343      	adds	r3, #67	; 0x43
 800a568:	701a      	strb	r2, [r3, #0]
 800a56a:	6863      	ldr	r3, [r4, #4]
 800a56c:	60a3      	str	r3, [r4, #8]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	db03      	blt.n	800a57a <_printf_i+0xea>
 800a572:	2104      	movs	r1, #4
 800a574:	6822      	ldr	r2, [r4, #0]
 800a576:	438a      	bics	r2, r1
 800a578:	6022      	str	r2, [r4, #0]
 800a57a:	2d00      	cmp	r5, #0
 800a57c:	d102      	bne.n	800a584 <_printf_i+0xf4>
 800a57e:	9e04      	ldr	r6, [sp, #16]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00c      	beq.n	800a59e <_printf_i+0x10e>
 800a584:	9e04      	ldr	r6, [sp, #16]
 800a586:	0028      	movs	r0, r5
 800a588:	0039      	movs	r1, r7
 800a58a:	f7f5 fe4d 	bl	8000228 <__aeabi_uidivmod>
 800a58e:	9b03      	ldr	r3, [sp, #12]
 800a590:	3e01      	subs	r6, #1
 800a592:	5c5b      	ldrb	r3, [r3, r1]
 800a594:	7033      	strb	r3, [r6, #0]
 800a596:	002b      	movs	r3, r5
 800a598:	0005      	movs	r5, r0
 800a59a:	429f      	cmp	r7, r3
 800a59c:	d9f3      	bls.n	800a586 <_printf_i+0xf6>
 800a59e:	2f08      	cmp	r7, #8
 800a5a0:	d109      	bne.n	800a5b6 <_printf_i+0x126>
 800a5a2:	6823      	ldr	r3, [r4, #0]
 800a5a4:	07db      	lsls	r3, r3, #31
 800a5a6:	d506      	bpl.n	800a5b6 <_printf_i+0x126>
 800a5a8:	6862      	ldr	r2, [r4, #4]
 800a5aa:	6923      	ldr	r3, [r4, #16]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	dc02      	bgt.n	800a5b6 <_printf_i+0x126>
 800a5b0:	2330      	movs	r3, #48	; 0x30
 800a5b2:	3e01      	subs	r6, #1
 800a5b4:	7033      	strb	r3, [r6, #0]
 800a5b6:	9b04      	ldr	r3, [sp, #16]
 800a5b8:	1b9b      	subs	r3, r3, r6
 800a5ba:	6123      	str	r3, [r4, #16]
 800a5bc:	9b07      	ldr	r3, [sp, #28]
 800a5be:	0021      	movs	r1, r4
 800a5c0:	9300      	str	r3, [sp, #0]
 800a5c2:	9805      	ldr	r0, [sp, #20]
 800a5c4:	9b06      	ldr	r3, [sp, #24]
 800a5c6:	aa09      	add	r2, sp, #36	; 0x24
 800a5c8:	f7ff fef2 	bl	800a3b0 <_printf_common>
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	d147      	bne.n	800a660 <_printf_i+0x1d0>
 800a5d0:	2001      	movs	r0, #1
 800a5d2:	4240      	negs	r0, r0
 800a5d4:	b00b      	add	sp, #44	; 0x2c
 800a5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5d8:	2220      	movs	r2, #32
 800a5da:	6809      	ldr	r1, [r1, #0]
 800a5dc:	430a      	orrs	r2, r1
 800a5de:	6022      	str	r2, [r4, #0]
 800a5e0:	2278      	movs	r2, #120	; 0x78
 800a5e2:	4932      	ldr	r1, [pc, #200]	; (800a6ac <_printf_i+0x21c>)
 800a5e4:	9103      	str	r1, [sp, #12]
 800a5e6:	0021      	movs	r1, r4
 800a5e8:	3145      	adds	r1, #69	; 0x45
 800a5ea:	700a      	strb	r2, [r1, #0]
 800a5ec:	6819      	ldr	r1, [r3, #0]
 800a5ee:	6822      	ldr	r2, [r4, #0]
 800a5f0:	c920      	ldmia	r1!, {r5}
 800a5f2:	0610      	lsls	r0, r2, #24
 800a5f4:	d402      	bmi.n	800a5fc <_printf_i+0x16c>
 800a5f6:	0650      	lsls	r0, r2, #25
 800a5f8:	d500      	bpl.n	800a5fc <_printf_i+0x16c>
 800a5fa:	b2ad      	uxth	r5, r5
 800a5fc:	6019      	str	r1, [r3, #0]
 800a5fe:	07d3      	lsls	r3, r2, #31
 800a600:	d502      	bpl.n	800a608 <_printf_i+0x178>
 800a602:	2320      	movs	r3, #32
 800a604:	4313      	orrs	r3, r2
 800a606:	6023      	str	r3, [r4, #0]
 800a608:	2710      	movs	r7, #16
 800a60a:	2d00      	cmp	r5, #0
 800a60c:	d1a9      	bne.n	800a562 <_printf_i+0xd2>
 800a60e:	2220      	movs	r2, #32
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	4393      	bics	r3, r2
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	e7a4      	b.n	800a562 <_printf_i+0xd2>
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	680d      	ldr	r5, [r1, #0]
 800a61c:	1d10      	adds	r0, r2, #4
 800a61e:	6949      	ldr	r1, [r1, #20]
 800a620:	6018      	str	r0, [r3, #0]
 800a622:	6813      	ldr	r3, [r2, #0]
 800a624:	062e      	lsls	r6, r5, #24
 800a626:	d501      	bpl.n	800a62c <_printf_i+0x19c>
 800a628:	6019      	str	r1, [r3, #0]
 800a62a:	e002      	b.n	800a632 <_printf_i+0x1a2>
 800a62c:	066d      	lsls	r5, r5, #25
 800a62e:	d5fb      	bpl.n	800a628 <_printf_i+0x198>
 800a630:	8019      	strh	r1, [r3, #0]
 800a632:	2300      	movs	r3, #0
 800a634:	9e04      	ldr	r6, [sp, #16]
 800a636:	6123      	str	r3, [r4, #16]
 800a638:	e7c0      	b.n	800a5bc <_printf_i+0x12c>
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	1d11      	adds	r1, r2, #4
 800a63e:	6019      	str	r1, [r3, #0]
 800a640:	6816      	ldr	r6, [r2, #0]
 800a642:	2100      	movs	r1, #0
 800a644:	0030      	movs	r0, r6
 800a646:	6862      	ldr	r2, [r4, #4]
 800a648:	f000 f9ac 	bl	800a9a4 <memchr>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d001      	beq.n	800a654 <_printf_i+0x1c4>
 800a650:	1b80      	subs	r0, r0, r6
 800a652:	6060      	str	r0, [r4, #4]
 800a654:	6863      	ldr	r3, [r4, #4]
 800a656:	6123      	str	r3, [r4, #16]
 800a658:	2300      	movs	r3, #0
 800a65a:	9a04      	ldr	r2, [sp, #16]
 800a65c:	7013      	strb	r3, [r2, #0]
 800a65e:	e7ad      	b.n	800a5bc <_printf_i+0x12c>
 800a660:	0032      	movs	r2, r6
 800a662:	6923      	ldr	r3, [r4, #16]
 800a664:	9906      	ldr	r1, [sp, #24]
 800a666:	9805      	ldr	r0, [sp, #20]
 800a668:	9d07      	ldr	r5, [sp, #28]
 800a66a:	47a8      	blx	r5
 800a66c:	3001      	adds	r0, #1
 800a66e:	d0af      	beq.n	800a5d0 <_printf_i+0x140>
 800a670:	6823      	ldr	r3, [r4, #0]
 800a672:	079b      	lsls	r3, r3, #30
 800a674:	d415      	bmi.n	800a6a2 <_printf_i+0x212>
 800a676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a678:	68e0      	ldr	r0, [r4, #12]
 800a67a:	4298      	cmp	r0, r3
 800a67c:	daaa      	bge.n	800a5d4 <_printf_i+0x144>
 800a67e:	0018      	movs	r0, r3
 800a680:	e7a8      	b.n	800a5d4 <_printf_i+0x144>
 800a682:	0022      	movs	r2, r4
 800a684:	2301      	movs	r3, #1
 800a686:	9906      	ldr	r1, [sp, #24]
 800a688:	9805      	ldr	r0, [sp, #20]
 800a68a:	9e07      	ldr	r6, [sp, #28]
 800a68c:	3219      	adds	r2, #25
 800a68e:	47b0      	blx	r6
 800a690:	3001      	adds	r0, #1
 800a692:	d09d      	beq.n	800a5d0 <_printf_i+0x140>
 800a694:	3501      	adds	r5, #1
 800a696:	68e3      	ldr	r3, [r4, #12]
 800a698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a69a:	1a9b      	subs	r3, r3, r2
 800a69c:	42ab      	cmp	r3, r5
 800a69e:	dcf0      	bgt.n	800a682 <_printf_i+0x1f2>
 800a6a0:	e7e9      	b.n	800a676 <_printf_i+0x1e6>
 800a6a2:	2500      	movs	r5, #0
 800a6a4:	e7f7      	b.n	800a696 <_printf_i+0x206>
 800a6a6:	46c0      	nop			; (mov r8, r8)
 800a6a8:	0800de74 	.word	0x0800de74
 800a6ac:	0800de85 	.word	0x0800de85

0800a6b0 <__swbuf_r>:
 800a6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b2:	0006      	movs	r6, r0
 800a6b4:	000d      	movs	r5, r1
 800a6b6:	0014      	movs	r4, r2
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d004      	beq.n	800a6c6 <__swbuf_r+0x16>
 800a6bc:	6a03      	ldr	r3, [r0, #32]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <__swbuf_r+0x16>
 800a6c2:	f7ff fadf 	bl	8009c84 <__sinit>
 800a6c6:	69a3      	ldr	r3, [r4, #24]
 800a6c8:	60a3      	str	r3, [r4, #8]
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	071b      	lsls	r3, r3, #28
 800a6ce:	d528      	bpl.n	800a722 <__swbuf_r+0x72>
 800a6d0:	6923      	ldr	r3, [r4, #16]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d025      	beq.n	800a722 <__swbuf_r+0x72>
 800a6d6:	6923      	ldr	r3, [r4, #16]
 800a6d8:	6820      	ldr	r0, [r4, #0]
 800a6da:	b2ef      	uxtb	r7, r5
 800a6dc:	1ac0      	subs	r0, r0, r3
 800a6de:	6963      	ldr	r3, [r4, #20]
 800a6e0:	b2ed      	uxtb	r5, r5
 800a6e2:	4283      	cmp	r3, r0
 800a6e4:	dc05      	bgt.n	800a6f2 <__swbuf_r+0x42>
 800a6e6:	0021      	movs	r1, r4
 800a6e8:	0030      	movs	r0, r6
 800a6ea:	f7ff fc41 	bl	8009f70 <_fflush_r>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d11d      	bne.n	800a72e <__swbuf_r+0x7e>
 800a6f2:	68a3      	ldr	r3, [r4, #8]
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	60a3      	str	r3, [r4, #8]
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	1c5a      	adds	r2, r3, #1
 800a6fe:	6022      	str	r2, [r4, #0]
 800a700:	701f      	strb	r7, [r3, #0]
 800a702:	6963      	ldr	r3, [r4, #20]
 800a704:	4283      	cmp	r3, r0
 800a706:	d004      	beq.n	800a712 <__swbuf_r+0x62>
 800a708:	89a3      	ldrh	r3, [r4, #12]
 800a70a:	07db      	lsls	r3, r3, #31
 800a70c:	d507      	bpl.n	800a71e <__swbuf_r+0x6e>
 800a70e:	2d0a      	cmp	r5, #10
 800a710:	d105      	bne.n	800a71e <__swbuf_r+0x6e>
 800a712:	0021      	movs	r1, r4
 800a714:	0030      	movs	r0, r6
 800a716:	f7ff fc2b 	bl	8009f70 <_fflush_r>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	d107      	bne.n	800a72e <__swbuf_r+0x7e>
 800a71e:	0028      	movs	r0, r5
 800a720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a722:	0021      	movs	r1, r4
 800a724:	0030      	movs	r0, r6
 800a726:	f000 f805 	bl	800a734 <__swsetup_r>
 800a72a:	2800      	cmp	r0, #0
 800a72c:	d0d3      	beq.n	800a6d6 <__swbuf_r+0x26>
 800a72e:	2501      	movs	r5, #1
 800a730:	426d      	negs	r5, r5
 800a732:	e7f4      	b.n	800a71e <__swbuf_r+0x6e>

0800a734 <__swsetup_r>:
 800a734:	4b30      	ldr	r3, [pc, #192]	; (800a7f8 <__swsetup_r+0xc4>)
 800a736:	b570      	push	{r4, r5, r6, lr}
 800a738:	0005      	movs	r5, r0
 800a73a:	6818      	ldr	r0, [r3, #0]
 800a73c:	000c      	movs	r4, r1
 800a73e:	2800      	cmp	r0, #0
 800a740:	d004      	beq.n	800a74c <__swsetup_r+0x18>
 800a742:	6a03      	ldr	r3, [r0, #32]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d101      	bne.n	800a74c <__swsetup_r+0x18>
 800a748:	f7ff fa9c 	bl	8009c84 <__sinit>
 800a74c:	230c      	movs	r3, #12
 800a74e:	5ee2      	ldrsh	r2, [r4, r3]
 800a750:	b293      	uxth	r3, r2
 800a752:	0711      	lsls	r1, r2, #28
 800a754:	d423      	bmi.n	800a79e <__swsetup_r+0x6a>
 800a756:	06d9      	lsls	r1, r3, #27
 800a758:	d407      	bmi.n	800a76a <__swsetup_r+0x36>
 800a75a:	2309      	movs	r3, #9
 800a75c:	2001      	movs	r0, #1
 800a75e:	602b      	str	r3, [r5, #0]
 800a760:	3337      	adds	r3, #55	; 0x37
 800a762:	4313      	orrs	r3, r2
 800a764:	81a3      	strh	r3, [r4, #12]
 800a766:	4240      	negs	r0, r0
 800a768:	bd70      	pop	{r4, r5, r6, pc}
 800a76a:	075b      	lsls	r3, r3, #29
 800a76c:	d513      	bpl.n	800a796 <__swsetup_r+0x62>
 800a76e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a770:	2900      	cmp	r1, #0
 800a772:	d008      	beq.n	800a786 <__swsetup_r+0x52>
 800a774:	0023      	movs	r3, r4
 800a776:	3344      	adds	r3, #68	; 0x44
 800a778:	4299      	cmp	r1, r3
 800a77a:	d002      	beq.n	800a782 <__swsetup_r+0x4e>
 800a77c:	0028      	movs	r0, r5
 800a77e:	f7ff fb23 	bl	8009dc8 <_free_r>
 800a782:	2300      	movs	r3, #0
 800a784:	6363      	str	r3, [r4, #52]	; 0x34
 800a786:	2224      	movs	r2, #36	; 0x24
 800a788:	89a3      	ldrh	r3, [r4, #12]
 800a78a:	4393      	bics	r3, r2
 800a78c:	81a3      	strh	r3, [r4, #12]
 800a78e:	2300      	movs	r3, #0
 800a790:	6063      	str	r3, [r4, #4]
 800a792:	6923      	ldr	r3, [r4, #16]
 800a794:	6023      	str	r3, [r4, #0]
 800a796:	2308      	movs	r3, #8
 800a798:	89a2      	ldrh	r2, [r4, #12]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	81a3      	strh	r3, [r4, #12]
 800a79e:	6923      	ldr	r3, [r4, #16]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10b      	bne.n	800a7bc <__swsetup_r+0x88>
 800a7a4:	21a0      	movs	r1, #160	; 0xa0
 800a7a6:	2280      	movs	r2, #128	; 0x80
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	0089      	lsls	r1, r1, #2
 800a7ac:	0092      	lsls	r2, r2, #2
 800a7ae:	400b      	ands	r3, r1
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d003      	beq.n	800a7bc <__swsetup_r+0x88>
 800a7b4:	0021      	movs	r1, r4
 800a7b6:	0028      	movs	r0, r5
 800a7b8:	f000 f848 	bl	800a84c <__smakebuf_r>
 800a7bc:	220c      	movs	r2, #12
 800a7be:	5ea3      	ldrsh	r3, [r4, r2]
 800a7c0:	2001      	movs	r0, #1
 800a7c2:	001a      	movs	r2, r3
 800a7c4:	b299      	uxth	r1, r3
 800a7c6:	4002      	ands	r2, r0
 800a7c8:	4203      	tst	r3, r0
 800a7ca:	d00f      	beq.n	800a7ec <__swsetup_r+0xb8>
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	60a2      	str	r2, [r4, #8]
 800a7d0:	6962      	ldr	r2, [r4, #20]
 800a7d2:	4252      	negs	r2, r2
 800a7d4:	61a2      	str	r2, [r4, #24]
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	6922      	ldr	r2, [r4, #16]
 800a7da:	4282      	cmp	r2, r0
 800a7dc:	d1c4      	bne.n	800a768 <__swsetup_r+0x34>
 800a7de:	0609      	lsls	r1, r1, #24
 800a7e0:	d5c2      	bpl.n	800a768 <__swsetup_r+0x34>
 800a7e2:	2240      	movs	r2, #64	; 0x40
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	81a3      	strh	r3, [r4, #12]
 800a7e8:	3801      	subs	r0, #1
 800a7ea:	e7bd      	b.n	800a768 <__swsetup_r+0x34>
 800a7ec:	0788      	lsls	r0, r1, #30
 800a7ee:	d400      	bmi.n	800a7f2 <__swsetup_r+0xbe>
 800a7f0:	6962      	ldr	r2, [r4, #20]
 800a7f2:	60a2      	str	r2, [r4, #8]
 800a7f4:	e7ef      	b.n	800a7d6 <__swsetup_r+0xa2>
 800a7f6:	46c0      	nop			; (mov r8, r8)
 800a7f8:	2000007c 	.word	0x2000007c

0800a7fc <__swhatbuf_r>:
 800a7fc:	b570      	push	{r4, r5, r6, lr}
 800a7fe:	000e      	movs	r6, r1
 800a800:	001d      	movs	r5, r3
 800a802:	230e      	movs	r3, #14
 800a804:	5ec9      	ldrsh	r1, [r1, r3]
 800a806:	0014      	movs	r4, r2
 800a808:	b096      	sub	sp, #88	; 0x58
 800a80a:	2900      	cmp	r1, #0
 800a80c:	da0c      	bge.n	800a828 <__swhatbuf_r+0x2c>
 800a80e:	89b2      	ldrh	r2, [r6, #12]
 800a810:	2380      	movs	r3, #128	; 0x80
 800a812:	0011      	movs	r1, r2
 800a814:	4019      	ands	r1, r3
 800a816:	421a      	tst	r2, r3
 800a818:	d013      	beq.n	800a842 <__swhatbuf_r+0x46>
 800a81a:	2100      	movs	r1, #0
 800a81c:	3b40      	subs	r3, #64	; 0x40
 800a81e:	2000      	movs	r0, #0
 800a820:	6029      	str	r1, [r5, #0]
 800a822:	6023      	str	r3, [r4, #0]
 800a824:	b016      	add	sp, #88	; 0x58
 800a826:	bd70      	pop	{r4, r5, r6, pc}
 800a828:	466a      	mov	r2, sp
 800a82a:	f000 f84d 	bl	800a8c8 <_fstat_r>
 800a82e:	2800      	cmp	r0, #0
 800a830:	dbed      	blt.n	800a80e <__swhatbuf_r+0x12>
 800a832:	23f0      	movs	r3, #240	; 0xf0
 800a834:	9901      	ldr	r1, [sp, #4]
 800a836:	021b      	lsls	r3, r3, #8
 800a838:	4019      	ands	r1, r3
 800a83a:	4b03      	ldr	r3, [pc, #12]	; (800a848 <__swhatbuf_r+0x4c>)
 800a83c:	18c9      	adds	r1, r1, r3
 800a83e:	424b      	negs	r3, r1
 800a840:	4159      	adcs	r1, r3
 800a842:	2380      	movs	r3, #128	; 0x80
 800a844:	00db      	lsls	r3, r3, #3
 800a846:	e7ea      	b.n	800a81e <__swhatbuf_r+0x22>
 800a848:	ffffe000 	.word	0xffffe000

0800a84c <__smakebuf_r>:
 800a84c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a84e:	2602      	movs	r6, #2
 800a850:	898b      	ldrh	r3, [r1, #12]
 800a852:	0005      	movs	r5, r0
 800a854:	000c      	movs	r4, r1
 800a856:	4233      	tst	r3, r6
 800a858:	d006      	beq.n	800a868 <__smakebuf_r+0x1c>
 800a85a:	0023      	movs	r3, r4
 800a85c:	3347      	adds	r3, #71	; 0x47
 800a85e:	6023      	str	r3, [r4, #0]
 800a860:	6123      	str	r3, [r4, #16]
 800a862:	2301      	movs	r3, #1
 800a864:	6163      	str	r3, [r4, #20]
 800a866:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a868:	466a      	mov	r2, sp
 800a86a:	ab01      	add	r3, sp, #4
 800a86c:	f7ff ffc6 	bl	800a7fc <__swhatbuf_r>
 800a870:	9900      	ldr	r1, [sp, #0]
 800a872:	0007      	movs	r7, r0
 800a874:	0028      	movs	r0, r5
 800a876:	f7ff f8a5 	bl	80099c4 <_malloc_r>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d108      	bne.n	800a890 <__smakebuf_r+0x44>
 800a87e:	220c      	movs	r2, #12
 800a880:	5ea3      	ldrsh	r3, [r4, r2]
 800a882:	059a      	lsls	r2, r3, #22
 800a884:	d4ef      	bmi.n	800a866 <__smakebuf_r+0x1a>
 800a886:	2203      	movs	r2, #3
 800a888:	4393      	bics	r3, r2
 800a88a:	431e      	orrs	r6, r3
 800a88c:	81a6      	strh	r6, [r4, #12]
 800a88e:	e7e4      	b.n	800a85a <__smakebuf_r+0xe>
 800a890:	2380      	movs	r3, #128	; 0x80
 800a892:	89a2      	ldrh	r2, [r4, #12]
 800a894:	6020      	str	r0, [r4, #0]
 800a896:	4313      	orrs	r3, r2
 800a898:	81a3      	strh	r3, [r4, #12]
 800a89a:	9b00      	ldr	r3, [sp, #0]
 800a89c:	6120      	str	r0, [r4, #16]
 800a89e:	6163      	str	r3, [r4, #20]
 800a8a0:	9b01      	ldr	r3, [sp, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00c      	beq.n	800a8c0 <__smakebuf_r+0x74>
 800a8a6:	0028      	movs	r0, r5
 800a8a8:	230e      	movs	r3, #14
 800a8aa:	5ee1      	ldrsh	r1, [r4, r3]
 800a8ac:	f000 f81e 	bl	800a8ec <_isatty_r>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d005      	beq.n	800a8c0 <__smakebuf_r+0x74>
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	89a2      	ldrh	r2, [r4, #12]
 800a8b8:	439a      	bics	r2, r3
 800a8ba:	3b02      	subs	r3, #2
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	81a3      	strh	r3, [r4, #12]
 800a8c0:	89a3      	ldrh	r3, [r4, #12]
 800a8c2:	433b      	orrs	r3, r7
 800a8c4:	81a3      	strh	r3, [r4, #12]
 800a8c6:	e7ce      	b.n	800a866 <__smakebuf_r+0x1a>

0800a8c8 <_fstat_r>:
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	b570      	push	{r4, r5, r6, lr}
 800a8cc:	4d06      	ldr	r5, [pc, #24]	; (800a8e8 <_fstat_r+0x20>)
 800a8ce:	0004      	movs	r4, r0
 800a8d0:	0008      	movs	r0, r1
 800a8d2:	0011      	movs	r1, r2
 800a8d4:	602b      	str	r3, [r5, #0]
 800a8d6:	f7fa f93a 	bl	8004b4e <_fstat>
 800a8da:	1c43      	adds	r3, r0, #1
 800a8dc:	d103      	bne.n	800a8e6 <_fstat_r+0x1e>
 800a8de:	682b      	ldr	r3, [r5, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d000      	beq.n	800a8e6 <_fstat_r+0x1e>
 800a8e4:	6023      	str	r3, [r4, #0]
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}
 800a8e8:	20002520 	.word	0x20002520

0800a8ec <_isatty_r>:
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	b570      	push	{r4, r5, r6, lr}
 800a8f0:	4d06      	ldr	r5, [pc, #24]	; (800a90c <_isatty_r+0x20>)
 800a8f2:	0004      	movs	r4, r0
 800a8f4:	0008      	movs	r0, r1
 800a8f6:	602b      	str	r3, [r5, #0]
 800a8f8:	f7fa f937 	bl	8004b6a <_isatty>
 800a8fc:	1c43      	adds	r3, r0, #1
 800a8fe:	d103      	bne.n	800a908 <_isatty_r+0x1c>
 800a900:	682b      	ldr	r3, [r5, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d000      	beq.n	800a908 <_isatty_r+0x1c>
 800a906:	6023      	str	r3, [r4, #0]
 800a908:	bd70      	pop	{r4, r5, r6, pc}
 800a90a:	46c0      	nop			; (mov r8, r8)
 800a90c:	20002520 	.word	0x20002520

0800a910 <_raise_r>:
 800a910:	b570      	push	{r4, r5, r6, lr}
 800a912:	0004      	movs	r4, r0
 800a914:	000d      	movs	r5, r1
 800a916:	291f      	cmp	r1, #31
 800a918:	d904      	bls.n	800a924 <_raise_r+0x14>
 800a91a:	2316      	movs	r3, #22
 800a91c:	6003      	str	r3, [r0, #0]
 800a91e:	2001      	movs	r0, #1
 800a920:	4240      	negs	r0, r0
 800a922:	bd70      	pop	{r4, r5, r6, pc}
 800a924:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a926:	2b00      	cmp	r3, #0
 800a928:	d004      	beq.n	800a934 <_raise_r+0x24>
 800a92a:	008a      	lsls	r2, r1, #2
 800a92c:	189b      	adds	r3, r3, r2
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	2a00      	cmp	r2, #0
 800a932:	d108      	bne.n	800a946 <_raise_r+0x36>
 800a934:	0020      	movs	r0, r4
 800a936:	f000 f831 	bl	800a99c <_getpid_r>
 800a93a:	002a      	movs	r2, r5
 800a93c:	0001      	movs	r1, r0
 800a93e:	0020      	movs	r0, r4
 800a940:	f000 f81a 	bl	800a978 <_kill_r>
 800a944:	e7ed      	b.n	800a922 <_raise_r+0x12>
 800a946:	2000      	movs	r0, #0
 800a948:	2a01      	cmp	r2, #1
 800a94a:	d0ea      	beq.n	800a922 <_raise_r+0x12>
 800a94c:	1c51      	adds	r1, r2, #1
 800a94e:	d103      	bne.n	800a958 <_raise_r+0x48>
 800a950:	2316      	movs	r3, #22
 800a952:	3001      	adds	r0, #1
 800a954:	6023      	str	r3, [r4, #0]
 800a956:	e7e4      	b.n	800a922 <_raise_r+0x12>
 800a958:	2400      	movs	r4, #0
 800a95a:	0028      	movs	r0, r5
 800a95c:	601c      	str	r4, [r3, #0]
 800a95e:	4790      	blx	r2
 800a960:	0020      	movs	r0, r4
 800a962:	e7de      	b.n	800a922 <_raise_r+0x12>

0800a964 <raise>:
 800a964:	b510      	push	{r4, lr}
 800a966:	4b03      	ldr	r3, [pc, #12]	; (800a974 <raise+0x10>)
 800a968:	0001      	movs	r1, r0
 800a96a:	6818      	ldr	r0, [r3, #0]
 800a96c:	f7ff ffd0 	bl	800a910 <_raise_r>
 800a970:	bd10      	pop	{r4, pc}
 800a972:	46c0      	nop			; (mov r8, r8)
 800a974:	2000007c 	.word	0x2000007c

0800a978 <_kill_r>:
 800a978:	2300      	movs	r3, #0
 800a97a:	b570      	push	{r4, r5, r6, lr}
 800a97c:	4d06      	ldr	r5, [pc, #24]	; (800a998 <_kill_r+0x20>)
 800a97e:	0004      	movs	r4, r0
 800a980:	0008      	movs	r0, r1
 800a982:	0011      	movs	r1, r2
 800a984:	602b      	str	r3, [r5, #0]
 800a986:	f7fa f883 	bl	8004a90 <_kill>
 800a98a:	1c43      	adds	r3, r0, #1
 800a98c:	d103      	bne.n	800a996 <_kill_r+0x1e>
 800a98e:	682b      	ldr	r3, [r5, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d000      	beq.n	800a996 <_kill_r+0x1e>
 800a994:	6023      	str	r3, [r4, #0]
 800a996:	bd70      	pop	{r4, r5, r6, pc}
 800a998:	20002520 	.word	0x20002520

0800a99c <_getpid_r>:
 800a99c:	b510      	push	{r4, lr}
 800a99e:	f7fa f871 	bl	8004a84 <_getpid>
 800a9a2:	bd10      	pop	{r4, pc}

0800a9a4 <memchr>:
 800a9a4:	b2c9      	uxtb	r1, r1
 800a9a6:	1882      	adds	r2, r0, r2
 800a9a8:	4290      	cmp	r0, r2
 800a9aa:	d101      	bne.n	800a9b0 <memchr+0xc>
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	4770      	bx	lr
 800a9b0:	7803      	ldrb	r3, [r0, #0]
 800a9b2:	428b      	cmp	r3, r1
 800a9b4:	d0fb      	beq.n	800a9ae <memchr+0xa>
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	e7f6      	b.n	800a9a8 <memchr+0x4>
	...

0800a9bc <_init>:
 800a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9be:	46c0      	nop			; (mov r8, r8)
 800a9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9c2:	bc08      	pop	{r3}
 800a9c4:	469e      	mov	lr, r3
 800a9c6:	4770      	bx	lr

0800a9c8 <_fini>:
 800a9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ca:	46c0      	nop			; (mov r8, r8)
 800a9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ce:	bc08      	pop	{r3}
 800a9d0:	469e      	mov	lr, r3
 800a9d2:	4770      	bx	lr
