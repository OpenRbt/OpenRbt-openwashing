
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b314  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034b8  0800b3d4  0800b3d4  0001b3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e88c  0800e88c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800e88c  0800e88c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e88c  0800e88c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e88c  0800e88c  0001e88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e890  0800e890  0001e890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800e894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c4  20000080  0800e914  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002544  0800e914  00022544  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b0de  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c48  00000000  00000000  0003b1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d50  00000000  00000000  0003fe18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016bd  00000000  00000000  00041b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014aa1  00000000  00000000  00043225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f40c  00000000  00000000  00057cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076ef4  00000000  00000000  000770d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007314  00000000  00000000  000edfc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000f52dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b3bc 	.word	0x0800b3bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	0800b3bc 	.word	0x0800b3bc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4699      	mov	r9, r3
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	469c      	mov	ip, r3
 8000412:	0413      	lsls	r3, r2, #16
 8000414:	4647      	mov	r7, r8
 8000416:	0c1b      	lsrs	r3, r3, #16
 8000418:	001d      	movs	r5, r3
 800041a:	000e      	movs	r6, r1
 800041c:	4661      	mov	r1, ip
 800041e:	0404      	lsls	r4, r0, #16
 8000420:	0c24      	lsrs	r4, r4, #16
 8000422:	b580      	push	{r7, lr}
 8000424:	0007      	movs	r7, r0
 8000426:	0c10      	lsrs	r0, r2, #16
 8000428:	434b      	muls	r3, r1
 800042a:	4365      	muls	r5, r4
 800042c:	4341      	muls	r1, r0
 800042e:	4360      	muls	r0, r4
 8000430:	0c2c      	lsrs	r4, r5, #16
 8000432:	18c0      	adds	r0, r0, r3
 8000434:	1820      	adds	r0, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	4283      	cmp	r3, r0
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4356      	muls	r6, r2
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	042d      	lsls	r5, r5, #16
 800044e:	0c2d      	lsrs	r5, r5, #16
 8000450:	1989      	adds	r1, r1, r6
 8000452:	4463      	add	r3, ip
 8000454:	0400      	lsls	r0, r0, #16
 8000456:	1940      	adds	r0, r0, r5
 8000458:	18c9      	adds	r1, r1, r3
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <set_sleep_func>:
// functions to work with relays
void (*app_turn_on)(uint8_t) = 0;
void (*app_turn_off)(uint8_t) = 0;
void (*just_sleep_for_ms)(uint32_t) = 0;

void set_sleep_func(void (*new_just_sleep_for_ms)(uint32_t)) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	just_sleep_for_ms = new_just_sleep_for_ms;
 800046c:	4b03      	ldr	r3, [pc, #12]	; (800047c <set_sleep_func+0x18>)
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	601a      	str	r2, [r3, #0]
}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	b002      	add	sp, #8
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	200000d8 	.word	0x200000d8

08000480 <zero_hw_relays_vars>:
uint32_t timeout_ms;

// variables to control motor_speed
motor_full_status motor_status;

void zero_hw_relays_vars(){
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
	for(int i=0;i<11;i++) {
 8000486:	2300      	movs	r3, #0
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	e015      	b.n	80004b8 <zero_hw_relays_vars+0x38>
		hardware_relay[i].current_position = RELAY_NOW_OFF;
 800048c:	4a0f      	ldr	r2, [pc, #60]	; (80004cc <zero_hw_relays_vars+0x4c>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	011b      	lsls	r3, r3, #4
 8000492:	18d3      	adds	r3, r2, r3
 8000494:	3301      	adds	r3, #1
 8000496:	2202      	movs	r2, #2
 8000498:	701a      	strb	r2, [r3, #0]
		hardware_relay[i].last_switching_time = 0;
 800049a:	4a0c      	ldr	r2, [pc, #48]	; (80004cc <zero_hw_relays_vars+0x4c>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	011b      	lsls	r3, r3, #4
 80004a0:	18d3      	adds	r3, r2, r3
 80004a2:	3304      	adds	r3, #4
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
		hardware_relay[i].relay_working_mode = RELAY_MODE_ALWAYS_OFF;
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <zero_hw_relays_vars+0x4c>)
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	0112      	lsls	r2, r2, #4
 80004ae:	2102      	movs	r1, #2
 80004b0:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<11;i++) {
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	3301      	adds	r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b0a      	cmp	r3, #10
 80004bc:	dde6      	ble.n	800048c <zero_hw_relays_vars+0xc>
	}
	timeout_ms = 0;
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <zero_hw_relays_vars+0x50>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b002      	add	sp, #8
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	200000e4 	.word	0x200000e4
 80004d0:	20000194 	.word	0x20000194

080004d4 <app_set_desired_motor_speed>:

void app_set_desired_motor_speed(uint8_t percent) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	0002      	movs	r2, r0
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	701a      	strb	r2, [r3, #0]
	motor_status.is_in_use = 1;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <app_set_desired_motor_speed+0x4c>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
	if(percent > 100) {
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b64      	cmp	r3, #100	; 0x64
 80004ec:	d902      	bls.n	80004f4 <app_set_desired_motor_speed+0x20>
		percent = 100;
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	2264      	movs	r2, #100	; 0x64
 80004f2:	701a      	strb	r2, [r3, #0]
	}
	if (!percent) {
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d106      	bne.n	800050a <app_set_desired_motor_speed+0x36>
		motor_status.desired_status = MOTOR_STATUS_STOPPED;
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <app_set_desired_motor_speed+0x4c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	70da      	strb	r2, [r3, #3]
		motor_status.desired_speed = 0;
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <app_set_desired_motor_speed+0x4c>)
 8000504:	2200      	movs	r2, #0
 8000506:	711a      	strb	r2, [r3, #4]
	} else {
		motor_status.desired_status = MOTOR_STATUS_RUNNING;
		motor_status.desired_speed = percent;
	}
}
 8000508:	e006      	b.n	8000518 <app_set_desired_motor_speed+0x44>
		motor_status.desired_status = MOTOR_STATUS_RUNNING;
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <app_set_desired_motor_speed+0x4c>)
 800050c:	2201      	movs	r2, #1
 800050e:	70da      	strb	r2, [r3, #3]
		motor_status.desired_speed = percent;
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <app_set_desired_motor_speed+0x4c>)
 8000512:	1dfa      	adds	r2, r7, #7
 8000514:	7812      	ldrb	r2, [r2, #0]
 8000516:	711a      	strb	r2, [r3, #4]
}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b002      	add	sp, #8
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000198 	.word	0x20000198

08000524 <status_by_error>:

uint8_t status_by_error(uint8_t err) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	0002      	movs	r2, r0
 800052c:	1dfb      	adds	r3, r7, #7
 800052e:	701a      	strb	r2, [r3, #0]
	if (err == ERROR_SHORT_ANSWER) {
 8000530:	1dfb      	adds	r3, r7, #7
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d101      	bne.n	800053c <status_by_error+0x18>
		return MOTOR_NOT_ANSWERING;
 8000538:	2300      	movs	r3, #0
 800053a:	e006      	b.n	800054a <status_by_error+0x26>
	} else if (err == ERROR_WRONG_ANSWER) {
 800053c:	1dfb      	adds	r3, r7, #7
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b02      	cmp	r3, #2
 8000542:	d101      	bne.n	8000548 <status_by_error+0x24>
		return MOTOR_WRONG_ANSWERS;
 8000544:	2301      	movs	r3, #1
 8000546:	e000      	b.n	800054a <status_by_error+0x26>
	} else {
		return MOTOR_OK;
 8000548:	2302      	movs	r3, #2
	}
}
 800054a:	0018      	movs	r0, r3
 800054c:	46bd      	mov	sp, r7
 800054e:	b002      	add	sp, #8
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <get_motor_communication_status>:

uint8_t get_motor_communication_status() {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	return motor_status.communication_status;
 8000558:	4b02      	ldr	r3, [pc, #8]	; (8000564 <get_motor_communication_status+0x10>)
 800055a:	222a      	movs	r2, #42	; 0x2a
 800055c:	5c9b      	ldrb	r3, [r3, r2]
}
 800055e:	0018      	movs	r0, r3
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000198 	.word	0x20000198

08000568 <motor_loop>:
// motor_loop returns an error
uint8_t motor_loop() {
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
	// Let it start once per 1 ms
	motor_status.inactive_loops++;
 800056e:	4b66      	ldr	r3, [pc, #408]	; (8000708 <motor_loop+0x1a0>)
 8000570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000572:	3301      	adds	r3, #1
 8000574:	b29a      	uxth	r2, r3
 8000576:	4b64      	ldr	r3, [pc, #400]	; (8000708 <motor_loop+0x1a0>)
 8000578:	851a      	strh	r2, [r3, #40]	; 0x28

	if (motor_status.desired_status == MOTOR_STATUS_STOPPED) {
 800057a:	4b63      	ldr	r3, [pc, #396]	; (8000708 <motor_loop+0x1a0>)
 800057c:	78db      	ldrb	r3, [r3, #3]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d11d      	bne.n	80005be <motor_loop+0x56>
		if(motor_status.current_status == MOTOR_STATUS_RUNNING) {
 8000582:	4b61      	ldr	r3, [pc, #388]	; (8000708 <motor_loop+0x1a0>)
 8000584:	785b      	ldrb	r3, [r3, #1]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d160      	bne.n	800064c <motor_loop+0xe4>
			motor_status.inactive_loops = 0;
 800058a:	4b5f      	ldr	r3, [pc, #380]	; (8000708 <motor_loop+0x1a0>)
 800058c:	2200      	movs	r2, #0
 800058e:	851a      	strh	r2, [r3, #40]	; 0x28
			uint8_t err = app_stop_motor();
 8000590:	1d3c      	adds	r4, r7, #4
 8000592:	f000 f975 	bl	8000880 <app_stop_motor>
 8000596:	0003      	movs	r3, r0
 8000598:	7023      	strb	r3, [r4, #0]
			if (!err) {
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d102      	bne.n	80005a8 <motor_loop+0x40>
				motor_status.current_status = MOTOR_STATUS_STOPPED;
 80005a2:	4b59      	ldr	r3, [pc, #356]	; (8000708 <motor_loop+0x1a0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	705a      	strb	r2, [r3, #1]
			}
			motor_status.communication_status = status_by_error(err);
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	0018      	movs	r0, r3
 80005ae:	f7ff ffb9 	bl	8000524 <status_by_error>
 80005b2:	0003      	movs	r3, r0
 80005b4:	0019      	movs	r1, r3
 80005b6:	4b54      	ldr	r3, [pc, #336]	; (8000708 <motor_loop+0x1a0>)
 80005b8:	222a      	movs	r2, #42	; 0x2a
 80005ba:	5499      	strb	r1, [r3, r2]
 80005bc:	e046      	b.n	800064c <motor_loop+0xe4>
		}
	} else {
		uint8_t desired_speed = motor_status.desired_speed;
 80005be:	1dfb      	adds	r3, r7, #7
 80005c0:	4a51      	ldr	r2, [pc, #324]	; (8000708 <motor_loop+0x1a0>)
 80005c2:	7912      	ldrb	r2, [r2, #4]
 80005c4:	701a      	strb	r2, [r3, #0]
		if (motor_status.current_speed != desired_speed) {
 80005c6:	4b50      	ldr	r3, [pc, #320]	; (8000708 <motor_loop+0x1a0>)
 80005c8:	789b      	ldrb	r3, [r3, #2]
 80005ca:	1dfa      	adds	r2, r7, #7
 80005cc:	7812      	ldrb	r2, [r2, #0]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d01f      	beq.n	8000612 <motor_loop+0xaa>
			motor_status.inactive_loops = 0;
 80005d2:	4b4d      	ldr	r3, [pc, #308]	; (8000708 <motor_loop+0x1a0>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	851a      	strh	r2, [r3, #40]	; 0x28
			uint8_t err = app_set_motor_speed(desired_speed);
 80005d8:	1dbc      	adds	r4, r7, #6
 80005da:	1dfb      	adds	r3, r7, #7
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 f96a 	bl	80008b8 <app_set_motor_speed>
 80005e4:	0003      	movs	r3, r0
 80005e6:	7023      	strb	r3, [r4, #0]
			motor_status.communication_status = status_by_error(err);
 80005e8:	1dbb      	adds	r3, r7, #6
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	0018      	movs	r0, r3
 80005ee:	f7ff ff99 	bl	8000524 <status_by_error>
 80005f2:	0003      	movs	r3, r0
 80005f4:	0019      	movs	r1, r3
 80005f6:	4b44      	ldr	r3, [pc, #272]	; (8000708 <motor_loop+0x1a0>)
 80005f8:	222a      	movs	r2, #42	; 0x2a
 80005fa:	5499      	strb	r1, [r3, r2]
			if (err) return err;
 80005fc:	1dbb      	adds	r3, r7, #6
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d002      	beq.n	800060a <motor_loop+0xa2>
 8000604:	1dbb      	adds	r3, r7, #6
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	e07a      	b.n	8000700 <motor_loop+0x198>
			motor_status.current_speed = desired_speed;
 800060a:	4b3f      	ldr	r3, [pc, #252]	; (8000708 <motor_loop+0x1a0>)
 800060c:	1dfa      	adds	r2, r7, #7
 800060e:	7812      	ldrb	r2, [r2, #0]
 8000610:	709a      	strb	r2, [r3, #2]
		}
		if (motor_status.current_status == MOTOR_STATUS_STOPPED) {
 8000612:	4b3d      	ldr	r3, [pc, #244]	; (8000708 <motor_loop+0x1a0>)
 8000614:	785b      	ldrb	r3, [r3, #1]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d118      	bne.n	800064c <motor_loop+0xe4>
			motor_status.inactive_loops = 0;
 800061a:	4b3b      	ldr	r3, [pc, #236]	; (8000708 <motor_loop+0x1a0>)
 800061c:	2200      	movs	r2, #0
 800061e:	851a      	strh	r2, [r3, #40]	; 0x28
			uint8_t err = app_start_motor();
 8000620:	1d7c      	adds	r4, r7, #5
 8000622:	f000 f96f 	bl	8000904 <app_start_motor>
 8000626:	0003      	movs	r3, r0
 8000628:	7023      	strb	r3, [r4, #0]
			motor_status.communication_status = status_by_error(err);
 800062a:	1d7b      	adds	r3, r7, #5
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	0018      	movs	r0, r3
 8000630:	f7ff ff78 	bl	8000524 <status_by_error>
 8000634:	0003      	movs	r3, r0
 8000636:	0019      	movs	r1, r3
 8000638:	4b33      	ldr	r3, [pc, #204]	; (8000708 <motor_loop+0x1a0>)
 800063a:	222a      	movs	r2, #42	; 0x2a
 800063c:	5499      	strb	r1, [r3, r2]
			if (err) {
 800063e:	1d7b      	adds	r3, r7, #5
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <motor_loop+0xe4>
				return err;
 8000646:	1d7b      	adds	r3, r7, #5
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	e059      	b.n	8000700 <motor_loop+0x198>
			}
		}
	}
	if (motor_status.inactive_loops > 2000) {
 800064c:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <motor_loop+0x1a0>)
 800064e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8000650:	23fa      	movs	r3, #250	; 0xfa
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	429a      	cmp	r2, r3
 8000656:	d952      	bls.n	80006fe <motor_loop+0x196>
		motor_status.inactive_loops = 0;
 8000658:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <motor_loop+0x1a0>)
 800065a:	2200      	movs	r2, #0
 800065c:	851a      	strh	r2, [r3, #40]	; 0x28
		if (motor_status.is_in_use) {
 800065e:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <motor_loop+0x1a0>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d03c      	beq.n	80006e0 <motor_loop+0x178>
			if(motor_status.desired_status == MOTOR_STATUS_STOPPED) {
 8000666:	4b28      	ldr	r3, [pc, #160]	; (8000708 <motor_loop+0x1a0>)
 8000668:	78db      	ldrb	r3, [r3, #3]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d10f      	bne.n	800068e <motor_loop+0x126>
				uint8_t err = app_stop_motor();
 800066e:	1c7c      	adds	r4, r7, #1
 8000670:	f000 f906 	bl	8000880 <app_stop_motor>
 8000674:	0003      	movs	r3, r0
 8000676:	7023      	strb	r3, [r4, #0]
				motor_status.communication_status = status_by_error(err);
 8000678:	1c7b      	adds	r3, r7, #1
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	0018      	movs	r0, r3
 800067e:	f7ff ff51 	bl	8000524 <status_by_error>
 8000682:	0003      	movs	r3, r0
 8000684:	0019      	movs	r1, r3
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <motor_loop+0x1a0>)
 8000688:	222a      	movs	r2, #42	; 0x2a
 800068a:	5499      	strb	r1, [r3, r2]
 800068c:	e037      	b.n	80006fe <motor_loop+0x196>
			} else {
				uint8_t err = app_set_motor_speed(motor_status.desired_speed);
 800068e:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <motor_loop+0x1a0>)
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	1cbc      	adds	r4, r7, #2
 8000694:	0018      	movs	r0, r3
 8000696:	f000 f90f 	bl	80008b8 <app_set_motor_speed>
 800069a:	0003      	movs	r3, r0
 800069c:	7023      	strb	r3, [r4, #0]
				motor_status.communication_status = status_by_error(err);
 800069e:	1cbb      	adds	r3, r7, #2
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ff3e 	bl	8000524 <status_by_error>
 80006a8:	0003      	movs	r3, r0
 80006aa:	0019      	movs	r1, r3
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <motor_loop+0x1a0>)
 80006ae:	222a      	movs	r2, #42	; 0x2a
 80006b0:	5499      	strb	r1, [r3, r2]
				if (err) return err;
 80006b2:	1cbb      	adds	r3, r7, #2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d002      	beq.n	80006c0 <motor_loop+0x158>
 80006ba:	1cbb      	adds	r3, r7, #2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	e01f      	b.n	8000700 <motor_loop+0x198>
				err = app_start_motor();
 80006c0:	1cbc      	adds	r4, r7, #2
 80006c2:	f000 f91f 	bl	8000904 <app_start_motor>
 80006c6:	0003      	movs	r3, r0
 80006c8:	7023      	strb	r3, [r4, #0]
				motor_status.communication_status = status_by_error(err);
 80006ca:	1cbb      	adds	r3, r7, #2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	0018      	movs	r0, r3
 80006d0:	f7ff ff28 	bl	8000524 <status_by_error>
 80006d4:	0003      	movs	r3, r0
 80006d6:	0019      	movs	r1, r3
 80006d8:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <motor_loop+0x1a0>)
 80006da:	222a      	movs	r2, #42	; 0x2a
 80006dc:	5499      	strb	r1, [r3, r2]
 80006de:	e00e      	b.n	80006fe <motor_loop+0x196>
			}
		} else {
			uint8_t err = app_get_motor_info();
 80006e0:	1cfc      	adds	r4, r7, #3
 80006e2:	f000 f92b 	bl	800093c <app_get_motor_info>
 80006e6:	0003      	movs	r3, r0
 80006e8:	7023      	strb	r3, [r4, #0]
			motor_status.communication_status = status_by_error(err);
 80006ea:	1cfb      	adds	r3, r7, #3
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	0018      	movs	r0, r3
 80006f0:	f7ff ff18 	bl	8000524 <status_by_error>
 80006f4:	0003      	movs	r3, r0
 80006f6:	0019      	movs	r1, r3
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <motor_loop+0x1a0>)
 80006fa:	222a      	movs	r2, #42	; 0x2a
 80006fc:	5499      	strb	r1, [r3, r2]
		}
	}
	return 0;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	0018      	movs	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	b003      	add	sp, #12
 8000706:	bd90      	pop	{r4, r7, pc}
 8000708:	20000198 	.word	0x20000198

0800070c <send_rs_485_command>:

void send_rs_485_command(const char *cmd, uint8_t size) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	000a      	movs	r2, r1
 8000716:	1cfb      	adds	r3, r7, #3
 8000718:	701a      	strb	r2, [r3, #0]
	motor_status.rx_buffer_cursor = 0;
 800071a:	4b07      	ldr	r3, [pc, #28]	; (8000738 <send_rs_485_command+0x2c>)
 800071c:	2226      	movs	r2, #38	; 0x26
 800071e:	2100      	movs	r1, #0
 8000720:	5499      	strb	r1, [r3, r2]
	rs485_write_data(cmd, size);
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <send_rs_485_command+0x30>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	1cfa      	adds	r2, r7, #3
 8000728:	7811      	ldrb	r1, [r2, #0]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	0010      	movs	r0, r2
 800072e:	4798      	blx	r3
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b002      	add	sp, #8
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000198 	.word	0x20000198
 800073c:	200000c8 	.word	0x200000c8

08000740 <are_equal>:

uint8_t are_equal(const char * src1, const char * src2, uint8_t size) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<size;i++) {
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	e00e      	b.n	8000772 <are_equal+0x32>
		if (src1[i] != src2[i]) {
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	18d3      	adds	r3, r2, r3
 800075a:	781a      	ldrb	r2, [r3, #0]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	68b9      	ldr	r1, [r7, #8]
 8000760:	18cb      	adds	r3, r1, r3
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	d001      	beq.n	800076c <are_equal+0x2c>
			return 0;
 8000768:	2300      	movs	r3, #0
 800076a:	e008      	b.n	800077e <are_equal+0x3e>
	for (int i=0; i<size;i++) {
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	3301      	adds	r3, #1
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	429a      	cmp	r2, r3
 800077a:	dbeb      	blt.n	8000754 <are_equal+0x14>
		}
	}
	return 1;
 800077c:	2301      	movs	r3, #1
}
 800077e:	0018      	movs	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	b006      	add	sp, #24
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <send_generic_cmd>:

uint8_t send_generic_cmd(const char *cur_cmd) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	send_rs_485_command(cur_cmd, 8);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2108      	movs	r1, #8
 8000794:	0018      	movs	r0, r3
 8000796:	f7ff ffb9 	bl	800070c <send_rs_485_command>
	uint8_t max_delay = 50;
 800079a:	230f      	movs	r3, #15
 800079c:	18fb      	adds	r3, r7, r3
 800079e:	2232      	movs	r2, #50	; 0x32
 80007a0:	701a      	strb	r2, [r3, #0]
	for (;max_delay > 0 && motor_status.rx_buffer_cursor<8;) {
 80007a2:	e009      	b.n	80007b8 <send_generic_cmd+0x30>
		max_delay--;
 80007a4:	210f      	movs	r1, #15
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	3a01      	subs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
		just_sleep_for_ms(1);
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <send_generic_cmd+0x70>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2001      	movs	r0, #1
 80007b6:	4798      	blx	r3
	for (;max_delay > 0 && motor_status.rx_buffer_cursor<8;) {
 80007b8:	230f      	movs	r3, #15
 80007ba:	18fb      	adds	r3, r7, r3
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d004      	beq.n	80007cc <send_generic_cmd+0x44>
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <send_generic_cmd+0x74>)
 80007c4:	2226      	movs	r2, #38	; 0x26
 80007c6:	5c9b      	ldrb	r3, [r3, r2]
 80007c8:	2b07      	cmp	r3, #7
 80007ca:	d9eb      	bls.n	80007a4 <send_generic_cmd+0x1c>
	}
	if(motor_status.rx_buffer_cursor < 8) {
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <send_generic_cmd+0x74>)
 80007ce:	2226      	movs	r2, #38	; 0x26
 80007d0:	5c9b      	ldrb	r3, [r3, r2]
 80007d2:	2b07      	cmp	r3, #7
 80007d4:	d801      	bhi.n	80007da <send_generic_cmd+0x52>
		return ERROR_SHORT_ANSWER;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00a      	b.n	80007f0 <send_generic_cmd+0x68>
	}
	if(!are_equal(cur_cmd, motor_status.rx_buffer, 8)) {
 80007da:	4909      	ldr	r1, [pc, #36]	; (8000800 <send_generic_cmd+0x78>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2208      	movs	r2, #8
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff ffad 	bl	8000740 <are_equal>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d101      	bne.n	80007ee <send_generic_cmd+0x66>
		return ERROR_WRONG_ANSWER;
 80007ea:	2302      	movs	r3, #2
 80007ec:	e000      	b.n	80007f0 <send_generic_cmd+0x68>
	}
	return 0;
 80007ee:	2300      	movs	r3, #0
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b004      	add	sp, #16
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000d8 	.word	0x200000d8
 80007fc:	20000198 	.word	0x20000198
 8000800:	2000019d 	.word	0x2000019d

08000804 <send_read_cmd>:

uint8_t send_read_cmd(const char *cur_cmd) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	send_rs_485_command(cur_cmd, 8);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2108      	movs	r1, #8
 8000810:	0018      	movs	r0, r3
 8000812:	f7ff ff7b 	bl	800070c <send_rs_485_command>
	uint8_t max_delay = 50;
 8000816:	230f      	movs	r3, #15
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	2232      	movs	r2, #50	; 0x32
 800081c:	701a      	strb	r2, [r3, #0]
	for (;max_delay > 0 && motor_status.rx_buffer_cursor<6;) {
 800081e:	e009      	b.n	8000834 <send_read_cmd+0x30>
		max_delay--;
 8000820:	210f      	movs	r1, #15
 8000822:	187b      	adds	r3, r7, r1
 8000824:	781a      	ldrb	r2, [r3, #0]
 8000826:	187b      	adds	r3, r7, r1
 8000828:	3a01      	subs	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
		just_sleep_for_ms(1);
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <send_read_cmd+0x70>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2001      	movs	r0, #1
 8000832:	4798      	blx	r3
	for (;max_delay > 0 && motor_status.rx_buffer_cursor<6;) {
 8000834:	230f      	movs	r3, #15
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d004      	beq.n	8000848 <send_read_cmd+0x44>
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <send_read_cmd+0x74>)
 8000840:	2226      	movs	r2, #38	; 0x26
 8000842:	5c9b      	ldrb	r3, [r3, r2]
 8000844:	2b05      	cmp	r3, #5
 8000846:	d9eb      	bls.n	8000820 <send_read_cmd+0x1c>
	}
	if(motor_status.rx_buffer_cursor < 6) {
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <send_read_cmd+0x74>)
 800084a:	2226      	movs	r2, #38	; 0x26
 800084c:	5c9b      	ldrb	r3, [r3, r2]
 800084e:	2b05      	cmp	r3, #5
 8000850:	d801      	bhi.n	8000856 <send_read_cmd+0x52>
		return ERROR_SHORT_ANSWER;
 8000852:	2301      	movs	r3, #1
 8000854:	e00a      	b.n	800086c <send_read_cmd+0x68>
	}
	// We need to parse read info, right now we can just compare first two bytes
	if(!are_equal(cur_cmd, motor_status.rx_buffer, 2)) {
 8000856:	4909      	ldr	r1, [pc, #36]	; (800087c <send_read_cmd+0x78>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2202      	movs	r2, #2
 800085c:	0018      	movs	r0, r3
 800085e:	f7ff ff6f 	bl	8000740 <are_equal>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d101      	bne.n	800086a <send_read_cmd+0x66>
		return ERROR_WRONG_ANSWER;
 8000866:	2302      	movs	r3, #2
 8000868:	e000      	b.n	800086c <send_read_cmd+0x68>
	}
	return 0;
 800086a:	2300      	movs	r3, #0
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	b004      	add	sp, #16
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000d8 	.word	0x200000d8
 8000878:	20000198 	.word	0x20000198
 800087c:	2000019d 	.word	0x2000019d

08000880 <app_stop_motor>:

// returns error
uint8_t app_stop_motor(){
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
	char * cur_cmd;
	switch (current_settings.frequency_converter_model){
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <app_stop_motor+0x34>)
 8000888:	789b      	ldrb	r3, [r3, #2]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d104      	bne.n	8000898 <app_stop_motor+0x18>
	case ESQ_770:
		cur_cmd = stop_motor_cmd_770();
 800088e:	f001 fbcb 	bl	8002028 <stop_motor_cmd_770>
 8000892:	0003      	movs	r3, r0
 8000894:	607b      	str	r3, [r7, #4]
		break;
 8000896:	e004      	b.n	80008a2 <app_stop_motor+0x22>
	default:
		cur_cmd = stop_motor_cmd();
 8000898:	f001 fb08 	bl	8001eac <stop_motor_cmd>
 800089c:	0003      	movs	r3, r0
 800089e:	607b      	str	r3, [r7, #4]
		break;
 80008a0:	46c0      	nop			; (mov r8, r8)
	}
	return send_generic_cmd(cur_cmd);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	0018      	movs	r0, r3
 80008a6:	f7ff ff6f 	bl	8000788 <send_generic_cmd>
 80008aa:	0003      	movs	r3, r0
}
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b002      	add	sp, #8
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000e0 	.word	0x200000e0

080008b8 <app_set_motor_speed>:

// returns error
uint8_t app_set_motor_speed(uint8_t desired_speed) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	0002      	movs	r2, r0
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	701a      	strb	r2, [r3, #0]
	char * cur_cmd;
	switch (current_settings.frequency_converter_model){
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <app_set_motor_speed+0x48>)
 80008c6:	789b      	ldrb	r3, [r3, #2]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d107      	bne.n	80008dc <app_set_motor_speed+0x24>
	case ESQ_770:
		cur_cmd = set_motor_speed_cmd_770(desired_speed);
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 fb71 	bl	8001fb8 <set_motor_speed_cmd_770>
 80008d6:	0003      	movs	r3, r0
 80008d8:	60fb      	str	r3, [r7, #12]
		break;
 80008da:	e007      	b.n	80008ec <app_set_motor_speed+0x34>
	default:
		cur_cmd = set_motor_speed_cmd(desired_speed);
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	0018      	movs	r0, r3
 80008e2:	f001 faab 	bl	8001e3c <set_motor_speed_cmd>
 80008e6:	0003      	movs	r3, r0
 80008e8:	60fb      	str	r3, [r7, #12]
		break;
 80008ea:	46c0      	nop			; (mov r8, r8)
	}

	return send_generic_cmd(cur_cmd);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	0018      	movs	r0, r3
 80008f0:	f7ff ff4a 	bl	8000788 <send_generic_cmd>
 80008f4:	0003      	movs	r3, r0
}
 80008f6:	0018      	movs	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b004      	add	sp, #16
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	200000e0 	.word	0x200000e0

08000904 <app_start_motor>:

// returns error
uint8_t app_start_motor() {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
	char * cur_cmd;
	switch (current_settings.frequency_converter_model){
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <app_start_motor+0x34>)
 800090c:	789b      	ldrb	r3, [r3, #2]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d104      	bne.n	800091c <app_start_motor+0x18>
	case ESQ_770:
		cur_cmd = start_motor_cmd_770();
 8000912:	f001 fb49 	bl	8001fa8 <start_motor_cmd_770>
 8000916:	0003      	movs	r3, r0
 8000918:	607b      	str	r3, [r7, #4]
		break;
 800091a:	e004      	b.n	8000926 <app_start_motor+0x22>
	default:
		cur_cmd = start_motor_cmd();
 800091c:	f001 fa86 	bl	8001e2c <start_motor_cmd>
 8000920:	0003      	movs	r3, r0
 8000922:	607b      	str	r3, [r7, #4]
		break;
 8000924:	46c0      	nop			; (mov r8, r8)
	}
	return send_generic_cmd(cur_cmd);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	0018      	movs	r0, r3
 800092a:	f7ff ff2d 	bl	8000788 <send_generic_cmd>
 800092e:	0003      	movs	r3, r0
}
 8000930:	0018      	movs	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	b002      	add	sp, #8
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200000e0 	.word	0x200000e0

0800093c <app_get_motor_info>:

uint8_t app_get_motor_info() {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
	char * cur_cmd;
	switch (current_settings.frequency_converter_model){
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <app_get_motor_info+0x34>)
 8000944:	789b      	ldrb	r3, [r3, #2]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d104      	bne.n	8000954 <app_get_motor_info+0x18>
	case ESQ_770:
		cur_cmd = read_motor_info_cmd_770();
 800094a:	f001 fb65 	bl	8002018 <read_motor_info_cmd_770>
 800094e:	0003      	movs	r3, r0
 8000950:	607b      	str	r3, [r7, #4]
		break;
 8000952:	e004      	b.n	800095e <app_get_motor_info+0x22>
	default:
		cur_cmd = read_motor_info_cmd();
 8000954:	f001 faa2 	bl	8001e9c <read_motor_info_cmd>
 8000958:	0003      	movs	r3, r0
 800095a:	607b      	str	r3, [r7, #4]
		break;
 800095c:	46c0      	nop			; (mov r8, r8)
	}
	return send_read_cmd(cur_cmd);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	0018      	movs	r0, r3
 8000962:	f7ff ff4f 	bl	8000804 <send_read_cmd>
 8000966:	0003      	movs	r3, r0
}
 8000968:	0018      	movs	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	b002      	add	sp, #8
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200000e0 	.word	0x200000e0

08000974 <app_push_motor_byte>:

void app_push_motor_byte(uint8_t key) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	0002      	movs	r2, r0
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	701a      	strb	r2, [r3, #0]
	if (motor_status.rx_buffer_cursor == 0 && key == 0) {
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <app_push_motor_byte+0x5c>)
 8000982:	2226      	movs	r2, #38	; 0x26
 8000984:	5c9b      	ldrb	r3, [r3, r2]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d103      	bne.n	8000992 <app_push_motor_byte+0x1e>
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d01a      	beq.n	80009c8 <app_push_motor_byte+0x54>
		// we do not need to add leading zero bytes
		return;
	}
	motor_status.rx_buffer[motor_status.rx_buffer_cursor] = key;
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <app_push_motor_byte+0x5c>)
 8000994:	2226      	movs	r2, #38	; 0x26
 8000996:	5c9b      	ldrb	r3, [r3, r2]
 8000998:	001a      	movs	r2, r3
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <app_push_motor_byte+0x5c>)
 800099c:	189b      	adds	r3, r3, r2
 800099e:	1dfa      	adds	r2, r7, #7
 80009a0:	7812      	ldrb	r2, [r2, #0]
 80009a2:	715a      	strb	r2, [r3, #5]
	motor_status.rx_buffer_cursor++;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <app_push_motor_byte+0x5c>)
 80009a6:	2226      	movs	r2, #38	; 0x26
 80009a8:	5c9b      	ldrb	r3, [r3, r2]
 80009aa:	3301      	adds	r3, #1
 80009ac:	b2d9      	uxtb	r1, r3
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <app_push_motor_byte+0x5c>)
 80009b0:	2226      	movs	r2, #38	; 0x26
 80009b2:	5499      	strb	r1, [r3, r2]
	if(motor_status.rx_buffer_cursor > MOTOR_RX_SIZE) {
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <app_push_motor_byte+0x5c>)
 80009b6:	2226      	movs	r2, #38	; 0x26
 80009b8:	5c9b      	ldrb	r3, [r3, r2]
 80009ba:	2b20      	cmp	r3, #32
 80009bc:	d905      	bls.n	80009ca <app_push_motor_byte+0x56>
		motor_status.rx_buffer_cursor = MOTOR_RX_SIZE;
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <app_push_motor_byte+0x5c>)
 80009c0:	2226      	movs	r2, #38	; 0x26
 80009c2:	2120      	movs	r1, #32
 80009c4:	5499      	strb	r1, [r3, r2]
 80009c6:	e000      	b.n	80009ca <app_push_motor_byte+0x56>
		return;
 80009c8:	46c0      	nop			; (mov r8, r8)
	}
}
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b002      	add	sp, #8
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000198 	.word	0x20000198

080009d4 <zero_motor_settings>:

void zero_motor_settings() {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	motor_status.is_in_use = 0;
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <zero_motor_settings+0x40>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
	motor_status.desired_speed = 0;
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <zero_motor_settings+0x40>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	711a      	strb	r2, [r3, #4]
	motor_status.current_speed = 0;
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <zero_motor_settings+0x40>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	709a      	strb	r2, [r3, #2]
	motor_status.current_status = MOTOR_STATUS_STOPPED;
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <zero_motor_settings+0x40>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	705a      	strb	r2, [r3, #1]
	motor_status.desired_status = MOTOR_STATUS_STOPPED;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <zero_motor_settings+0x40>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	70da      	strb	r2, [r3, #3]
	motor_status.rx_buffer_cursor = 0;
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <zero_motor_settings+0x40>)
 80009f8:	2226      	movs	r2, #38	; 0x26
 80009fa:	2100      	movs	r1, #0
 80009fc:	5499      	strb	r1, [r3, r2]
	motor_status.inactive_loops = 0;
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <zero_motor_settings+0x40>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	851a      	strh	r2, [r3, #40]	; 0x28
	motor_status.communication_status = MOTOR_NOT_ANSWERING;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <zero_motor_settings+0x40>)
 8000a06:	222a      	movs	r2, #42	; 0x2a
 8000a08:	2100      	movs	r1, #0
 8000a0a:	5499      	strb	r1, [r3, r2]
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	20000198 	.word	0x20000198

08000a18 <app_init>:

void app_init() {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	recover_settings((uint32_t *)&current_settings);
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <app_init+0x24>)
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 f902 	bl	8000c28 <recover_settings>
	zero_hw_relays_vars();
 8000a24:	f7ff fd2c 	bl	8000480 <zero_hw_relays_vars>
	zero_motor_settings();
 8000a28:	f7ff ffd4 	bl	80009d4 <zero_motor_settings>
	esq_vars_init();
 8000a2c:	f001 f988 	bl	8001d40 <esq_vars_init>
	esq_vars_init_770();
 8000a30:	f001 fa44 	bl	8001ebc <esq_vars_init_770>
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	200000e0 	.word	0x200000e0

08000a40 <set_turn_on_func>:

void set_turn_on_func(void (*new_turn_on)(uint8_t)) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	app_turn_on = new_turn_on;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <set_turn_on_func+0x18>)
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	601a      	str	r2, [r3, #0]
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	200000d0 	.word	0x200000d0

08000a5c <set_turn_off_func>:

void set_turn_off_func(void (*new_turn_off)(uint8_t)) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	app_turn_off = new_turn_off;
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <set_turn_off_func+0x18>)
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	601a      	str	r2, [r3, #0]
}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	200000d4 	.word	0x200000d4

08000a78 <app_update_relays>:

void app_update_relays() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
	// let's check timeout first
	if (timeout_ms) {
 8000a7e:	4b4c      	ldr	r3, [pc, #304]	; (8000bb0 <app_update_relays+0x138>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d021      	beq.n	8000aca <app_update_relays+0x52>
		if(timeout_ms == 1) {
 8000a86:	4b4a      	ldr	r3, [pc, #296]	; (8000bb0 <app_update_relays+0x138>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d118      	bne.n	8000ac0 <app_update_relays+0x48>
			zero_hw_relays_vars();
 8000a8e:	f7ff fcf7 	bl	8000480 <zero_hw_relays_vars>
			for (int i = 0;i<11;i++) {
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
 8000a96:	e008      	b.n	8000aaa <app_update_relays+0x32>
				app_turn_off(i);
 8000a98:	4b46      	ldr	r3, [pc, #280]	; (8000bb4 <app_update_relays+0x13c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	69fa      	ldr	r2, [r7, #28]
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	0010      	movs	r0, r2
 8000aa2:	4798      	blx	r3
			for (int i = 0;i<11;i++) {
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	2b0a      	cmp	r3, #10
 8000aae:	ddf3      	ble.n	8000a98 <app_update_relays+0x20>
			}
			if(motor_status.is_in_use) {
 8000ab0:	4b41      	ldr	r3, [pc, #260]	; (8000bb8 <app_update_relays+0x140>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d008      	beq.n	8000aca <app_update_relays+0x52>
				app_set_desired_motor_speed(0);
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f7ff fd0b 	bl	80004d4 <app_set_desired_motor_speed>
 8000abe:	e004      	b.n	8000aca <app_update_relays+0x52>
			}
		} else {
			timeout_ms--;
 8000ac0:	4b3b      	ldr	r3, [pc, #236]	; (8000bb0 <app_update_relays+0x138>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	4b3a      	ldr	r3, [pc, #232]	; (8000bb0 <app_update_relays+0x138>)
 8000ac8:	601a      	str	r2, [r3, #0]
		}
	}
	for(int i=0;i<11;i++) {
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
 8000ace:	e066      	b.n	8000b9e <app_update_relays+0x126>
		relay_hardware_status * cur_hw_relay = &hardware_relay[i];
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	011a      	lsls	r2, r3, #4
 8000ad4:	4b39      	ldr	r3, [pc, #228]	; (8000bbc <app_update_relays+0x144>)
 8000ad6:	18d3      	adds	r3, r2, r3
 8000ad8:	617b      	str	r3, [r7, #20]
		if(cur_hw_relay->relay_working_mode == RELAY_MODE_ALWAYS_OFF) {
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d10d      	bne.n	8000afe <app_update_relays+0x86>
			if(cur_hw_relay->current_position == RELAY_NOW_ON) {
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	785b      	ldrb	r3, [r3, #1]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d156      	bne.n	8000b98 <app_update_relays+0x120>
				app_turn_off(i);
 8000aea:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <app_update_relays+0x13c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	0010      	movs	r0, r2
 8000af4:	4798      	blx	r3
				cur_hw_relay->current_position = RELAY_NOW_OFF;
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	2202      	movs	r2, #2
 8000afa:	705a      	strb	r2, [r3, #1]
 8000afc:	e04c      	b.n	8000b98 <app_update_relays+0x120>
			}
		} else if (cur_hw_relay->relay_working_mode == RELAY_MODE_ALWAYS_ON) {
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d10d      	bne.n	8000b22 <app_update_relays+0xaa>
			if(cur_hw_relay->current_position == RELAY_NOW_OFF) {
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	785b      	ldrb	r3, [r3, #1]
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d144      	bne.n	8000b98 <app_update_relays+0x120>
				app_turn_on(i);
 8000b0e:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <app_update_relays+0x148>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	0010      	movs	r0, r2
 8000b18:	4798      	blx	r3
				cur_hw_relay->current_position = RELAY_NOW_ON;
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	705a      	strb	r2, [r3, #1]
 8000b20:	e03a      	b.n	8000b98 <app_update_relays+0x120>
			}
		} else {
			// switching :(
			if(cur_hw_relay->current_position == RELAY_NOW_ON) {
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d11b      	bne.n	8000b62 <app_update_relays+0xea>
				//if it is on we need to turn it off when its time is gone
				uint32_t time_to_turn_off = cur_hw_relay->last_switching_time + cur_hw_relay->ontime;
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	18d3      	adds	r3, r2, r3
 8000b34:	60bb      	str	r3, [r7, #8]
				uint32_t current_time = get_tick();
 8000b36:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <app_update_relays+0x14c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4798      	blx	r3
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	607b      	str	r3, [r7, #4]
				if (current_time > time_to_turn_off) {
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d927      	bls.n	8000b98 <app_update_relays+0x120>
					cur_hw_relay->last_switching_time = current_time;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	605a      	str	r2, [r3, #4]
					cur_hw_relay->current_position = RELAY_NOW_OFF;
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	2202      	movs	r2, #2
 8000b52:	705a      	strb	r2, [r3, #1]
					app_turn_off(i);
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <app_update_relays+0x13c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	0010      	movs	r0, r2
 8000b5e:	4798      	blx	r3
 8000b60:	e01a      	b.n	8000b98 <app_update_relays+0x120>
				}
			} else {
				//if it is off we need to turn it on when required
				uint32_t time_to_turn_on = cur_hw_relay->last_switching_time + cur_hw_relay->offtime;
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	18d3      	adds	r3, r2, r3
 8000b6c:	613b      	str	r3, [r7, #16]
				uint32_t current_time = get_tick();
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <app_update_relays+0x14c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4798      	blx	r3
 8000b74:	0003      	movs	r3, r0
 8000b76:	60fb      	str	r3, [r7, #12]
				if (current_time > time_to_turn_on) {
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d90b      	bls.n	8000b98 <app_update_relays+0x120>
					cur_hw_relay->last_switching_time = current_time;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	605a      	str	r2, [r3, #4]
					cur_hw_relay->current_position = RELAY_NOW_ON;
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	705a      	strb	r2, [r3, #1]
					app_turn_on(i);
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <app_update_relays+0x148>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	0010      	movs	r0, r2
 8000b96:	4798      	blx	r3
	for(int i=0;i<11;i++) {
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	2b0a      	cmp	r3, #10
 8000ba2:	dd95      	ble.n	8000ad0 <app_update_relays+0x58>
				}
			}
		}

	}
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b008      	add	sp, #32
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	20000194 	.word	0x20000194
 8000bb4:	200000d4 	.word	0x200000d4
 8000bb8:	20000198 	.word	0x20000198
 8000bbc:	200000e4 	.word	0x200000e4
 8000bc0:	200000d0 	.word	0x200000d0
 8000bc4:	200000cc 	.word	0x200000cc

08000bc8 <_update_post_num>:

void _update_post_num() {
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
	uint8_t post_number = current_settings.main_post_number;
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <_update_post_num+0x58>)
 8000bd2:	7852      	ldrb	r2, [r2, #1]
 8000bd4:	701a      	strb	r2, [r3, #0]
	post_num_str[2] = 0;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <_update_post_num+0x5c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	709a      	strb	r2, [r3, #2]
	uint8_t high = post_number / 10;
 8000bdc:	1dbc      	adds	r4, r7, #6
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	210a      	movs	r1, #10
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff fa99 	bl	800011c <__udivsi3>
 8000bea:	0003      	movs	r3, r0
 8000bec:	7023      	strb	r3, [r4, #0]
	post_num_str[0] = high + '0';
 8000bee:	1dbb      	adds	r3, r7, #6
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	3330      	adds	r3, #48	; 0x30
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <_update_post_num+0x5c>)
 8000bf8:	701a      	strb	r2, [r3, #0]
	uint8_t low = post_number % 10;
 8000bfa:	1d7c      	adds	r4, r7, #5
 8000bfc:	1dfb      	adds	r3, r7, #7
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	210a      	movs	r1, #10
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff fb10 	bl	8000228 <__aeabi_uidivmod>
 8000c08:	000b      	movs	r3, r1
 8000c0a:	7023      	strb	r3, [r4, #0]
	post_num_str[1] = low + '0';
 8000c0c:	1d7b      	adds	r3, r7, #5
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	3330      	adds	r3, #48	; 0x30
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <_update_post_num+0x5c>)
 8000c16:	705a      	strb	r2, [r3, #1]
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b003      	add	sp, #12
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	200000e0 	.word	0x200000e0
 8000c24:	200000dc 	.word	0x200000dc

08000c28 <recover_settings>:

void recover_settings(uint32_t * obj) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	*obj = flash_read();
 8000c30:	f004 fbd0 	bl	80053d4 <flash_read>
 8000c34:	0002      	movs	r2, r0
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	601a      	str	r2, [r3, #0]
	if (current_settings.main_post_number<1) {
 8000c3a:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <recover_settings+0x78>)
 8000c3c:	785b      	ldrb	r3, [r3, #1]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d106      	bne.n	8000c50 <recover_settings+0x28>
		current_settings.main_post_number = 1;
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <recover_settings+0x78>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	705a      	strb	r2, [r3, #1]
		write_settings((uint32_t *)&current_settings);
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <recover_settings+0x78>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 f82a 	bl	8000ca4 <write_settings>
	}
	if (current_settings.main_post_number>99) {
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <recover_settings+0x78>)
 8000c52:	785b      	ldrb	r3, [r3, #1]
 8000c54:	2b63      	cmp	r3, #99	; 0x63
 8000c56:	d906      	bls.n	8000c66 <recover_settings+0x3e>
		current_settings.main_post_number = 99;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <recover_settings+0x78>)
 8000c5a:	2263      	movs	r2, #99	; 0x63
 8000c5c:	705a      	strb	r2, [r3, #1]
		write_settings((uint32_t *)&current_settings);
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <recover_settings+0x78>)
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 f81f 	bl	8000ca4 <write_settings>
	}
	if(current_settings.frequency_converter_model > 2) {
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <recover_settings+0x78>)
 8000c68:	789b      	ldrb	r3, [r3, #2]
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d906      	bls.n	8000c7c <recover_settings+0x54>
		current_settings.frequency_converter_model = 2;
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <recover_settings+0x78>)
 8000c70:	2202      	movs	r2, #2
 8000c72:	709a      	strb	r2, [r3, #2]
		write_settings((uint32_t *)&current_settings);
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <recover_settings+0x78>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 f814 	bl	8000ca4 <write_settings>
	}

	if(current_settings.connection_mode > 1) {
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <recover_settings+0x78>)
 8000c7e:	78db      	ldrb	r3, [r3, #3]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d906      	bls.n	8000c92 <recover_settings+0x6a>
		current_settings.connection_mode = 1;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <recover_settings+0x78>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	70da      	strb	r2, [r3, #3]
		write_settings((uint32_t *)&current_settings);
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <recover_settings+0x78>)
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f000 f809 	bl	8000ca4 <write_settings>
	}

	_update_post_num();
 8000c92:	f7ff ff99 	bl	8000bc8 <_update_post_num>
}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b002      	add	sp, #8
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	200000e0 	.word	0x200000e0

08000ca4 <write_settings>:

void write_settings(uint32_t * obj) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	flash_write(*obj);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f004 fb9d 	bl	80053f0 <flash_write>
}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b002      	add	sp, #8
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <get_post_num_str>:

char * get_post_num_str() {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	return post_num_str;
 8000cc4:	4b01      	ldr	r3, [pc, #4]	; (8000ccc <get_post_num_str+0xc>)
}
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200000dc 	.word	0x200000dc

08000cd0 <get_post_num>:

uint8_t get_post_num() {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	return current_settings.main_post_number;
 8000cd4:	4b02      	ldr	r3, [pc, #8]	; (8000ce0 <get_post_num+0x10>)
 8000cd6:	785b      	ldrb	r3, [r3, #1]
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	200000e0 	.word	0x200000e0

08000ce4 <get_motor>:

uint8_t get_motor() {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	return current_settings.frequency_converter_model;
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <get_motor+0x10>)
 8000cea:	789b      	ldrb	r3, [r3, #2]
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	200000e0 	.word	0x200000e0

08000cf8 <get_connection_mode>:

uint8_t get_connection_mode() {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	return current_settings.connection_mode;
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <get_connection_mode+0x10>)
 8000cfe:	78db      	ldrb	r3, [r3, #3]
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	200000e0 	.word	0x200000e0

08000d0c <set_post_num>:

void set_post_num(uint8_t new_post_num) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	0002      	movs	r2, r0
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	701a      	strb	r2, [r3, #0]
	uint8_t old_post_num = current_settings.main_post_number;
 8000d18:	230f      	movs	r3, #15
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <set_post_num+0x5c>)
 8000d1e:	7852      	ldrb	r2, [r2, #1]
 8000d20:	701a      	strb	r2, [r3, #0]

	current_settings.main_post_number = new_post_num;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <set_post_num+0x5c>)
 8000d24:	1dfa      	adds	r2, r7, #7
 8000d26:	7812      	ldrb	r2, [r2, #0]
 8000d28:	705a      	strb	r2, [r3, #1]
	if(current_settings.main_post_number < MIN_POST_NUM) current_settings.main_post_number = MAX_POST_NUM;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <set_post_num+0x5c>)
 8000d2c:	785b      	ldrb	r3, [r3, #1]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d102      	bne.n	8000d38 <set_post_num+0x2c>
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <set_post_num+0x5c>)
 8000d34:	2263      	movs	r2, #99	; 0x63
 8000d36:	705a      	strb	r2, [r3, #1]
	if(current_settings.main_post_number > MAX_POST_NUM) current_settings.main_post_number = MIN_POST_NUM;
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <set_post_num+0x5c>)
 8000d3a:	785b      	ldrb	r3, [r3, #1]
 8000d3c:	2b63      	cmp	r3, #99	; 0x63
 8000d3e:	d902      	bls.n	8000d46 <set_post_num+0x3a>
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <set_post_num+0x5c>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	705a      	strb	r2, [r3, #1]
	_update_post_num();
 8000d46:	f7ff ff3f 	bl	8000bc8 <_update_post_num>
	if (old_post_num != current_settings.main_post_number) {
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <set_post_num+0x5c>)
 8000d4c:	785b      	ldrb	r3, [r3, #1]
 8000d4e:	220f      	movs	r2, #15
 8000d50:	18ba      	adds	r2, r7, r2
 8000d52:	7812      	ldrb	r2, [r2, #0]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d003      	beq.n	8000d60 <set_post_num+0x54>
		write_settings((uint32_t *)&current_settings);
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <set_post_num+0x5c>)
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f7ff ffa2 	bl	8000ca4 <write_settings>
	}
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b004      	add	sp, #16
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200000e0 	.word	0x200000e0

08000d6c <set_motor>:

void set_motor(uint8_t new_motor) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	0002      	movs	r2, r0
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	701a      	strb	r2, [r3, #0]
	uint8_t old_motor = current_settings.frequency_converter_model;
 8000d78:	230f      	movs	r3, #15
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <set_motor+0x4c>)
 8000d7e:	7892      	ldrb	r2, [r2, #2]
 8000d80:	701a      	strb	r2, [r3, #0]

	current_settings.frequency_converter_model = new_motor;
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <set_motor+0x4c>)
 8000d84:	1dfa      	adds	r2, r7, #7
 8000d86:	7812      	ldrb	r2, [r2, #0]
 8000d88:	709a      	strb	r2, [r3, #2]
	if(current_settings.frequency_converter_model > 2) current_settings.frequency_converter_model = 2;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <set_motor+0x4c>)
 8000d8c:	789b      	ldrb	r3, [r3, #2]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d902      	bls.n	8000d98 <set_motor+0x2c>
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <set_motor+0x4c>)
 8000d94:	2202      	movs	r2, #2
 8000d96:	709a      	strb	r2, [r3, #2]
	if (old_motor != current_settings.frequency_converter_model) {
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <set_motor+0x4c>)
 8000d9a:	789b      	ldrb	r3, [r3, #2]
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	18ba      	adds	r2, r7, r2
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d003      	beq.n	8000dae <set_motor+0x42>
		write_settings((uint32_t *)&current_settings);
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <set_motor+0x4c>)
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff ff7b 	bl	8000ca4 <write_settings>
	}
}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b004      	add	sp, #16
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	200000e0 	.word	0x200000e0

08000dbc <set_connection_mode>:

void set_connection_mode(uint8_t new_mode) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	701a      	strb	r2, [r3, #0]
	uint8_t old_mode = current_settings.connection_mode;
 8000dc8:	230f      	movs	r3, #15
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <set_connection_mode+0x4c>)
 8000dce:	78d2      	ldrb	r2, [r2, #3]
 8000dd0:	701a      	strb	r2, [r3, #0]

	current_settings.connection_mode = new_mode;
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <set_connection_mode+0x4c>)
 8000dd4:	1dfa      	adds	r2, r7, #7
 8000dd6:	7812      	ldrb	r2, [r2, #0]
 8000dd8:	70da      	strb	r2, [r3, #3]
	if(current_settings.connection_mode > 1) current_settings.connection_mode = 1;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <set_connection_mode+0x4c>)
 8000ddc:	78db      	ldrb	r3, [r3, #3]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d902      	bls.n	8000de8 <set_connection_mode+0x2c>
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <set_connection_mode+0x4c>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	70da      	strb	r2, [r3, #3]
	if (old_mode != current_settings.connection_mode) {
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <set_connection_mode+0x4c>)
 8000dea:	78db      	ldrb	r3, [r3, #3]
 8000dec:	220f      	movs	r2, #15
 8000dee:	18ba      	adds	r2, r7, r2
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d003      	beq.n	8000dfe <set_connection_mode+0x42>
		write_settings((uint32_t *)&current_settings);
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <set_connection_mode+0x4c>)
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f7ff ff53 	bl	8000ca4 <write_settings>
	}
}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b004      	add	sp, #16
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	200000e0 	.word	0x200000e0

08000e0c <set_rs485_write>:

void dec_post_num() {
	set_post_num(current_settings.main_post_number - 1);
}

void set_rs485_write(void (*new_rs485_write_data)(const char *, int)) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	rs485_write_data = new_rs485_write_data;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <set_rs485_write+0x18>)
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	601a      	str	r2, [r3, #0]
}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b002      	add	sp, #8
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	200000c8 	.word	0x200000c8

08000e28 <set_app_send_data>:

void set_app_send_data(void (*new_app_send_data)(const char *, int)) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	app_send_data = new_app_send_data;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <set_app_send_data+0x18>)
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	200000c4 	.word	0x200000c4

08000e44 <set_tick_func>:

void set_tick_func(uint32_t (*new_get_tick)(void)) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	get_tick = new_get_tick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <set_tick_func+0x18>)
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	601a      	str	r2, [r3, #0]
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b002      	add	sp, #8
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	200000cc 	.word	0x200000cc

08000e60 <int_to_hexchar>:
char int_to_hexchar(uint8_t key) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	0002      	movs	r2, r0
 8000e68:	1dfb      	adds	r3, r7, #7
 8000e6a:	701a      	strb	r2, [r3, #0]
	if (key < 9) return '0' + key;
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d804      	bhi.n	8000e7e <int_to_hexchar+0x1e>
 8000e74:	1dfb      	adds	r3, r7, #7
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	3330      	adds	r3, #48	; 0x30
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	e003      	b.n	8000e86 <int_to_hexchar+0x26>
	return 55 + key;
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	3337      	adds	r3, #55	; 0x37
 8000e84:	b2db      	uxtb	r3, r3
}
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <_copy_hex_from_byte_to_buf>:

void _copy_hex_from_byte_to_buf(uint8_t sym, char * target) {
 8000e8e:	b5b0      	push	{r4, r5, r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	0002      	movs	r2, r0
 8000e96:	6039      	str	r1, [r7, #0]
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	701a      	strb	r2, [r3, #0]
	uint8_t high = sym >> 4;
 8000e9c:	200f      	movs	r0, #15
 8000e9e:	183b      	adds	r3, r7, r0
 8000ea0:	1dfa      	adds	r2, r7, #7
 8000ea2:	7812      	ldrb	r2, [r2, #0]
 8000ea4:	0912      	lsrs	r2, r2, #4
 8000ea6:	701a      	strb	r2, [r3, #0]
	uint8_t low = sym & 0b00001111;
 8000ea8:	250e      	movs	r5, #14
 8000eaa:	197b      	adds	r3, r7, r5
 8000eac:	1dfa      	adds	r2, r7, #7
 8000eae:	7812      	ldrb	r2, [r2, #0]
 8000eb0:	210f      	movs	r1, #15
 8000eb2:	400a      	ands	r2, r1
 8000eb4:	701a      	strb	r2, [r3, #0]
	target[0] = int_to_hexchar(high);
 8000eb6:	183b      	adds	r3, r7, r0
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f7ff ffd0 	bl	8000e60 <int_to_hexchar>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	001a      	movs	r2, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	701a      	strb	r2, [r3, #0]
	target[1] = int_to_hexchar(low);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	1c5c      	adds	r4, r3, #1
 8000ecc:	197b      	adds	r3, r7, r5
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f7ff ffc5 	bl	8000e60 <int_to_hexchar>
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	7023      	strb	r3, [r4, #0]
}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b004      	add	sp, #16
 8000ee0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000ee4 <get_uid>:

char * get_uid() {
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
	if (!uid[0]) {
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <get_uid+0x68>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d126      	bne.n	8000f40 <get_uid+0x5c>
		uint8_t *idBase = (uint8_t*)(UID_BASE);
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <get_uid+0x6c>)
 8000ef4:	60bb      	str	r3, [r7, #8]
		for (uint8_t i = 0;i < 12;i++) {
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	e017      	b.n	8000f30 <get_uid+0x4c>
			uint8_t sym = idBase[i];
 8000f00:	240f      	movs	r4, #15
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	18d2      	adds	r2, r2, r3
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	7812      	ldrb	r2, [r2, #0]
 8000f0e:	701a      	strb	r2, [r3, #0]
			_copy_hex_from_byte_to_buf(sym, &uid[i * 2]);
 8000f10:	193b      	adds	r3, r7, r4
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	005a      	lsls	r2, r3, #1
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <get_uid+0x68>)
 8000f18:	18d2      	adds	r2, r2, r3
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	0011      	movs	r1, r2
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff ffb4 	bl	8000e8e <_copy_hex_from_byte_to_buf>
		for (uint8_t i = 0;i < 12;i++) {
 8000f26:	193b      	adds	r3, r7, r4
 8000f28:	781a      	ldrb	r2, [r3, #0]
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	3201      	adds	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	230f      	movs	r3, #15
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b0b      	cmp	r3, #11
 8000f38:	d9e2      	bls.n	8000f00 <get_uid+0x1c>
		}
		uid[24] = 0;
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <get_uid+0x68>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	761a      	strb	r2, [r3, #24]
	}
	return uid;
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <get_uid+0x68>)
}
 8000f42:	0018      	movs	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b005      	add	sp, #20
 8000f48:	bd90      	pop	{r4, r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	2000009c 	.word	0x2000009c
 8000f50:	1ffff7ac 	.word	0x1ffff7ac

08000f54 <set_state>:

void set_state(uint8_t new_state) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	701a      	strb	r2, [r3, #0]
	current_state = new_state;
 8000f60:	1dfb      	adds	r3, r7, #7
 8000f62:	781a      	ldrb	r2, [r3, #0]
 8000f64:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <set_state+0x1c>)
 8000f66:	601a      	str	r2, [r3, #0]
}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b002      	add	sp, #8
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200000bc 	.word	0x200000bc

08000f74 <app_process_cmd>:

void app_process_cmd(const char * cmd) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
	uint8_t station = 0;
 8000f80:	230b      	movs	r3, #11
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]

	if (current_settings.connection_mode == CONNECTION_RS485) {
 8000f88:	4b66      	ldr	r3, [pc, #408]	; (8001124 <app_process_cmd+0x1b0>)
 8000f8a:	78db      	ldrb	r3, [r3, #3]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d140      	bne.n	8001012 <app_process_cmd+0x9e>
		if (cmd[0]=='S') {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b53      	cmp	r3, #83	; 0x53
 8000f96:	d000      	beq.n	8000f9a <app_process_cmd+0x26>
 8000f98:	e0bc      	b.n	8001114 <app_process_cmd+0x1a0>
			i =1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
			for (;cmd[i]!=' ' && i<MAX_CMD_BUF-1;) {
 8000f9e:	e024      	b.n	8000fea <app_process_cmd+0x76>
				if (cmd[i] < '0' || cmd[i] > '9') {
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	18d3      	adds	r3, r2, r3
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b2f      	cmp	r3, #47	; 0x2f
 8000faa:	d800      	bhi.n	8000fae <app_process_cmd+0x3a>
 8000fac:	e0b4      	b.n	8001118 <app_process_cmd+0x1a4>
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	18d3      	adds	r3, r2, r3
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b39      	cmp	r3, #57	; 0x39
 8000fb8:	d900      	bls.n	8000fbc <app_process_cmd+0x48>
 8000fba:	e0ad      	b.n	8001118 <app_process_cmd+0x1a4>
					return;
				}
				station*=10;
 8000fbc:	200b      	movs	r0, #11
 8000fbe:	183a      	adds	r2, r7, r0
 8000fc0:	183b      	adds	r3, r7, r0
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	1c19      	adds	r1, r3, #0
 8000fc6:	0089      	lsls	r1, r1, #2
 8000fc8:	18cb      	adds	r3, r1, r3
 8000fca:	18db      	adds	r3, r3, r3
 8000fcc:	7013      	strb	r3, [r2, #0]
				station+= (cmd[i]-'0');
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	18d3      	adds	r3, r2, r3
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	183b      	adds	r3, r7, r0
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	18d3      	adds	r3, r2, r3
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	183b      	adds	r3, r7, r0
 8000fe0:	3a30      	subs	r2, #48	; 0x30
 8000fe2:	701a      	strb	r2, [r3, #0]
				i++;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]
			for (;cmd[i]!=' ' && i<MAX_CMD_BUF-1;) {
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	18d3      	adds	r3, r2, r3
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b20      	cmp	r3, #32
 8000ff4:	d002      	beq.n	8000ffc <app_process_cmd+0x88>
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2bbf      	cmp	r3, #191	; 0xbf
 8000ffa:	ddd1      	ble.n	8000fa0 <app_process_cmd+0x2c>
			}
			if (station!=current_settings.main_post_number) {
 8000ffc:	4b49      	ldr	r3, [pc, #292]	; (8001124 <app_process_cmd+0x1b0>)
 8000ffe:	785b      	ldrb	r3, [r3, #1]
 8001000:	220b      	movs	r2, #11
 8001002:	18ba      	adds	r2, r7, r2
 8001004:	7812      	ldrb	r2, [r2, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	d000      	beq.n	800100c <app_process_cmd+0x98>
 800100a:	e087      	b.n	800111c <app_process_cmd+0x1a8>
				return;
			}
			i++;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3301      	adds	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
		} else {
		return;
		}
	}

	if(get_tick) {
 8001012:	4b45      	ldr	r3, [pc, #276]	; (8001128 <app_process_cmd+0x1b4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d005      	beq.n	8001026 <app_process_cmd+0xb2>
		last_ping = get_tick();
 800101a:	4b43      	ldr	r3, [pc, #268]	; (8001128 <app_process_cmd+0x1b4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4798      	blx	r3
 8001020:	0002      	movs	r2, r0
 8001022:	4b42      	ldr	r3, [pc, #264]	; (800112c <app_process_cmd+0x1b8>)
 8001024:	601a      	str	r2, [r3, #0]
	}

	if(cmd[i+0]=='U' && cmd[i+1]=='I' && cmd[i+2] == 'D') {
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	18d3      	adds	r3, r2, r3
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b55      	cmp	r3, #85	; 0x55
 8001030:	d115      	bne.n	800105e <app_process_cmd+0xea>
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3301      	adds	r3, #1
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	18d3      	adds	r3, r2, r3
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b49      	cmp	r3, #73	; 0x49
 800103e:	d10e      	bne.n	800105e <app_process_cmd+0xea>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3302      	adds	r3, #2
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	18d3      	adds	r3, r2, r3
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b44      	cmp	r3, #68	; 0x44
 800104c:	d107      	bne.n	800105e <app_process_cmd+0xea>
		app_decode_uid(&cmd[i+3]);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3303      	adds	r3, #3
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	18d3      	adds	r3, r2, r3
 8001056:	0018      	movs	r0, r3
 8001058:	f000 fc3a 	bl	80018d0 <app_decode_uid>
		return;
 800105c:	e05f      	b.n	800111e <app_process_cmd+0x1aa>
	}
	if(cmd[i+0]=='S' && cmd[i+1]=='E' && cmd[i+2]=='T') {
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	18d3      	adds	r3, r2, r3
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b53      	cmp	r3, #83	; 0x53
 8001068:	d115      	bne.n	8001096 <app_process_cmd+0x122>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3301      	adds	r3, #1
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	18d3      	adds	r3, r2, r3
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b45      	cmp	r3, #69	; 0x45
 8001076:	d10e      	bne.n	8001096 <app_process_cmd+0x122>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3302      	adds	r3, #2
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	18d3      	adds	r3, r2, r3
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b54      	cmp	r3, #84	; 0x54
 8001084:	d107      	bne.n	8001096 <app_process_cmd+0x122>
		app_decode_set(&cmd[i+3]);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3303      	adds	r3, #3
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	18d3      	adds	r3, r2, r3
 800108e:	0018      	movs	r0, r3
 8001090:	f000 fc4c 	bl	800192c <app_decode_set>
		return;
 8001094:	e043      	b.n	800111e <app_process_cmd+0x1aa>
	}
	if(cmd[i+0]=='P' && cmd[i+1]=='I' && cmd[i+2] == 'N' && cmd[i+3] == 'G') {
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	18d3      	adds	r3, r2, r3
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b50      	cmp	r3, #80	; 0x50
 80010a0:	d11c      	bne.n	80010dc <app_process_cmd+0x168>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3301      	adds	r3, #1
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	18d3      	adds	r3, r2, r3
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b49      	cmp	r3, #73	; 0x49
 80010ae:	d115      	bne.n	80010dc <app_process_cmd+0x168>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3302      	adds	r3, #2
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	18d3      	adds	r3, r2, r3
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b4e      	cmp	r3, #78	; 0x4e
 80010bc:	d10e      	bne.n	80010dc <app_process_cmd+0x168>
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	3303      	adds	r3, #3
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	18d3      	adds	r3, r2, r3
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b47      	cmp	r3, #71	; 0x47
 80010ca:	d107      	bne.n	80010dc <app_process_cmd+0x168>
		app_decode_ping(&cmd[i+4]);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3304      	adds	r3, #4
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	18d3      	adds	r3, r2, r3
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 f82b 	bl	8001130 <app_decode_ping>
		return;
 80010da:	e020      	b.n	800111e <app_process_cmd+0x1aa>
	}
	if(cmd[i+0]=='R' && cmd[i+1]=='U' && cmd[i+2]=='N') {
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	18d3      	adds	r3, r2, r3
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b52      	cmp	r3, #82	; 0x52
 80010e6:	d11a      	bne.n	800111e <app_process_cmd+0x1aa>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	3301      	adds	r3, #1
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	18d3      	adds	r3, r2, r3
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b55      	cmp	r3, #85	; 0x55
 80010f4:	d113      	bne.n	800111e <app_process_cmd+0x1aa>
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3302      	adds	r3, #2
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	18d3      	adds	r3, r2, r3
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b4e      	cmp	r3, #78	; 0x4e
 8001102:	d10c      	bne.n	800111e <app_process_cmd+0x1aa>
		app_decode_run(&cmd[i+3]);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3303      	adds	r3, #3
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	18d3      	adds	r3, r2, r3
 800110c:	0018      	movs	r0, r3
 800110e:	f000 fa97 	bl	8001640 <app_decode_run>
 8001112:	e004      	b.n	800111e <app_process_cmd+0x1aa>
		return;
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	e002      	b.n	800111e <app_process_cmd+0x1aa>
					return;
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	e000      	b.n	800111e <app_process_cmd+0x1aa>
				return;
 800111c:	46c0      	nop			; (mov r8, r8)
	}
}
 800111e:	46bd      	mov	sp, r7
 8001120:	b004      	add	sp, #16
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200000e0 	.word	0x200000e0
 8001128:	200000cc 	.word	0x200000cc
 800112c:	200000c0 	.word	0x200000c0

08001130 <app_decode_ping>:

void app_decode_ping(const char *cmd) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	// right now we don't even parse additional data
	if(app_send_data) {
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <app_decode_ping+0x44>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d014      	beq.n	800116a <app_decode_ping+0x3a>
		char str[4];
		str[0] = post_num_str[0];
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <app_decode_ping+0x48>)
 8001142:	781a      	ldrb	r2, [r3, #0]
 8001144:	210c      	movs	r1, #12
 8001146:	187b      	adds	r3, r7, r1
 8001148:	701a      	strb	r2, [r3, #0]
		str[1] = post_num_str[1];
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <app_decode_ping+0x48>)
 800114c:	785a      	ldrb	r2, [r3, #1]
 800114e:	187b      	adds	r3, r7, r1
 8001150:	705a      	strb	r2, [r3, #1]
		str[2] = ';';
 8001152:	187b      	adds	r3, r7, r1
 8001154:	223b      	movs	r2, #59	; 0x3b
 8001156:	709a      	strb	r2, [r3, #2]
		str[3] = 0;
 8001158:	187b      	adds	r3, r7, r1
 800115a:	2200      	movs	r2, #0
 800115c:	70da      	strb	r2, [r3, #3]
		app_send_data(str, 4);
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <app_decode_ping+0x44>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	187a      	adds	r2, r7, r1
 8001164:	2104      	movs	r1, #4
 8001166:	0010      	movs	r0, r2
 8001168:	4798      	blx	r3
	}
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b004      	add	sp, #16
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	200000c4 	.word	0x200000c4
 8001178:	200000dc 	.word	0x200000dc

0800117c <process_char>:

uint8_t process_char(char key, char * buf, uint8_t * cur, uint8_t mode, relay_reader_config * r_config)  {
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	0019      	movs	r1, r3
 8001188:	240f      	movs	r4, #15
 800118a:	193b      	adds	r3, r7, r4
 800118c:	1c02      	adds	r2, r0, #0
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	200e      	movs	r0, #14
 8001192:	183b      	adds	r3, r7, r0
 8001194:	1c0a      	adds	r2, r1, #0
 8001196:	701a      	strb	r2, [r3, #0]
	if(mode == MODE_SPACE) {
 8001198:	183b      	adds	r3, r7, r0
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d127      	bne.n	80011f0 <process_char+0x74>
		if (key == 'M') {
 80011a0:	193b      	adds	r3, r7, r4
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b4d      	cmp	r3, #77	; 0x4d
 80011a6:	d101      	bne.n	80011ac <process_char+0x30>
			return MODE_MOTOR;
 80011a8:	231e      	movs	r3, #30
 80011aa:	e203      	b.n	80015b4 <process_char+0x438>
		}
		if (key == 'T') {
 80011ac:	230f      	movs	r3, #15
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b54      	cmp	r3, #84	; 0x54
 80011b4:	d101      	bne.n	80011ba <process_char+0x3e>
			return MODE_TIMER;
 80011b6:	230a      	movs	r3, #10
 80011b8:	e1fc      	b.n	80015b4 <process_char+0x438>
		}
		if (key == 'A') {
 80011ba:	230f      	movs	r3, #15
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b41      	cmp	r3, #65	; 0x41
 80011c2:	d101      	bne.n	80011c8 <process_char+0x4c>
			return MODE_ALL_RELAY_DEFAULT;
 80011c4:	2314      	movs	r3, #20
 80011c6:	e1f5      	b.n	80015b4 <process_char+0x438>
		}
		if (key>='0' && key <='9') {
 80011c8:	220f      	movs	r2, #15
 80011ca:	18bb      	adds	r3, r7, r2
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b2f      	cmp	r3, #47	; 0x2f
 80011d0:	d90c      	bls.n	80011ec <process_char+0x70>
 80011d2:	18bb      	adds	r3, r7, r2
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b39      	cmp	r3, #57	; 0x39
 80011d8:	d808      	bhi.n	80011ec <process_char+0x70>
			buf[0] = key;
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	18ba      	adds	r2, r7, r2
 80011de:	7812      	ldrb	r2, [r2, #0]
 80011e0:	701a      	strb	r2, [r3, #0]
			*cur = 1;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
			return MODE_RELAY;
 80011e8:	2328      	movs	r3, #40	; 0x28
 80011ea:	e1e3      	b.n	80015b4 <process_char+0x438>
		}
		return MODE_SPACE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	e1e1      	b.n	80015b4 <process_char+0x438>
	}
	if(mode == MODE_MOTOR) {
 80011f0:	230e      	movs	r3, #14
 80011f2:	18fb      	adds	r3, r7, r3
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b1e      	cmp	r3, #30
 80011f8:	d130      	bne.n	800125c <process_char+0xe0>
		if (key == '|') {
 80011fa:	230f      	movs	r3, #15
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b7c      	cmp	r3, #124	; 0x7c
 8001202:	d101      	bne.n	8001208 <process_char+0x8c>
			return MODE_SPACE;
 8001204:	2300      	movs	r3, #0
 8001206:	e1d5      	b.n	80015b4 <process_char+0x438>
		}
		if(key<'0' || key >'9') {
 8001208:	220f      	movs	r2, #15
 800120a:	18bb      	adds	r3, r7, r2
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b2f      	cmp	r3, #47	; 0x2f
 8001210:	d903      	bls.n	800121a <process_char+0x9e>
 8001212:	18bb      	adds	r3, r7, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b39      	cmp	r3, #57	; 0x39
 8001218:	d901      	bls.n	800121e <process_char+0xa2>
			return MODE_ERROR;
 800121a:	2364      	movs	r3, #100	; 0x64
 800121c:	e1ca      	b.n	80015b4 <process_char+0x438>
		}
		r_config->motor_mentioned = 1;
 800121e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001220:	2201      	movs	r2, #1
 8001222:	709a      	strb	r2, [r3, #2]
		if (r_config->motor_percent>20) {
 8001224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001226:	78db      	ldrb	r3, [r3, #3]
 8001228:	2b14      	cmp	r3, #20
 800122a:	d901      	bls.n	8001230 <process_char+0xb4>
			return MODE_ERROR_MOTOR_PERCENT_TOO_BIG;
 800122c:	2365      	movs	r3, #101	; 0x65
 800122e:	e1c1      	b.n	80015b4 <process_char+0x438>
		}
		r_config->motor_percent *= 10;
 8001230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001232:	78db      	ldrb	r3, [r3, #3]
 8001234:	1c1a      	adds	r2, r3, #0
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	18d3      	adds	r3, r2, r3
 800123a:	18db      	adds	r3, r3, r3
 800123c:	b2da      	uxtb	r2, r3
 800123e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001240:	70da      	strb	r2, [r3, #3]
		r_config->motor_percent += (key-'0');
 8001242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001244:	78da      	ldrb	r2, [r3, #3]
 8001246:	230f      	movs	r3, #15
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	18d3      	adds	r3, r2, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	3b30      	subs	r3, #48	; 0x30
 8001252:	b2da      	uxtb	r2, r3
 8001254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001256:	70da      	strb	r2, [r3, #3]
		return MODE_MOTOR;
 8001258:	231e      	movs	r3, #30
 800125a:	e1ab      	b.n	80015b4 <process_char+0x438>
	}
	if(mode == MODE_TIMER) {
 800125c:	230e      	movs	r3, #14
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b0a      	cmp	r3, #10
 8001264:	d131      	bne.n	80012ca <process_char+0x14e>
		if (key == '|') {
 8001266:	230f      	movs	r3, #15
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b7c      	cmp	r3, #124	; 0x7c
 800126e:	d101      	bne.n	8001274 <process_char+0xf8>
			return MODE_SPACE;
 8001270:	2300      	movs	r3, #0
 8001272:	e19f      	b.n	80015b4 <process_char+0x438>
		}
		if(key<'0' || key >'9') {
 8001274:	220f      	movs	r2, #15
 8001276:	18bb      	adds	r3, r7, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b2f      	cmp	r3, #47	; 0x2f
 800127c:	d903      	bls.n	8001286 <process_char+0x10a>
 800127e:	18bb      	adds	r3, r7, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b39      	cmp	r3, #57	; 0x39
 8001284:	d901      	bls.n	800128a <process_char+0x10e>
			return MODE_ERROR;
 8001286:	2364      	movs	r3, #100	; 0x64
 8001288:	e194      	b.n	80015b4 <process_char+0x438>
		}
		r_config->timeout_sec_specified = 1;
 800128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128c:	2201      	movs	r2, #1
 800128e:	711a      	strb	r2, [r3, #4]

		r_config->timeout_sec*=10;
 8001290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	0013      	movs	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	189b      	adds	r3, r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	001a      	movs	r2, r3
 800129e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a0:	609a      	str	r2, [r3, #8]
		r_config->timeout_sec+= (key-'0');
 80012a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	230f      	movs	r3, #15
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	18d3      	adds	r3, r2, r3
 80012ae:	3b30      	subs	r3, #48	; 0x30
 80012b0:	001a      	movs	r2, r3
 80012b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b4:	609a      	str	r2, [r3, #8]
		if (r_config->timeout_sec > 3600) {
 80012b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	23e1      	movs	r3, #225	; 0xe1
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	429a      	cmp	r2, r3
 80012c0:	d901      	bls.n	80012c6 <process_char+0x14a>
			return MODE_ERROR_TIMEOUT_TOO_BIG;
 80012c2:	2366      	movs	r3, #102	; 0x66
 80012c4:	e176      	b.n	80015b4 <process_char+0x438>
		}
		return MODE_TIMER;
 80012c6:	230a      	movs	r3, #10
 80012c8:	e174      	b.n	80015b4 <process_char+0x438>
	}
	if (mode == MODE_ALL_RELAY_DEFAULT) {
 80012ca:	230e      	movs	r3, #14
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b14      	cmp	r3, #20
 80012d2:	d11c      	bne.n	800130e <process_char+0x192>
		if (key == '|') {
 80012d4:	230f      	movs	r3, #15
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b7c      	cmp	r3, #124	; 0x7c
 80012dc:	d101      	bne.n	80012e2 <process_char+0x166>
			return MODE_SPACE;
 80012de:	2300      	movs	r3, #0
 80012e0:	e168      	b.n	80015b4 <process_char+0x438>
		}
		if (key == '+') {
 80012e2:	230f      	movs	r3, #15
 80012e4:	18fb      	adds	r3, r7, r3
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b2b      	cmp	r3, #43	; 0x2b
 80012ea:	d104      	bne.n	80012f6 <process_char+0x17a>
			r_config->default_relay_state = DEFAULT_RELAY_ON;
 80012ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ee:	2202      	movs	r2, #2
 80012f0:	705a      	strb	r2, [r3, #1]
			return MODE_ALL_RELAY_DEFAULT;
 80012f2:	2314      	movs	r3, #20
 80012f4:	e15e      	b.n	80015b4 <process_char+0x438>
		}
		if (key == '-') {
 80012f6:	230f      	movs	r3, #15
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b2d      	cmp	r3, #45	; 0x2d
 80012fe:	d104      	bne.n	800130a <process_char+0x18e>
			r_config->default_relay_state = DEFAULT_RELAY_OFF;
 8001300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001302:	2201      	movs	r2, #1
 8001304:	705a      	strb	r2, [r3, #1]
			return MODE_ALL_RELAY_DEFAULT;
 8001306:	2314      	movs	r3, #20
 8001308:	e154      	b.n	80015b4 <process_char+0x438>
		}
		return MODE_ERROR_RELAY_DEFAULT;
 800130a:	2367      	movs	r3, #103	; 0x67
 800130c:	e152      	b.n	80015b4 <process_char+0x438>
	}
	if (mode == MODE_RELAY) {
 800130e:	230e      	movs	r3, #14
 8001310:	18fb      	adds	r3, r7, r3
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b28      	cmp	r3, #40	; 0x28
 8001316:	d000      	beq.n	800131a <process_char+0x19e>
 8001318:	e07a      	b.n	8001410 <process_char+0x294>
		if (key == '|' || key == '/') {
 800131a:	220f      	movs	r2, #15
 800131c:	18bb      	adds	r3, r7, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b7c      	cmp	r3, #124	; 0x7c
 8001322:	d003      	beq.n	800132c <process_char+0x1b0>
 8001324:	18bb      	adds	r3, r7, r2
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b2f      	cmp	r3, #47	; 0x2f
 800132a:	d14f      	bne.n	80013cc <process_char+0x250>
			uint8_t relay_num = 0;
 800132c:	231f      	movs	r3, #31
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<*cur; i++) {
 8001334:	2300      	movs	r3, #0
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	e016      	b.n	8001368 <process_char+0x1ec>
				relay_num *=10;
 800133a:	201f      	movs	r0, #31
 800133c:	183a      	adds	r2, r7, r0
 800133e:	183b      	adds	r3, r7, r0
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	1c19      	adds	r1, r3, #0
 8001344:	0089      	lsls	r1, r1, #2
 8001346:	18cb      	adds	r3, r1, r3
 8001348:	18db      	adds	r3, r3, r3
 800134a:	7013      	strb	r3, [r2, #0]
				relay_num += (buf[i] - '0');
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	18d3      	adds	r3, r2, r3
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	183b      	adds	r3, r7, r0
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	18d3      	adds	r3, r2, r3
 800135a:	b2da      	uxtb	r2, r3
 800135c:	183b      	adds	r3, r7, r0
 800135e:	3a30      	subs	r2, #48	; 0x30
 8001360:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<*cur; i++) {
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	3301      	adds	r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	001a      	movs	r2, r3
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4293      	cmp	r3, r2
 8001372:	dbe2      	blt.n	800133a <process_char+0x1be>
			}
			*cur = 0;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
			if(relay_num < 1 || relay_num > 11) {
 800137a:	221f      	movs	r2, #31
 800137c:	18bb      	adds	r3, r7, r2
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <process_char+0x210>
 8001384:	18bb      	adds	r3, r7, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b0b      	cmp	r3, #11
 800138a:	d901      	bls.n	8001390 <process_char+0x214>
				return MODE_ERROR_RELAY_NUM;
 800138c:	2368      	movs	r3, #104	; 0x68
 800138e:	e111      	b.n	80015b4 <process_char+0x438>
			}
			relay_num--;
 8001390:	201f      	movs	r0, #31
 8001392:	183b      	adds	r3, r7, r0
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	183b      	adds	r3, r7, r0
 8001398:	3a01      	subs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
			r_config->relays[relay_num].used = 1;
 800139c:	183b      	adds	r3, r7, r0
 800139e:	781a      	ldrb	r2, [r3, #0]
 80013a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80013a2:	0013      	movs	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	189b      	adds	r3, r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	18cb      	adds	r3, r1, r3
 80013ac:	3310      	adds	r3, #16
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
			r_config->last_changed_relay = relay_num;
 80013b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b4:	183a      	adds	r2, r7, r0
 80013b6:	7812      	ldrb	r2, [r2, #0]
 80013b8:	701a      	strb	r2, [r3, #0]
			if(key == '|') return MODE_SPACE;
 80013ba:	230f      	movs	r3, #15
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b7c      	cmp	r3, #124	; 0x7c
 80013c2:	d101      	bne.n	80013c8 <process_char+0x24c>
 80013c4:	2300      	movs	r3, #0
 80013c6:	e0f5      	b.n	80015b4 <process_char+0x438>
			return MODE_RELAY_ONTIME;
 80013c8:	232a      	movs	r3, #42	; 0x2a
 80013ca:	e0f3      	b.n	80015b4 <process_char+0x438>
		}
		if (key < '0' || key > '9') {
 80013cc:	220f      	movs	r2, #15
 80013ce:	18bb      	adds	r3, r7, r2
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b2f      	cmp	r3, #47	; 0x2f
 80013d4:	d903      	bls.n	80013de <process_char+0x262>
 80013d6:	18bb      	adds	r3, r7, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b39      	cmp	r3, #57	; 0x39
 80013dc:	d901      	bls.n	80013e2 <process_char+0x266>
			return MODE_ERROR_BADSYMBOLS_RELAY;
 80013de:	2369      	movs	r3, #105	; 0x69
 80013e0:	e0e8      	b.n	80015b4 <process_char+0x438>
		}
		buf[*cur] = key;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	001a      	movs	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	189b      	adds	r3, r3, r2
 80013ec:	220f      	movs	r2, #15
 80013ee:	18ba      	adds	r2, r7, r2
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	701a      	strb	r2, [r3, #0]
		*cur = *cur + 1;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	701a      	strb	r2, [r3, #0]
		if (*cur > 2) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <process_char+0x290>
			return MODE_ERROR_RELAY_NUM;
 8001408:	2368      	movs	r3, #104	; 0x68
 800140a:	e0d3      	b.n	80015b4 <process_char+0x438>
		}
		return MODE_RELAY;
 800140c:	2328      	movs	r3, #40	; 0x28
 800140e:	e0d1      	b.n	80015b4 <process_char+0x438>
	}
	if (mode == MODE_RELAY_ONTIME) {
 8001410:	230e      	movs	r3, #14
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b2a      	cmp	r3, #42	; 0x2a
 8001418:	d166      	bne.n	80014e8 <process_char+0x36c>
		if (key == '|') {
 800141a:	230f      	movs	r3, #15
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b7c      	cmp	r3, #124	; 0x7c
 8001422:	d101      	bne.n	8001428 <process_char+0x2ac>
			return MODE_ERROR_BADSYMBOLS_RELAY;
 8001424:	2369      	movs	r3, #105	; 0x69
 8001426:	e0c5      	b.n	80015b4 <process_char+0x438>
		}
		if (key == '/')	{
 8001428:	230f      	movs	r3, #15
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b2f      	cmp	r3, #47	; 0x2f
 8001430:	d101      	bne.n	8001436 <process_char+0x2ba>
			return MODE_RELAY_OFFTIME;
 8001432:	232b      	movs	r3, #43	; 0x2b
 8001434:	e0be      	b.n	80015b4 <process_char+0x438>
		}
		if (key < '0' || key > '9') {
 8001436:	220f      	movs	r2, #15
 8001438:	18bb      	adds	r3, r7, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b2f      	cmp	r3, #47	; 0x2f
 800143e:	d903      	bls.n	8001448 <process_char+0x2cc>
 8001440:	18bb      	adds	r3, r7, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b39      	cmp	r3, #57	; 0x39
 8001446:	d901      	bls.n	800144c <process_char+0x2d0>
			return MODE_ERROR_BADSYMBOLS_RELAY;
 8001448:	2369      	movs	r3, #105	; 0x69
 800144a:	e0b3      	b.n	80015b4 <process_char+0x438>
		}
		uint8_t relay_num = r_config->last_changed_relay;
 800144c:	2116      	movs	r1, #22
 800144e:	187b      	adds	r3, r7, r1
 8001450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001452:	7812      	ldrb	r2, [r2, #0]
 8001454:	701a      	strb	r2, [r3, #0]
		if (r_config->relays[relay_num].ontime > 200) {
 8001456:	187b      	adds	r3, r7, r1
 8001458:	781a      	ldrb	r2, [r3, #0]
 800145a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800145c:	0013      	movs	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	189b      	adds	r3, r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	18cb      	adds	r3, r1, r3
 8001466:	330c      	adds	r3, #12
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	2bc8      	cmp	r3, #200	; 0xc8
 800146c:	d901      	bls.n	8001472 <process_char+0x2f6>
			return MODE_ERROR_BIG_ONTIME;
 800146e:	236a      	movs	r3, #106	; 0x6a
 8001470:	e0a0      	b.n	80015b4 <process_char+0x438>
		}
		r_config->relays[relay_num].ontime*=10;
 8001472:	2416      	movs	r4, #22
 8001474:	193b      	adds	r3, r7, r4
 8001476:	781a      	ldrb	r2, [r3, #0]
 8001478:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800147a:	0013      	movs	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	189b      	adds	r3, r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	18cb      	adds	r3, r1, r3
 8001484:	330c      	adds	r3, #12
 8001486:	8819      	ldrh	r1, [r3, #0]
 8001488:	193b      	adds	r3, r7, r4
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	1c0b      	adds	r3, r1, #0
 800148e:	1c19      	adds	r1, r3, #0
 8001490:	0089      	lsls	r1, r1, #2
 8001492:	18cb      	adds	r3, r1, r3
 8001494:	18db      	adds	r3, r3, r3
 8001496:	b298      	uxth	r0, r3
 8001498:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800149a:	0013      	movs	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	189b      	adds	r3, r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	18cb      	adds	r3, r1, r3
 80014a4:	330c      	adds	r3, #12
 80014a6:	1c02      	adds	r2, r0, #0
 80014a8:	801a      	strh	r2, [r3, #0]
		r_config->relays[relay_num].ontime += (key - '0');
 80014aa:	193b      	adds	r3, r7, r4
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014b0:	0013      	movs	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	189b      	adds	r3, r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	18cb      	adds	r3, r1, r3
 80014ba:	330c      	adds	r3, #12
 80014bc:	881a      	ldrh	r2, [r3, #0]
 80014be:	230f      	movs	r3, #15
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	18d3      	adds	r3, r2, r3
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	193a      	adds	r2, r7, r4
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	3b30      	subs	r3, #48	; 0x30
 80014d0:	b298      	uxth	r0, r3
 80014d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014d4:	0013      	movs	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	189b      	adds	r3, r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	18cb      	adds	r3, r1, r3
 80014de:	330c      	adds	r3, #12
 80014e0:	1c02      	adds	r2, r0, #0
 80014e2:	801a      	strh	r2, [r3, #0]
		return MODE_RELAY_ONTIME;
 80014e4:	232a      	movs	r3, #42	; 0x2a
 80014e6:	e065      	b.n	80015b4 <process_char+0x438>
	}
	if (mode == MODE_RELAY_OFFTIME) {
 80014e8:	230e      	movs	r3, #14
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b2b      	cmp	r3, #43	; 0x2b
 80014f0:	d15f      	bne.n	80015b2 <process_char+0x436>
		if (key == '|') {
 80014f2:	230f      	movs	r3, #15
 80014f4:	18fb      	adds	r3, r7, r3
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b7c      	cmp	r3, #124	; 0x7c
 80014fa:	d101      	bne.n	8001500 <process_char+0x384>
			return MODE_SPACE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e059      	b.n	80015b4 <process_char+0x438>
		}
		if (key < '0' || key > '9') {
 8001500:	220f      	movs	r2, #15
 8001502:	18bb      	adds	r3, r7, r2
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b2f      	cmp	r3, #47	; 0x2f
 8001508:	d903      	bls.n	8001512 <process_char+0x396>
 800150a:	18bb      	adds	r3, r7, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b39      	cmp	r3, #57	; 0x39
 8001510:	d901      	bls.n	8001516 <process_char+0x39a>
			return MODE_ERROR_BADSYMBOLS_RELAY;
 8001512:	2369      	movs	r3, #105	; 0x69
 8001514:	e04e      	b.n	80015b4 <process_char+0x438>
		}
		uint8_t relay_num = r_config->last_changed_relay;
 8001516:	2117      	movs	r1, #23
 8001518:	187b      	adds	r3, r7, r1
 800151a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800151c:	7812      	ldrb	r2, [r2, #0]
 800151e:	701a      	strb	r2, [r3, #0]
		if (r_config->relays[relay_num].offtime > 200) {
 8001520:	187b      	adds	r3, r7, r1
 8001522:	781a      	ldrb	r2, [r3, #0]
 8001524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001526:	0013      	movs	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	189b      	adds	r3, r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	18cb      	adds	r3, r1, r3
 8001530:	330e      	adds	r3, #14
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	2bc8      	cmp	r3, #200	; 0xc8
 8001536:	d901      	bls.n	800153c <process_char+0x3c0>
			return MODE_ERROR_BIG_OFFTIME;
 8001538:	236b      	movs	r3, #107	; 0x6b
 800153a:	e03b      	b.n	80015b4 <process_char+0x438>
		}
		r_config->relays[relay_num].offtime*=10;
 800153c:	2417      	movs	r4, #23
 800153e:	193b      	adds	r3, r7, r4
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001544:	0013      	movs	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	189b      	adds	r3, r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	18cb      	adds	r3, r1, r3
 800154e:	330e      	adds	r3, #14
 8001550:	8819      	ldrh	r1, [r3, #0]
 8001552:	193b      	adds	r3, r7, r4
 8001554:	781a      	ldrb	r2, [r3, #0]
 8001556:	1c0b      	adds	r3, r1, #0
 8001558:	1c19      	adds	r1, r3, #0
 800155a:	0089      	lsls	r1, r1, #2
 800155c:	18cb      	adds	r3, r1, r3
 800155e:	18db      	adds	r3, r3, r3
 8001560:	b298      	uxth	r0, r3
 8001562:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001564:	0013      	movs	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	189b      	adds	r3, r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	18cb      	adds	r3, r1, r3
 800156e:	330e      	adds	r3, #14
 8001570:	1c02      	adds	r2, r0, #0
 8001572:	801a      	strh	r2, [r3, #0]
		r_config->relays[relay_num].offtime += (key - '0');
 8001574:	193b      	adds	r3, r7, r4
 8001576:	781a      	ldrb	r2, [r3, #0]
 8001578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800157a:	0013      	movs	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	189b      	adds	r3, r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	18cb      	adds	r3, r1, r3
 8001584:	330e      	adds	r3, #14
 8001586:	881a      	ldrh	r2, [r3, #0]
 8001588:	230f      	movs	r3, #15
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	18d3      	adds	r3, r2, r3
 8001592:	b29b      	uxth	r3, r3
 8001594:	193a      	adds	r2, r7, r4
 8001596:	7812      	ldrb	r2, [r2, #0]
 8001598:	3b30      	subs	r3, #48	; 0x30
 800159a:	b298      	uxth	r0, r3
 800159c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800159e:	0013      	movs	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	189b      	adds	r3, r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	18cb      	adds	r3, r1, r3
 80015a8:	330e      	adds	r3, #14
 80015aa:	1c02      	adds	r2, r0, #0
 80015ac:	801a      	strh	r2, [r3, #0]
		return MODE_RELAY_OFFTIME;
 80015ae:	232b      	movs	r3, #43	; 0x2b
 80015b0:	e000      	b.n	80015b4 <process_char+0x438>
	}
	return MODE_ERROR_PANIC;
 80015b2:	236c      	movs	r3, #108	; 0x6c
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b009      	add	sp, #36	; 0x24
 80015ba:	bd90      	pop	{r4, r7, pc}

080015bc <init_relay_config>:

void init_relay_config(relay_reader_config * r_config) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	for (int i=0;i<11;i++) {
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	e020      	b.n	800160c <init_relay_config+0x50>
		r_config->relays[i].ontime = 0;
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	0013      	movs	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	189b      	adds	r3, r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	18cb      	adds	r3, r1, r3
 80015d8:	330c      	adds	r3, #12
 80015da:	2200      	movs	r2, #0
 80015dc:	801a      	strh	r2, [r3, #0]
		r_config->relays[i].offtime = 0;
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	0013      	movs	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	189b      	adds	r3, r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	18cb      	adds	r3, r1, r3
 80015ec:	330e      	adds	r3, #14
 80015ee:	2200      	movs	r2, #0
 80015f0:	801a      	strh	r2, [r3, #0]
		r_config->relays[i].used = 0;
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	0013      	movs	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	189b      	adds	r3, r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	18cb      	adds	r3, r1, r3
 8001600:	3310      	adds	r3, #16
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<11;i++) {
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3301      	adds	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b0a      	cmp	r3, #10
 8001610:	dddb      	ble.n	80015ca <init_relay_config+0xe>
	}
	r_config->last_changed_relay = 0;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
	r_config->motor_mentioned = 0;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	709a      	strb	r2, [r3, #2]
	r_config->motor_percent = 0;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	70da      	strb	r2, [r3, #3]
	r_config->timeout_sec = 0;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
	r_config->timeout_sec_specified = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	711a      	strb	r2, [r3, #4]
	r_config->default_relay_state = DEFAULT_RELAY_NO_DEFAULT;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	705a      	strb	r2, [r3, #1]
}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	b004      	add	sp, #16
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <app_decode_run>:

void app_decode_run(const char *cmd) {
 8001640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001642:	b0a1      	sub	sp, #132	; 0x84
 8001644:	af02      	add	r7, sp, #8
 8001646:	6078      	str	r0, [r7, #4]
	relay_reader_config r_config;
	init_relay_config(&r_config);
 8001648:	2320      	movs	r3, #32
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	0018      	movs	r0, r3
 800164e:	f7ff ffb5 	bl	80015bc <init_relay_config>

	// State machine to parse a string
	char buf[16];
	int i = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	677b      	str	r3, [r7, #116]	; 0x74
	uint8_t cur = 0;
 8001656:	230f      	movs	r3, #15
 8001658:	18fb      	adds	r3, r7, r3
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
	uint8_t mode = 0;
 800165e:	2373      	movs	r3, #115	; 0x73
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]

	for (;cmd[i]!=';' && i<MAX_CMD_BUF-1;) {
 8001666:	e07b      	b.n	8001760 <app_decode_run+0x120>
		mode = process_char(cmd[i], buf, &cur, mode, &r_config);
 8001668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	18d3      	adds	r3, r2, r3
 800166e:	7818      	ldrb	r0, [r3, #0]
 8001670:	2673      	movs	r6, #115	; 0x73
 8001672:	19bc      	adds	r4, r7, r6
 8001674:	19bb      	adds	r3, r7, r6
 8001676:	781d      	ldrb	r5, [r3, #0]
 8001678:	230f      	movs	r3, #15
 800167a:	18fa      	adds	r2, r7, r3
 800167c:	2310      	movs	r3, #16
 800167e:	18f9      	adds	r1, r7, r3
 8001680:	2320      	movs	r3, #32
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	002b      	movs	r3, r5
 8001688:	f7ff fd78 	bl	800117c <process_char>
 800168c:	0003      	movs	r3, r0
 800168e:	7023      	strb	r3, [r4, #0]
		i++;
 8001690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001692:	3301      	adds	r3, #1
 8001694:	677b      	str	r3, [r7, #116]	; 0x74
		if (mode < MODE_ERROR) continue;
 8001696:	19bb      	adds	r3, r7, r6
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b63      	cmp	r3, #99	; 0x63
 800169c:	d800      	bhi.n	80016a0 <app_decode_run+0x60>
 800169e:	e05f      	b.n	8001760 <app_decode_run+0x120>
		if (mode == MODE_ERROR_MOTOR_PERCENT_TOO_BIG) {
 80016a0:	2373      	movs	r3, #115	; 0x73
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b65      	cmp	r3, #101	; 0x65
 80016a8:	d106      	bne.n	80016b8 <app_decode_run+0x78>
			app_send_data("motor % big", 11);
 80016aa:	4b39      	ldr	r3, [pc, #228]	; (8001790 <app_decode_run+0x150>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a39      	ldr	r2, [pc, #228]	; (8001794 <app_decode_run+0x154>)
 80016b0:	210b      	movs	r1, #11
 80016b2:	0010      	movs	r0, r2
 80016b4:	4798      	blx	r3
			return;
 80016b6:	e068      	b.n	800178a <app_decode_run+0x14a>
		}
		if (mode == MODE_ERROR_TIMEOUT_TOO_BIG) {
 80016b8:	2373      	movs	r3, #115	; 0x73
 80016ba:	18fb      	adds	r3, r7, r3
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b66      	cmp	r3, #102	; 0x66
 80016c0:	d106      	bne.n	80016d0 <app_decode_run+0x90>
			app_send_data("timeout big", 11);
 80016c2:	4b33      	ldr	r3, [pc, #204]	; (8001790 <app_decode_run+0x150>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a34      	ldr	r2, [pc, #208]	; (8001798 <app_decode_run+0x158>)
 80016c8:	210b      	movs	r1, #11
 80016ca:	0010      	movs	r0, r2
 80016cc:	4798      	blx	r3
			return;
 80016ce:	e05c      	b.n	800178a <app_decode_run+0x14a>
		}
		if (mode == MODE_ERROR_RELAY_DEFAULT) {
 80016d0:	2373      	movs	r3, #115	; 0x73
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b67      	cmp	r3, #103	; 0x67
 80016d8:	d106      	bne.n	80016e8 <app_decode_run+0xa8>
			app_send_data("A uses + or -", 13);
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <app_decode_run+0x150>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a2f      	ldr	r2, [pc, #188]	; (800179c <app_decode_run+0x15c>)
 80016e0:	210d      	movs	r1, #13
 80016e2:	0010      	movs	r0, r2
 80016e4:	4798      	blx	r3
			return;
 80016e6:	e050      	b.n	800178a <app_decode_run+0x14a>
		}
		if (mode == MODE_ERROR_RELAY_NUM) {
 80016e8:	2373      	movs	r3, #115	; 0x73
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b68      	cmp	r3, #104	; 0x68
 80016f0:	d106      	bne.n	8001700 <app_decode_run+0xc0>
			app_send_data("RELAY MUST BE 1 TO 11", 21);
 80016f2:	4b27      	ldr	r3, [pc, #156]	; (8001790 <app_decode_run+0x150>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a2a      	ldr	r2, [pc, #168]	; (80017a0 <app_decode_run+0x160>)
 80016f8:	2115      	movs	r1, #21
 80016fa:	0010      	movs	r0, r2
 80016fc:	4798      	blx	r3
			return;
 80016fe:	e044      	b.n	800178a <app_decode_run+0x14a>
		}
		if (mode == MODE_ERROR_BADSYMBOLS_RELAY) {
 8001700:	2373      	movs	r3, #115	; 0x73
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b69      	cmp	r3, #105	; 0x69
 8001708:	d106      	bne.n	8001718 <app_decode_run+0xd8>
			app_send_data("BAD SYM IN RELAY", 16);
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <app_decode_run+0x150>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a25      	ldr	r2, [pc, #148]	; (80017a4 <app_decode_run+0x164>)
 8001710:	2110      	movs	r1, #16
 8001712:	0010      	movs	r0, r2
 8001714:	4798      	blx	r3
			return;
 8001716:	e038      	b.n	800178a <app_decode_run+0x14a>
		}
		if (mode == MODE_ERROR_BIG_ONTIME) {
 8001718:	2373      	movs	r3, #115	; 0x73
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b6a      	cmp	r3, #106	; 0x6a
 8001720:	d106      	bne.n	8001730 <app_decode_run+0xf0>
			app_send_data("BIG ONTIME", 10);
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <app_decode_run+0x150>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <app_decode_run+0x168>)
 8001728:	210a      	movs	r1, #10
 800172a:	0010      	movs	r0, r2
 800172c:	4798      	blx	r3
			return;
 800172e:	e02c      	b.n	800178a <app_decode_run+0x14a>
		}
		if (mode == MODE_ERROR_BIG_OFFTIME) {
 8001730:	2373      	movs	r3, #115	; 0x73
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b6b      	cmp	r3, #107	; 0x6b
 8001738:	d106      	bne.n	8001748 <app_decode_run+0x108>
			app_send_data("BIG OFFTIME", 11);
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <app_decode_run+0x150>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <app_decode_run+0x16c>)
 8001740:	210b      	movs	r1, #11
 8001742:	0010      	movs	r0, r2
 8001744:	4798      	blx	r3
			return;
 8001746:	e020      	b.n	800178a <app_decode_run+0x14a>
		}
		if (mode >= MODE_ERROR) {
 8001748:	2373      	movs	r3, #115	; 0x73
 800174a:	18fb      	adds	r3, r7, r3
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b63      	cmp	r3, #99	; 0x63
 8001750:	d906      	bls.n	8001760 <app_decode_run+0x120>
			app_send_data("PANIC", 4);
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <app_decode_run+0x150>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a16      	ldr	r2, [pc, #88]	; (80017b0 <app_decode_run+0x170>)
 8001758:	2104      	movs	r1, #4
 800175a:	0010      	movs	r0, r2
 800175c:	4798      	blx	r3
			return;
 800175e:	e014      	b.n	800178a <app_decode_run+0x14a>
	for (;cmd[i]!=';' && i<MAX_CMD_BUF-1;) {
 8001760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	18d3      	adds	r3, r2, r3
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b3b      	cmp	r3, #59	; 0x3b
 800176a:	d003      	beq.n	8001774 <app_decode_run+0x134>
 800176c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800176e:	2bbf      	cmp	r3, #191	; 0xbf
 8001770:	dc00      	bgt.n	8001774 <app_decode_run+0x134>
 8001772:	e779      	b.n	8001668 <app_decode_run+0x28>
		}
	}
	app_send_data("OK;", 3);
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <app_decode_run+0x150>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <app_decode_run+0x174>)
 800177a:	2103      	movs	r1, #3
 800177c:	0010      	movs	r0, r2
 800177e:	4798      	blx	r3
	app_apply_relays(&r_config);
 8001780:	2320      	movs	r3, #32
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	0018      	movs	r0, r3
 8001786:	f000 f817 	bl	80017b8 <app_apply_relays>
}
 800178a:	46bd      	mov	sp, r7
 800178c:	b01f      	add	sp, #124	; 0x7c
 800178e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001790:	200000c4 	.word	0x200000c4
 8001794:	0800b3d4 	.word	0x0800b3d4
 8001798:	0800b3e0 	.word	0x0800b3e0
 800179c:	0800b3ec 	.word	0x0800b3ec
 80017a0:	0800b3fc 	.word	0x0800b3fc
 80017a4:	0800b414 	.word	0x0800b414
 80017a8:	0800b428 	.word	0x0800b428
 80017ac:	0800b434 	.word	0x0800b434
 80017b0:	0800b440 	.word	0x0800b440
 80017b4:	0800b448 	.word	0x0800b448

080017b8 <app_apply_relays>:
void app_apply_relays(relay_reader_config  * new_relays) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	for (int i=0;i<11;i++) {
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e060      	b.n	8001888 <app_apply_relays+0xd0>
		// need to update?
		if(new_relays->relays[i].used) {
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	0013      	movs	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	189b      	adds	r3, r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	18cb      	adds	r3, r1, r3
 80017d4:	3310      	adds	r3, #16
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d03f      	beq.n	800185c <app_apply_relays+0xa4>
			uint32_t ontime = new_relays->relays[i].ontime;
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	0013      	movs	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	189b      	adds	r3, r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	18cb      	adds	r3, r1, r3
 80017ea:	330c      	adds	r3, #12
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	613b      	str	r3, [r7, #16]
			uint32_t offtime = new_relays->relays[i].offtime;
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	0013      	movs	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	189b      	adds	r3, r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	18cb      	adds	r3, r1, r3
 80017fe:	330e      	adds	r3, #14
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]
			if ( ontime > 0 && offtime > 0) {
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d016      	beq.n	8001838 <app_apply_relays+0x80>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d013      	beq.n	8001838 <app_apply_relays+0x80>
				hardware_relay[i].relay_working_mode = RELAY_MODE_SWITCHING;
 8001810:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <app_apply_relays+0x110>)
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	2103      	movs	r1, #3
 8001818:	54d1      	strb	r1, [r2, r3]
				hardware_relay[i].ontime = ontime;
 800181a:	4a2b      	ldr	r2, [pc, #172]	; (80018c8 <app_apply_relays+0x110>)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	18d3      	adds	r3, r2, r3
 8001822:	3308      	adds	r3, #8
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	601a      	str	r2, [r3, #0]
				hardware_relay[i].offtime = offtime;
 8001828:	4a27      	ldr	r2, [pc, #156]	; (80018c8 <app_apply_relays+0x110>)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	18d3      	adds	r3, r2, r3
 8001830:	330c      	adds	r3, #12
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e024      	b.n	8001882 <app_apply_relays+0xca>
			} else if (ontime == 0 && offtime > 0) {
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d108      	bne.n	8001850 <app_apply_relays+0x98>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <app_apply_relays+0x98>
				hardware_relay[i].relay_working_mode = RELAY_MODE_ALWAYS_OFF;
 8001844:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <app_apply_relays+0x110>)
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	2102      	movs	r1, #2
 800184c:	54d1      	strb	r1, [r2, r3]
 800184e:	e018      	b.n	8001882 <app_apply_relays+0xca>
			} else {
				hardware_relay[i].relay_working_mode = RELAY_MODE_ALWAYS_ON;
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <app_apply_relays+0x110>)
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	2101      	movs	r1, #1
 8001858:	54d1      	strb	r1, [r2, r3]
 800185a:	e012      	b.n	8001882 <app_apply_relays+0xca>
			}
		} else if (new_relays->default_relay_state == DEFAULT_RELAY_OFF) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	785b      	ldrb	r3, [r3, #1]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <app_apply_relays+0xb8>
			hardware_relay[i].relay_working_mode = RELAY_MODE_ALWAYS_OFF;
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <app_apply_relays+0x110>)
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	2102      	movs	r1, #2
 800186c:	54d1      	strb	r1, [r2, r3]
 800186e:	e008      	b.n	8001882 <app_apply_relays+0xca>
		} else if (new_relays->default_relay_state == DEFAULT_RELAY_ON) {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d104      	bne.n	8001882 <app_apply_relays+0xca>
			hardware_relay[i].relay_working_mode = RELAY_MODE_ALWAYS_ON;
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <app_apply_relays+0x110>)
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	2101      	movs	r1, #1
 8001880:	54d1      	strb	r1, [r2, r3]
	for (int i=0;i<11;i++) {
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2b0a      	cmp	r3, #10
 800188c:	dd9b      	ble.n	80017c6 <app_apply_relays+0xe>
		}
	}
	if (new_relays->timeout_sec_specified) {
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	791b      	ldrb	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00a      	beq.n	80018ac <app_apply_relays+0xf4>
		timeout_ms = 1 + new_relays->timeout_sec * 1000;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	0013      	movs	r3, r2
 800189c:	015b      	lsls	r3, r3, #5
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	189b      	adds	r3, r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <app_apply_relays+0x114>)
 80018aa:	601a      	str	r2, [r3, #0]
	}
	// TODO UPDATE MOTOR
	if (new_relays->motor_mentioned) {
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	789b      	ldrb	r3, [r3, #2]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d004      	beq.n	80018be <app_apply_relays+0x106>
		app_set_desired_motor_speed(new_relays->motor_percent);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	78db      	ldrb	r3, [r3, #3]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f7fe fe0b 	bl	80004d4 <app_set_desired_motor_speed>
	}
}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b006      	add	sp, #24
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	200000e4 	.word	0x200000e4
 80018cc:	20000194 	.word	0x20000194

080018d0 <app_decode_uid>:

void app_decode_uid(const char *cmd) {
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b08d      	sub	sp, #52	; 0x34
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	char uid_answer[30];
	cp("UID ", uid_answer, 0);
 80018d8:	240c      	movs	r4, #12
 80018da:	1939      	adds	r1, r7, r4
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <app_decode_uid+0x50>)
 80018de:	2200      	movs	r2, #0
 80018e0:	0018      	movs	r0, r3
 80018e2:	f000 f883 	bl	80019ec <cp>
	char *uid = get_uid();
 80018e6:	f7ff fafd 	bl	8000ee4 <get_uid>
 80018ea:	0003      	movs	r3, r0
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	cp(uid, &uid_answer[4], 24);
 80018ee:	193b      	adds	r3, r7, r4
 80018f0:	1d19      	adds	r1, r3, #4
 80018f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f4:	2218      	movs	r2, #24
 80018f6:	0018      	movs	r0, r3
 80018f8:	f000 f878 	bl	80019ec <cp>
	cp(";", &uid_answer[28], 0);
 80018fc:	193b      	adds	r3, r7, r4
 80018fe:	331c      	adds	r3, #28
 8001900:	0019      	movs	r1, r3
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <app_decode_uid+0x54>)
 8001904:	2200      	movs	r2, #0
 8001906:	0018      	movs	r0, r3
 8001908:	f000 f870 	bl	80019ec <cp>

	app_send_data(uid_answer, 29);
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <app_decode_uid+0x58>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	193a      	adds	r2, r7, r4
 8001912:	211d      	movs	r1, #29
 8001914:	0010      	movs	r0, r2
 8001916:	4798      	blx	r3
	// now we don't parse it even
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b00d      	add	sp, #52	; 0x34
 800191e:	bd90      	pop	{r4, r7, pc}
 8001920:	0800b44c 	.word	0x0800b44c
 8001924:	0800b454 	.word	0x0800b454
 8001928:	200000c4 	.word	0x200000c4

0800192c <app_decode_set>:

void app_decode_set(const char *cmd) {
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	uint8_t post_num = 0;
 8001934:	2317      	movs	r3, #23
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
	uint8_t digits = 0;
 800193c:	2316      	movs	r3, #22
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<4 && digits<2;i++) {
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	e032      	b.n	80019b0 <app_decode_set+0x84>
		if(cmd[i]>='0' && cmd[i]<='9') {
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	18d3      	adds	r3, r2, r3
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b2f      	cmp	r3, #47	; 0x2f
 8001954:	d924      	bls.n	80019a0 <app_decode_set+0x74>
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	18d3      	adds	r3, r2, r3
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b39      	cmp	r3, #57	; 0x39
 8001960:	d81e      	bhi.n	80019a0 <app_decode_set+0x74>
			digits++;
 8001962:	2116      	movs	r1, #22
 8001964:	187b      	adds	r3, r7, r1
 8001966:	781a      	ldrb	r2, [r3, #0]
 8001968:	187b      	adds	r3, r7, r1
 800196a:	3201      	adds	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
			uint8_t digit = cmd[i] - '0';
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	18d3      	adds	r3, r2, r3
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	240f      	movs	r4, #15
 8001978:	193b      	adds	r3, r7, r4
 800197a:	3a30      	subs	r2, #48	; 0x30
 800197c:	701a      	strb	r2, [r3, #0]
			post_num = post_num * 10;
 800197e:	2017      	movs	r0, #23
 8001980:	183a      	adds	r2, r7, r0
 8001982:	183b      	adds	r3, r7, r0
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	1c19      	adds	r1, r3, #0
 8001988:	0089      	lsls	r1, r1, #2
 800198a:	18cb      	adds	r3, r1, r3
 800198c:	18db      	adds	r3, r3, r3
 800198e:	7013      	strb	r3, [r2, #0]
			post_num += digit;
 8001990:	183b      	adds	r3, r7, r0
 8001992:	1839      	adds	r1, r7, r0
 8001994:	193a      	adds	r2, r7, r4
 8001996:	7809      	ldrb	r1, [r1, #0]
 8001998:	7812      	ldrb	r2, [r2, #0]
 800199a:	188a      	adds	r2, r1, r2
 800199c:	701a      	strb	r2, [r3, #0]
		if(cmd[i]>='0' && cmd[i]<='9') {
 800199e:	e004      	b.n	80019aa <app_decode_set+0x7e>
		} else {
			if(digits!=0) break;
 80019a0:	2316      	movs	r3, #22
 80019a2:	18fb      	adds	r3, r7, r3
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10b      	bne.n	80019c2 <app_decode_set+0x96>
	for(int i=0;i<4 && digits<2;i++) {
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	3301      	adds	r3, #1
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	dc06      	bgt.n	80019c4 <app_decode_set+0x98>
 80019b6:	2316      	movs	r3, #22
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d9c4      	bls.n	800194a <app_decode_set+0x1e>
 80019c0:	e000      	b.n	80019c4 <app_decode_set+0x98>
			if(digits!=0) break;
 80019c2:	46c0      	nop			; (mov r8, r8)
		}
	}
	set_post_num(post_num);
 80019c4:	2317      	movs	r3, #23
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7ff f99e 	bl	8000d0c <set_post_num>
	app_send_data("OK", 2);
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <app_decode_set+0xb8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <app_decode_set+0xbc>)
 80019d6:	2102      	movs	r1, #2
 80019d8:	0010      	movs	r0, r2
 80019da:	4798      	blx	r3
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b007      	add	sp, #28
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	200000c4 	.word	0x200000c4
 80019e8:	0800b458 	.word	0x0800b458

080019ec <cp>:

void cp(char * from, char *to, uint8_t size) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	1dfb      	adds	r3, r7, #7
 80019f8:	701a      	strb	r2, [r3, #0]
	if (!size) {
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d11c      	bne.n	8001a3c <cp+0x50>
		int i;
		for(i=0;from[i] != 0 && i< MAX_CMD_BUF;i++) {
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e00a      	b.n	8001a1e <cp+0x32>
			to[i] = from[i];
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	18d2      	adds	r2, r2, r3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	18cb      	adds	r3, r1, r3
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	701a      	strb	r2, [r3, #0]
		for(i=0;from[i] != 0 && i< MAX_CMD_BUF;i++) {
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	18d3      	adds	r3, r2, r3
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <cp+0x44>
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2bc0      	cmp	r3, #192	; 0xc0
 8001a2e:	ddeb      	ble.n	8001a08 <cp+0x1c>
		}
		to[i] = 0;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	18d3      	adds	r3, r2, r3
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
	} else {
		for (int i=0;i<size;i++) {
			to[i] = from[i];
		}
	}
}
 8001a3a:	e012      	b.n	8001a62 <cp+0x76>
		for (int i=0;i<size;i++) {
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	e00a      	b.n	8001a58 <cp+0x6c>
			to[i] = from[i];
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	18d2      	adds	r2, r2, r3
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	68b9      	ldr	r1, [r7, #8]
 8001a4c:	18cb      	adds	r3, r1, r3
 8001a4e:	7812      	ldrb	r2, [r2, #0]
 8001a50:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<size;i++) {
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	3301      	adds	r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	1dfb      	adds	r3, r7, #7
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	dbef      	blt.n	8001a42 <cp+0x56>
}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b006      	add	sp, #24
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <get_state>:

uint8_t get_state() {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
	if (get_tick) {
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <get_state+0x48>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d015      	beq.n	8001aa6 <get_state+0x3a>
		uint32_t cur_tick = get_tick();
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <get_state+0x48>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4798      	blx	r3
 8001a80:	0003      	movs	r3, r0
 8001a82:	607b      	str	r3, [r7, #4]
		uint32_t time_passed = cur_tick - last_ping;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <get_state+0x4c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	603b      	str	r3, [r7, #0]
		if(time_passed > 2000) {
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	23fa      	movs	r3, #250	; 0xfa
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d903      	bls.n	8001aa0 <get_state+0x34>
			current_state = ST_WAITING_FOR_CONNECTION;
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <get_state+0x50>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e002      	b.n	8001aa6 <get_state+0x3a>
		} else {
			current_state = ST_WORKING;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <get_state+0x50>)
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	601a      	str	r2, [r3, #0]
		}
	}
	return current_state;
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <get_state+0x50>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	b2db      	uxtb	r3, r3
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200000cc 	.word	0x200000cc
 8001ab8:	200000c0 	.word	0x200000c0
 8001abc:	200000bc 	.word	0x200000bc

08001ac0 <add_button>:
 */


#include "buttons.h"

void add_button(buttons * obj, uint16_t pin, GPIO_TypeDef * port) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	200a      	movs	r0, #10
 8001acc:	183b      	adds	r3, r7, r0
 8001ace:	1c0a      	adds	r2, r1, #0
 8001ad0:	801a      	strh	r2, [r3, #0]
	obj->btn[obj->cursor].pin = pin;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2230      	movs	r2, #48	; 0x30
 8001ad6:	5c9b      	ldrb	r3, [r3, r2]
 8001ad8:	001a      	movs	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	1839      	adds	r1, r7, r0
 8001ae0:	8809      	ldrh	r1, [r1, #0]
 8001ae2:	52d1      	strh	r1, [r2, r3]
	obj->btn[obj->cursor].port = port;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2230      	movs	r2, #48	; 0x30
 8001ae8:	5c9b      	ldrb	r3, [r3, r2]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	18d3      	adds	r3, r2, r3
 8001af0:	3304      	adds	r3, #4
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	601a      	str	r2, [r3, #0]
	obj->btn[obj->cursor].digital_state = 1; //1 means released, no macros deliberately
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2230      	movs	r2, #48	; 0x30
 8001afa:	5c9b      	ldrb	r3, [r3, r2]
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	18d3      	adds	r3, r2, r3
 8001b02:	3309      	adds	r3, #9
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
	obj->btn[obj->cursor].is_clicked = 0;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2230      	movs	r2, #48	; 0x30
 8001b0c:	5c9b      	ldrb	r3, [r3, r2]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	18d3      	adds	r3, r2, r3
 8001b14:	330a      	adds	r3, #10
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
	obj->btn[obj->cursor].is_dblclicked = 0;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2230      	movs	r2, #48	; 0x30
 8001b1e:	5c9b      	ldrb	r3, [r3, r2]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	18d3      	adds	r3, r2, r3
 8001b26:	330b      	adds	r3, #11
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
	obj->btn[obj->cursor].dbl_click_countdown = 0;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2230      	movs	r2, #48	; 0x30
 8001b30:	5c9b      	ldrb	r3, [r3, r2]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	18d3      	adds	r3, r2, r3
 8001b38:	330c      	adds	r3, #12
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	801a      	strh	r2, [r3, #0]
	obj->btn[obj->cursor].bounce_analog_state = BOUNCE_SAMPLES; // maximum released state
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2230      	movs	r2, #48	; 0x30
 8001b42:	5c9b      	ldrb	r3, [r3, r2]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	18d3      	adds	r3, r2, r3
 8001b4a:	3308      	adds	r3, #8
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	701a      	strb	r2, [r3, #0]
	obj->cursor = obj->cursor + 1;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2230      	movs	r2, #48	; 0x30
 8001b54:	5c9b      	ldrb	r3, [r3, r2]
 8001b56:	3301      	adds	r3, #1
 8001b58:	b2d9      	uxtb	r1, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2230      	movs	r2, #48	; 0x30
 8001b5e:	5499      	strb	r1, [r3, r2]
}
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b004      	add	sp, #16
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <init_buttons>:

void init_buttons(buttons * obj) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	obj->cursor = 0;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2230      	movs	r2, #48	; 0x30
 8001b74:	2100      	movs	r1, #0
 8001b76:	5499      	strb	r1, [r3, r2]
	add_button(obj, BUTTON_1_Pin, BUTTON_1_GPIO_Port);
 8001b78:	4a0c      	ldr	r2, [pc, #48]	; (8001bac <init_buttons+0x44>)
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	0199      	lsls	r1, r3, #6
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7ff ff9d 	bl	8001ac0 <add_button>
	add_button(obj, BUTTON_2_Pin, BUTTON_2_GPIO_Port);
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <init_buttons+0x44>)
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	01d9      	lsls	r1, r3, #7
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f7ff ff96 	bl	8001ac0 <add_button>
	add_button(obj, BUTTON_3_Pin, BUTTON_3_GPIO_Port);
 8001b94:	4a05      	ldr	r2, [pc, #20]	; (8001bac <init_buttons+0x44>)
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	0219      	lsls	r1, r3, #8
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7ff ff8f 	bl	8001ac0 <add_button>
}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b002      	add	sp, #8
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	48000800 	.word	0x48000800

08001bb0 <update_button>:

void update_button(button * obj) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	if(obj->dbl_click_countdown) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	899b      	ldrh	r3, [r3, #12]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <update_button+0x1c>
		obj->dbl_click_countdown--;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	899b      	ldrh	r3, [r3, #12]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	819a      	strh	r2, [r3, #12]
	}
	if (HAL_GPIO_ReadPin (obj->port, obj->pin)) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	0019      	movs	r1, r3
 8001bd6:	0010      	movs	r0, r2
 8001bd8:	f004 f990 	bl	8005efc <HAL_GPIO_ReadPin>
 8001bdc:	1e03      	subs	r3, r0, #0
 8001bde:	d018      	beq.n	8001c12 <update_button+0x62>
		// positive value is when a button released
		obj->bounce_analog_state++;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7a1b      	ldrb	r3, [r3, #8]
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	3301      	adds	r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	b25a      	sxtb	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	721a      	strb	r2, [r3, #8]
		if (obj->bounce_analog_state >= BOUNCE_SAMPLES) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7a1b      	ldrb	r3, [r3, #8]
 8001bf6:	b25b      	sxtb	r3, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	dd33      	ble.n	8001c64 <update_button+0xb4>
			// really released the button
			obj->bounce_analog_state = BOUNCE_SAMPLES;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2203      	movs	r2, #3
 8001c00:	721a      	strb	r2, [r3, #8]
			if(!obj->digital_state) {
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	7a5b      	ldrb	r3, [r3, #9]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d12c      	bne.n	8001c64 <update_button+0xb4>
				obj->digital_state = 1;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	725a      	strb	r2, [r3, #9]
					obj->dbl_click_countdown = DBL_CLICK_CYCLES;
				}
			}
		}
	}
}
 8001c10:	e028      	b.n	8001c64 <update_button+0xb4>
		obj->bounce_analog_state--;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7a1b      	ldrb	r3, [r3, #8]
 8001c16:	b25b      	sxtb	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	b25a      	sxtb	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	721a      	strb	r2, [r3, #8]
		if (obj->bounce_analog_state<=0) {
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7a1b      	ldrb	r3, [r3, #8]
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	dc1a      	bgt.n	8001c64 <update_button+0xb4>
			obj->bounce_analog_state = 0;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	721a      	strb	r2, [r3, #8]
			if(obj->digital_state) {
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	7a5b      	ldrb	r3, [r3, #9]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <update_button+0xb4>
				obj->digital_state = 0;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	725a      	strb	r2, [r3, #9]
				if(obj->dbl_click_countdown) {
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	899b      	ldrh	r3, [r3, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d006      	beq.n	8001c58 <update_button+0xa8>
					obj->is_dblclicked = 1;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	72da      	strb	r2, [r3, #11]
					obj->dbl_click_countdown = 0;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	819a      	strh	r2, [r3, #12]
}
 8001c56:	e005      	b.n	8001c64 <update_button+0xb4>
					obj->is_clicked = 1;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	729a      	strb	r2, [r3, #10]
					obj->dbl_click_countdown = DBL_CLICK_CYCLES;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2264      	movs	r2, #100	; 0x64
 8001c62:	819a      	strh	r2, [r3, #12]
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <set_cmd_crc>:
char cmd_set_speed[8];

// stop motor command
char cmd_stop_motor[8];

void set_cmd_crc(const char *cmd, uint8_t size, uint16_t * crc_sum) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	230b      	movs	r3, #11
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	1c0a      	adds	r2, r1, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
	*crc_sum = 0xffff;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	4252      	negs	r2, r2
 8001c84:	801a      	strh	r2, [r3, #0]
	uint16_t polynom = 0xa001;
 8001c86:	2314      	movs	r3, #20
 8001c88:	18fb      	adds	r3, r7, r3
 8001c8a:	4a2c      	ldr	r2, [pc, #176]	; (8001d3c <set_cmd_crc+0xd0>)
 8001c8c:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i<size;i++) {
 8001c8e:	2317      	movs	r3, #23
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
 8001c96:	e043      	b.n	8001d20 <set_cmd_crc+0xb4>
		uint8_t cur_element = (uint8_t)cmd[i];
 8001c98:	2317      	movs	r3, #23
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	18d2      	adds	r2, r2, r3
 8001ca2:	2113      	movs	r1, #19
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	7812      	ldrb	r2, [r2, #0]
 8001ca8:	701a      	strb	r2, [r3, #0]
		*crc_sum = *crc_sum ^ cur_element;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	881a      	ldrh	r2, [r3, #0]
 8001cae:	187b      	adds	r3, r7, r1
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4053      	eors	r3, r2
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	801a      	strh	r2, [r3, #0]
		for (uint8_t j = 0;j<8;j++) {
 8001cbc:	2316      	movs	r3, #22
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	e021      	b.n	8001d0a <set_cmd_crc+0x9e>
			if(*crc_sum & 0x0001) {
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	001a      	movs	r2, r3
 8001ccc:	2301      	movs	r3, #1
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d00f      	beq.n	8001cf2 <set_cmd_crc+0x86>
				*crc_sum >>= 1;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	085b      	lsrs	r3, r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	801a      	strh	r2, [r3, #0]
				*crc_sum = *crc_sum ^ polynom;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	881a      	ldrh	r2, [r3, #0]
 8001ce2:	2314      	movs	r3, #20
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	4053      	eors	r3, r2
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	801a      	strh	r2, [r3, #0]
 8001cf0:	e005      	b.n	8001cfe <set_cmd_crc+0x92>
			} else {
				*crc_sum >>= 1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	085b      	lsrs	r3, r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	801a      	strh	r2, [r3, #0]
		for (uint8_t j = 0;j<8;j++) {
 8001cfe:	2116      	movs	r1, #22
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	3201      	adds	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	2316      	movs	r3, #22
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b07      	cmp	r3, #7
 8001d12:	d9d8      	bls.n	8001cc6 <set_cmd_crc+0x5a>
	for (uint8_t i = 0; i<size;i++) {
 8001d14:	2117      	movs	r1, #23
 8001d16:	187b      	adds	r3, r7, r1
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	187b      	adds	r3, r7, r1
 8001d1c:	3201      	adds	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	2317      	movs	r3, #23
 8001d22:	18fa      	adds	r2, r7, r3
 8001d24:	230b      	movs	r3, #11
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	7812      	ldrb	r2, [r2, #0]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d3b3      	bcc.n	8001c98 <set_cmd_crc+0x2c>
			}
		}
	}
}
 8001d30:	46c0      	nop			; (mov r8, r8)
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b006      	add	sp, #24
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	ffffa001 	.word	0xffffa001

08001d40 <esq_vars_init>:

void esq_vars_init(){
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
	// header
	cmd_motor_info[0] = DEVICE_ADDR;
 8001d44:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <esq_vars_init+0xcc>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
	cmd_motor_info[1] = READ_COMMAND;
 8001d4a:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <esq_vars_init+0xcc>)
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	705a      	strb	r2, [r3, #1]
	// address
	cmd_motor_info[2] = 0x1e;
 8001d50:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <esq_vars_init+0xcc>)
 8001d52:	221e      	movs	r2, #30
 8001d54:	709a      	strb	r2, [r3, #2]
	cmd_motor_info[3] = 0x02;
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <esq_vars_init+0xcc>)
 8001d58:	2202      	movs	r2, #2
 8001d5a:	70da      	strb	r2, [r3, #3]
	// value
	cmd_motor_info[4] = 0x00;
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <esq_vars_init+0xcc>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	711a      	strb	r2, [r3, #4]
	cmd_motor_info[5] = 0x01;
 8001d62:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <esq_vars_init+0xcc>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	715a      	strb	r2, [r3, #5]
	// crc
	set_cmd_crc(cmd_motor_info, 6, (uint16_t *)&cmd_motor_info[6]);
 8001d68:	4a29      	ldr	r2, [pc, #164]	; (8001e10 <esq_vars_init+0xd0>)
 8001d6a:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <esq_vars_init+0xcc>)
 8001d6c:	2106      	movs	r1, #6
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f7ff ff7c 	bl	8001c6c <set_cmd_crc>

	//header
	cmd_start_motor[0] = DEVICE_ADDR;
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <esq_vars_init+0xd4>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
	cmd_start_motor[1] = WRITE_COMMAND;
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <esq_vars_init+0xd4>)
 8001d7c:	2206      	movs	r2, #6
 8001d7e:	705a      	strb	r2, [r3, #1]
	// address
	cmd_start_motor[2] = 0x1e;
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <esq_vars_init+0xd4>)
 8001d82:	221e      	movs	r2, #30
 8001d84:	709a      	strb	r2, [r3, #2]
	cmd_start_motor[3] = 0x00;
 8001d86:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <esq_vars_init+0xd4>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	70da      	strb	r2, [r3, #3]
	// value
	cmd_start_motor[4] = 0x00;
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <esq_vars_init+0xd4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	711a      	strb	r2, [r3, #4]
	cmd_start_motor[5] = 0x05;
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <esq_vars_init+0xd4>)
 8001d94:	2205      	movs	r2, #5
 8001d96:	715a      	strb	r2, [r3, #5]
	// crc
	set_cmd_crc(cmd_start_motor, 6, (uint16_t *)&cmd_start_motor[6]);
 8001d98:	4a1f      	ldr	r2, [pc, #124]	; (8001e18 <esq_vars_init+0xd8>)
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <esq_vars_init+0xd4>)
 8001d9c:	2106      	movs	r1, #6
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f7ff ff64 	bl	8001c6c <set_cmd_crc>

	// header
	cmd_set_speed[0] = DEVICE_ADDR;
 8001da4:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <esq_vars_init+0xdc>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
	cmd_set_speed[1] = WRITE_COMMAND;
 8001daa:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <esq_vars_init+0xdc>)
 8001dac:	2206      	movs	r2, #6
 8001dae:	705a      	strb	r2, [r3, #1]
	// address
	cmd_set_speed[2] = 0x1e;
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <esq_vars_init+0xdc>)
 8001db2:	221e      	movs	r2, #30
 8001db4:	709a      	strb	r2, [r3, #2]
	cmd_set_speed[3] = 0x01;
 8001db6:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <esq_vars_init+0xdc>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	70da      	strb	r2, [r3, #3]
	// value
	cmd_set_speed[4] = 0x13; //1388 is 5000, which is 50%
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <esq_vars_init+0xdc>)
 8001dbe:	2213      	movs	r2, #19
 8001dc0:	711a      	strb	r2, [r3, #4]
	cmd_set_speed[5] = 0x88;
 8001dc2:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <esq_vars_init+0xdc>)
 8001dc4:	2288      	movs	r2, #136	; 0x88
 8001dc6:	715a      	strb	r2, [r3, #5]
	// crc
	set_cmd_crc(cmd_set_speed, 6, (uint16_t *)&cmd_set_speed[6]);
 8001dc8:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <esq_vars_init+0xe0>)
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <esq_vars_init+0xdc>)
 8001dcc:	2106      	movs	r1, #6
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7ff ff4c 	bl	8001c6c <set_cmd_crc>

	// header
	cmd_stop_motor[0] = DEVICE_ADDR;
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <esq_vars_init+0xe4>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
	cmd_stop_motor[1] = WRITE_COMMAND;
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <esq_vars_init+0xe4>)
 8001ddc:	2206      	movs	r2, #6
 8001dde:	705a      	strb	r2, [r3, #1]
	// address
	cmd_stop_motor[2] = 0x1e;
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <esq_vars_init+0xe4>)
 8001de2:	221e      	movs	r2, #30
 8001de4:	709a      	strb	r2, [r3, #2]
	cmd_stop_motor[3] = 0x00;
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <esq_vars_init+0xe4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	70da      	strb	r2, [r3, #3]
	// value
	cmd_stop_motor[4] = 0x00;
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <esq_vars_init+0xe4>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	711a      	strb	r2, [r3, #4]
	cmd_stop_motor[5] = 0x06;
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <esq_vars_init+0xe4>)
 8001df4:	2206      	movs	r2, #6
 8001df6:	715a      	strb	r2, [r3, #5]
	// crc
	set_cmd_crc(cmd_stop_motor, 6, (uint16_t *)&cmd_stop_motor[6]);
 8001df8:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <esq_vars_init+0xe8>)
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <esq_vars_init+0xe4>)
 8001dfc:	2106      	movs	r1, #6
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f7ff ff34 	bl	8001c6c <set_cmd_crc>
}
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	200001c4 	.word	0x200001c4
 8001e10:	200001ca 	.word	0x200001ca
 8001e14:	200001cc 	.word	0x200001cc
 8001e18:	200001d2 	.word	0x200001d2
 8001e1c:	200001d4 	.word	0x200001d4
 8001e20:	200001da 	.word	0x200001da
 8001e24:	200001dc 	.word	0x200001dc
 8001e28:	200001e2 	.word	0x200001e2

08001e2c <start_motor_cmd>:


// returns a command to start_motor starts motor
char * start_motor_cmd() {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	return cmd_start_motor;
 8001e30:	4b01      	ldr	r3, [pc, #4]	; (8001e38 <start_motor_cmd+0xc>)
}
 8001e32:	0018      	movs	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200001cc 	.word	0x200001cc

08001e3c <set_motor_speed_cmd>:
uint8_t parse_start_motor_answer(const char * answer) {
	return 0;
}

// returns a command to start_motor starts motor at specified percent
char * set_motor_speed_cmd(uint8_t percent) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	0002      	movs	r2, r0
 8001e44:	1dfb      	adds	r3, r7, #7
 8001e46:	701a      	strb	r2, [r3, #0]
	if(percent>100) {
 8001e48:	1dfb      	adds	r3, r7, #7
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b64      	cmp	r3, #100	; 0x64
 8001e4e:	d902      	bls.n	8001e56 <set_motor_speed_cmd+0x1a>
		percent = 100;
 8001e50:	1dfb      	adds	r3, r7, #7
 8001e52:	2264      	movs	r2, #100	; 0x64
 8001e54:	701a      	strb	r2, [r3, #0]
	}
	uint16_t big_percent = percent * 100;
 8001e56:	1dfb      	adds	r3, r7, #7
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2264      	movs	r2, #100	; 0x64
 8001e5e:	4353      	muls	r3, r2
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	210a      	movs	r1, #10
 8001e64:	187b      	adds	r3, r7, r1
 8001e66:	801a      	strh	r2, [r3, #0]
	char * val = (char*)&big_percent;
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	60fb      	str	r3, [r7, #12]
	cmd_set_speed[5] = val[0];
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <set_motor_speed_cmd+0x58>)
 8001e72:	715a      	strb	r2, [r3, #5]
	cmd_set_speed[4] = val[1];
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	785a      	ldrb	r2, [r3, #1]
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <set_motor_speed_cmd+0x58>)
 8001e7a:	711a      	strb	r2, [r3, #4]
	set_cmd_crc(cmd_set_speed, 6, (uint16_t *)&cmd_set_speed[6]);
 8001e7c:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <set_motor_speed_cmd+0x5c>)
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <set_motor_speed_cmd+0x58>)
 8001e80:	2106      	movs	r1, #6
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7ff fef2 	bl	8001c6c <set_cmd_crc>
	return cmd_set_speed;
 8001e88:	4b02      	ldr	r3, [pc, #8]	; (8001e94 <set_motor_speed_cmd+0x58>)
}
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b004      	add	sp, #16
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	200001d4 	.word	0x200001d4
 8001e98:	200001da 	.word	0x200001da

08001e9c <read_motor_info_cmd>:
uint8_t parse_set_motor_speed_answer(const char * answer) {
	return 0;
}

// read_motor_info collects info from the motor
char * read_motor_info_cmd() {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	return cmd_motor_info;
 8001ea0:	4b01      	ldr	r3, [pc, #4]	; (8001ea8 <read_motor_info_cmd+0xc>)
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200001c4 	.word	0x200001c4

08001eac <stop_motor_cmd>:
uint8_t parse_motor_info_answer(const char * answer, motor_parsed_info * status) {
	return 0;
}

// stop motor stops the motor
char * stop_motor_cmd() {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
	return cmd_stop_motor;
 8001eb0:	4b01      	ldr	r3, [pc, #4]	; (8001eb8 <stop_motor_cmd+0xc>)
}
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	200001dc 	.word	0x200001dc

08001ebc <esq_vars_init_770>:

// stop motor command
char cmd_stop_motor_770[8];


void esq_vars_init_770(){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	// header
	cmd_motor_info_770[0] = DEVICE_ADDR_770;
 8001ec0:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <esq_vars_init_770+0xcc>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
	cmd_motor_info_770[1] = READ_COMMAND_770;
 8001ec6:	4b30      	ldr	r3, [pc, #192]	; (8001f88 <esq_vars_init_770+0xcc>)
 8001ec8:	2203      	movs	r2, #3
 8001eca:	705a      	strb	r2, [r3, #1]
	// address
	cmd_motor_info_770[2] = 0x60;
 8001ecc:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <esq_vars_init_770+0xcc>)
 8001ece:	2260      	movs	r2, #96	; 0x60
 8001ed0:	709a      	strb	r2, [r3, #2]
	cmd_motor_info_770[3] = 0x00;
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <esq_vars_init_770+0xcc>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	70da      	strb	r2, [r3, #3]
	// value
	cmd_motor_info_770[4] = 0x00;
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <esq_vars_init_770+0xcc>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	711a      	strb	r2, [r3, #4]
	cmd_motor_info_770[5] = 0x01;
 8001ede:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <esq_vars_init_770+0xcc>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	715a      	strb	r2, [r3, #5]
	// crc
	set_cmd_crc(cmd_motor_info_770, 6, (uint16_t *)&cmd_motor_info_770[6]);
 8001ee4:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <esq_vars_init_770+0xd0>)
 8001ee6:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <esq_vars_init_770+0xcc>)
 8001ee8:	2106      	movs	r1, #6
 8001eea:	0018      	movs	r0, r3
 8001eec:	f7ff febe 	bl	8001c6c <set_cmd_crc>

	//header
	cmd_start_motor_770[0] = DEVICE_ADDR_770;
 8001ef0:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <esq_vars_init_770+0xd4>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
	cmd_start_motor_770[1] = WRITE_COMMAND_770;
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <esq_vars_init_770+0xd4>)
 8001ef8:	2206      	movs	r2, #6
 8001efa:	705a      	strb	r2, [r3, #1]
	// address
	cmd_start_motor_770[2] = 0x20;
 8001efc:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <esq_vars_init_770+0xd4>)
 8001efe:	2220      	movs	r2, #32
 8001f00:	709a      	strb	r2, [r3, #2]
	cmd_start_motor_770[3] = 0x00;
 8001f02:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <esq_vars_init_770+0xd4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	70da      	strb	r2, [r3, #3]
	// value
	cmd_start_motor_770[4] = 0x00;
 8001f08:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <esq_vars_init_770+0xd4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	711a      	strb	r2, [r3, #4]
	cmd_start_motor_770[5] = 0x01;
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <esq_vars_init_770+0xd4>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	715a      	strb	r2, [r3, #5]
	// crc
	set_cmd_crc(cmd_start_motor_770, 6, (uint16_t *)&cmd_start_motor_770[6]);
 8001f14:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <esq_vars_init_770+0xd8>)
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <esq_vars_init_770+0xd4>)
 8001f18:	2106      	movs	r1, #6
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f7ff fea6 	bl	8001c6c <set_cmd_crc>

	// header
	cmd_set_speed_770[0] = DEVICE_ADDR_770;
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <esq_vars_init_770+0xdc>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
	cmd_set_speed_770[1] = WRITE_COMMAND_770;
 8001f26:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <esq_vars_init_770+0xdc>)
 8001f28:	2206      	movs	r2, #6
 8001f2a:	705a      	strb	r2, [r3, #1]
	// address
	cmd_set_speed_770[2] = 0x30;
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <esq_vars_init_770+0xdc>)
 8001f2e:	2230      	movs	r2, #48	; 0x30
 8001f30:	709a      	strb	r2, [r3, #2]
	cmd_set_speed_770[3] = 0x00;
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <esq_vars_init_770+0xdc>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	70da      	strb	r2, [r3, #3]
	// value
	cmd_set_speed_770[4] = 0x09; //25Hz
 8001f38:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <esq_vars_init_770+0xdc>)
 8001f3a:	2209      	movs	r2, #9
 8001f3c:	711a      	strb	r2, [r3, #4]
	cmd_set_speed_770[5] = 0xc4;
 8001f3e:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <esq_vars_init_770+0xdc>)
 8001f40:	22c4      	movs	r2, #196	; 0xc4
 8001f42:	715a      	strb	r2, [r3, #5]
	// crc
	set_cmd_crc(cmd_set_speed_770, 6, (uint16_t *)&cmd_set_speed_770[6]);
 8001f44:	4a15      	ldr	r2, [pc, #84]	; (8001f9c <esq_vars_init_770+0xe0>)
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <esq_vars_init_770+0xdc>)
 8001f48:	2106      	movs	r1, #6
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f7ff fe8e 	bl	8001c6c <set_cmd_crc>

	// header
	cmd_stop_motor_770[0] = DEVICE_ADDR_770;
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <esq_vars_init_770+0xe4>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
	cmd_stop_motor_770[1] = WRITE_COMMAND_770;
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <esq_vars_init_770+0xe4>)
 8001f58:	2206      	movs	r2, #6
 8001f5a:	705a      	strb	r2, [r3, #1]
	// address
	cmd_stop_motor_770[2] = 0x20;
 8001f5c:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <esq_vars_init_770+0xe4>)
 8001f5e:	2220      	movs	r2, #32
 8001f60:	709a      	strb	r2, [r3, #2]
	cmd_stop_motor_770[3] = 0x00;
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <esq_vars_init_770+0xe4>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	70da      	strb	r2, [r3, #3]
	// value
	cmd_stop_motor_770[4] = 0x00;
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <esq_vars_init_770+0xe4>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	711a      	strb	r2, [r3, #4]
	cmd_stop_motor_770[5] = 0x05;
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <esq_vars_init_770+0xe4>)
 8001f70:	2205      	movs	r2, #5
 8001f72:	715a      	strb	r2, [r3, #5]
	// crc
	set_cmd_crc(cmd_stop_motor_770, 6, (uint16_t *)&cmd_stop_motor_770[6]);
 8001f74:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <esq_vars_init_770+0xe8>)
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <esq_vars_init_770+0xe4>)
 8001f78:	2106      	movs	r1, #6
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f7ff fe76 	bl	8001c6c <set_cmd_crc>
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	200001e4 	.word	0x200001e4
 8001f8c:	200001ea 	.word	0x200001ea
 8001f90:	200001ec 	.word	0x200001ec
 8001f94:	200001f2 	.word	0x200001f2
 8001f98:	200001f4 	.word	0x200001f4
 8001f9c:	200001fa 	.word	0x200001fa
 8001fa0:	200001fc 	.word	0x200001fc
 8001fa4:	20000202 	.word	0x20000202

08001fa8 <start_motor_cmd_770>:


// returns a command to start_motor starts motor
char * start_motor_cmd_770() {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	return cmd_start_motor_770;
 8001fac:	4b01      	ldr	r3, [pc, #4]	; (8001fb4 <start_motor_cmd_770+0xc>)
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200001ec 	.word	0x200001ec

08001fb8 <set_motor_speed_cmd_770>:

// returns a command to start_motor starts motor at specified percent
char * set_motor_speed_cmd_770(uint8_t percent) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	1dfb      	adds	r3, r7, #7
 8001fc2:	701a      	strb	r2, [r3, #0]
	if(percent>100) {
 8001fc4:	1dfb      	adds	r3, r7, #7
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b64      	cmp	r3, #100	; 0x64
 8001fca:	d902      	bls.n	8001fd2 <set_motor_speed_cmd_770+0x1a>
		percent = 100;
 8001fcc:	1dfb      	adds	r3, r7, #7
 8001fce:	2264      	movs	r2, #100	; 0x64
 8001fd0:	701a      	strb	r2, [r3, #0]
	}
	uint16_t big_percent = percent * 100;
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2264      	movs	r2, #100	; 0x64
 8001fda:	4353      	muls	r3, r2
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	210a      	movs	r1, #10
 8001fe0:	187b      	adds	r3, r7, r1
 8001fe2:	801a      	strh	r2, [r3, #0]
	char * val = (char*)&big_percent;
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	60fb      	str	r3, [r7, #12]
	cmd_set_speed_770[5] = val[0];
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	781a      	ldrb	r2, [r3, #0]
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <set_motor_speed_cmd_770+0x58>)
 8001fee:	715a      	strb	r2, [r3, #5]
	cmd_set_speed_770[4] = val[1];
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	785a      	ldrb	r2, [r3, #1]
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <set_motor_speed_cmd_770+0x58>)
 8001ff6:	711a      	strb	r2, [r3, #4]
	set_cmd_crc(cmd_set_speed_770, 6, (uint16_t *)&cmd_set_speed_770[6]);
 8001ff8:	4a06      	ldr	r2, [pc, #24]	; (8002014 <set_motor_speed_cmd_770+0x5c>)
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <set_motor_speed_cmd_770+0x58>)
 8001ffc:	2106      	movs	r1, #6
 8001ffe:	0018      	movs	r0, r3
 8002000:	f7ff fe34 	bl	8001c6c <set_cmd_crc>
	return cmd_set_speed_770;
 8002004:	4b02      	ldr	r3, [pc, #8]	; (8002010 <set_motor_speed_cmd_770+0x58>)
}
 8002006:	0018      	movs	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	b004      	add	sp, #16
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	200001f4 	.word	0x200001f4
 8002014:	200001fa 	.word	0x200001fa

08002018 <read_motor_info_cmd_770>:

// read_motor_info collects info from the motor
char * read_motor_info_cmd_770() {
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	return cmd_motor_info_770;
 800201c:	4b01      	ldr	r3, [pc, #4]	; (8002024 <read_motor_info_cmd_770+0xc>)
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200001e4 	.word	0x200001e4

08002028 <stop_motor_cmd_770>:

// stop motor stops the motor
char * stop_motor_cmd_770() {
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	return cmd_stop_motor_770;
 800202c:	4b01      	ldr	r3, [pc, #4]	; (8002034 <stop_motor_cmd_770+0xc>)
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	200001fc 	.word	0x200001fc

08002038 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	0004      	movs	r4, r0
 8002040:	0008      	movs	r0, r1
 8002042:	60ba      	str	r2, [r7, #8]
 8002044:	0019      	movs	r1, r3
 8002046:	230e      	movs	r3, #14
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	1c22      	adds	r2, r4, #0
 800204c:	801a      	strh	r2, [r3, #0]
 800204e:	230c      	movs	r3, #12
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	1c02      	adds	r2, r0, #0
 8002054:	801a      	strh	r2, [r3, #0]
 8002056:	1dbb      	adds	r3, r7, #6
 8002058:	1c0a      	adds	r2, r1, #0
 800205a:	801a      	strh	r2, [r3, #0]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800205c:	1dbb      	adds	r3, r7, #6
 800205e:	2200      	movs	r2, #0
 8002060:	5e9b      	ldrsh	r3, [r3, r2]
 8002062:	3307      	adds	r3, #7
 8002064:	2b00      	cmp	r3, #0
 8002066:	da00      	bge.n	800206a <SSD1306_DrawBitmap+0x32>
 8002068:	3307      	adds	r3, #7
 800206a:	10db      	asrs	r3, r3, #3
 800206c:	001a      	movs	r2, r3
 800206e:	2310      	movs	r3, #16
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8002074:	2317      	movs	r3, #23
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]

    for(int16_t j=0; j<h; j++, y++)
 800207c:	2314      	movs	r3, #20
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	2200      	movs	r2, #0
 8002082:	801a      	strh	r2, [r3, #0]
 8002084:	e068      	b.n	8002158 <SSD1306_DrawBitmap+0x120>
    {
        for(int16_t i=0; i<w; i++)
 8002086:	2312      	movs	r3, #18
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	2200      	movs	r2, #0
 800208c:	801a      	strh	r2, [r3, #0]
 800208e:	e048      	b.n	8002122 <SSD1306_DrawBitmap+0xea>
        {
            if(i & 7)
 8002090:	2312      	movs	r3, #18
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	001a      	movs	r2, r3
 8002098:	2307      	movs	r3, #7
 800209a:	4013      	ands	r3, r2
 800209c:	d006      	beq.n	80020ac <SSD1306_DrawBitmap+0x74>
            {
               byte <<= 1;
 800209e:	2317      	movs	r3, #23
 80020a0:	18fa      	adds	r2, r7, r3
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	18db      	adds	r3, r3, r3
 80020a8:	7013      	strb	r3, [r2, #0]
 80020aa:	e019      	b.n	80020e0 <SSD1306_DrawBitmap+0xa8>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80020ac:	2314      	movs	r3, #20
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	2200      	movs	r2, #0
 80020b2:	5e9b      	ldrsh	r3, [r3, r2]
 80020b4:	2210      	movs	r2, #16
 80020b6:	18ba      	adds	r2, r7, r2
 80020b8:	2100      	movs	r1, #0
 80020ba:	5e52      	ldrsh	r2, [r2, r1]
 80020bc:	435a      	muls	r2, r3
 80020be:	2312      	movs	r3, #18
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	2100      	movs	r1, #0
 80020c4:	5e5b      	ldrsh	r3, [r3, r1]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	da00      	bge.n	80020cc <SSD1306_DrawBitmap+0x94>
 80020ca:	3307      	adds	r3, #7
 80020cc:	10db      	asrs	r3, r3, #3
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	18d3      	adds	r3, r2, r3
 80020d2:	001a      	movs	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	189a      	adds	r2, r3, r2
 80020d8:	2317      	movs	r3, #23
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	7812      	ldrb	r2, [r2, #0]
 80020de:	701a      	strb	r2, [r3, #0]
            }

            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80020e0:	2317      	movs	r3, #23
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	b25b      	sxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	da11      	bge.n	8002110 <SSD1306_DrawBitmap+0xd8>
 80020ec:	230e      	movs	r3, #14
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	881a      	ldrh	r2, [r3, #0]
 80020f2:	2312      	movs	r3, #18
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	18d3      	adds	r3, r2, r3
 80020fa:	b298      	uxth	r0, r3
 80020fc:	230c      	movs	r3, #12
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	8819      	ldrh	r1, [r3, #0]
 8002102:	232c      	movs	r3, #44	; 0x2c
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	001a      	movs	r2, r3
 800210c:	f000 f8e8 	bl	80022e0 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002110:	2112      	movs	r1, #18
 8002112:	187b      	adds	r3, r7, r1
 8002114:	2200      	movs	r2, #0
 8002116:	5e9b      	ldrsh	r3, [r3, r2]
 8002118:	b29b      	uxth	r3, r3
 800211a:	3301      	adds	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	187b      	adds	r3, r7, r1
 8002120:	801a      	strh	r2, [r3, #0]
 8002122:	2312      	movs	r3, #18
 8002124:	18fa      	adds	r2, r7, r3
 8002126:	1dbb      	adds	r3, r7, #6
 8002128:	2100      	movs	r1, #0
 800212a:	5e52      	ldrsh	r2, [r2, r1]
 800212c:	2100      	movs	r1, #0
 800212e:	5e5b      	ldrsh	r3, [r3, r1]
 8002130:	429a      	cmp	r2, r3
 8002132:	dbad      	blt.n	8002090 <SSD1306_DrawBitmap+0x58>
    for(int16_t j=0; j<h; j++, y++)
 8002134:	2114      	movs	r1, #20
 8002136:	187b      	adds	r3, r7, r1
 8002138:	2200      	movs	r2, #0
 800213a:	5e9b      	ldrsh	r3, [r3, r2]
 800213c:	b29b      	uxth	r3, r3
 800213e:	3301      	adds	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	187b      	adds	r3, r7, r1
 8002144:	801a      	strh	r2, [r3, #0]
 8002146:	210c      	movs	r1, #12
 8002148:	187b      	adds	r3, r7, r1
 800214a:	2200      	movs	r2, #0
 800214c:	5e9b      	ldrsh	r3, [r3, r2]
 800214e:	b29b      	uxth	r3, r3
 8002150:	3301      	adds	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	187b      	adds	r3, r7, r1
 8002156:	801a      	strh	r2, [r3, #0]
 8002158:	2314      	movs	r3, #20
 800215a:	18fa      	adds	r2, r7, r3
 800215c:	2328      	movs	r3, #40	; 0x28
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	2100      	movs	r1, #0
 8002162:	5e52      	ldrsh	r2, [r2, r1]
 8002164:	2100      	movs	r1, #0
 8002166:	5e5b      	ldrsh	r3, [r3, r1]
 8002168:	429a      	cmp	r2, r3
 800216a:	db8c      	blt.n	8002086 <SSD1306_DrawBitmap+0x4e>
        }
    }
}
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	46bd      	mov	sp, r7
 8002172:	b007      	add	sp, #28
 8002174:	bd90      	pop	{r4, r7, pc}
	...

08002178 <SSD1306_Init>:

uint8_t SSD1306_Init(void) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
    mirrored_x = 1;
 800217e:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <SSD1306_Init+0x80>)
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
    mirrored_y = 1;
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <SSD1306_Init+0x84>)
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
	/* Init I2C - just a delay */
	ssd1306_I2C_Init();
 800218a:	f000 fc07 	bl	800299c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <SSD1306_Init+0x88>)
 8002190:	481c      	ldr	r0, [pc, #112]	; (8002204 <SSD1306_Init+0x8c>)
 8002192:	2201      	movs	r2, #1
 8002194:	2178      	movs	r1, #120	; 0x78
 8002196:	f004 f889 	bl	80062ac <HAL_I2C_IsDeviceReady>
 800219a:	1e03      	subs	r3, r0, #0
 800219c:	d001      	beq.n	80021a2 <SSD1306_Init+0x2a>
		/* Return false */
		return 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	e026      	b.n	80021f0 <SSD1306_Init+0x78>
	}

	/* A little delay */
	uint32_t p = 2500;
 80021a2:	4b19      	ldr	r3, [pc, #100]	; (8002208 <SSD1306_Init+0x90>)
 80021a4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021a6:	e002      	b.n	80021ae <SSD1306_Init+0x36>
		p--;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f9      	bne.n	80021a8 <SSD1306_Init+0x30>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80021b4:	22ae      	movs	r2, #174	; 0xae
 80021b6:	2100      	movs	r1, #0
 80021b8:	2078      	movs	r0, #120	; 0x78
 80021ba:	f000 fc6f 	bl	8002a9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80021be:	2281      	movs	r2, #129	; 0x81
 80021c0:	2100      	movs	r1, #0
 80021c2:	2078      	movs	r0, #120	; 0x78
 80021c4:	f000 fc6a 	bl	8002a9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x01); // low brughtness
 80021c8:	2201      	movs	r2, #1
 80021ca:	2100      	movs	r1, #0
 80021cc:	2078      	movs	r0, #120	; 0x78
 80021ce:	f000 fc65 	bl	8002a9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 80021d2:	223f      	movs	r2, #63	; 0x3f
 80021d4:	2100      	movs	r1, #0
 80021d6:	2078      	movs	r0, #120	; 0x78
 80021d8:	f000 fc60 	bl	8002a9c <ssd1306_I2C_Write>

	/* Update screen */
	//SSD1306_UpdateScreen();

	/* Set default values */
	SSD1306.CurrentX = 0;
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <SSD1306_Init+0x94>)
 80021de:	2200      	movs	r2, #0
 80021e0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <SSD1306_Init+0x94>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <SSD1306_Init+0x94>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b002      	add	sp, #8
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000604 	.word	0x20000604
 80021fc:	20000605 	.word	0x20000605
 8002200:	00004e20 	.word	0x00004e20
 8002204:	20000610 	.word	0x20000610
 8002208:	000009c4 	.word	0x000009c4
 800220c:	20000608 	.word	0x20000608

08002210 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002216:	1dfb      	adds	r3, r7, #7
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	e021      	b.n	8002262 <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m + 0);
 800221e:	1dfb      	adds	r3, r7, #7
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	3b50      	subs	r3, #80	; 0x50
 8002224:	b2db      	uxtb	r3, r3
 8002226:	001a      	movs	r2, r3
 8002228:	2100      	movs	r1, #0
 800222a:	2078      	movs	r0, #120	; 0x78
 800222c:	f000 fc36 	bl	8002a9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002230:	2200      	movs	r2, #0
 8002232:	2100      	movs	r1, #0
 8002234:	2078      	movs	r0, #120	; 0x78
 8002236:	f000 fc31 	bl	8002a9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800223a:	2210      	movs	r2, #16
 800223c:	2100      	movs	r1, #0
 800223e:	2078      	movs	r0, #120	; 0x78
 8002240:	f000 fc2c 	bl	8002a9c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002244:	1dfb      	adds	r3, r7, #7
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	01da      	lsls	r2, r3, #7
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <SSD1306_UpdateScreen+0x64>)
 800224c:	18d2      	adds	r2, r2, r3
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	2140      	movs	r1, #64	; 0x40
 8002252:	2078      	movs	r0, #120	; 0x78
 8002254:	f000 fbb6 	bl	80029c4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002258:	1dfb      	adds	r3, r7, #7
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	1dfb      	adds	r3, r7, #7
 800225e:	3201      	adds	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b07      	cmp	r3, #7
 8002268:	d9d9      	bls.n	800221e <SSD1306_UpdateScreen+0xe>
	}
}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	46c0      	nop			; (mov r8, r8)
 800226e:	46bd      	mov	sp, r7
 8002270:	b002      	add	sp, #8
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000204 	.word	0x20000204

08002278 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	0002      	movs	r2, r0
 8002280:	1dfb      	adds	r3, r7, #7
 8002282:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002284:	1dfb      	adds	r3, r7, #7
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <SSD1306_Fill+0x18>
 800228c:	2300      	movs	r3, #0
 800228e:	e000      	b.n	8002292 <SSD1306_Fill+0x1a>
 8002290:	23ff      	movs	r3, #255	; 0xff
 8002292:	2280      	movs	r2, #128	; 0x80
 8002294:	00d2      	lsls	r2, r2, #3
 8002296:	4804      	ldr	r0, [pc, #16]	; (80022a8 <SSD1306_Fill+0x30>)
 8002298:	0019      	movs	r1, r3
 800229a:	f008 fa73 	bl	800a784 <memset>
}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b002      	add	sp, #8
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	20000204 	.word	0x20000204

080022ac <SSD1306_Mirror>:
void SSD1306_Mirror(uint8_t new_mirror_x, uint8_t new_mirror_y) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	0002      	movs	r2, r0
 80022b4:	1dfb      	adds	r3, r7, #7
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	1dbb      	adds	r3, r7, #6
 80022ba:	1c0a      	adds	r2, r1, #0
 80022bc:	701a      	strb	r2, [r3, #0]
	mirrored_x = new_mirror_x;
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <SSD1306_Mirror+0x2c>)
 80022c0:	1dfa      	adds	r2, r7, #7
 80022c2:	7812      	ldrb	r2, [r2, #0]
 80022c4:	701a      	strb	r2, [r3, #0]
	mirrored_y = new_mirror_y;
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <SSD1306_Mirror+0x30>)
 80022c8:	1dba      	adds	r2, r7, #6
 80022ca:	7812      	ldrb	r2, [r2, #0]
 80022cc:	701a      	strb	r2, [r3, #0]
}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b002      	add	sp, #8
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	20000604 	.word	0x20000604
 80022dc:	20000605 	.word	0x20000605

080022e0 <SSD1306_DrawPixel>:
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	0004      	movs	r4, r0
 80022e8:	0008      	movs	r0, r1
 80022ea:	0011      	movs	r1, r2
 80022ec:	1dbb      	adds	r3, r7, #6
 80022ee:	1c22      	adds	r2, r4, #0
 80022f0:	801a      	strh	r2, [r3, #0]
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	1c02      	adds	r2, r0, #0
 80022f6:	801a      	strh	r2, [r3, #0]
 80022f8:	1cfb      	adds	r3, r7, #3
 80022fa:	1c0a      	adds	r2, r1, #0
 80022fc:	701a      	strb	r2, [r3, #0]
	// Let's rotate the screen;
	if(mirrored_x) {
 80022fe:	4b37      	ldr	r3, [pc, #220]	; (80023dc <SSD1306_DrawPixel+0xfc>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <SSD1306_DrawPixel+0x32>
		x = 127 - x;
 8002306:	1dbb      	adds	r3, r7, #6
 8002308:	1dba      	adds	r2, r7, #6
 800230a:	8812      	ldrh	r2, [r2, #0]
 800230c:	217f      	movs	r1, #127	; 0x7f
 800230e:	1a8a      	subs	r2, r1, r2
 8002310:	801a      	strh	r2, [r3, #0]
	}
	if(mirrored_y) {
 8002312:	4b33      	ldr	r3, [pc, #204]	; (80023e0 <SSD1306_DrawPixel+0x100>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <SSD1306_DrawPixel+0x46>
		y = 63 - y;
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	1d3a      	adds	r2, r7, #4
 800231e:	8812      	ldrh	r2, [r2, #0]
 8002320:	213f      	movs	r1, #63	; 0x3f
 8002322:	1a8a      	subs	r2, r1, r2
 8002324:	801a      	strh	r2, [r3, #0]
	}
	if (
 8002326:	1dbb      	adds	r3, r7, #6
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	2b7f      	cmp	r3, #127	; 0x7f
 800232c:	d852      	bhi.n	80023d4 <SSD1306_DrawPixel+0xf4>
		x >= SSD1306_WIDTH ||
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	2b3f      	cmp	r3, #63	; 0x3f
 8002334:	d84e      	bhi.n	80023d4 <SSD1306_DrawPixel+0xf4>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002336:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <SSD1306_DrawPixel+0x104>)
 8002338:	791b      	ldrb	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d006      	beq.n	800234c <SSD1306_DrawPixel+0x6c>
		color = (SSD1306_COLOR_t)!color;
 800233e:	1cfb      	adds	r3, r7, #3
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	425a      	negs	r2, r3
 8002344:	4153      	adcs	r3, r2
 8002346:	b2da      	uxtb	r2, r3
 8002348:	1cfb      	adds	r3, r7, #3
 800234a:	701a      	strb	r2, [r3, #0]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800234c:	1cfb      	adds	r3, r7, #3
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d11e      	bne.n	8002392 <SSD1306_DrawPixel+0xb2>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002354:	1dbb      	adds	r3, r7, #6
 8002356:	881a      	ldrh	r2, [r3, #0]
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	08db      	lsrs	r3, r3, #3
 800235e:	b298      	uxth	r0, r3
 8002360:	0003      	movs	r3, r0
 8002362:	01db      	lsls	r3, r3, #7
 8002364:	18d3      	adds	r3, r2, r3
 8002366:	4a20      	ldr	r2, [pc, #128]	; (80023e8 <SSD1306_DrawPixel+0x108>)
 8002368:	5cd3      	ldrb	r3, [r2, r3]
 800236a:	b25a      	sxtb	r2, r3
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	2107      	movs	r1, #7
 8002372:	400b      	ands	r3, r1
 8002374:	2101      	movs	r1, #1
 8002376:	4099      	lsls	r1, r3
 8002378:	000b      	movs	r3, r1
 800237a:	b25b      	sxtb	r3, r3
 800237c:	4313      	orrs	r3, r2
 800237e:	b259      	sxtb	r1, r3
 8002380:	1dbb      	adds	r3, r7, #6
 8002382:	881a      	ldrh	r2, [r3, #0]
 8002384:	0003      	movs	r3, r0
 8002386:	01db      	lsls	r3, r3, #7
 8002388:	18d3      	adds	r3, r2, r3
 800238a:	b2c9      	uxtb	r1, r1
 800238c:	4a16      	ldr	r2, [pc, #88]	; (80023e8 <SSD1306_DrawPixel+0x108>)
 800238e:	54d1      	strb	r1, [r2, r3]
 8002390:	e021      	b.n	80023d6 <SSD1306_DrawPixel+0xf6>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002392:	1dbb      	adds	r3, r7, #6
 8002394:	881a      	ldrh	r2, [r3, #0]
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	08db      	lsrs	r3, r3, #3
 800239c:	b298      	uxth	r0, r3
 800239e:	0003      	movs	r3, r0
 80023a0:	01db      	lsls	r3, r3, #7
 80023a2:	18d3      	adds	r3, r2, r3
 80023a4:	4a10      	ldr	r2, [pc, #64]	; (80023e8 <SSD1306_DrawPixel+0x108>)
 80023a6:	5cd3      	ldrb	r3, [r2, r3]
 80023a8:	b25b      	sxtb	r3, r3
 80023aa:	1d3a      	adds	r2, r7, #4
 80023ac:	8812      	ldrh	r2, [r2, #0]
 80023ae:	2107      	movs	r1, #7
 80023b0:	400a      	ands	r2, r1
 80023b2:	2101      	movs	r1, #1
 80023b4:	4091      	lsls	r1, r2
 80023b6:	000a      	movs	r2, r1
 80023b8:	b252      	sxtb	r2, r2
 80023ba:	43d2      	mvns	r2, r2
 80023bc:	b252      	sxtb	r2, r2
 80023be:	4013      	ands	r3, r2
 80023c0:	b259      	sxtb	r1, r3
 80023c2:	1dbb      	adds	r3, r7, #6
 80023c4:	881a      	ldrh	r2, [r3, #0]
 80023c6:	0003      	movs	r3, r0
 80023c8:	01db      	lsls	r3, r3, #7
 80023ca:	18d3      	adds	r3, r2, r3
 80023cc:	b2c9      	uxtb	r1, r1
 80023ce:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <SSD1306_DrawPixel+0x108>)
 80023d0:	54d1      	strb	r1, [r2, r3]
 80023d2:	e000      	b.n	80023d6 <SSD1306_DrawPixel+0xf6>
		return;
 80023d4:	46c0      	nop			; (mov r8, r8)
	}
}
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b003      	add	sp, #12
 80023da:	bd90      	pop	{r4, r7, pc}
 80023dc:	20000604 	.word	0x20000604
 80023e0:	20000605 	.word	0x20000605
 80023e4:	20000608 	.word	0x20000608
 80023e8:	20000204 	.word	0x20000204

080023ec <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	0002      	movs	r2, r0
 80023f4:	1dbb      	adds	r3, r7, #6
 80023f6:	801a      	strh	r2, [r3, #0]
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	1c0a      	adds	r2, r1, #0
 80023fc:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <SSD1306_GotoXY+0x2c>)
 8002400:	1dba      	adds	r2, r7, #6
 8002402:	8812      	ldrh	r2, [r2, #0]
 8002404:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8002406:	4b04      	ldr	r3, [pc, #16]	; (8002418 <SSD1306_GotoXY+0x2c>)
 8002408:	1d3a      	adds	r2, r7, #4
 800240a:	8812      	ldrh	r2, [r2, #0]
 800240c:	805a      	strh	r2, [r3, #2]
}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	46bd      	mov	sp, r7
 8002412:	b002      	add	sp, #8
 8002414:	bd80      	pop	{r7, pc}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	20000608 	.word	0x20000608

0800241c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6039      	str	r1, [r7, #0]
 8002424:	0011      	movs	r1, r2
 8002426:	1dfb      	adds	r3, r7, #7
 8002428:	1c02      	adds	r2, r0, #0
 800242a:	701a      	strb	r2, [r3, #0]
 800242c:	1dbb      	adds	r3, r7, #6
 800242e:	1c0a      	adds	r2, r1, #0
 8002430:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002432:	4b3a      	ldr	r3, [pc, #232]	; (800251c <SSD1306_Putc+0x100>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	001a      	movs	r2, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	18d3      	adds	r3, r2, r3
	if (
 800243e:	2b7f      	cmp	r3, #127	; 0x7f
 8002440:	dc07      	bgt.n	8002452 <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002442:	4b36      	ldr	r3, [pc, #216]	; (800251c <SSD1306_Putc+0x100>)
 8002444:	885b      	ldrh	r3, [r3, #2]
 8002446:	001a      	movs	r2, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	785b      	ldrb	r3, [r3, #1]
 800244c:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800244e:	2b3f      	cmp	r3, #63	; 0x3f
 8002450:	dd01      	ble.n	8002456 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8002452:	2300      	movs	r3, #0
 8002454:	e05e      	b.n	8002514 <SSD1306_Putc+0xf8>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e04a      	b.n	80024f2 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	1dfb      	adds	r3, r7, #7
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	3b20      	subs	r3, #32
 8002466:	6839      	ldr	r1, [r7, #0]
 8002468:	7849      	ldrb	r1, [r1, #1]
 800246a:	434b      	muls	r3, r1
 800246c:	0019      	movs	r1, r3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	18cb      	adds	r3, r1, r3
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	18d3      	adds	r3, r2, r3
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	e02f      	b.n	80024e0 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	409a      	lsls	r2, r3
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	4013      	ands	r3, r2
 800248c:	d011      	beq.n	80024b2 <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800248e:	4b23      	ldr	r3, [pc, #140]	; (800251c <SSD1306_Putc+0x100>)
 8002490:	881a      	ldrh	r2, [r3, #0]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	b29b      	uxth	r3, r3
 8002496:	18d3      	adds	r3, r2, r3
 8002498:	b298      	uxth	r0, r3
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <SSD1306_Putc+0x100>)
 800249c:	885a      	ldrh	r2, [r3, #2]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	18d3      	adds	r3, r2, r3
 80024a4:	b299      	uxth	r1, r3
 80024a6:	1dbb      	adds	r3, r7, #6
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	001a      	movs	r2, r3
 80024ac:	f7ff ff18 	bl	80022e0 <SSD1306_DrawPixel>
 80024b0:	e013      	b.n	80024da <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80024b2:	4b1a      	ldr	r3, [pc, #104]	; (800251c <SSD1306_Putc+0x100>)
 80024b4:	881a      	ldrh	r2, [r3, #0]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	18d3      	adds	r3, r2, r3
 80024bc:	b298      	uxth	r0, r3
 80024be:	4b17      	ldr	r3, [pc, #92]	; (800251c <SSD1306_Putc+0x100>)
 80024c0:	885a      	ldrh	r2, [r3, #2]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	18d3      	adds	r3, r2, r3
 80024c8:	b299      	uxth	r1, r3
 80024ca:	1dbb      	adds	r3, r7, #6
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	425a      	negs	r2, r3
 80024d0:	4153      	adcs	r3, r2
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	001a      	movs	r2, r3
 80024d6:	f7ff ff03 	bl	80022e0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	3301      	adds	r3, #1
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	001a      	movs	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d3c9      	bcc.n	8002480 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3301      	adds	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	785b      	ldrb	r3, [r3, #1]
 80024f6:	001a      	movs	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d3ae      	bcc.n	800245c <SSD1306_Putc+0x40>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80024fe:	4b07      	ldr	r3, [pc, #28]	; (800251c <SSD1306_Putc+0x100>)
 8002500:	881a      	ldrh	r2, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	18d3      	adds	r3, r2, r3
 800250a:	b29a      	uxth	r2, r3
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <SSD1306_Putc+0x100>)
 800250e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002510:	1dfb      	adds	r3, r7, #7
 8002512:	781b      	ldrb	r3, [r3, #0]
}
 8002514:	0018      	movs	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	b006      	add	sp, #24
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000608 	.word	0x20000608

08002520 <SSD1306_Puts>:

char SSD1306_Puts(const char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	1dfb      	adds	r3, r7, #7
 800252c:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 800252e:	e013      	b.n	8002558 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	7818      	ldrb	r0, [r3, #0]
 8002534:	1dfb      	adds	r3, r7, #7
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	0019      	movs	r1, r3
 800253c:	f7ff ff6e 	bl	800241c <SSD1306_Putc>
 8002540:	0003      	movs	r3, r0
 8002542:	001a      	movs	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d002      	beq.n	8002552 <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	e008      	b.n	8002564 <SSD1306_Puts+0x44>
		}

		/* Increase string pointer */
		str++;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	3301      	adds	r3, #1
 8002556:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1e7      	bne.n	8002530 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	781b      	ldrb	r3, [r3, #0]
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b004      	add	sp, #16
 800256a:	bd80      	pop	{r7, pc}

0800256c <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800256c:	b5b0      	push	{r4, r5, r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	0005      	movs	r5, r0
 8002574:	000c      	movs	r4, r1
 8002576:	0010      	movs	r0, r2
 8002578:	0019      	movs	r1, r3
 800257a:	1dbb      	adds	r3, r7, #6
 800257c:	1c2a      	adds	r2, r5, #0
 800257e:	801a      	strh	r2, [r3, #0]
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	1c22      	adds	r2, r4, #0
 8002584:	801a      	strh	r2, [r3, #0]
 8002586:	1cbb      	adds	r3, r7, #2
 8002588:	1c02      	adds	r2, r0, #0
 800258a:	801a      	strh	r2, [r3, #0]
 800258c:	003b      	movs	r3, r7
 800258e:	1c0a      	adds	r2, r1, #0
 8002590:	801a      	strh	r2, [r3, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8002592:	1dbb      	adds	r3, r7, #6
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	2b7f      	cmp	r3, #127	; 0x7f
 8002598:	d902      	bls.n	80025a0 <SSD1306_DrawLine+0x34>
		x0 = SSD1306_WIDTH - 1;
 800259a:	1dbb      	adds	r3, r7, #6
 800259c:	227f      	movs	r2, #127	; 0x7f
 800259e:	801a      	strh	r2, [r3, #0]
	}
	if (x1 >= SSD1306_WIDTH) {
 80025a0:	1cbb      	adds	r3, r7, #2
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	2b7f      	cmp	r3, #127	; 0x7f
 80025a6:	d902      	bls.n	80025ae <SSD1306_DrawLine+0x42>
		x1 = SSD1306_WIDTH - 1;
 80025a8:	1cbb      	adds	r3, r7, #2
 80025aa:	227f      	movs	r2, #127	; 0x7f
 80025ac:	801a      	strh	r2, [r3, #0]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	2b3f      	cmp	r3, #63	; 0x3f
 80025b4:	d902      	bls.n	80025bc <SSD1306_DrawLine+0x50>
		y0 = SSD1306_HEIGHT - 1;
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	223f      	movs	r2, #63	; 0x3f
 80025ba:	801a      	strh	r2, [r3, #0]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80025bc:	003b      	movs	r3, r7
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	2b3f      	cmp	r3, #63	; 0x3f
 80025c2:	d902      	bls.n	80025ca <SSD1306_DrawLine+0x5e>
		y1 = SSD1306_HEIGHT - 1;
 80025c4:	003b      	movs	r3, r7
 80025c6:	223f      	movs	r2, #63	; 0x3f
 80025c8:	801a      	strh	r2, [r3, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 80025ca:	1dba      	adds	r2, r7, #6
 80025cc:	1cbb      	adds	r3, r7, #2
 80025ce:	8812      	ldrh	r2, [r2, #0]
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d207      	bcs.n	80025e6 <SSD1306_DrawLine+0x7a>
 80025d6:	1cba      	adds	r2, r7, #2
 80025d8:	1dbb      	adds	r3, r7, #6
 80025da:	8812      	ldrh	r2, [r2, #0]
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	b21b      	sxth	r3, r3
 80025e4:	e006      	b.n	80025f4 <SSD1306_DrawLine+0x88>
 80025e6:	1dba      	adds	r2, r7, #6
 80025e8:	1cbb      	adds	r3, r7, #2
 80025ea:	8812      	ldrh	r2, [r2, #0]
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	b21b      	sxth	r3, r3
 80025f4:	2212      	movs	r2, #18
 80025f6:	18ba      	adds	r2, r7, r2
 80025f8:	8013      	strh	r3, [r2, #0]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 80025fa:	1d3a      	adds	r2, r7, #4
 80025fc:	003b      	movs	r3, r7
 80025fe:	8812      	ldrh	r2, [r2, #0]
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d207      	bcs.n	8002616 <SSD1306_DrawLine+0xaa>
 8002606:	003a      	movs	r2, r7
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	8812      	ldrh	r2, [r2, #0]
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	b29b      	uxth	r3, r3
 8002612:	b21b      	sxth	r3, r3
 8002614:	e006      	b.n	8002624 <SSD1306_DrawLine+0xb8>
 8002616:	1d3a      	adds	r2, r7, #4
 8002618:	003b      	movs	r3, r7
 800261a:	8812      	ldrh	r2, [r2, #0]
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	b29b      	uxth	r3, r3
 8002622:	b21b      	sxth	r3, r3
 8002624:	2210      	movs	r2, #16
 8002626:	18ba      	adds	r2, r7, r2
 8002628:	8013      	strh	r3, [r2, #0]
	sx = (x0 < x1) ? 1 : -1;
 800262a:	1dba      	adds	r2, r7, #6
 800262c:	1cbb      	adds	r3, r7, #2
 800262e:	8812      	ldrh	r2, [r2, #0]
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d201      	bcs.n	800263a <SSD1306_DrawLine+0xce>
 8002636:	2201      	movs	r2, #1
 8002638:	e001      	b.n	800263e <SSD1306_DrawLine+0xd2>
 800263a:	2301      	movs	r3, #1
 800263c:	425a      	negs	r2, r3
 800263e:	230e      	movs	r3, #14
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	801a      	strh	r2, [r3, #0]
	sy = (y0 < y1) ? 1 : -1;
 8002644:	1d3a      	adds	r2, r7, #4
 8002646:	003b      	movs	r3, r7
 8002648:	8812      	ldrh	r2, [r2, #0]
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d201      	bcs.n	8002654 <SSD1306_DrawLine+0xe8>
 8002650:	2201      	movs	r2, #1
 8002652:	e001      	b.n	8002658 <SSD1306_DrawLine+0xec>
 8002654:	2301      	movs	r3, #1
 8002656:	425a      	negs	r2, r3
 8002658:	230c      	movs	r3, #12
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	801a      	strh	r2, [r3, #0]
	err = ((dx > dy) ? dx : -dy) / 2;
 800265e:	2112      	movs	r1, #18
 8002660:	187a      	adds	r2, r7, r1
 8002662:	2310      	movs	r3, #16
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	2000      	movs	r0, #0
 8002668:	5e12      	ldrsh	r2, [r2, r0]
 800266a:	2000      	movs	r0, #0
 800266c:	5e1b      	ldrsh	r3, [r3, r0]
 800266e:	429a      	cmp	r2, r3
 8002670:	dd08      	ble.n	8002684 <SSD1306_DrawLine+0x118>
 8002672:	187b      	adds	r3, r7, r1
 8002674:	2200      	movs	r2, #0
 8002676:	5e9b      	ldrsh	r3, [r3, r2]
 8002678:	2b00      	cmp	r3, #0
 800267a:	da00      	bge.n	800267e <SSD1306_DrawLine+0x112>
 800267c:	3301      	adds	r3, #1
 800267e:	105b      	asrs	r3, r3, #1
 8002680:	b21b      	sxth	r3, r3
 8002682:	e009      	b.n	8002698 <SSD1306_DrawLine+0x12c>
 8002684:	2310      	movs	r3, #16
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	2200      	movs	r2, #0
 800268a:	5e9b      	ldrsh	r3, [r3, r2]
 800268c:	2b00      	cmp	r3, #0
 800268e:	da00      	bge.n	8002692 <SSD1306_DrawLine+0x126>
 8002690:	3301      	adds	r3, #1
 8002692:	105b      	asrs	r3, r3, #1
 8002694:	425b      	negs	r3, r3
 8002696:	b21b      	sxth	r3, r3
 8002698:	2216      	movs	r2, #22
 800269a:	18ba      	adds	r2, r7, r2
 800269c:	8013      	strh	r3, [r2, #0]

	if (dx == 0) {
 800269e:	2312      	movs	r3, #18
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	2200      	movs	r2, #0
 80026a4:	5e9b      	ldrsh	r3, [r3, r2]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d148      	bne.n	800273c <SSD1306_DrawLine+0x1d0>
		if (y1 < y0) {
 80026aa:	003a      	movs	r2, r7
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	8812      	ldrh	r2, [r2, #0]
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d20c      	bcs.n	80026d0 <SSD1306_DrawLine+0x164>
			tmp = y1;
 80026b6:	2108      	movs	r1, #8
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	003a      	movs	r2, r7
 80026bc:	8812      	ldrh	r2, [r2, #0]
 80026be:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 80026c0:	003b      	movs	r3, r7
 80026c2:	1d3a      	adds	r2, r7, #4
 80026c4:	8812      	ldrh	r2, [r2, #0]
 80026c6:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	187a      	adds	r2, r7, r1
 80026cc:	8812      	ldrh	r2, [r2, #0]
 80026ce:	801a      	strh	r2, [r3, #0]
		}

		if (x1 < x0) {
 80026d0:	1cba      	adds	r2, r7, #2
 80026d2:	1dbb      	adds	r3, r7, #6
 80026d4:	8812      	ldrh	r2, [r2, #0]
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d20c      	bcs.n	80026f6 <SSD1306_DrawLine+0x18a>
			tmp = x1;
 80026dc:	2108      	movs	r1, #8
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	1cba      	adds	r2, r7, #2
 80026e2:	8812      	ldrh	r2, [r2, #0]
 80026e4:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 80026e6:	1cbb      	adds	r3, r7, #2
 80026e8:	1dba      	adds	r2, r7, #6
 80026ea:	8812      	ldrh	r2, [r2, #0]
 80026ec:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 80026ee:	1dbb      	adds	r3, r7, #6
 80026f0:	187a      	adds	r2, r7, r1
 80026f2:	8812      	ldrh	r2, [r2, #0]
 80026f4:	801a      	strh	r2, [r3, #0]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80026f6:	2314      	movs	r3, #20
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	1d3a      	adds	r2, r7, #4
 80026fc:	8812      	ldrh	r2, [r2, #0]
 80026fe:	801a      	strh	r2, [r3, #0]
 8002700:	e013      	b.n	800272a <SSD1306_DrawLine+0x1be>
			SSD1306_DrawPixel(x0, i, c);
 8002702:	2414      	movs	r4, #20
 8002704:	193b      	adds	r3, r7, r4
 8002706:	8819      	ldrh	r1, [r3, #0]
 8002708:	2328      	movs	r3, #40	; 0x28
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	1dbb      	adds	r3, r7, #6
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	0018      	movs	r0, r3
 8002714:	f7ff fde4 	bl	80022e0 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002718:	0021      	movs	r1, r4
 800271a:	187b      	adds	r3, r7, r1
 800271c:	2200      	movs	r2, #0
 800271e:	5e9b      	ldrsh	r3, [r3, r2]
 8002720:	b29b      	uxth	r3, r3
 8002722:	3301      	adds	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	187b      	adds	r3, r7, r1
 8002728:	801a      	strh	r2, [r3, #0]
 800272a:	2314      	movs	r3, #20
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2200      	movs	r2, #0
 8002730:	5e9a      	ldrsh	r2, [r3, r2]
 8002732:	003b      	movs	r3, r7
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	dde3      	ble.n	8002702 <SSD1306_DrawLine+0x196>
		}

		/* Return from function */
		return;
 800273a:	e0a3      	b.n	8002884 <SSD1306_DrawLine+0x318>
	}

	if (dy == 0) {
 800273c:	2310      	movs	r3, #16
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	2200      	movs	r2, #0
 8002742:	5e9b      	ldrsh	r3, [r3, r2]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d148      	bne.n	80027da <SSD1306_DrawLine+0x26e>
		if (y1 < y0) {
 8002748:	003a      	movs	r2, r7
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	8812      	ldrh	r2, [r2, #0]
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d20c      	bcs.n	800276e <SSD1306_DrawLine+0x202>
			tmp = y1;
 8002754:	2108      	movs	r1, #8
 8002756:	187b      	adds	r3, r7, r1
 8002758:	003a      	movs	r2, r7
 800275a:	8812      	ldrh	r2, [r2, #0]
 800275c:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 800275e:	003b      	movs	r3, r7
 8002760:	1d3a      	adds	r2, r7, #4
 8002762:	8812      	ldrh	r2, [r2, #0]
 8002764:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	187a      	adds	r2, r7, r1
 800276a:	8812      	ldrh	r2, [r2, #0]
 800276c:	801a      	strh	r2, [r3, #0]
		}

		if (x1 < x0) {
 800276e:	1cba      	adds	r2, r7, #2
 8002770:	1dbb      	adds	r3, r7, #6
 8002772:	8812      	ldrh	r2, [r2, #0]
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d20c      	bcs.n	8002794 <SSD1306_DrawLine+0x228>
			tmp = x1;
 800277a:	2108      	movs	r1, #8
 800277c:	187b      	adds	r3, r7, r1
 800277e:	1cba      	adds	r2, r7, #2
 8002780:	8812      	ldrh	r2, [r2, #0]
 8002782:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 8002784:	1cbb      	adds	r3, r7, #2
 8002786:	1dba      	adds	r2, r7, #6
 8002788:	8812      	ldrh	r2, [r2, #0]
 800278a:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 800278c:	1dbb      	adds	r3, r7, #6
 800278e:	187a      	adds	r2, r7, r1
 8002790:	8812      	ldrh	r2, [r2, #0]
 8002792:	801a      	strh	r2, [r3, #0]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8002794:	2314      	movs	r3, #20
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	1dba      	adds	r2, r7, #6
 800279a:	8812      	ldrh	r2, [r2, #0]
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	e013      	b.n	80027c8 <SSD1306_DrawLine+0x25c>
			SSD1306_DrawPixel(i, y0, c);
 80027a0:	2414      	movs	r4, #20
 80027a2:	193b      	adds	r3, r7, r4
 80027a4:	8818      	ldrh	r0, [r3, #0]
 80027a6:	2328      	movs	r3, #40	; 0x28
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	781a      	ldrb	r2, [r3, #0]
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	0019      	movs	r1, r3
 80027b2:	f7ff fd95 	bl	80022e0 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80027b6:	0021      	movs	r1, r4
 80027b8:	187b      	adds	r3, r7, r1
 80027ba:	2200      	movs	r2, #0
 80027bc:	5e9b      	ldrsh	r3, [r3, r2]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	801a      	strh	r2, [r3, #0]
 80027c8:	2314      	movs	r3, #20
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	2200      	movs	r2, #0
 80027ce:	5e9a      	ldrsh	r2, [r3, r2]
 80027d0:	1cbb      	adds	r3, r7, #2
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	dde3      	ble.n	80027a0 <SSD1306_DrawLine+0x234>
		}

		/* Return from function */
		return;
 80027d8:	e054      	b.n	8002884 <SSD1306_DrawLine+0x318>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80027da:	2328      	movs	r3, #40	; 0x28
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	781a      	ldrb	r2, [r3, #0]
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	8819      	ldrh	r1, [r3, #0]
 80027e4:	1dbb      	adds	r3, r7, #6
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7ff fd79 	bl	80022e0 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80027ee:	1dba      	adds	r2, r7, #6
 80027f0:	1cbb      	adds	r3, r7, #2
 80027f2:	8812      	ldrh	r2, [r2, #0]
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d105      	bne.n	8002806 <SSD1306_DrawLine+0x29a>
 80027fa:	1d3a      	adds	r2, r7, #4
 80027fc:	003b      	movs	r3, r7
 80027fe:	8812      	ldrh	r2, [r2, #0]
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d03d      	beq.n	8002882 <SSD1306_DrawLine+0x316>
			break;
		}
		e2 = err;
 8002806:	200a      	movs	r0, #10
 8002808:	183b      	adds	r3, r7, r0
 800280a:	2116      	movs	r1, #22
 800280c:	187a      	adds	r2, r7, r1
 800280e:	8812      	ldrh	r2, [r2, #0]
 8002810:	801a      	strh	r2, [r3, #0]
		if (e2 > -dx) {
 8002812:	183b      	adds	r3, r7, r0
 8002814:	2200      	movs	r2, #0
 8002816:	5e9a      	ldrsh	r2, [r3, r2]
 8002818:	2312      	movs	r3, #18
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	2000      	movs	r0, #0
 800281e:	5e1b      	ldrsh	r3, [r3, r0]
 8002820:	425b      	negs	r3, r3
 8002822:	429a      	cmp	r2, r3
 8002824:	dd10      	ble.n	8002848 <SSD1306_DrawLine+0x2dc>
			err -= dy;
 8002826:	187b      	adds	r3, r7, r1
 8002828:	881a      	ldrh	r2, [r3, #0]
 800282a:	2310      	movs	r3, #16
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	b29a      	uxth	r2, r3
 8002834:	187b      	adds	r3, r7, r1
 8002836:	801a      	strh	r2, [r3, #0]
			x0 += sx;
 8002838:	230e      	movs	r3, #14
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	8819      	ldrh	r1, [r3, #0]
 800283e:	1dbb      	adds	r3, r7, #6
 8002840:	1dba      	adds	r2, r7, #6
 8002842:	8812      	ldrh	r2, [r2, #0]
 8002844:	188a      	adds	r2, r1, r2
 8002846:	801a      	strh	r2, [r3, #0]
		}
		if (e2 < dy) {
 8002848:	230a      	movs	r3, #10
 800284a:	18fa      	adds	r2, r7, r3
 800284c:	2310      	movs	r3, #16
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2100      	movs	r1, #0
 8002852:	5e52      	ldrsh	r2, [r2, r1]
 8002854:	2100      	movs	r1, #0
 8002856:	5e5b      	ldrsh	r3, [r3, r1]
 8002858:	429a      	cmp	r2, r3
 800285a:	dabe      	bge.n	80027da <SSD1306_DrawLine+0x26e>
			err += dx;
 800285c:	2116      	movs	r1, #22
 800285e:	187b      	adds	r3, r7, r1
 8002860:	881a      	ldrh	r2, [r3, #0]
 8002862:	2312      	movs	r3, #18
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	18d3      	adds	r3, r2, r3
 800286a:	b29a      	uxth	r2, r3
 800286c:	187b      	adds	r3, r7, r1
 800286e:	801a      	strh	r2, [r3, #0]
			y0 += sy;
 8002870:	230c      	movs	r3, #12
 8002872:	18fb      	adds	r3, r7, r3
 8002874:	8819      	ldrh	r1, [r3, #0]
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	1d3a      	adds	r2, r7, #4
 800287a:	8812      	ldrh	r2, [r2, #0]
 800287c:	188a      	adds	r2, r1, r2
 800287e:	801a      	strh	r2, [r3, #0]
		SSD1306_DrawPixel(x0, y0, c);
 8002880:	e7ab      	b.n	80027da <SSD1306_DrawLine+0x26e>
			break;
 8002882:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8002884:	46bd      	mov	sp, r7
 8002886:	b006      	add	sp, #24
 8002888:	bdb0      	pop	{r4, r5, r7, pc}

0800288a <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800288a:	b5b0      	push	{r4, r5, r7, lr}
 800288c:	b086      	sub	sp, #24
 800288e:	af02      	add	r7, sp, #8
 8002890:	0005      	movs	r5, r0
 8002892:	000c      	movs	r4, r1
 8002894:	0010      	movs	r0, r2
 8002896:	0019      	movs	r1, r3
 8002898:	1dbb      	adds	r3, r7, #6
 800289a:	1c2a      	adds	r2, r5, #0
 800289c:	801a      	strh	r2, [r3, #0]
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	1c22      	adds	r2, r4, #0
 80028a2:	801a      	strh	r2, [r3, #0]
 80028a4:	1cbb      	adds	r3, r7, #2
 80028a6:	1c02      	adds	r2, r0, #0
 80028a8:	801a      	strh	r2, [r3, #0]
 80028aa:	003b      	movs	r3, r7
 80028ac:	1c0a      	adds	r2, r1, #0
 80028ae:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 80028b0:	1dbb      	adds	r3, r7, #6
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	2b7f      	cmp	r3, #127	; 0x7f
 80028b6:	d850      	bhi.n	800295a <SSD1306_DrawFilledRectangle+0xd0>
		x >= SSD1306_WIDTH ||
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	2b3f      	cmp	r3, #63	; 0x3f
 80028be:	d84c      	bhi.n	800295a <SSD1306_DrawFilledRectangle+0xd0>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80028c0:	1dbb      	adds	r3, r7, #6
 80028c2:	881a      	ldrh	r2, [r3, #0]
 80028c4:	1cbb      	adds	r3, r7, #2
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	18d3      	adds	r3, r2, r3
 80028ca:	2b7f      	cmp	r3, #127	; 0x7f
 80028cc:	dd05      	ble.n	80028da <SSD1306_DrawFilledRectangle+0x50>
		w = SSD1306_WIDTH - x;
 80028ce:	1cbb      	adds	r3, r7, #2
 80028d0:	1dba      	adds	r2, r7, #6
 80028d2:	8812      	ldrh	r2, [r2, #0]
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	1a8a      	subs	r2, r1, r2
 80028d8:	801a      	strh	r2, [r3, #0]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	881a      	ldrh	r2, [r3, #0]
 80028de:	003b      	movs	r3, r7
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	18d3      	adds	r3, r2, r3
 80028e4:	2b3f      	cmp	r3, #63	; 0x3f
 80028e6:	dd05      	ble.n	80028f4 <SSD1306_DrawFilledRectangle+0x6a>
		h = SSD1306_HEIGHT - y;
 80028e8:	003b      	movs	r3, r7
 80028ea:	1d3a      	adds	r2, r7, #4
 80028ec:	8812      	ldrh	r2, [r2, #0]
 80028ee:	2140      	movs	r1, #64	; 0x40
 80028f0:	1a8a      	subs	r2, r1, r2
 80028f2:	801a      	strh	r2, [r3, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80028f4:	230f      	movs	r3, #15
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e024      	b.n	8002948 <SSD1306_DrawFilledRectangle+0xbe>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 80028fe:	200f      	movs	r0, #15
 8002900:	183b      	adds	r3, r7, r0
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	b29a      	uxth	r2, r3
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	18d3      	adds	r3, r2, r3
 800290c:	b299      	uxth	r1, r3
 800290e:	1dba      	adds	r2, r7, #6
 8002910:	1cbb      	adds	r3, r7, #2
 8002912:	8812      	ldrh	r2, [r2, #0]
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	18d3      	adds	r3, r2, r3
 8002918:	b29c      	uxth	r4, r3
 800291a:	0005      	movs	r5, r0
 800291c:	183b      	adds	r3, r7, r0
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	b29a      	uxth	r2, r3
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	18d3      	adds	r3, r2, r3
 8002928:	b29a      	uxth	r2, r3
 800292a:	1dbb      	adds	r3, r7, #6
 800292c:	8818      	ldrh	r0, [r3, #0]
 800292e:	2320      	movs	r3, #32
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	0013      	movs	r3, r2
 8002938:	0022      	movs	r2, r4
 800293a:	f7ff fe17 	bl	800256c <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 800293e:	197b      	adds	r3, r7, r5
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	197b      	adds	r3, r7, r5
 8002944:	3201      	adds	r2, #1
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	230f      	movs	r3, #15
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	003a      	movs	r2, r7
 8002952:	8812      	ldrh	r2, [r2, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d2d2      	bcs.n	80028fe <SSD1306_DrawFilledRectangle+0x74>
 8002958:	e000      	b.n	800295c <SSD1306_DrawFilledRectangle+0xd2>
		return;
 800295a:	46c0      	nop			; (mov r8, r8)
	}
}
 800295c:	46bd      	mov	sp, r7
 800295e:	b004      	add	sp, #16
 8002960:	bdb0      	pop	{r4, r5, r7, pc}

08002962 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002966:	2000      	movs	r0, #0
 8002968:	f7ff fc86 	bl	8002278 <SSD1306_Fill>
    //SSD1306_UpdateScreen();
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <SSD1306_ON>:
void SSD1306_ON(void) {
 8002972:	b580      	push	{r7, lr}
 8002974:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(0x8D);
 8002976:	228d      	movs	r2, #141	; 0x8d
 8002978:	2100      	movs	r1, #0
 800297a:	2078      	movs	r0, #120	; 0x78
 800297c:	f000 f88e 	bl	8002a9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 8002980:	2214      	movs	r2, #20
 8002982:	2100      	movs	r1, #0
 8002984:	2078      	movs	r0, #120	; 0x78
 8002986:	f000 f889 	bl	8002a9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 800298a:	22af      	movs	r2, #175	; 0xaf
 800298c:	2100      	movs	r1, #0
 800298e:	2078      	movs	r0, #120	; 0x78
 8002990:	f000 f884 	bl	8002a9c <ssd1306_I2C_Write>
}
 8002994:	46c0      	nop			; (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <ssd1306_I2C_Init+0x24>)
 80029a4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80029a6:	e002      	b.n	80029ae <ssd1306_I2C_Init+0x12>
		p--;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f9      	bne.n	80029a8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b002      	add	sp, #8
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	0003d090 	.word	0x0003d090

080029c4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80029c4:	b5b0      	push	{r4, r5, r7, lr}
 80029c6:	b0c6      	sub	sp, #280	; 0x118
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	0004      	movs	r4, r0
 80029cc:	0008      	movs	r0, r1
 80029ce:	603a      	str	r2, [r7, #0]
 80029d0:	0019      	movs	r1, r3
 80029d2:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <ssd1306_I2C_WriteMulti+0xc4>)
 80029d4:	2588      	movs	r5, #136	; 0x88
 80029d6:	006d      	lsls	r5, r5, #1
 80029d8:	195b      	adds	r3, r3, r5
 80029da:	19db      	adds	r3, r3, r7
 80029dc:	1c22      	adds	r2, r4, #0
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <ssd1306_I2C_WriteMulti+0xc8>)
 80029e2:	002c      	movs	r4, r5
 80029e4:	191b      	adds	r3, r3, r4
 80029e6:	19db      	adds	r3, r3, r7
 80029e8:	1c02      	adds	r2, r0, #0
 80029ea:	701a      	strb	r2, [r3, #0]
 80029ec:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <ssd1306_I2C_WriteMulti+0xcc>)
 80029ee:	0020      	movs	r0, r4
 80029f0:	181b      	adds	r3, r3, r0
 80029f2:	19db      	adds	r3, r3, r7
 80029f4:	1c0a      	adds	r2, r1, #0
 80029f6:	801a      	strh	r2, [r3, #0]
  uint8_t dt[256];
  dt[0] = reg;
 80029f8:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <ssd1306_I2C_WriteMulti+0xd0>)
 80029fa:	181b      	adds	r3, r3, r0
 80029fc:	19db      	adds	r3, r3, r7
 80029fe:	4a23      	ldr	r2, [pc, #140]	; (8002a8c <ssd1306_I2C_WriteMulti+0xc8>)
 8002a00:	1812      	adds	r2, r2, r0
 8002a02:	19d2      	adds	r2, r2, r7
 8002a04:	7812      	ldrb	r2, [r2, #0]
 8002a06:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  for(i = 0; i < count; i++) dt[i+1] = data[i];
 8002a08:	2310      	movs	r3, #16
 8002a0a:	33ff      	adds	r3, #255	; 0xff
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	e014      	b.n	8002a3e <ssd1306_I2C_WriteMulti+0x7a>
 8002a14:	2010      	movs	r0, #16
 8002a16:	30ff      	adds	r0, #255	; 0xff
 8002a18:	183b      	adds	r3, r7, r0
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	18d2      	adds	r2, r2, r3
 8002a20:	183b      	adds	r3, r7, r0
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	3301      	adds	r3, #1
 8002a26:	7811      	ldrb	r1, [r2, #0]
 8002a28:	4a1a      	ldr	r2, [pc, #104]	; (8002a94 <ssd1306_I2C_WriteMulti+0xd0>)
 8002a2a:	2488      	movs	r4, #136	; 0x88
 8002a2c:	0064      	lsls	r4, r4, #1
 8002a2e:	1912      	adds	r2, r2, r4
 8002a30:	19d2      	adds	r2, r2, r7
 8002a32:	54d1      	strb	r1, [r2, r3]
 8002a34:	183b      	adds	r3, r7, r0
 8002a36:	781a      	ldrb	r2, [r3, #0]
 8002a38:	183b      	adds	r3, r7, r0
 8002a3a:	3201      	adds	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	2310      	movs	r3, #16
 8002a40:	33ff      	adds	r3, #255	; 0xff
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	4a11      	ldr	r2, [pc, #68]	; (8002a90 <ssd1306_I2C_WriteMulti+0xcc>)
 8002a4a:	2188      	movs	r1, #136	; 0x88
 8002a4c:	0049      	lsls	r1, r1, #1
 8002a4e:	1852      	adds	r2, r2, r1
 8002a50:	19d2      	adds	r2, r2, r7
 8002a52:	8812      	ldrh	r2, [r2, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d8dd      	bhi.n	8002a14 <ssd1306_I2C_WriteMulti+0x50>

  HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 200);
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <ssd1306_I2C_WriteMulti+0xc4>)
 8002a5a:	000a      	movs	r2, r1
 8002a5c:	189b      	adds	r3, r3, r2
 8002a5e:	19db      	adds	r3, r3, r7
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b299      	uxth	r1, r3
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <ssd1306_I2C_WriteMulti+0xcc>)
 8002a66:	189b      	adds	r3, r3, r2
 8002a68:	19db      	adds	r3, r3, r7
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	220c      	movs	r2, #12
 8002a72:	18ba      	adds	r2, r7, r2
 8002a74:	4808      	ldr	r0, [pc, #32]	; (8002a98 <ssd1306_I2C_WriteMulti+0xd4>)
 8002a76:	24c8      	movs	r4, #200	; 0xc8
 8002a78:	9400      	str	r4, [sp, #0]
 8002a7a:	f003 fb0f 	bl	800609c <HAL_I2C_Master_Transmit>
}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b044      	add	sp, #272	; 0x110
 8002a84:	bdb0      	pop	{r4, r5, r7, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	fffffef7 	.word	0xfffffef7
 8002a8c:	fffffef6 	.word	0xfffffef6
 8002a90:	fffffef4 	.word	0xfffffef4
 8002a94:	fffffefc 	.word	0xfffffefc
 8002a98:	20000610 	.word	0x20000610

08002a9c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	0004      	movs	r4, r0
 8002aa4:	0008      	movs	r0, r1
 8002aa6:	0011      	movs	r1, r2
 8002aa8:	1dfb      	adds	r3, r7, #7
 8002aaa:	1c22      	adds	r2, r4, #0
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	1dbb      	adds	r3, r7, #6
 8002ab0:	1c02      	adds	r2, r0, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	1d7b      	adds	r3, r7, #5
 8002ab6:	1c0a      	adds	r2, r1, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8002aba:	200c      	movs	r0, #12
 8002abc:	183b      	adds	r3, r7, r0
 8002abe:	1dba      	adds	r2, r7, #6
 8002ac0:	7812      	ldrb	r2, [r2, #0]
 8002ac2:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8002ac4:	183b      	adds	r3, r7, r0
 8002ac6:	1d7a      	adds	r2, r7, #5
 8002ac8:	7812      	ldrb	r2, [r2, #0]
 8002aca:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002acc:	1dfb      	adds	r3, r7, #7
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	b299      	uxth	r1, r3
 8002ad2:	183a      	adds	r2, r7, r0
 8002ad4:	4804      	ldr	r0, [pc, #16]	; (8002ae8 <ssd1306_I2C_Write+0x4c>)
 8002ad6:	230a      	movs	r3, #10
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	2302      	movs	r3, #2
 8002adc:	f003 fade 	bl	800609c <HAL_I2C_Master_Transmit>
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b005      	add	sp, #20
 8002ae6:	bd90      	pop	{r4, r7, pc}
 8002ae8:	20000610 	.word	0x20000610

08002aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	0002      	movs	r2, r0
 8002af4:	1dfb      	adds	r3, r7, #7
 8002af6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002af8:	1dfb      	adds	r3, r7, #7
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b7f      	cmp	r3, #127	; 0x7f
 8002afe:	d809      	bhi.n	8002b14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b00:	1dfb      	adds	r3, r7, #7
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	001a      	movs	r2, r3
 8002b06:	231f      	movs	r3, #31
 8002b08:	401a      	ands	r2, r3
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <__NVIC_EnableIRQ+0x30>)
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4091      	lsls	r1, r2
 8002b10:	000a      	movs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]
  }
}
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	e000e100 	.word	0xe000e100

08002b20 <send_usb>:
void Start_user_interface(void *argument);
void Start_keys_switcher(void *argument);
void Start_rs485_controller(void *argument);


void send_usb(const char * cmd, int size) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
	send_bytes(1, cmd, size);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	0019      	movs	r1, r3
 8002b32:	2001      	movs	r0, #1
 8002b34:	f002 faca 	bl	80050cc <send_bytes>
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b002      	add	sp, #8
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <send_rs485>:
void send_rs485(const char * cmd, int size) {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
	send_bytes(2, cmd, size);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	0019      	movs	r1, r3
 8002b52:	2002      	movs	r0, #2
 8002b54:	f002 faba 	bl	80050cc <send_bytes>
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b002      	add	sp, #8
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <void_os_delay>:

void void_os_delay(uint32_t ticks) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	osDelay(ticks);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f005 fae6 	bl	800813c <osDelay>
}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b002      	add	sp, #8
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <main>:

int main(void) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
	HAL_Init();
 8002b7c:	f002 fd6e 	bl	800565c <HAL_Init>
	app_init();
 8002b80:	f7fd ff4a 	bl	8000a18 <app_init>
	set_app_send_data(send_usb);
 8002b84:	4b4c      	ldr	r3, [pc, #304]	; (8002cb8 <main+0x140>)
 8002b86:	0018      	movs	r0, r3
 8002b88:	f7fe f94e 	bl	8000e28 <set_app_send_data>
	set_rs485_write(send_rs485);
 8002b8c:	4b4b      	ldr	r3, [pc, #300]	; (8002cbc <main+0x144>)
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f7fe f93c 	bl	8000e0c <set_rs485_write>
	set_turn_on_func(turn_on);
 8002b94:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <main+0x148>)
 8002b96:	0018      	movs	r0, r3
 8002b98:	f7fd ff52 	bl	8000a40 <set_turn_on_func>
	set_turn_off_func(turn_off);
 8002b9c:	4b49      	ldr	r3, [pc, #292]	; (8002cc4 <main+0x14c>)
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7fd ff5c 	bl	8000a5c <set_turn_off_func>
	set_sleep_func(void_os_delay);
 8002ba4:	4b48      	ldr	r3, [pc, #288]	; (8002cc8 <main+0x150>)
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f7fd fc5c 	bl	8000464 <set_sleep_func>
	SystemClock_Config();
 8002bac:	f000 f8be 	bl	8002d2c <SystemClock_Config>
	MX_GPIO_Init();
 8002bb0:	f000 f9e2 	bl	8002f78 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002bb4:	f000 f914 	bl	8002de0 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8002bb8:	f000 f952 	bl	8002e60 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8002bbc:	f000 f99a 	bl	8002ef4 <MX_USART2_UART_Init>
	osKernelInitialize();
 8002bc0:	f005 f9ba 	bl	8007f38 <osKernelInitialize>
	init_gpio_entity(&keys);
 8002bc4:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <main+0x154>)
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f002 f824 	bl	8004c14 <init_gpio_entity>
	init_buttons(&btns);
 8002bcc:	4b40      	ldr	r3, [pc, #256]	; (8002cd0 <main+0x158>)
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7fe ffca 	bl	8001b68 <init_buttons>
	init_usarts();
 8002bd4:	f002 fa3e 	bl	8005054 <init_usarts>
	SSD1306_Init();
 8002bd8:	f7ff face 	bl	8002178 <SSD1306_Init>
	set_incoming_byte_handler(1, receive_cmd);
 8002bdc:	4b3d      	ldr	r3, [pc, #244]	; (8002cd4 <main+0x15c>)
 8002bde:	0019      	movs	r1, r3
 8002be0:	2001      	movs	r0, #1
 8002be2:	f002 fa59 	bl	8005098 <set_incoming_byte_handler>
	set_incoming_byte_handler(2, receive_motor1);
 8002be6:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <main+0x160>)
 8002be8:	0019      	movs	r1, r3
 8002bea:	2002      	movs	r0, #2
 8002bec:	f002 fa54 	bl	8005098 <set_incoming_byte_handler>
	set_state(ST_WAITING_FOR_CONNECTION);
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f7fe f9af 	bl	8000f54 <set_state>
	menu_init(&main_menu, &main_menu_supervisor);
 8002bf6:	4a39      	ldr	r2, [pc, #228]	; (8002cdc <main+0x164>)
 8002bf8:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <main+0x168>)
 8002bfa:	0011      	movs	r1, r2
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f000 ffa5 	bl	8003b4c <menu_init>
	menu_supervisor_init(&main_menu_supervisor, &main_menu);
 8002c02:	4a37      	ldr	r2, [pc, #220]	; (8002ce0 <main+0x168>)
 8002c04:	4b35      	ldr	r3, [pc, #212]	; (8002cdc <main+0x164>)
 8002c06:	0011      	movs	r1, r2
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f000 feb9 	bl	8003980 <menu_supervisor_init>
	usb_buf[0] = 0;
 8002c0e:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <main+0x16c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
	usb_buf_cursor = 0;
 8002c14:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <main+0x170>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
	motor_cur = 0;
 8002c1a:	4b34      	ldr	r3, [pc, #208]	; (8002cec <main+0x174>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
	motor_tx_buf[0] = 49;
	motor_tx_buf[1] = 50;
	motor_tx_buf[2] = 10;
	*/

	set_tick_func(HAL_GetTick);
 8002c20:	4b33      	ldr	r3, [pc, #204]	; (8002cf0 <main+0x178>)
 8002c22:	0018      	movs	r0, r3
 8002c24:	f7fe f90e 	bl	8000e44 <set_tick_func>


	motor_buf[0] = 0;
 8002c28:	4b32      	ldr	r3, [pc, #200]	; (8002cf4 <main+0x17c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
	motor_tx_buf[0] = 0x01;
 8002c2e:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <main+0x180>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
	motor_tx_buf[1] = 0x06;
 8002c34:	4b30      	ldr	r3, [pc, #192]	; (8002cf8 <main+0x180>)
 8002c36:	2206      	movs	r2, #6
 8002c38:	705a      	strb	r2, [r3, #1]
	motor_tx_buf[2] = 0x1e;
 8002c3a:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <main+0x180>)
 8002c3c:	221e      	movs	r2, #30
 8002c3e:	709a      	strb	r2, [r3, #2]
	motor_tx_buf[3] = 0x02;
 8002c40:	4b2d      	ldr	r3, [pc, #180]	; (8002cf8 <main+0x180>)
 8002c42:	2202      	movs	r2, #2
 8002c44:	70da      	strb	r2, [r3, #3]
	motor_tx_buf[4] = 0x00;
 8002c46:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <main+0x180>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	711a      	strb	r2, [r3, #4]
	motor_tx_buf[5] = 0x01;
 8002c4c:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <main+0x180>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	715a      	strb	r2, [r3, #5]
	motor_tx_buf[6] = 0x23;
 8002c52:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <main+0x180>)
 8002c54:	2223      	movs	r2, #35	; 0x23
 8002c56:	719a      	strb	r2, [r3, #6]
	motor_tx_buf[7] = 0xe2;
 8002c58:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <main+0x180>)
 8002c5a:	22e2      	movs	r2, #226	; 0xe2
 8002c5c:	71da      	strb	r2, [r3, #7]

	//needToSend = 0;

	command_readerHandle = osThreadNew(Start_command_reader, NULL, &command_reader_attributes);
 8002c5e:	4a27      	ldr	r2, [pc, #156]	; (8002cfc <main+0x184>)
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <main+0x188>)
 8002c62:	2100      	movs	r1, #0
 8002c64:	0018      	movs	r0, r3
 8002c66:	f005 f9c1 	bl	8007fec <osThreadNew>
 8002c6a:	0002      	movs	r2, r0
 8002c6c:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <main+0x18c>)
 8002c6e:	601a      	str	r2, [r3, #0]
	user_interfaceHandle = osThreadNew(Start_user_interface, NULL, &user_interface_attributes);
 8002c70:	4a25      	ldr	r2, [pc, #148]	; (8002d08 <main+0x190>)
 8002c72:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <main+0x194>)
 8002c74:	2100      	movs	r1, #0
 8002c76:	0018      	movs	r0, r3
 8002c78:	f005 f9b8 	bl	8007fec <osThreadNew>
 8002c7c:	0002      	movs	r2, r0
 8002c7e:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <main+0x198>)
 8002c80:	601a      	str	r2, [r3, #0]

	/* creation of keys_switcher */
	keys_switcherHandle = osThreadNew(Start_keys_switcher, NULL, &keys_switcher_attributes);
 8002c82:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <main+0x19c>)
 8002c84:	4b24      	ldr	r3, [pc, #144]	; (8002d18 <main+0x1a0>)
 8002c86:	2100      	movs	r1, #0
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f005 f9af 	bl	8007fec <osThreadNew>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <main+0x1a4>)
 8002c92:	601a      	str	r2, [r3, #0]

	/* creation of rs485_control */
	rs485_controlHandle = osThreadNew(Start_rs485_controller, NULL, &rs485_control_attributes);
 8002c94:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <main+0x1a8>)
 8002c96:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <main+0x1ac>)
 8002c98:	2100      	movs	r1, #0
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f005 f9a6 	bl	8007fec <osThreadNew>
 8002ca0:	0002      	movs	r2, r0
 8002ca2:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <main+0x1b0>)
 8002ca4:	601a      	str	r2, [r3, #0]

	/* Start scheduler */
	osKernelStart();
 8002ca6:	f005 f973 	bl	8007f90 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	while (1) {
		osDelay(1000);
 8002caa:	23fa      	movs	r3, #250	; 0xfa
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f005 fa44 	bl	800813c <osDelay>
 8002cb4:	e7f9      	b.n	8002caa <main+0x132>
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	08002b21 	.word	0x08002b21
 8002cbc:	08002b41 	.word	0x08002b41
 8002cc0:	080036c1 	.word	0x080036c1
 8002cc4:	080036fd 	.word	0x080036fd
 8002cc8:	08002b61 	.word	0x08002b61
 8002ccc:	20000880 	.word	0x20000880
 8002cd0:	200008dc 	.word	0x200008dc
 8002cd4:	08003839 	.word	0x08003839
 8002cd8:	080038d1 	.word	0x080038d1
 8002cdc:	20000780 	.word	0x20000780
 8002ce0:	20000764 	.word	0x20000764
 8002ce4:	20000790 	.word	0x20000790
 8002ce8:	2000078c 	.word	0x2000078c
 8002cec:	20000879 	.word	0x20000879
 8002cf0:	080056a9 	.word	0x080056a9
 8002cf4:	20000868 	.word	0x20000868
 8002cf8:	20000854 	.word	0x20000854
 8002cfc:	0800e6a8 	.word	0x0800e6a8
 8002d00:	0800308d 	.word	0x0800308d
 8002d04:	20000910 	.word	0x20000910
 8002d08:	0800e6cc 	.word	0x0800e6cc
 8002d0c:	0800337d 	.word	0x0800337d
 8002d10:	20000914 	.word	0x20000914
 8002d14:	0800e6f0 	.word	0x0800e6f0
 8002d18:	08003627 	.word	0x08003627
 8002d1c:	20000918 	.word	0x20000918
 8002d20:	0800e714 	.word	0x0800e714
 8002d24:	08003671 	.word	0x08003671
 8002d28:	2000091c 	.word	0x2000091c

08002d2c <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b097      	sub	sp, #92	; 0x5c
 8002d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d32:	2428      	movs	r4, #40	; 0x28
 8002d34:	193b      	adds	r3, r7, r4
 8002d36:	0018      	movs	r0, r3
 8002d38:	2330      	movs	r3, #48	; 0x30
 8002d3a:	001a      	movs	r2, r3
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	f007 fd21 	bl	800a784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d42:	2318      	movs	r3, #24
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	0018      	movs	r0, r3
 8002d48:	2310      	movs	r3, #16
 8002d4a:	001a      	movs	r2, r3
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	f007 fd19 	bl	800a784 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	0018      	movs	r0, r3
 8002d56:	2314      	movs	r3, #20
 8002d58:	001a      	movs	r2, r3
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	f007 fd12 	bl	800a784 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d60:	0021      	movs	r1, r4
 8002d62:	187b      	adds	r3, r7, r1
 8002d64:	2202      	movs	r2, #2
 8002d66:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	2210      	movs	r2, #16
 8002d72:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	2200      	movs	r2, #0
 8002d78:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)  {
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f003 fdbf 	bl	8006900 <HAL_RCC_OscConfig>
 8002d82:	1e03      	subs	r3, r0, #0
 8002d84:	d001      	beq.n	8002d8a <SystemClock_Config+0x5e>
    Error_Handler();
 8002d86:	f000 fc95 	bl	80036b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d8a:	2118      	movs	r1, #24
 8002d8c:	187b      	adds	r3, r7, r1
 8002d8e:	2207      	movs	r2, #7
 8002d90:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002d92:	187b      	adds	r3, r7, r1
 8002d94:	2200      	movs	r2, #0
 8002d96:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d98:	187b      	adds	r3, r7, r1
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d9e:	187b      	adds	r3, r7, r1
 8002da0:	2200      	movs	r2, #0
 8002da2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	2100      	movs	r1, #0
 8002da8:	0018      	movs	r0, r3
 8002daa:	f004 f8c7 	bl	8006f3c <HAL_RCC_ClockConfig>
 8002dae:	1e03      	subs	r3, r0, #0
 8002db0:	d001      	beq.n	8002db6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002db2:	f000 fc7f 	bl	80036b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	2221      	movs	r2, #33	; 0x21
 8002dba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002dbc:	1d3b      	adds	r3, r7, #4
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002dc2:	1d3b      	adds	r3, r7, #4
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f004 fa34 	bl	8007238 <HAL_RCCEx_PeriphCLKConfig>
 8002dd0:	1e03      	subs	r3, r0, #0
 8002dd2:	d001      	beq.n	8002dd8 <SystemClock_Config+0xac>
    Error_Handler();
 8002dd4:	f000 fc6e 	bl	80036b4 <Error_Handler>
  }
}
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b017      	add	sp, #92	; 0x5c
 8002dde:	bd90      	pop	{r4, r7, pc}

08002de0 <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8002de4:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <MX_I2C1_Init+0x74>)
 8002de6:	4a1c      	ldr	r2, [pc, #112]	; (8002e58 <MX_I2C1_Init+0x78>)
 8002de8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8002dea:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <MX_I2C1_Init+0x74>)
 8002dec:	4a1b      	ldr	r2, [pc, #108]	; (8002e5c <MX_I2C1_Init+0x7c>)
 8002dee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002df0:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <MX_I2C1_Init+0x74>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002df6:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <MX_I2C1_Init+0x74>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dfc:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <MX_I2C1_Init+0x74>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e02:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <MX_I2C1_Init+0x74>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e08:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <MX_I2C1_Init+0x74>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e0e:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <MX_I2C1_Init+0x74>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e14:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <MX_I2C1_Init+0x74>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <MX_I2C1_Init+0x74>)
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f003 f8a7 	bl	8005f70 <HAL_I2C_Init>
 8002e22:	1e03      	subs	r3, r0, #0
 8002e24:	d001      	beq.n	8002e2a <MX_I2C1_Init+0x4a>
    Error_Handler();
 8002e26:	f000 fc45 	bl	80036b4 <Error_Handler>
  }
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <MX_I2C1_Init+0x74>)
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f003 fcce 	bl	80067d0 <HAL_I2CEx_ConfigAnalogFilter>
 8002e34:	1e03      	subs	r3, r0, #0
 8002e36:	d001      	beq.n	8002e3c <MX_I2C1_Init+0x5c>
    Error_Handler();
 8002e38:	f000 fc3c 	bl	80036b4 <Error_Handler>
  }
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <MX_I2C1_Init+0x74>)
 8002e3e:	2100      	movs	r1, #0
 8002e40:	0018      	movs	r0, r3
 8002e42:	f003 fd11 	bl	8006868 <HAL_I2CEx_ConfigDigitalFilter>
 8002e46:	1e03      	subs	r3, r0, #0
 8002e48:	d001      	beq.n	8002e4e <MX_I2C1_Init+0x6e>
    Error_Handler();
 8002e4a:	f000 fc33 	bl	80036b4 <Error_Handler>
  }
}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000610 	.word	0x20000610
 8002e58:	40005400 	.word	0x40005400
 8002e5c:	0000020b 	.word	0x0000020b

08002e60 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8002e64:	4b21      	ldr	r3, [pc, #132]	; (8002eec <MX_USART1_UART_Init+0x8c>)
 8002e66:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002e68:	601a      	str	r2, [r3, #0]
	if (get_connection_mode() == CONNECTION_RS485) {
 8002e6a:	f7fd ff45 	bl	8000cf8 <get_connection_mode>
 8002e6e:	1e03      	subs	r3, r0, #0
 8002e70:	d104      	bne.n	8002e7c <MX_USART1_UART_Init+0x1c>
			huart1.Init.BaudRate = 9600;
 8002e72:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <MX_USART1_UART_Init+0x8c>)
 8002e74:	2296      	movs	r2, #150	; 0x96
 8002e76:	0192      	lsls	r2, r2, #6
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	e003      	b.n	8002e84 <MX_USART1_UART_Init+0x24>
	} else {
		huart1.Init.BaudRate = 38400;
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <MX_USART1_UART_Init+0x8c>)
 8002e7e:	2296      	movs	r2, #150	; 0x96
 8002e80:	0212      	lsls	r2, r2, #8
 8002e82:	605a      	str	r2, [r3, #4]
	}
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e84:	4b19      	ldr	r3, [pc, #100]	; (8002eec <MX_USART1_UART_Init+0x8c>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002e8a:	4b18      	ldr	r3, [pc, #96]	; (8002eec <MX_USART1_UART_Init+0x8c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002e90:	4b16      	ldr	r3, [pc, #88]	; (8002eec <MX_USART1_UART_Init+0x8c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002e96:	4b15      	ldr	r3, [pc, #84]	; (8002eec <MX_USART1_UART_Init+0x8c>)
 8002e98:	220c      	movs	r2, #12
 8002e9a:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e9c:	4b13      	ldr	r3, [pc, #76]	; (8002eec <MX_USART1_UART_Init+0x8c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea2:	4b12      	ldr	r3, [pc, #72]	; (8002eec <MX_USART1_UART_Init+0x8c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ea8:	4b10      	ldr	r3, [pc, #64]	; (8002eec <MX_USART1_UART_Init+0x8c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eae:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <MX_USART1_UART_Init+0x8c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8002eb4:	480d      	ldr	r0, [pc, #52]	; (8002eec <MX_USART1_UART_Init+0x8c>)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2100      	movs	r1, #0
 8002ebc:	f004 ffcc 	bl	8007e58 <HAL_RS485Ex_Init>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_USART1_UART_Init+0x68>
		Error_Handler();
 8002ec4:	f000 fbf6 	bl	80036b4 <Error_Handler>
	}

	USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002ece:	212c      	movs	r1, #44	; 0x2c
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]
	USART1->CR2 = 0;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	605a      	str	r2, [r3, #4]
	USART1->CR3 = 0;
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
	NVIC_EnableIRQ(USART1_IRQn);
 8002ee0:	201b      	movs	r0, #27
 8002ee2:	f7ff fe03 	bl	8002aec <__NVIC_EnableIRQ>
}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	2000065c 	.word	0x2000065c
 8002ef0:	40013800 	.word	0x40013800

08002ef4 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <MX_USART2_UART_Init+0x7c>)
 8002efa:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <MX_USART2_UART_Init+0x80>)
 8002efc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002efe:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <MX_USART2_UART_Init+0x7c>)
 8002f00:	2296      	movs	r2, #150	; 0x96
 8002f02:	0192      	lsls	r2, r2, #6
 8002f04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f06:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <MX_USART2_UART_Init+0x7c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f0c:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <MX_USART2_UART_Init+0x7c>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f12:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <MX_USART2_UART_Init+0x7c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f18:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <MX_USART2_UART_Init+0x7c>)
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1e:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <MX_USART2_UART_Init+0x7c>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f24:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <MX_USART2_UART_Init+0x7c>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f2a:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <MX_USART2_UART_Init+0x7c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <MX_USART2_UART_Init+0x7c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8002f36:	480e      	ldr	r0, [pc, #56]	; (8002f70 <MX_USART2_UART_Init+0x7c>)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	f004 ff8b 	bl	8007e58 <HAL_RS485Ex_Init>
 8002f42:	1e03      	subs	r3, r0, #0
 8002f44:	d001      	beq.n	8002f4a <MX_USART2_UART_Init+0x56>
    Error_Handler();
 8002f46:	f000 fbb5 	bl	80036b4 <Error_Handler>
  }
  USART2->CR1 &= ~  (USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_TXEIE);
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <MX_USART2_UART_Init+0x80>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <MX_USART2_UART_Init+0x80>)
 8002f50:	21ac      	movs	r1, #172	; 0xac
 8002f52:	438a      	bics	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
  //USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
  //| USART_CR1_RXNEIE;
  USART2->CR2 = 0;
 8002f56:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <MX_USART2_UART_Init+0x80>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	605a      	str	r2, [r3, #4]
  USART2->CR3 = 0;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <MX_USART2_UART_Init+0x80>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  NVIC_EnableIRQ(USART2_IRQn);
 8002f62:	201c      	movs	r0, #28
 8002f64:	f7ff fdc2 	bl	8002aec <__NVIC_EnableIRQ>
}
 8002f68:	46c0      	nop			; (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	200006e0 	.word	0x200006e0
 8002f74:	40004400 	.word	0x40004400

08002f78 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8002f78:	b590      	push	{r4, r7, lr}
 8002f7a:	b089      	sub	sp, #36	; 0x24
 8002f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7e:	240c      	movs	r4, #12
 8002f80:	193b      	adds	r3, r7, r4
 8002f82:	0018      	movs	r0, r3
 8002f84:	2314      	movs	r3, #20
 8002f86:	001a      	movs	r2, r3
 8002f88:	2100      	movs	r1, #0
 8002f8a:	f007 fbfb 	bl	800a784 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f8e:	4b3b      	ldr	r3, [pc, #236]	; (800307c <MX_GPIO_Init+0x104>)
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	4b3a      	ldr	r3, [pc, #232]	; (800307c <MX_GPIO_Init+0x104>)
 8002f94:	2180      	movs	r1, #128	; 0x80
 8002f96:	0309      	lsls	r1, r1, #12
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	615a      	str	r2, [r3, #20]
 8002f9c:	4b37      	ldr	r3, [pc, #220]	; (800307c <MX_GPIO_Init+0x104>)
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	031b      	lsls	r3, r3, #12
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002faa:	4b34      	ldr	r3, [pc, #208]	; (800307c <MX_GPIO_Init+0x104>)
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	4b33      	ldr	r3, [pc, #204]	; (800307c <MX_GPIO_Init+0x104>)
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	0289      	lsls	r1, r1, #10
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	615a      	str	r2, [r3, #20]
 8002fb8:	4b30      	ldr	r3, [pc, #192]	; (800307c <MX_GPIO_Init+0x104>)
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	029b      	lsls	r3, r3, #10
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	607b      	str	r3, [r7, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc6:	4b2d      	ldr	r3, [pc, #180]	; (800307c <MX_GPIO_Init+0x104>)
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	4b2c      	ldr	r3, [pc, #176]	; (800307c <MX_GPIO_Init+0x104>)
 8002fcc:	2180      	movs	r1, #128	; 0x80
 8002fce:	02c9      	lsls	r1, r1, #11
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	615a      	str	r2, [r3, #20]
 8002fd4:	4b29      	ldr	r3, [pc, #164]	; (800307c <MX_GPIO_Init+0x104>)
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	02db      	lsls	r3, r3, #11
 8002fdc:	4013      	ands	r3, r2
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_11_Pin|OUT_10_Pin|OUT_9_Pin|OUT_8_Pin
 8002fe2:	23f2      	movs	r3, #242	; 0xf2
 8002fe4:	33ff      	adds	r3, #255	; 0xff
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	2390      	movs	r3, #144	; 0x90
 8002fea:	05db      	lsls	r3, r3, #23
 8002fec:	2200      	movs	r2, #0
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f002 ffa1 	bl	8005f36 <HAL_GPIO_WritePin>
                          |OUT_7_Pin|OUT_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_6_Pin|OUT_5_Pin|OUT_4_Pin|OUT_3_Pin
 8002ff4:	4922      	ldr	r1, [pc, #136]	; (8003080 <MX_GPIO_Init+0x108>)
 8002ff6:	4b23      	ldr	r3, [pc, #140]	; (8003084 <MX_GPIO_Init+0x10c>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f002 ff9b 	bl	8005f36 <HAL_GPIO_WritePin>
                          |OUT_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8003000:	193b      	adds	r3, r7, r4
 8003002:	22e0      	movs	r2, #224	; 0xe0
 8003004:	0212      	lsls	r2, r2, #8
 8003006:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003008:	193b      	adds	r3, r7, r4
 800300a:	2200      	movs	r2, #0
 800300c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800300e:	193b      	adds	r3, r7, r4
 8003010:	2201      	movs	r2, #1
 8003012:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003014:	193b      	adds	r3, r7, r4
 8003016:	4a1c      	ldr	r2, [pc, #112]	; (8003088 <MX_GPIO_Init+0x110>)
 8003018:	0019      	movs	r1, r3
 800301a:	0010      	movs	r0, r2
 800301c:	f002 fdfe 	bl	8005c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_11_Pin OUT_10_Pin OUT_9_Pin OUT_8_Pin
                           OUT_7_Pin OUT_1_Pin */
  GPIO_InitStruct.Pin = OUT_11_Pin|OUT_10_Pin|OUT_9_Pin|OUT_8_Pin
 8003020:	0021      	movs	r1, r4
 8003022:	187b      	adds	r3, r7, r1
 8003024:	22f2      	movs	r2, #242	; 0xf2
 8003026:	32ff      	adds	r2, #255	; 0xff
 8003028:	601a      	str	r2, [r3, #0]
                          |OUT_7_Pin|OUT_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302a:	000c      	movs	r4, r1
 800302c:	193b      	adds	r3, r7, r4
 800302e:	2201      	movs	r2, #1
 8003030:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	193b      	adds	r3, r7, r4
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	193b      	adds	r3, r7, r4
 800303a:	2200      	movs	r2, #0
 800303c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303e:	193a      	adds	r2, r7, r4
 8003040:	2390      	movs	r3, #144	; 0x90
 8003042:	05db      	lsls	r3, r3, #23
 8003044:	0011      	movs	r1, r2
 8003046:	0018      	movs	r0, r3
 8003048:	f002 fde8 	bl	8005c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_6_Pin OUT_5_Pin OUT_4_Pin OUT_3_Pin
                           OUT_2_Pin */
  GPIO_InitStruct.Pin = OUT_6_Pin|OUT_5_Pin|OUT_4_Pin|OUT_3_Pin
 800304c:	0021      	movs	r1, r4
 800304e:	187b      	adds	r3, r7, r1
 8003050:	4a0b      	ldr	r2, [pc, #44]	; (8003080 <MX_GPIO_Init+0x108>)
 8003052:	601a      	str	r2, [r3, #0]
                          |OUT_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003054:	187b      	adds	r3, r7, r1
 8003056:	2201      	movs	r2, #1
 8003058:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	187b      	adds	r3, r7, r1
 800305c:	2200      	movs	r2, #0
 800305e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003060:	187b      	adds	r3, r7, r1
 8003062:	2200      	movs	r2, #0
 8003064:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003066:	187b      	adds	r3, r7, r1
 8003068:	4a06      	ldr	r2, [pc, #24]	; (8003084 <MX_GPIO_Init+0x10c>)
 800306a:	0019      	movs	r1, r3
 800306c:	0010      	movs	r0, r2
 800306e:	f002 fdd5 	bl	8005c1c <HAL_GPIO_Init>
}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	b009      	add	sp, #36	; 0x24
 8003078:	bd90      	pop	{r4, r7, pc}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	40021000 	.word	0x40021000
 8003080:	0000f001 	.word	0x0000f001
 8003084:	48000400 	.word	0x48000400
 8003088:	48000800 	.word	0x48000800

0800308c <Start_command_reader>:

char received_cmd[MAX_CMD_BUF+1] = {0,};
void Start_command_reader(void *argument) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  for(;;) {
	  if (cmd_ready) {
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <Start_command_reader+0x2c>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <Start_command_reader+0x24>
		  cmd_ready = 0;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <Start_command_reader+0x2c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
		  app_process_cmd(received_cmd);
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <Start_command_reader+0x30>)
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7fd ff65 	bl	8000f74 <app_process_cmd>
		  received_cmd[0] = 0;
 80030aa:	4b04      	ldr	r3, [pc, #16]	; (80030bc <Start_command_reader+0x30>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
	  }
	  osDelay(1);
 80030b0:	2001      	movs	r0, #1
 80030b2:	f005 f843 	bl	800813c <osDelay>
	  if (cmd_ready) {
 80030b6:	e7ed      	b.n	8003094 <Start_command_reader+0x8>
 80030b8:	2000087a 	.word	0x2000087a
 80030bc:	20000920 	.word	0x20000920

080030c0 <display_logo>:
  }
}

void display_logo(int key) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	6078      	str	r0, [r7, #4]
	SSD1306_Clear();
 80030c8:	f7ff fc4b 	bl	8002962 <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, bg, 128, 64, 1);
 80030cc:	4a1b      	ldr	r2, [pc, #108]	; (800313c <display_logo+0x7c>)
 80030ce:	2301      	movs	r3, #1
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	2340      	movs	r3, #64	; 0x40
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	2100      	movs	r1, #0
 80030da:	2000      	movs	r0, #0
 80030dc:	f7fe ffac 	bl	8002038 <SSD1306_DrawBitmap>
	if (key == 1) SSD1306_DrawBitmap(72, 8, rb1, 48, 54, 1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d109      	bne.n	80030fa <display_logo+0x3a>
 80030e6:	4a16      	ldr	r2, [pc, #88]	; (8003140 <display_logo+0x80>)
 80030e8:	2301      	movs	r3, #1
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	2336      	movs	r3, #54	; 0x36
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2330      	movs	r3, #48	; 0x30
 80030f2:	2108      	movs	r1, #8
 80030f4:	2048      	movs	r0, #72	; 0x48
 80030f6:	f7fe ff9f 	bl	8002038 <SSD1306_DrawBitmap>
	if (key == 2) SSD1306_DrawBitmap(72, 8, rb2, 48, 54, 1);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d109      	bne.n	8003114 <display_logo+0x54>
 8003100:	4a10      	ldr	r2, [pc, #64]	; (8003144 <display_logo+0x84>)
 8003102:	2301      	movs	r3, #1
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	2336      	movs	r3, #54	; 0x36
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2330      	movs	r3, #48	; 0x30
 800310c:	2108      	movs	r1, #8
 800310e:	2048      	movs	r0, #72	; 0x48
 8003110:	f7fe ff92 	bl	8002038 <SSD1306_DrawBitmap>
	if (key == 3) SSD1306_DrawBitmap(72, 8, rb3, 48, 54, 1);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b03      	cmp	r3, #3
 8003118:	d109      	bne.n	800312e <display_logo+0x6e>
 800311a:	4a0b      	ldr	r2, [pc, #44]	; (8003148 <display_logo+0x88>)
 800311c:	2301      	movs	r3, #1
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	2336      	movs	r3, #54	; 0x36
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2330      	movs	r3, #48	; 0x30
 8003126:	2108      	movs	r1, #8
 8003128:	2048      	movs	r0, #72	; 0x48
 800312a:	f7fe ff85 	bl	8002038 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 800312e:	f7ff f86f 	bl	8002210 <SSD1306_UpdateScreen>
}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	b002      	add	sp, #8
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	0800decc 	.word	0x0800decc
 8003140:	0800e2d0 	.word	0x0800e2d0
 8003144:	0800e418 	.word	0x0800e418
 8003148:	0800e560 	.word	0x0800e560

0800314c <display_connection>:

void display_connection(int is_connected) {
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
	SSD1306_Clear();
 8003154:	f7ff fc05 	bl	8002962 <SSD1306_Clear>
	if(!is_connected) {
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d11e      	bne.n	800319c <display_connection+0x50>
		SSD1306_GotoXY(25, 3);
 800315e:	2103      	movs	r1, #3
 8003160:	2019      	movs	r0, #25
 8003162:	f7ff f943 	bl	80023ec <SSD1306_GotoXY>
		SSD1306_Puts("WAITING", &Font_11x18, 1);
 8003166:	4926      	ldr	r1, [pc, #152]	; (8003200 <display_connection+0xb4>)
 8003168:	4b26      	ldr	r3, [pc, #152]	; (8003204 <display_connection+0xb8>)
 800316a:	2201      	movs	r2, #1
 800316c:	0018      	movs	r0, r3
 800316e:	f7ff f9d7 	bl	8002520 <SSD1306_Puts>
		SSD1306_GotoXY(47, 23);
 8003172:	2117      	movs	r1, #23
 8003174:	202f      	movs	r0, #47	; 0x2f
 8003176:	f7ff f939 	bl	80023ec <SSD1306_GotoXY>
		SSD1306_Puts("FOR", &Font_11x18, 1);
 800317a:	4921      	ldr	r1, [pc, #132]	; (8003200 <display_connection+0xb4>)
 800317c:	4b22      	ldr	r3, [pc, #136]	; (8003208 <display_connection+0xbc>)
 800317e:	2201      	movs	r2, #1
 8003180:	0018      	movs	r0, r3
 8003182:	f7ff f9cd 	bl	8002520 <SSD1306_Puts>
		SSD1306_GotoXY(9, 45);
 8003186:	212d      	movs	r1, #45	; 0x2d
 8003188:	2009      	movs	r0, #9
 800318a:	f7ff f92f 	bl	80023ec <SSD1306_GotoXY>
		SSD1306_Puts("CONNECTION", &Font_11x18, 1);
 800318e:	491c      	ldr	r1, [pc, #112]	; (8003200 <display_connection+0xb4>)
 8003190:	4b1e      	ldr	r3, [pc, #120]	; (800320c <display_connection+0xc0>)
 8003192:	2201      	movs	r2, #1
 8003194:	0018      	movs	r0, r3
 8003196:	f7ff f9c3 	bl	8002520 <SSD1306_Puts>
 800319a:	e02b      	b.n	80031f4 <display_connection+0xa8>
	} else {
		SSD1306_GotoXY(9, 45);
 800319c:	212d      	movs	r1, #45	; 0x2d
 800319e:	2009      	movs	r0, #9
 80031a0:	f7ff f924 	bl	80023ec <SSD1306_GotoXY>
		uint8_t x = rand() % 28;
 80031a4:	f007 f9a0 	bl	800a4e8 <rand>
 80031a8:	0003      	movs	r3, r0
 80031aa:	211c      	movs	r1, #28
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7fd f925 	bl	80003fc <__aeabi_idivmod>
 80031b2:	000b      	movs	r3, r1
 80031b4:	001a      	movs	r2, r3
 80031b6:	240f      	movs	r4, #15
 80031b8:	193b      	adds	r3, r7, r4
 80031ba:	701a      	strb	r2, [r3, #0]
		uint8_t y = rand() % 45;
 80031bc:	f007 f994 	bl	800a4e8 <rand>
 80031c0:	0003      	movs	r3, r0
 80031c2:	212d      	movs	r1, #45	; 0x2d
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7fd f919 	bl	80003fc <__aeabi_idivmod>
 80031ca:	000b      	movs	r3, r1
 80031cc:	001a      	movs	r2, r3
 80031ce:	210e      	movs	r1, #14
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	701a      	strb	r2, [r3, #0]
		SSD1306_GotoXY(x, y);
 80031d4:	193b      	adds	r3, r7, r4
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	b29a      	uxth	r2, r3
 80031da:	187b      	adds	r3, r7, r1
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	0019      	movs	r1, r3
 80031e2:	0010      	movs	r0, r2
 80031e4:	f7ff f902 	bl	80023ec <SSD1306_GotoXY>
		SSD1306_Puts("CONNECTED", &Font_11x18, 1);
 80031e8:	4905      	ldr	r1, [pc, #20]	; (8003200 <display_connection+0xb4>)
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <display_connection+0xc4>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	0018      	movs	r0, r3
 80031f0:	f7ff f996 	bl	8002520 <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 80031f4:	f7ff f80c 	bl	8002210 <SSD1306_UpdateScreen>
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b005      	add	sp, #20
 80031fe:	bd90      	pop	{r4, r7, pc}
 8003200:	20000008 	.word	0x20000008
 8003204:	0800b49c 	.word	0x0800b49c
 8003208:	0800b4a4 	.word	0x0800b4a4
 800320c:	0800b4a8 	.word	0x0800b4a8
 8003210:	0800b4b4 	.word	0x0800b4b4

08003214 <display_post_num>:

void display_post_num() {
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 800321a:	f7ff fba2 	bl	8002962 <SSD1306_Clear>
	uint8_t x = rand() % 95;
 800321e:	f007 f963 	bl	800a4e8 <rand>
 8003222:	0003      	movs	r3, r0
 8003224:	215f      	movs	r1, #95	; 0x5f
 8003226:	0018      	movs	r0, r3
 8003228:	f7fd f8e8 	bl	80003fc <__aeabi_idivmod>
 800322c:	000b      	movs	r3, r1
 800322e:	001a      	movs	r2, r3
 8003230:	1dfb      	adds	r3, r7, #7
 8003232:	701a      	strb	r2, [r3, #0]
	uint8_t y = rand() % 37;
 8003234:	f007 f958 	bl	800a4e8 <rand>
 8003238:	0003      	movs	r3, r0
 800323a:	2125      	movs	r1, #37	; 0x25
 800323c:	0018      	movs	r0, r3
 800323e:	f7fd f8dd 	bl	80003fc <__aeabi_idivmod>
 8003242:	000b      	movs	r3, r1
 8003244:	001a      	movs	r2, r3
 8003246:	1dbb      	adds	r3, r7, #6
 8003248:	701a      	strb	r2, [r3, #0]

	SSD1306_GotoXY(x, y);
 800324a:	1dfb      	adds	r3, r7, #7
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b29a      	uxth	r2, r3
 8003250:	1dbb      	adds	r3, r7, #6
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	0019      	movs	r1, r3
 8003258:	0010      	movs	r0, r2
 800325a:	f7ff f8c7 	bl	80023ec <SSD1306_GotoXY>
	SSD1306_Puts(get_post_num_str(), &Font_16x26, 1);
 800325e:	f7fd fd2f 	bl	8000cc0 <get_post_num_str>
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <display_post_num+0x64>)
 8003264:	2201      	movs	r2, #1
 8003266:	0019      	movs	r1, r3
 8003268:	f7ff f95a 	bl	8002520 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800326c:	f7fe ffd0 	bl	8002210 <SSD1306_UpdateScreen>
}
 8003270:	46c0      	nop			; (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	b002      	add	sp, #8
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20000010 	.word	0x20000010

0800327c <display_motor_status>:

void display_motor_status() {
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8003282:	f7ff fb6e 	bl	8002962 <SSD1306_Clear>
	uint8_t motor_com_status = get_motor_communication_status();
 8003286:	1dfc      	adds	r4, r7, #7
 8003288:	f7fd f964 	bl	8000554 <get_motor_communication_status>
 800328c:	0003      	movs	r3, r0
 800328e:	7023      	strb	r3, [r4, #0]
	uint8_t y = rand() % 45;
 8003290:	f007 f92a 	bl	800a4e8 <rand>
 8003294:	0003      	movs	r3, r0
 8003296:	212d      	movs	r1, #45	; 0x2d
 8003298:	0018      	movs	r0, r3
 800329a:	f7fd f8af 	bl	80003fc <__aeabi_idivmod>
 800329e:	000b      	movs	r3, r1
 80032a0:	001a      	movs	r2, r3
 80032a2:	1dbb      	adds	r3, r7, #6
 80032a4:	701a      	strb	r2, [r3, #0]
	if (motor_com_status == MOTOR_NOT_ANSWERING){
 80032a6:	1dfb      	adds	r3, r7, #7
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d11b      	bne.n	80032e6 <display_motor_status+0x6a>
		uint8_t x = rand() % 39;
 80032ae:	f007 f91b 	bl	800a4e8 <rand>
 80032b2:	0003      	movs	r3, r0
 80032b4:	2127      	movs	r1, #39	; 0x27
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7fd f8a0 	bl	80003fc <__aeabi_idivmod>
 80032bc:	000b      	movs	r3, r1
 80032be:	001a      	movs	r2, r3
 80032c0:	1cfb      	adds	r3, r7, #3
 80032c2:	701a      	strb	r2, [r3, #0]
		SSD1306_GotoXY(x, y);
 80032c4:	1cfb      	adds	r3, r7, #3
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	1dbb      	adds	r3, r7, #6
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	0019      	movs	r1, r3
 80032d2:	0010      	movs	r0, r2
 80032d4:	f7ff f88a 	bl	80023ec <SSD1306_GotoXY>
		SSD1306_Puts("NO MOTOR", &Font_11x18, 1);
 80032d8:	4924      	ldr	r1, [pc, #144]	; (800336c <display_motor_status+0xf0>)
 80032da:	4b25      	ldr	r3, [pc, #148]	; (8003370 <display_motor_status+0xf4>)
 80032dc:	2201      	movs	r2, #1
 80032de:	0018      	movs	r0, r3
 80032e0:	f7ff f91e 	bl	8002520 <SSD1306_Puts>
 80032e4:	e03b      	b.n	800335e <display_motor_status+0xe2>
	} else if (motor_com_status == MOTOR_WRONG_ANSWERS) {
 80032e6:	1dfb      	adds	r3, r7, #7
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d11c      	bne.n	8003328 <display_motor_status+0xac>
		int8_t x = rand() % 28;
 80032ee:	f007 f8fb 	bl	800a4e8 <rand>
 80032f2:	0003      	movs	r3, r0
 80032f4:	211c      	movs	r1, #28
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7fd f880 	bl	80003fc <__aeabi_idivmod>
 80032fc:	000b      	movs	r3, r1
 80032fe:	001a      	movs	r2, r3
 8003300:	1d3b      	adds	r3, r7, #4
 8003302:	701a      	strb	r2, [r3, #0]
		SSD1306_GotoXY(x, y);
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	b25b      	sxtb	r3, r3
 800330a:	b29a      	uxth	r2, r3
 800330c:	1dbb      	adds	r3, r7, #6
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	b29b      	uxth	r3, r3
 8003312:	0019      	movs	r1, r3
 8003314:	0010      	movs	r0, r2
 8003316:	f7ff f869 	bl	80023ec <SSD1306_GotoXY>
		SSD1306_Puts("MOTOR ERR", &Font_11x18, 1);
 800331a:	4914      	ldr	r1, [pc, #80]	; (800336c <display_motor_status+0xf0>)
 800331c:	4b15      	ldr	r3, [pc, #84]	; (8003374 <display_motor_status+0xf8>)
 800331e:	2201      	movs	r2, #1
 8003320:	0018      	movs	r0, r3
 8003322:	f7ff f8fd 	bl	8002520 <SSD1306_Puts>
 8003326:	e01a      	b.n	800335e <display_motor_status+0xe2>
	} else {
		uint8_t x = rand() % 39;
 8003328:	f007 f8de 	bl	800a4e8 <rand>
 800332c:	0003      	movs	r3, r0
 800332e:	2127      	movs	r1, #39	; 0x27
 8003330:	0018      	movs	r0, r3
 8003332:	f7fd f863 	bl	80003fc <__aeabi_idivmod>
 8003336:	000b      	movs	r3, r1
 8003338:	001a      	movs	r2, r3
 800333a:	1d7b      	adds	r3, r7, #5
 800333c:	701a      	strb	r2, [r3, #0]
		SSD1306_GotoXY(x, y);
 800333e:	1d7b      	adds	r3, r7, #5
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	b29a      	uxth	r2, r3
 8003344:	1dbb      	adds	r3, r7, #6
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	0019      	movs	r1, r3
 800334c:	0010      	movs	r0, r2
 800334e:	f7ff f84d 	bl	80023ec <SSD1306_GotoXY>
		SSD1306_Puts("MOTOR OK", &Font_11x18, 1);
 8003352:	4906      	ldr	r1, [pc, #24]	; (800336c <display_motor_status+0xf0>)
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <display_motor_status+0xfc>)
 8003356:	2201      	movs	r2, #1
 8003358:	0018      	movs	r0, r3
 800335a:	f7ff f8e1 	bl	8002520 <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 800335e:	f7fe ff57 	bl	8002210 <SSD1306_UpdateScreen>
}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	46bd      	mov	sp, r7
 8003366:	b003      	add	sp, #12
 8003368:	bd90      	pop	{r4, r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	20000008 	.word	0x20000008
 8003370:	0800b4c0 	.word	0x0800b4c0
 8003374:	0800b4cc 	.word	0x0800b4cc
 8003378:	0800b4d8 	.word	0x0800b4d8

0800337c <Start_user_interface>:

void start_animation();

void Start_user_interface(void *argument) {
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	start_animation();
 8003384:	f000 f916 	bl	80035b4 <start_animation>
	needToSend = 0;
 8003388:	4b72      	ldr	r3, [pc, #456]	; (8003554 <Start_user_interface+0x1d8>)
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
	uint16_t loop = 1000;
 800338e:	230e      	movs	r3, #14
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	22fa      	movs	r2, #250	; 0xfa
 8003394:	0092      	lsls	r2, r2, #2
 8003396:	801a      	strh	r2, [r3, #0]
	uint8_t frame = 0;
 8003398:	230d      	movs	r3, #13
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
	uint8_t mode = MODE_SCREENSAVER;
 80033a0:	230c      	movs	r3, #12
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
	for(;;) {
		if (mode == MODE_SCREENSAVER) {
 80033a8:	230c      	movs	r3, #12
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d000      	beq.n	80033b4 <Start_user_interface+0x38>
 80033b2:	e06a      	b.n	800348a <Start_user_interface+0x10e>
			loop++;
 80033b4:	210e      	movs	r1, #14
 80033b6:	187b      	adds	r3, r7, r1
 80033b8:	881a      	ldrh	r2, [r3, #0]
 80033ba:	187b      	adds	r3, r7, r1
 80033bc:	3201      	adds	r2, #1
 80033be:	801a      	strh	r2, [r3, #0]
			// Will be state machine later


			// cleaning states of the buttons:
			is_dblclicked(0);
 80033c0:	2000      	movs	r0, #0
 80033c2:	f000 fab5 	bl	8003930 <is_dblclicked>
			if(is_dblclicked(2)) {
 80033c6:	2002      	movs	r0, #2
 80033c8:	f000 fab2 	bl	8003930 <is_dblclicked>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d005      	beq.n	80033dc <Start_user_interface+0x60>
				const char * cmd = "RUN T60|1/900/900|2/850/850|3/800/800|4/750/750|5/725/725|6/700/700|7/650/650|8/630/630|9/600/600|10/550/550|11/500/500|;";
 80033d0:	4b61      	ldr	r3, [pc, #388]	; (8003558 <Start_user_interface+0x1dc>)
 80033d2:	60bb      	str	r3, [r7, #8]
				app_process_cmd(cmd);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7fd fdcc 	bl	8000f74 <app_process_cmd>
			}
			is_clicked(0);
 80033dc:	2000      	movs	r0, #0
 80033de:	f000 fa87 	bl	80038f0 <is_clicked>
			//is_clicked(2);

			if(is_dblclicked(1)) {
 80033e2:	2001      	movs	r0, #1
 80033e4:	f000 faa4 	bl	8003930 <is_dblclicked>
 80033e8:	1e03      	subs	r3, r0, #0
 80033ea:	d008      	beq.n	80033fe <Start_user_interface+0x82>
				mode = MODE_MENU;
 80033ec:	230c      	movs	r3, #12
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	2202      	movs	r2, #2
 80033f2:	701a      	strb	r2, [r3, #0]
				loop = 0;
 80033f4:	230e      	movs	r3, #14
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	2200      	movs	r2, #0
 80033fa:	801a      	strh	r2, [r3, #0]
				continue;
 80033fc:	e0a9      	b.n	8003552 <Start_user_interface+0x1d6>
			}

			if (loop>1000) {
 80033fe:	210e      	movs	r1, #14
 8003400:	187b      	adds	r3, r7, r1
 8003402:	881a      	ldrh	r2, [r3, #0]
 8003404:	23fa      	movs	r3, #250	; 0xfa
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d93e      	bls.n	800348a <Start_user_interface+0x10e>
				loop = 0;
 800340c:	187b      	adds	r3, r7, r1
 800340e:	2200      	movs	r2, #0
 8003410:	801a      	strh	r2, [r3, #0]
				if (frame == 0) {
 8003412:	230d      	movs	r3, #13
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d109      	bne.n	8003430 <Start_user_interface+0xb4>
					display_connection(get_state() != ST_WAITING_FOR_CONNECTION);
 800341c:	f7fe fb26 	bl	8001a6c <get_state>
 8003420:	0003      	movs	r3, r0
 8003422:	3b01      	subs	r3, #1
 8003424:	1e5a      	subs	r2, r3, #1
 8003426:	4193      	sbcs	r3, r2
 8003428:	b2db      	uxtb	r3, r3
 800342a:	0018      	movs	r0, r3
 800342c:	f7ff fe8e 	bl	800314c <display_connection>
				}
				if (frame == 1) {
 8003430:	230d      	movs	r3, #13
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <Start_user_interface+0xc2>
					display_post_num();
 800343a:	f7ff feeb 	bl	8003214 <display_post_num>
				}
				if (frame == 2) {
 800343e:	230d      	movs	r3, #13
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d101      	bne.n	800344c <Start_user_interface+0xd0>
					display_motor_status();
 8003448:	f7ff ff18 	bl	800327c <display_motor_status>
				}
				if (frame == 3) {
 800344c:	230d      	movs	r3, #13
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b03      	cmp	r3, #3
 8003454:	d103      	bne.n	800345e <Start_user_interface+0xe2>
					SSD1306_Clear();
 8003456:	f7ff fa84 	bl	8002962 <SSD1306_Clear>
					SSD1306_UpdateScreen();
 800345a:	f7fe fed9 	bl	8002210 <SSD1306_UpdateScreen>
				}
				if (frame == 3) {
 800345e:	230d      	movs	r3, #13
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b03      	cmp	r3, #3
 8003466:	d103      	bne.n	8003470 <Start_user_interface+0xf4>
					SSD1306_Clear();
 8003468:	f7ff fa7b 	bl	8002962 <SSD1306_Clear>
					SSD1306_UpdateScreen();
 800346c:	f7fe fed0 	bl	8002210 <SSD1306_UpdateScreen>
				}

				frame++;
 8003470:	210d      	movs	r1, #13
 8003472:	187b      	adds	r3, r7, r1
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	187b      	adds	r3, r7, r1
 8003478:	3201      	adds	r2, #1
 800347a:	701a      	strb	r2, [r3, #0]
				if(frame >= 3) frame = 0;
 800347c:	187b      	adds	r3, r7, r1
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d902      	bls.n	800348a <Start_user_interface+0x10e>
 8003484:	187b      	adds	r3, r7, r1
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
			}
		}
		if (mode == MODE_MENU) {
 800348a:	230c      	movs	r3, #12
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d15b      	bne.n	800354c <Start_user_interface+0x1d0>
			if (loop == 0) {
 8003494:	230e      	movs	r3, #14
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d103      	bne.n	80034a6 <Start_user_interface+0x12a>
				display_menu_supervisor(&main_menu_supervisor);
 800349e:	4b2f      	ldr	r3, [pc, #188]	; (800355c <Start_user_interface+0x1e0>)
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 fa82 	bl	80039aa <display_menu_supervisor>
			}
			if(main_menu_supervisor.exit) {
 80034a6:	4b2d      	ldr	r3, [pc, #180]	; (800355c <Start_user_interface+0x1e0>)
 80034a8:	7a1b      	ldrb	r3, [r3, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00e      	beq.n	80034cc <Start_user_interface+0x150>
				main_menu_reset();
 80034ae:	f000 f859 	bl	8003564 <main_menu_reset>
				mode = MODE_SCREENSAVER;
 80034b2:	230c      	movs	r3, #12
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	2201      	movs	r2, #1
 80034b8:	701a      	strb	r2, [r3, #0]
				loop+=1000;
 80034ba:	230e      	movs	r3, #14
 80034bc:	18fa      	adds	r2, r7, r3
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	21fa      	movs	r1, #250	; 0xfa
 80034c4:	0089      	lsls	r1, r1, #2
 80034c6:	468c      	mov	ip, r1
 80034c8:	4463      	add	r3, ip
 80034ca:	8013      	strh	r3, [r2, #0]
			}
			loop++;
 80034cc:	240e      	movs	r4, #14
 80034ce:	193b      	adds	r3, r7, r4
 80034d0:	881a      	ldrh	r2, [r3, #0]
 80034d2:	193b      	adds	r3, r7, r4
 80034d4:	3201      	adds	r2, #1
 80034d6:	801a      	strh	r2, [r3, #0]
			if (loop > 10000) {
 80034d8:	193b      	adds	r3, r7, r4
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	4a20      	ldr	r2, [pc, #128]	; (8003560 <Start_user_interface+0x1e4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d90d      	bls.n	80034fe <Start_user_interface+0x182>
				main_menu_reset();
 80034e2:	f000 f83f 	bl	8003564 <main_menu_reset>
				mode = MODE_SCREENSAVER;
 80034e6:	230c      	movs	r3, #12
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	2201      	movs	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
				loop+=1000;
 80034ee:	193a      	adds	r2, r7, r4
 80034f0:	193b      	adds	r3, r7, r4
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	21fa      	movs	r1, #250	; 0xfa
 80034f6:	0089      	lsls	r1, r1, #2
 80034f8:	468c      	mov	ip, r1
 80034fa:	4463      	add	r3, ip
 80034fc:	8013      	strh	r3, [r2, #0]
			}
			if (is_clicked(0)) {
 80034fe:	2000      	movs	r0, #0
 8003500:	f000 f9f6 	bl	80038f0 <is_clicked>
 8003504:	1e03      	subs	r3, r0, #0
 8003506:	d007      	beq.n	8003518 <Start_user_interface+0x19c>
				loop = 0;
 8003508:	230e      	movs	r3, #14
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	2200      	movs	r2, #0
 800350e:	801a      	strh	r2, [r3, #0]
				menu_supervisor_up(&main_menu_supervisor);
 8003510:	4b12      	ldr	r3, [pc, #72]	; (800355c <Start_user_interface+0x1e0>)
 8003512:	0018      	movs	r0, r3
 8003514:	f000 fa5c 	bl	80039d0 <menu_supervisor_up>
			}
			if (is_clicked(1)) {
 8003518:	2001      	movs	r0, #1
 800351a:	f000 f9e9 	bl	80038f0 <is_clicked>
 800351e:	1e03      	subs	r3, r0, #0
 8003520:	d007      	beq.n	8003532 <Start_user_interface+0x1b6>
				loop = 0;
 8003522:	230e      	movs	r3, #14
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	2200      	movs	r2, #0
 8003528:	801a      	strh	r2, [r3, #0]
				menu_supervisor_center(&main_menu_supervisor);
 800352a:	4b0c      	ldr	r3, [pc, #48]	; (800355c <Start_user_interface+0x1e0>)
 800352c:	0018      	movs	r0, r3
 800352e:	f000 faeb 	bl	8003b08 <menu_supervisor_center>
			}
			if (is_clicked(2)) {
 8003532:	2002      	movs	r0, #2
 8003534:	f000 f9dc 	bl	80038f0 <is_clicked>
 8003538:	1e03      	subs	r3, r0, #0
 800353a:	d007      	beq.n	800354c <Start_user_interface+0x1d0>
				loop = 0;
 800353c:	230e      	movs	r3, #14
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	2200      	movs	r2, #0
 8003542:	801a      	strh	r2, [r3, #0]
				menu_supervisor_down(&main_menu_supervisor);
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <Start_user_interface+0x1e0>)
 8003546:	0018      	movs	r0, r3
 8003548:	f000 fa96 	bl	8003a78 <menu_supervisor_down>
			}

		}
		osDelay(1);
 800354c:	2001      	movs	r0, #1
 800354e:	f004 fdf5 	bl	800813c <osDelay>
		if (mode == MODE_SCREENSAVER) {
 8003552:	e729      	b.n	80033a8 <Start_user_interface+0x2c>
 8003554:	2000087c 	.word	0x2000087c
 8003558:	0800b4e4 	.word	0x0800b4e4
 800355c:	20000780 	.word	0x20000780
 8003560:	00002710 	.word	0x00002710

08003564 <main_menu_reset>:
	}
}

void main_menu_reset() {
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
	is_clicked(0);
 8003568:	2000      	movs	r0, #0
 800356a:	f000 f9c1 	bl	80038f0 <is_clicked>
	is_clicked(1);
 800356e:	2001      	movs	r0, #1
 8003570:	f000 f9be 	bl	80038f0 <is_clicked>
	is_clicked(2);
 8003574:	2002      	movs	r0, #2
 8003576:	f000 f9bb 	bl	80038f0 <is_clicked>
	is_dblclicked(0);
 800357a:	2000      	movs	r0, #0
 800357c:	f000 f9d8 	bl	8003930 <is_dblclicked>
	is_dblclicked(1);
 8003580:	2001      	movs	r0, #1
 8003582:	f000 f9d5 	bl	8003930 <is_dblclicked>
	is_dblclicked(2);
 8003586:	2002      	movs	r0, #2
 8003588:	f000 f9d2 	bl	8003930 <is_dblclicked>
	main_menu_supervisor.exit = 0; // Let's reset the flag
 800358c:	4b07      	ldr	r3, [pc, #28]	; (80035ac <main_menu_reset+0x48>)
 800358e:	2200      	movs	r2, #0
 8003590:	721a      	strb	r2, [r3, #8]
	main_menu_supervisor.cursor = 0;
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <main_menu_reset+0x48>)
 8003594:	2200      	movs	r2, #0
 8003596:	705a      	strb	r2, [r3, #1]
	main_menu_supervisor.cur_item = &main_menu;
 8003598:	4b04      	ldr	r3, [pc, #16]	; (80035ac <main_menu_reset+0x48>)
 800359a:	4a05      	ldr	r2, [pc, #20]	; (80035b0 <main_menu_reset+0x4c>)
 800359c:	605a      	str	r2, [r3, #4]
	main_menu_supervisor.start_item = 0;
 800359e:	4b03      	ldr	r3, [pc, #12]	; (80035ac <main_menu_reset+0x48>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	20000780 	.word	0x20000780
 80035b0:	20000764 	.word	0x20000764

080035b4 <start_animation>:

void start_animation() {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80035b8:	f7ff f9d3 	bl	8002962 <SSD1306_Clear>
	SSD1306_GotoXY(0,0);
 80035bc:	2100      	movs	r1, #0
 80035be:	2000      	movs	r0, #0
 80035c0:	f7fe ff14 	bl	80023ec <SSD1306_GotoXY>
	SSD1306_Mirror(1, 1);
 80035c4:	2101      	movs	r1, #1
 80035c6:	2001      	movs	r0, #1
 80035c8:	f7fe fe70 	bl	80022ac <SSD1306_Mirror>
	SSD1306_ON();
 80035cc:	f7ff f9d1 	bl	8002972 <SSD1306_ON>
	display_logo(1);
 80035d0:	2001      	movs	r0, #1
 80035d2:	f7ff fd75 	bl	80030c0 <display_logo>
	osDelay(500);
 80035d6:	23fa      	movs	r3, #250	; 0xfa
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	0018      	movs	r0, r3
 80035dc:	f004 fdae 	bl	800813c <osDelay>
	display_logo(2);
 80035e0:	2002      	movs	r0, #2
 80035e2:	f7ff fd6d 	bl	80030c0 <display_logo>
	osDelay(500);
 80035e6:	23fa      	movs	r3, #250	; 0xfa
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	0018      	movs	r0, r3
 80035ec:	f004 fda6 	bl	800813c <osDelay>
	display_logo(3);
 80035f0:	2003      	movs	r0, #3
 80035f2:	f7ff fd65 	bl	80030c0 <display_logo>
	osDelay(500);
 80035f6:	23fa      	movs	r3, #250	; 0xfa
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	0018      	movs	r0, r3
 80035fc:	f004 fd9e 	bl	800813c <osDelay>
	display_logo(2);
 8003600:	2002      	movs	r0, #2
 8003602:	f7ff fd5d 	bl	80030c0 <display_logo>
	osDelay(500);
 8003606:	23fa      	movs	r3, #250	; 0xfa
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	0018      	movs	r0, r3
 800360c:	f004 fd96 	bl	800813c <osDelay>
	display_logo(1);
 8003610:	2001      	movs	r0, #1
 8003612:	f7ff fd55 	bl	80030c0 <display_logo>
	osDelay(2000);
 8003616:	23fa      	movs	r3, #250	; 0xfa
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	0018      	movs	r0, r3
 800361c:	f004 fd8e 	bl	800813c <osDelay>
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <Start_keys_switcher>:

void Start_keys_switcher(void *argument) {
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  int frame = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
  for(int i=0;i<11;i++) turn_off(i);
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	e007      	b.n	8003648 <Start_keys_switcher+0x22>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	0018      	movs	r0, r3
 800363e:	f000 f85d 	bl	80036fc <turn_off>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	3301      	adds	r3, #1
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b0a      	cmp	r3, #10
 800364c:	ddf4      	ble.n	8003638 <Start_keys_switcher+0x12>
  for(;;) {
	frame++;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3301      	adds	r3, #1
 8003652:	60fb      	str	r3, [r7, #12]
	if(frame>5) {
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b05      	cmp	r3, #5
 8003658:	dd03      	ble.n	8003662 <Start_keys_switcher+0x3c>
		buttons_update();
 800365a:	f000 f86d 	bl	8003738 <buttons_update>
		frame = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
	}
	app_update_relays();
 8003662:	f7fd fa09 	bl	8000a78 <app_update_relays>
    osDelay(1);
 8003666:	2001      	movs	r0, #1
 8003668:	f004 fd68 	bl	800813c <osDelay>
	frame++;
 800366c:	e7ef      	b.n	800364e <Start_keys_switcher+0x28>
	...

08003670 <Start_rs485_controller>:
  }
}

void Start_rs485_controller(void *argument) {
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	// Let's not touch the motors for 3 seconds
	osDelay(3000);
 8003678:	4b04      	ldr	r3, [pc, #16]	; (800368c <Start_rs485_controller+0x1c>)
 800367a:	0018      	movs	r0, r3
 800367c:	f004 fd5e 	bl	800813c <osDelay>
	for(;;) {
		motor_loop();
 8003680:	f7fc ff72 	bl	8000568 <motor_loop>
		osDelay(1);
 8003684:	2001      	movs	r0, #1
 8003686:	f004 fd59 	bl	800813c <osDelay>
		motor_loop();
 800368a:	e7f9      	b.n	8003680 <Start_rs485_controller+0x10>
 800368c:	00000bb8 	.word	0x00000bb8

08003690 <HAL_TIM_PeriodElapsedCallback>:
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d101      	bne.n	80036a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036a2:	f001 ffef 	bl	8005684 <HAL_IncTick>
  }
}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b002      	add	sp, #8
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	40001000 	.word	0x40001000

080036b4 <Error_Handler>:

void Error_Handler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036b8:	b672      	cpsid	i
}
 80036ba:	46c0      	nop			; (mov r8, r8)
  __disable_irq();
  while (1)
 80036bc:	e7fe      	b.n	80036bc <Error_Handler+0x8>
	...

080036c0 <turn_on>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

void turn_on(uint8_t key) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	0002      	movs	r2, r0
 80036c8:	1dfb      	adds	r3, r7, #7
 80036ca:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(keys.relays[key].port, keys.relays[key].pin , GPIO_PIN_SET);
 80036cc:	1dfb      	adds	r3, r7, #7
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	4a09      	ldr	r2, [pc, #36]	; (80036f8 <turn_on+0x38>)
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	18d3      	adds	r3, r2, r3
 80036d6:	3308      	adds	r3, #8
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	1dfb      	adds	r3, r7, #7
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	4a06      	ldr	r2, [pc, #24]	; (80036f8 <turn_on+0x38>)
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	18d3      	adds	r3, r2, r3
 80036e4:	3304      	adds	r3, #4
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	2201      	movs	r2, #1
 80036ea:	0019      	movs	r1, r3
 80036ec:	f002 fc23 	bl	8005f36 <HAL_GPIO_WritePin>
}
 80036f0:	46c0      	nop			; (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b002      	add	sp, #8
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20000880 	.word	0x20000880

080036fc <turn_off>:

void turn_off(uint8_t key) {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	0002      	movs	r2, r0
 8003704:	1dfb      	adds	r3, r7, #7
 8003706:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(keys.relays[key].port, keys.relays[key].pin , GPIO_PIN_RESET);
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	4a09      	ldr	r2, [pc, #36]	; (8003734 <turn_off+0x38>)
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	18d3      	adds	r3, r2, r3
 8003712:	3308      	adds	r3, #8
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	1dfb      	adds	r3, r7, #7
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	4a06      	ldr	r2, [pc, #24]	; (8003734 <turn_off+0x38>)
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	18d3      	adds	r3, r2, r3
 8003720:	3304      	adds	r3, #4
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	2200      	movs	r2, #0
 8003726:	0019      	movs	r1, r3
 8003728:	f002 fc05 	bl	8005f36 <HAL_GPIO_WritePin>
}
 800372c:	46c0      	nop			; (mov r8, r8)
 800372e:	46bd      	mov	sp, r7
 8003730:	b002      	add	sp, #8
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000880 	.word	0x20000880

08003738 <buttons_update>:

void buttons_update() {
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<BUTTONS_COUNT;i++) {
 800373e:	1dfb      	adds	r3, r7, #7
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	e00c      	b.n	8003760 <buttons_update+0x28>
		update_button(&btns.btn[i]);
 8003746:	1dfb      	adds	r3, r7, #7
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	011a      	lsls	r2, r3, #4
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <buttons_update+0x3c>)
 800374e:	18d3      	adds	r3, r2, r3
 8003750:	0018      	movs	r0, r3
 8003752:	f7fe fa2d 	bl	8001bb0 <update_button>
	for(uint8_t i=0;i<BUTTONS_COUNT;i++) {
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	781a      	ldrb	r2, [r3, #0]
 800375a:	1dfb      	adds	r3, r7, #7
 800375c:	3201      	adds	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	1dfb      	adds	r3, r7, #7
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d9ee      	bls.n	8003746 <buttons_update+0xe>
	}
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b002      	add	sp, #8
 8003770:	bd80      	pop	{r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	200008dc 	.word	0x200008dc

08003778 <is_acceptable>:

uint8_t is_acceptable(char k) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	0002      	movs	r2, r0
 8003780:	1dfb      	adds	r3, r7, #7
 8003782:	701a      	strb	r2, [r3, #0]
	if (k>='0' && k <='9') return 1;
 8003784:	1dfb      	adds	r3, r7, #7
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b2f      	cmp	r3, #47	; 0x2f
 800378a:	d905      	bls.n	8003798 <is_acceptable+0x20>
 800378c:	1dfb      	adds	r3, r7, #7
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b39      	cmp	r3, #57	; 0x39
 8003792:	d801      	bhi.n	8003798 <is_acceptable+0x20>
 8003794:	2301      	movs	r3, #1
 8003796:	e04a      	b.n	800382e <is_acceptable+0xb6>
	if (k=='+' || k=='-' || k=='|' || k=='-' || k=='/' || k==';' || k==':' || k=='?' || k==')' ||k=='.'|| k==',' || k==' '|| k=='!') return 1;
 8003798:	1dfb      	adds	r3, r7, #7
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b2b      	cmp	r3, #43	; 0x2b
 800379e:	d02f      	beq.n	8003800 <is_acceptable+0x88>
 80037a0:	1dfb      	adds	r3, r7, #7
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b2d      	cmp	r3, #45	; 0x2d
 80037a6:	d02b      	beq.n	8003800 <is_acceptable+0x88>
 80037a8:	1dfb      	adds	r3, r7, #7
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b7c      	cmp	r3, #124	; 0x7c
 80037ae:	d027      	beq.n	8003800 <is_acceptable+0x88>
 80037b0:	1dfb      	adds	r3, r7, #7
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b2d      	cmp	r3, #45	; 0x2d
 80037b6:	d023      	beq.n	8003800 <is_acceptable+0x88>
 80037b8:	1dfb      	adds	r3, r7, #7
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b2f      	cmp	r3, #47	; 0x2f
 80037be:	d01f      	beq.n	8003800 <is_acceptable+0x88>
 80037c0:	1dfb      	adds	r3, r7, #7
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b3b      	cmp	r3, #59	; 0x3b
 80037c6:	d01b      	beq.n	8003800 <is_acceptable+0x88>
 80037c8:	1dfb      	adds	r3, r7, #7
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b3a      	cmp	r3, #58	; 0x3a
 80037ce:	d017      	beq.n	8003800 <is_acceptable+0x88>
 80037d0:	1dfb      	adds	r3, r7, #7
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b3f      	cmp	r3, #63	; 0x3f
 80037d6:	d013      	beq.n	8003800 <is_acceptable+0x88>
 80037d8:	1dfb      	adds	r3, r7, #7
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b29      	cmp	r3, #41	; 0x29
 80037de:	d00f      	beq.n	8003800 <is_acceptable+0x88>
 80037e0:	1dfb      	adds	r3, r7, #7
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b2e      	cmp	r3, #46	; 0x2e
 80037e6:	d00b      	beq.n	8003800 <is_acceptable+0x88>
 80037e8:	1dfb      	adds	r3, r7, #7
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b2c      	cmp	r3, #44	; 0x2c
 80037ee:	d007      	beq.n	8003800 <is_acceptable+0x88>
 80037f0:	1dfb      	adds	r3, r7, #7
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d003      	beq.n	8003800 <is_acceptable+0x88>
 80037f8:	1dfb      	adds	r3, r7, #7
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b21      	cmp	r3, #33	; 0x21
 80037fe:	d101      	bne.n	8003804 <is_acceptable+0x8c>
 8003800:	2301      	movs	r3, #1
 8003802:	e014      	b.n	800382e <is_acceptable+0xb6>
	if (k>='a' && k<='z') return 1;
 8003804:	1dfb      	adds	r3, r7, #7
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b60      	cmp	r3, #96	; 0x60
 800380a:	d905      	bls.n	8003818 <is_acceptable+0xa0>
 800380c:	1dfb      	adds	r3, r7, #7
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b7a      	cmp	r3, #122	; 0x7a
 8003812:	d801      	bhi.n	8003818 <is_acceptable+0xa0>
 8003814:	2301      	movs	r3, #1
 8003816:	e00a      	b.n	800382e <is_acceptable+0xb6>
	if (k>='A' && k<='Z') return 1;
 8003818:	1dfb      	adds	r3, r7, #7
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d905      	bls.n	800382c <is_acceptable+0xb4>
 8003820:	1dfb      	adds	r3, r7, #7
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b5a      	cmp	r3, #90	; 0x5a
 8003826:	d801      	bhi.n	800382c <is_acceptable+0xb4>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <is_acceptable+0xb6>
	return 0;
 800382c:	2300      	movs	r3, #0
}
 800382e:	0018      	movs	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	b002      	add	sp, #8
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <receive_cmd>:

void receive_cmd(uint8_t sym) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	0002      	movs	r2, r0
 8003840:	1dfb      	adds	r3, r7, #7
 8003842:	701a      	strb	r2, [r3, #0]
	if (sym == '\n') usb_buf_cursor = 0;
 8003844:	1dfb      	adds	r3, r7, #7
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b0a      	cmp	r3, #10
 800384a:	d102      	bne.n	8003852 <receive_cmd+0x1a>
 800384c:	4b1c      	ldr	r3, [pc, #112]	; (80038c0 <receive_cmd+0x88>)
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
	if(!is_acceptable(sym)) return;
 8003852:	1dfb      	adds	r3, r7, #7
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	0018      	movs	r0, r3
 8003858:	f7ff ff8e 	bl	8003778 <is_acceptable>
 800385c:	1e03      	subs	r3, r0, #0
 800385e:	d02a      	beq.n	80038b6 <receive_cmd+0x7e>
	usb_buf[usb_buf_cursor+1] = 0;
 8003860:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <receive_cmd+0x88>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	3301      	adds	r3, #1
 8003866:	4a17      	ldr	r2, [pc, #92]	; (80038c4 <receive_cmd+0x8c>)
 8003868:	2100      	movs	r1, #0
 800386a:	54d1      	strb	r1, [r2, r3]
	usb_buf[usb_buf_cursor] = (char)sym;
 800386c:	4b14      	ldr	r3, [pc, #80]	; (80038c0 <receive_cmd+0x88>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	0019      	movs	r1, r3
 8003872:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <receive_cmd+0x8c>)
 8003874:	1dfa      	adds	r2, r7, #7
 8003876:	7812      	ldrb	r2, [r2, #0]
 8003878:	545a      	strb	r2, [r3, r1]
	usb_buf_cursor++;
 800387a:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <receive_cmd+0x88>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	3301      	adds	r3, #1
 8003880:	b2da      	uxtb	r2, r3
 8003882:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <receive_cmd+0x88>)
 8003884:	701a      	strb	r2, [r3, #0]
	if(usb_buf_cursor>=MAX_CMD_BUF) {
 8003886:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <receive_cmd+0x88>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2bc0      	cmp	r3, #192	; 0xc0
 800388c:	d902      	bls.n	8003894 <receive_cmd+0x5c>
		usb_buf_cursor = MAX_CMD_BUF - 1;
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <receive_cmd+0x88>)
 8003890:	22c0      	movs	r2, #192	; 0xc0
 8003892:	701a      	strb	r2, [r3, #0]
	}
	if(sym == ';') {
 8003894:	1dfb      	adds	r3, r7, #7
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b3b      	cmp	r3, #59	; 0x3b
 800389a:	d10d      	bne.n	80038b8 <receive_cmd+0x80>
		cp(usb_buf, received_cmd, 0);
 800389c:	490a      	ldr	r1, [pc, #40]	; (80038c8 <receive_cmd+0x90>)
 800389e:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <receive_cmd+0x8c>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	0018      	movs	r0, r3
 80038a4:	f7fe f8a2 	bl	80019ec <cp>
		usb_buf_cursor = 0;
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <receive_cmd+0x88>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
		cmd_ready = 1;
 80038ae:	4b07      	ldr	r3, [pc, #28]	; (80038cc <receive_cmd+0x94>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
 80038b4:	e000      	b.n	80038b8 <receive_cmd+0x80>
	if(!is_acceptable(sym)) return;
 80038b6:	46c0      	nop			; (mov r8, r8)
	}
}
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b002      	add	sp, #8
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	2000078c 	.word	0x2000078c
 80038c4:	20000790 	.word	0x20000790
 80038c8:	20000920 	.word	0x20000920
 80038cc:	2000087a 	.word	0x2000087a

080038d0 <receive_motor1>:

void receive_motor1(uint8_t sym) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	0002      	movs	r2, r0
 80038d8:	1dfb      	adds	r3, r7, #7
 80038da:	701a      	strb	r2, [r3, #0]
	app_push_motor_byte(sym);
 80038dc:	1dfb      	adds	r3, r7, #7
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	0018      	movs	r0, r3
 80038e2:	f7fd f847 	bl	8000974 <app_push_motor_byte>
}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	46bd      	mov	sp, r7
 80038ea:	b002      	add	sp, #8
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <is_clicked>:

uint8_t is_clicked(uint8_t key) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	0002      	movs	r2, r0
 80038f8:	1dfb      	adds	r3, r7, #7
 80038fa:	701a      	strb	r2, [r3, #0]
  if(btns.btn[key].is_clicked) {
 80038fc:	1dfb      	adds	r3, r7, #7
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	4a0a      	ldr	r2, [pc, #40]	; (800392c <is_clicked+0x3c>)
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	18d3      	adds	r3, r2, r3
 8003906:	330a      	adds	r3, #10
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <is_clicked+0x32>
	  btns.btn[key].is_clicked = 0;
 800390e:	1dfb      	adds	r3, r7, #7
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	4a06      	ldr	r2, [pc, #24]	; (800392c <is_clicked+0x3c>)
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	18d3      	adds	r3, r2, r3
 8003918:	330a      	adds	r3, #10
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]
	  return 1;
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <is_clicked+0x34>
  }
  return 0;
 8003922:	2300      	movs	r3, #0
}
 8003924:	0018      	movs	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}
 800392c:	200008dc 	.word	0x200008dc

08003930 <is_dblclicked>:

uint8_t is_dblclicked(uint8_t key) {
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	0002      	movs	r2, r0
 8003938:	1dfb      	adds	r3, r7, #7
 800393a:	701a      	strb	r2, [r3, #0]
	if(btns.btn[key].is_dblclicked) {
 800393c:	1dfb      	adds	r3, r7, #7
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	4a0e      	ldr	r2, [pc, #56]	; (800397c <is_dblclicked+0x4c>)
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	18d3      	adds	r3, r2, r3
 8003946:	330b      	adds	r3, #11
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d011      	beq.n	8003972 <is_dblclicked+0x42>
		btns.btn[key].is_clicked = 0;
 800394e:	1dfb      	adds	r3, r7, #7
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	4a0a      	ldr	r2, [pc, #40]	; (800397c <is_dblclicked+0x4c>)
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	18d3      	adds	r3, r2, r3
 8003958:	330a      	adds	r3, #10
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
		btns.btn[key].is_dblclicked = 0;
 800395e:	1dfb      	adds	r3, r7, #7
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	4a06      	ldr	r2, [pc, #24]	; (800397c <is_dblclicked+0x4c>)
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	18d3      	adds	r3, r2, r3
 8003968:	330b      	adds	r3, #11
 800396a:	2200      	movs	r2, #0
 800396c:	701a      	strb	r2, [r3, #0]
		return 1;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <is_dblclicked+0x44>
	}
	return 0;
 8003972:	2300      	movs	r3, #0
}
 8003974:	0018      	movs	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	b002      	add	sp, #8
 800397a:	bd80      	pop	{r7, pc}
 800397c:	200008dc 	.word	0x200008dc

08003980 <menu_supervisor_init>:
 */

#include "menu.h"
#include "app.h"

void menu_supervisor_init(menu_supervisor * s, menu * main_menu){
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
	s->cur_item = main_menu;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	605a      	str	r2, [r3, #4]
	s->start_item = 0;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
	s->cursor = 0;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	705a      	strb	r2, [r3, #1]
	s->exit = 0;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	721a      	strb	r2, [r3, #8]
}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b002      	add	sp, #8
 80039a8:	bd80      	pop	{r7, pc}

080039aa <display_menu_supervisor>:

void display_menu_supervisor(menu_supervisor * s) {
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
	display_menu_item(s->cur_item, s->start_item, s->cursor);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6858      	ldr	r0, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2100      	movs	r1, #0
 80039ba:	5659      	ldrsb	r1, [r3, r1]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	785b      	ldrb	r3, [r3, #1]
 80039c0:	b25b      	sxtb	r3, r3
 80039c2:	001a      	movs	r2, r3
 80039c4:	f000 fdce 	bl	8004564 <display_menu_item>
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <menu_supervisor_up>:

void menu_supervisor_up(menu_supervisor * s) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	if (s->cursor <= 0) { // If its already the first element
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	785b      	ldrb	r3, [r3, #1]
 80039dc:	b25b      	sxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	dc19      	bgt.n	8003a16 <menu_supervisor_up+0x46>
		if (s->cur_item->size < MAX_MENU_LINES) {
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	7a1b      	ldrb	r3, [r3, #8]
 80039e8:	2b05      	cmp	r3, #5
 80039ea:	d803      	bhi.n	80039f4 <menu_supervisor_up+0x24>
			s->start_item = 0;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	701a      	strb	r2, [r3, #0]
 80039f2:	e007      	b.n	8003a04 <menu_supervisor_up+0x34>
		} else {
			s->start_item =  1 + s->cur_item->size - MAX_MENU_LINES;;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	7a1b      	ldrb	r3, [r3, #8]
 80039fa:	3b05      	subs	r3, #5
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	b25a      	sxtb	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	701a      	strb	r2, [r3, #0]
		}
		s->cursor = s->cur_item->size - 1;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	7a1b      	ldrb	r3, [r3, #8]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	b25a      	sxtb	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	705a      	strb	r2, [r3, #1]
		return;
 8003a14:	e02d      	b.n	8003a72 <menu_supervisor_up+0xa2>
	}
	int8_t curLine = s->cursor - s->start_item;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	785b      	ldrb	r3, [r3, #1]
 8003a1a:	b25b      	sxtb	r3, r3
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b25b      	sxtb	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	210f      	movs	r1, #15
 8003a2c:	187b      	adds	r3, r7, r1
 8003a2e:	701a      	strb	r2, [r3, #0]
	if (curLine <=0) { // if we're already on the first line
 8003a30:	187b      	adds	r3, r7, r1
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	b25b      	sxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	dc12      	bgt.n	8003a60 <menu_supervisor_up+0x90>
		s->cursor--;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	785b      	ldrb	r3, [r3, #1]
 8003a3e:	b25b      	sxtb	r3, r3
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	b25a      	sxtb	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	705a      	strb	r2, [r3, #1]
		s->start_item--;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	b25b      	sxtb	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	b25a      	sxtb	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	701a      	strb	r2, [r3, #0]
		return;
 8003a5e:	e008      	b.n	8003a72 <menu_supervisor_up+0xa2>
	}
	s->cursor--;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	785b      	ldrb	r3, [r3, #1]
 8003a64:	b25b      	sxtb	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	b25a      	sxtb	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	705a      	strb	r2, [r3, #1]
}
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b004      	add	sp, #16
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <menu_supervisor_down>:

void menu_supervisor_down(menu_supervisor * s) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	if (s->cursor >= s->cur_item->size-1) { // If its already the latest element
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	785b      	ldrb	r3, [r3, #1]
 8003a84:	b25b      	sxtb	r3, r3
 8003a86:	001a      	movs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	7a1b      	ldrb	r3, [r3, #8]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	429a      	cmp	r2, r3
 8003a92:	db06      	blt.n	8003aa2 <menu_supervisor_down+0x2a>
		s->start_item = 0;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	701a      	strb	r2, [r3, #0]
		s->cursor = 0;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	705a      	strb	r2, [r3, #1]
		return;
 8003aa0:	e02f      	b.n	8003b02 <menu_supervisor_down+0x8a>
	}
	int8_t curLine = s->cursor - s->start_item + 1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	785b      	ldrb	r3, [r3, #1]
 8003aa6:	b25b      	sxtb	r3, r3
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	b25b      	sxtb	r3, r3
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	210f      	movs	r1, #15
 8003abc:	187b      	adds	r3, r7, r1
 8003abe:	701a      	strb	r2, [r3, #0]
	if (curLine >= MAX_MENU_LINES - 1) { // if we're already on the last line
 8003ac0:	187b      	adds	r3, r7, r1
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	b25b      	sxtb	r3, r3
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	dd12      	ble.n	8003af0 <menu_supervisor_down+0x78>
		s->cursor++;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	785b      	ldrb	r3, [r3, #1]
 8003ace:	b25b      	sxtb	r3, r3
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	b25a      	sxtb	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	705a      	strb	r2, [r3, #1]
		s->start_item++;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	b25b      	sxtb	r3, r3
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	b25a      	sxtb	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	701a      	strb	r2, [r3, #0]
		return;
 8003aee:	e008      	b.n	8003b02 <menu_supervisor_down+0x8a>
	}
	s->cursor++;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	785b      	ldrb	r3, [r3, #1]
 8003af4:	b25b      	sxtb	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	3301      	adds	r3, #1
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	b25a      	sxtb	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	705a      	strb	r2, [r3, #1]
}
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b004      	add	sp, #16
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <menu_supervisor_center>:

void menu_supervisor_center(menu_supervisor * s) {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	menu * selected_item = &(s->cur_item->items[s->cursor]);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	785b      	ldrb	r3, [r3, #1]
 8003b1a:	b25b      	sxtb	r3, r3
 8003b1c:	0019      	movs	r1, r3
 8003b1e:	000b      	movs	r3, r1
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	1a5b      	subs	r3, r3, r1
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	18d3      	adds	r3, r2, r3
 8003b28:	60fb      	str	r3, [r7, #12]

	if (selected_item->action != 0) {
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <menu_supervisor_center+0x3a>
		void * arg = selected_item->action_arg;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	60bb      	str	r3, [r7, #8]
		selected_item->action(arg);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	0010      	movs	r0, r2
 8003b40:	4798      	blx	r3
	}
}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b004      	add	sp, #16
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <menu_init>:

void menu_init(menu * main_menu, menu_supervisor *s) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
	int N1 = 5;
 8003b56:	2305      	movs	r3, #5
 8003b58:	60bb      	str	r3, [r7, #8]
	main_menu->id = 1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]
	main_menu->size = N1;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	721a      	strb	r2, [r3, #8]
	main_menu->heading = STR_MAIN_MENU_CAPTION;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a30      	ldr	r2, [pc, #192]	; (8003c2c <menu_init+0xe0>)
 8003b6c:	605a      	str	r2, [r3, #4]
	main_menu->parent = 0;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	611a      	str	r2, [r3, #16]
	main_menu->action = 0;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	615a      	str	r2, [r3, #20]
	main_menu->action_arg = 0;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]

	main_menu->items = malloc(N1*sizeof(menu));
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	0013      	movs	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f006 fbee 	bl	800a36c <malloc>
 8003b90:	0003      	movs	r3, r0
 8003b92:	001a      	movs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	60da      	str	r2, [r3, #12]
	// Let's set up a parent for all
	for (int8_t i=0;i<N1;i++) {
 8003b98:	230f      	movs	r3, #15
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	e014      	b.n	8003bcc <menu_init+0x80>
		main_menu->items[i].parent = main_menu;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68d9      	ldr	r1, [r3, #12]
 8003ba6:	200f      	movs	r0, #15
 8003ba8:	183b      	adds	r3, r7, r0
 8003baa:	2200      	movs	r2, #0
 8003bac:	569a      	ldrsb	r2, [r3, r2]
 8003bae:	0013      	movs	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	18cb      	adds	r3, r1, r3
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	611a      	str	r2, [r3, #16]
	for (int8_t i=0;i<N1;i++) {
 8003bbc:	183b      	adds	r3, r7, r0
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	b25b      	sxtb	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	183b      	adds	r3, r7, r0
 8003bca:	701a      	strb	r2, [r3, #0]
 8003bcc:	230f      	movs	r3, #15
 8003bce:	18fb      	adds	r3, r7, r3
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	b25b      	sxtb	r3, r3
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	dce3      	bgt.n	8003ba2 <menu_init+0x56>
	}

	init_post_number_menu(&main_menu->items[0], s);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	0011      	movs	r1, r2
 8003be2:	0018      	movs	r0, r3
 8003be4:	f000 f8b0 	bl	8003d48 <init_post_number_menu>
	init_mode_menu(&main_menu->items[1], s);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	331c      	adds	r3, #28
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	0011      	movs	r1, r2
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f000 f986 	bl	8003f04 <init_mode_menu>
	init_motors_menu(&main_menu->items[2], s);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	3338      	adds	r3, #56	; 0x38
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	0011      	movs	r1, r2
 8003c02:	0018      	movs	r0, r3
 8003c04:	f000 fae2 	bl	80041cc <init_motors_menu>
	init_test_menu(&main_menu->items[3]);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	3354      	adds	r3, #84	; 0x54
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f000 f856 	bl	8003cc0 <init_test_menu>
	init_exit_menu(&main_menu->items[4], s);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	3370      	adds	r3, #112	; 0x70
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	0011      	movs	r1, r2
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 f870 	bl	8003d04 <init_exit_menu>
}
 8003c24:	46c0      	nop			; (mov r8, r8)
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b004      	add	sp, #16
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	0800b560 	.word	0x0800b560

08003c30 <str_by_num>:

const char * str_by_num(uint8_t num) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	0002      	movs	r2, r0
 8003c38:	1dfb      	adds	r3, r7, #7
 8003c3a:	701a      	strb	r2, [r3, #0]
	switch (num) {
 8003c3c:	1dfb      	adds	r3, r7, #7
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b0c      	cmp	r3, #12
 8003c42:	d81c      	bhi.n	8003c7e <str_by_num+0x4e>
 8003c44:	009a      	lsls	r2, r3, #2
 8003c46:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <str_by_num+0x58>)
 8003c48:	18d3      	adds	r3, r2, r3
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	469f      	mov	pc, r3
	    case 1:
	    	return STR_MOTORS_01;
 8003c4e:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <str_by_num+0x5c>)
 8003c50:	e016      	b.n	8003c80 <str_by_num+0x50>
	    case 2:
			return STR_MOTORS_02;
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <str_by_num+0x60>)
 8003c54:	e014      	b.n	8003c80 <str_by_num+0x50>
	    case 3:
			return STR_MOTORS_03;
 8003c56:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <str_by_num+0x64>)
 8003c58:	e012      	b.n	8003c80 <str_by_num+0x50>
	    case 4:
			return STR_MOTORS_04;
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <str_by_num+0x68>)
 8003c5c:	e010      	b.n	8003c80 <str_by_num+0x50>
	    case 5:
			return STR_MOTORS_05;
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <str_by_num+0x6c>)
 8003c60:	e00e      	b.n	8003c80 <str_by_num+0x50>
	    case 6:
			return STR_MOTORS_06;
 8003c62:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <str_by_num+0x70>)
 8003c64:	e00c      	b.n	8003c80 <str_by_num+0x50>
	    case 7:
			return STR_MOTORS_07;
 8003c66:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <str_by_num+0x74>)
 8003c68:	e00a      	b.n	8003c80 <str_by_num+0x50>
	    case 8:
			return STR_MOTORS_08;
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <str_by_num+0x78>)
 8003c6c:	e008      	b.n	8003c80 <str_by_num+0x50>
	    case 9:
			return STR_MOTORS_09;
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <str_by_num+0x7c>)
 8003c70:	e006      	b.n	8003c80 <str_by_num+0x50>
	    case 10:
			return STR_MOTORS_10;
 8003c72:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <str_by_num+0x80>)
 8003c74:	e004      	b.n	8003c80 <str_by_num+0x50>
	    case 11:
			return STR_MOTORS_11;
 8003c76:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <str_by_num+0x84>)
 8003c78:	e002      	b.n	8003c80 <str_by_num+0x50>
	    case 12:
			return STR_MOTORS_12;
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <str_by_num+0x88>)
 8003c7c:	e000      	b.n	8003c80 <str_by_num+0x50>

	    default:
	    	return "X";
 8003c7e:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <str_by_num+0x8c>)
	}
	return "XX";
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b002      	add	sp, #8
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	0800e738 	.word	0x0800e738
 8003c8c:	0800b56c 	.word	0x0800b56c
 8003c90:	0800b570 	.word	0x0800b570
 8003c94:	0800b574 	.word	0x0800b574
 8003c98:	0800b578 	.word	0x0800b578
 8003c9c:	0800b57c 	.word	0x0800b57c
 8003ca0:	0800b580 	.word	0x0800b580
 8003ca4:	0800b584 	.word	0x0800b584
 8003ca8:	0800b588 	.word	0x0800b588
 8003cac:	0800b58c 	.word	0x0800b58c
 8003cb0:	0800b590 	.word	0x0800b590
 8003cb4:	0800b594 	.word	0x0800b594
 8003cb8:	0800b598 	.word	0x0800b598
 8003cbc:	0800b59c 	.word	0x0800b59c

08003cc0 <init_test_menu>:

void init_test_menu(menu * test_menu) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	test_menu->id = 6;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2206      	movs	r2, #6
 8003ccc:	701a      	strb	r2, [r3, #0]
	test_menu->size = 0;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	721a      	strb	r2, [r3, #8]
	test_menu->is_selected = 0;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	725a      	strb	r2, [r3, #9]
	test_menu->items = 0;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	60da      	str	r2, [r3, #12]
	test_menu->heading = STR_TEST_RELAYS;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a06      	ldr	r2, [pc, #24]	; (8003cfc <init_test_menu+0x3c>)
 8003ce4:	605a      	str	r2, [r3, #4]
	test_menu->action = act_test_relays;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a05      	ldr	r2, [pc, #20]	; (8003d00 <init_test_menu+0x40>)
 8003cea:	615a      	str	r2, [r3, #20]
	test_menu->action_arg = 0;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	619a      	str	r2, [r3, #24]
}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b002      	add	sp, #8
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	0800b5a0 	.word	0x0800b5a0
 8003d00:	080047dd 	.word	0x080047dd

08003d04 <init_exit_menu>:

void init_exit_menu(menu * exit_menu, menu_supervisor *s) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
	exit_menu->id = 7;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2207      	movs	r2, #7
 8003d12:	701a      	strb	r2, [r3, #0]
	exit_menu->size = 0;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	721a      	strb	r2, [r3, #8]
	exit_menu->items = 0;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	60da      	str	r2, [r3, #12]
	exit_menu->heading = STR_EXIT;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <init_exit_menu+0x3c>)
 8003d24:	605a      	str	r2, [r3, #4]
	exit_menu->action = act_exit;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a06      	ldr	r2, [pc, #24]	; (8003d44 <init_exit_menu+0x40>)
 8003d2a:	615a      	str	r2, [r3, #20]
	exit_menu->action_arg = s;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	619a      	str	r2, [r3, #24]
	exit_menu->is_selected = 0;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	725a      	strb	r2, [r3, #9]
}
 8003d38:	46c0      	nop			; (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b002      	add	sp, #8
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	0800b5ac 	.word	0x0800b5ac
 8003d44:	080047c1 	.word	0x080047c1

08003d48 <init_post_number_menu>:

void init_post_number_menu(menu * post_num, menu_supervisor *s) {
 8003d48:	b5b0      	push	{r4, r5, r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
	post_num->id = 2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2202      	movs	r2, #2
 8003d56:	701a      	strb	r2, [r3, #0]
	post_num->size = TOTAL_POSTS + 1;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	220d      	movs	r2, #13
 8003d5c:	721a      	strb	r2, [r3, #8]
	post_num->heading = STR_MAIN_ITEM_POST_NUM;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a63      	ldr	r2, [pc, #396]	; (8003ef0 <init_post_number_menu+0x1a8>)
 8003d62:	605a      	str	r2, [r3, #4]
	post_num->items = malloc((TOTAL_POSTS + 1)*sizeof(menu));
 8003d64:	23b6      	movs	r3, #182	; 0xb6
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f006 faff 	bl	800a36c <malloc>
 8003d6e:	0003      	movs	r3, r0
 8003d70:	001a      	movs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	60da      	str	r2, [r3, #12]
	post_num->is_selected = 0;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	725a      	strb	r2, [r3, #9]
	act_submenu_arg * args = malloc(sizeof(act_submenu_arg)); // will never be destroyed
 8003d7c:	2008      	movs	r0, #8
 8003d7e:	f006 faf5 	bl	800a36c <malloc>
 8003d82:	0003      	movs	r3, r0
 8003d84:	613b      	str	r3, [r7, #16]

	args->m = post_num;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	605a      	str	r2, [r3, #4]
	args->s = s;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	601a      	str	r2, [r3, #0]

	post_num->action = act_submenu_pos;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a57      	ldr	r2, [pc, #348]	; (8003ef4 <init_post_number_menu+0x1ac>)
 8003d96:	615a      	str	r2, [r3, #20]
	post_num->action_arg = args;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	619a      	str	r2, [r3, #24]

	for (uint8_t i=1;i<=TOTAL_POSTS;i++) {
 8003d9e:	2317      	movs	r3, #23
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	2201      	movs	r2, #1
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e06a      	b.n	8003e7e <init_post_number_menu+0x136>
		post_num->items[i-1].id = i;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68d9      	ldr	r1, [r3, #12]
 8003dac:	2017      	movs	r0, #23
 8003dae:	183b      	adds	r3, r7, r0
 8003db0:	781a      	ldrb	r2, [r3, #0]
 8003db2:	0013      	movs	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	3b1c      	subs	r3, #28
 8003dbc:	18cb      	adds	r3, r1, r3
 8003dbe:	183a      	adds	r2, r7, r0
 8003dc0:	7812      	ldrb	r2, [r2, #0]
 8003dc2:	701a      	strb	r2, [r3, #0]
		post_num->items[i-1].size = 0;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68d9      	ldr	r1, [r3, #12]
 8003dc8:	183b      	adds	r3, r7, r0
 8003dca:	781a      	ldrb	r2, [r3, #0]
 8003dcc:	0013      	movs	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	3b1c      	subs	r3, #28
 8003dd6:	18cb      	adds	r3, r1, r3
 8003dd8:	2200      	movs	r2, #0
 8003dda:	721a      	strb	r2, [r3, #8]
		post_num->items[i-1].heading = str_by_num(i);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68d9      	ldr	r1, [r3, #12]
 8003de0:	183b      	adds	r3, r7, r0
 8003de2:	781a      	ldrb	r2, [r3, #0]
 8003de4:	0013      	movs	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	3b1c      	subs	r3, #28
 8003dee:	18cc      	adds	r4, r1, r3
 8003df0:	0005      	movs	r5, r0
 8003df2:	197b      	adds	r3, r7, r5
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	0018      	movs	r0, r3
 8003df8:	f7ff ff1a 	bl	8003c30 <str_by_num>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	6063      	str	r3, [r4, #4]
		post_num->items[i-1].items = 0;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68d9      	ldr	r1, [r3, #12]
 8003e04:	197b      	adds	r3, r7, r5
 8003e06:	781a      	ldrb	r2, [r3, #0]
 8003e08:	0013      	movs	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	3b1c      	subs	r3, #28
 8003e12:	18cb      	adds	r3, r1, r3
 8003e14:	2200      	movs	r2, #0
 8003e16:	60da      	str	r2, [r3, #12]
		post_num->items[i-1].action = act_set_active;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68d9      	ldr	r1, [r3, #12]
 8003e1c:	197b      	adds	r3, r7, r5
 8003e1e:	781a      	ldrb	r2, [r3, #0]
 8003e20:	0013      	movs	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	3b1c      	subs	r3, #28
 8003e2a:	18cb      	adds	r3, r1, r3
 8003e2c:	4a32      	ldr	r2, [pc, #200]	; (8003ef8 <init_post_number_menu+0x1b0>)
 8003e2e:	615a      	str	r2, [r3, #20]
		post_num->items[i-1].action_arg = &(post_num->items[i-1]);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68d8      	ldr	r0, [r3, #12]
 8003e34:	197b      	adds	r3, r7, r5
 8003e36:	781a      	ldrb	r2, [r3, #0]
 8003e38:	0013      	movs	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	3b1c      	subs	r3, #28
 8003e42:	0019      	movs	r1, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68dc      	ldr	r4, [r3, #12]
 8003e48:	197b      	adds	r3, r7, r5
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	0013      	movs	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	3b1c      	subs	r3, #28
 8003e56:	18e3      	adds	r3, r4, r3
 8003e58:	1842      	adds	r2, r0, r1
 8003e5a:	619a      	str	r2, [r3, #24]
		post_num->items[i-1].parent = post_num;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68d9      	ldr	r1, [r3, #12]
 8003e60:	197b      	adds	r3, r7, r5
 8003e62:	781a      	ldrb	r2, [r3, #0]
 8003e64:	0013      	movs	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	3b1c      	subs	r3, #28
 8003e6e:	18cb      	adds	r3, r1, r3
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	611a      	str	r2, [r3, #16]
	for (uint8_t i=1;i<=TOTAL_POSTS;i++) {
 8003e74:	197b      	adds	r3, r7, r5
 8003e76:	781a      	ldrb	r2, [r3, #0]
 8003e78:	197b      	adds	r3, r7, r5
 8003e7a:	3201      	adds	r2, #1
 8003e7c:	701a      	strb	r2, [r3, #0]
 8003e7e:	2317      	movs	r3, #23
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b0c      	cmp	r3, #12
 8003e86:	d98f      	bls.n	8003da8 <init_post_number_menu+0x60>
	}

	// exit item
	post_num->items[TOTAL_POSTS].id = 0; // TO DO remove id field
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	3351      	adds	r3, #81	; 0x51
 8003e8e:	33ff      	adds	r3, #255	; 0xff
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]
	post_num->items[TOTAL_POSTS].size = 0;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	3351      	adds	r3, #81	; 0x51
 8003e9a:	33ff      	adds	r3, #255	; 0xff
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	721a      	strb	r2, [r3, #8]
	post_num->items[TOTAL_POSTS].heading = STR_BACK;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	3351      	adds	r3, #81	; 0x51
 8003ea6:	33ff      	adds	r3, #255	; 0xff
 8003ea8:	4a14      	ldr	r2, [pc, #80]	; (8003efc <init_post_number_menu+0x1b4>)
 8003eaa:	605a      	str	r2, [r3, #4]
	post_num->items[TOTAL_POSTS].items = 0;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	3351      	adds	r3, #81	; 0x51
 8003eb2:	33ff      	adds	r3, #255	; 0xff
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	60da      	str	r2, [r3, #12]
	post_num->items[TOTAL_POSTS].action = act_goto_parent;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	3351      	adds	r3, #81	; 0x51
 8003ebe:	33ff      	adds	r3, #255	; 0xff
 8003ec0:	4a0f      	ldr	r2, [pc, #60]	; (8003f00 <init_post_number_menu+0x1b8>)
 8003ec2:	615a      	str	r2, [r3, #20]
	act_goto_parent_arg * post_args_back = malloc(sizeof(act_goto_parent_arg)); // never deleted
 8003ec4:	2008      	movs	r0, #8
 8003ec6:	f006 fa51 	bl	800a36c <malloc>
 8003eca:	0003      	movs	r3, r0
 8003ecc:	60fb      	str	r3, [r7, #12]
	post_args_back->m = post_num;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	605a      	str	r2, [r3, #4]
	post_args_back->s = s;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	601a      	str	r2, [r3, #0]
	post_num->items[TOTAL_POSTS].action_arg = post_args_back;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	3351      	adds	r3, #81	; 0x51
 8003ee0:	33ff      	adds	r3, #255	; 0xff
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	619a      	str	r2, [r3, #24]
}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b006      	add	sp, #24
 8003eec:	bdb0      	pop	{r4, r5, r7, pc}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	0800b5b4 	.word	0x0800b5b4
 8003ef4:	08004719 	.word	0x08004719
 8003ef8:	0800488d 	.word	0x0800488d
 8003efc:	0800b5c0 	.word	0x0800b5c0
 8003f00:	080047fd 	.word	0x080047fd

08003f04 <init_mode_menu>:

void init_mode_menu(menu * modemenu, menu_supervisor *s) {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
	int N3 = 3;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	617b      	str	r3, [r7, #20]
	modemenu->id = 3;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2203      	movs	r2, #3
 8003f16:	701a      	strb	r2, [r3, #0]
	modemenu->size = N3;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	721a      	strb	r2, [r3, #8]
	modemenu->heading = STR_MAIN_ITEM_POST_MODE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4aa3      	ldr	r2, [pc, #652]	; (80041b0 <init_mode_menu+0x2ac>)
 8003f24:	605a      	str	r2, [r3, #4]
	modemenu->items = malloc(N3*sizeof(menu));
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	0013      	movs	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	0018      	movs	r0, r3
 8003f32:	f006 fa1b 	bl	800a36c <malloc>
 8003f36:	0003      	movs	r3, r0
 8003f38:	001a      	movs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	60da      	str	r2, [r3, #12]
	modemenu->action = 0;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	615a      	str	r2, [r3, #20]
	modemenu->is_selected = 0;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	725a      	strb	r2, [r3, #9]
	act_submenu_arg * args = malloc(sizeof(act_submenu_arg)); // will never be destroyed
 8003f4a:	2008      	movs	r0, #8
 8003f4c:	f006 fa0e 	bl	800a36c <malloc>
 8003f50:	0003      	movs	r3, r0
 8003f52:	613b      	str	r3, [r7, #16]

	args->m = modemenu;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	605a      	str	r2, [r3, #4]
	args->s = s;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	601a      	str	r2, [r3, #0]

	modemenu->action = act_submenu_mode;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a94      	ldr	r2, [pc, #592]	; (80041b4 <init_mode_menu+0x2b0>)
 8003f64:	615a      	str	r2, [r3, #20]
	modemenu->action_arg = args;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	619a      	str	r2, [r3, #24]

	int i=0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]

	// rs485
	modemenu->items[i].id = i;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68d9      	ldr	r1, [r3, #12]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	0013      	movs	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	18cb      	adds	r3, r1, r3
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]
	modemenu->items[i].size = 0;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68d9      	ldr	r1, [r3, #12]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	0013      	movs	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	18cb      	adds	r3, r1, r3
 8003f96:	2200      	movs	r2, #0
 8003f98:	721a      	strb	r2, [r3, #8]
	modemenu->items[i].heading = STR_MODE_RS485;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68d9      	ldr	r1, [r3, #12]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	0013      	movs	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	18cb      	adds	r3, r1, r3
 8003faa:	4a83      	ldr	r2, [pc, #524]	; (80041b8 <init_mode_menu+0x2b4>)
 8003fac:	605a      	str	r2, [r3, #4]
	modemenu->items[i].items = 0;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68d9      	ldr	r1, [r3, #12]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	0013      	movs	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	18cb      	adds	r3, r1, r3
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	60da      	str	r2, [r3, #12]
	modemenu->items[i].action = 0;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68d9      	ldr	r1, [r3, #12]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	0013      	movs	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	18cb      	adds	r3, r1, r3
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	615a      	str	r2, [r3, #20]
	modemenu->items[i].is_selected = 0;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68d9      	ldr	r1, [r3, #12]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	0013      	movs	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	18cb      	adds	r3, r1, r3
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	725a      	strb	r2, [r3, #9]
	modemenu->items[i].items = 0;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68d9      	ldr	r1, [r3, #12]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	0013      	movs	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	18cb      	adds	r3, r1, r3
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	60da      	str	r2, [r3, #12]
	modemenu->items[i].action = act_set_active_mode;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68d9      	ldr	r1, [r3, #12]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	0013      	movs	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	18cb      	adds	r3, r1, r3
 800400e:	4a6b      	ldr	r2, [pc, #428]	; (80041bc <init_mode_menu+0x2b8>)
 8004010:	615a      	str	r2, [r3, #20]
	modemenu->items[i].action_arg = &(modemenu->items[0]);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68d9      	ldr	r1, [r3, #12]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	0013      	movs	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	18cb      	adds	r3, r1, r3
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68d2      	ldr	r2, [r2, #12]
 8004026:	619a      	str	r2, [r3, #24]
	modemenu->items[i].parent = modemenu;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68d9      	ldr	r1, [r3, #12]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	0013      	movs	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	18cb      	adds	r3, r1, r3
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	611a      	str	r2, [r3, #16]

	// usb
	i++;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3301      	adds	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
	modemenu->items[i].id = i;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68d9      	ldr	r1, [r3, #12]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	0013      	movs	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	18cb      	adds	r3, r1, r3
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	701a      	strb	r2, [r3, #0]
	modemenu->items[i].size = 0;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68d9      	ldr	r1, [r3, #12]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	0013      	movs	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	18cb      	adds	r3, r1, r3
 8004068:	2200      	movs	r2, #0
 800406a:	721a      	strb	r2, [r3, #8]
	modemenu->items[i].heading = STR_MODE_USB;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68d9      	ldr	r1, [r3, #12]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	0013      	movs	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	18cb      	adds	r3, r1, r3
 800407c:	4a50      	ldr	r2, [pc, #320]	; (80041c0 <init_mode_menu+0x2bc>)
 800407e:	605a      	str	r2, [r3, #4]
	modemenu->items[i].items = 0;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68d9      	ldr	r1, [r3, #12]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	0013      	movs	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	18cb      	adds	r3, r1, r3
 8004090:	2200      	movs	r2, #0
 8004092:	60da      	str	r2, [r3, #12]
	modemenu->items[i].action = 0;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68d9      	ldr	r1, [r3, #12]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	0013      	movs	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	18cb      	adds	r3, r1, r3
 80040a4:	2200      	movs	r2, #0
 80040a6:	615a      	str	r2, [r3, #20]
	modemenu->items[i].is_selected = 0;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68d9      	ldr	r1, [r3, #12]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	0013      	movs	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	18cb      	adds	r3, r1, r3
 80040b8:	2200      	movs	r2, #0
 80040ba:	725a      	strb	r2, [r3, #9]
	modemenu->items[i].items = 0;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68d9      	ldr	r1, [r3, #12]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	0013      	movs	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	18cb      	adds	r3, r1, r3
 80040cc:	2200      	movs	r2, #0
 80040ce:	60da      	str	r2, [r3, #12]
	modemenu->items[i].action = act_set_active_mode;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68d9      	ldr	r1, [r3, #12]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	0013      	movs	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	18cb      	adds	r3, r1, r3
 80040e0:	4a36      	ldr	r2, [pc, #216]	; (80041bc <init_mode_menu+0x2b8>)
 80040e2:	615a      	str	r2, [r3, #20]
	modemenu->items[i].action_arg = &(modemenu->items[1]);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68d9      	ldr	r1, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68d8      	ldr	r0, [r3, #12]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	0013      	movs	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	18c3      	adds	r3, r0, r3
 80040f8:	000a      	movs	r2, r1
 80040fa:	321c      	adds	r2, #28
 80040fc:	619a      	str	r2, [r3, #24]
	modemenu->items[i].parent = modemenu;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68d9      	ldr	r1, [r3, #12]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	0013      	movs	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	18cb      	adds	r3, r1, r3
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	611a      	str	r2, [r3, #16]

	// exit item
	i++;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	3301      	adds	r3, #1
 8004116:	60fb      	str	r3, [r7, #12]
	modemenu->items[i].id = i;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68d9      	ldr	r1, [r3, #12]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	0013      	movs	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	18cb      	adds	r3, r1, r3
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]
	modemenu->items[i].size = 0;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68d9      	ldr	r1, [r3, #12]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	0013      	movs	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	18cb      	adds	r3, r1, r3
 800413e:	2200      	movs	r2, #0
 8004140:	721a      	strb	r2, [r3, #8]
	modemenu->items[i].heading = STR_BACK;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68d9      	ldr	r1, [r3, #12]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	0013      	movs	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	18cb      	adds	r3, r1, r3
 8004152:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <init_mode_menu+0x2c0>)
 8004154:	605a      	str	r2, [r3, #4]
	modemenu->items[i].items = 0;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68d9      	ldr	r1, [r3, #12]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	0013      	movs	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	18cb      	adds	r3, r1, r3
 8004166:	2200      	movs	r2, #0
 8004168:	60da      	str	r2, [r3, #12]
	modemenu->items[i].action = act_goto_parent;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68d9      	ldr	r1, [r3, #12]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	0013      	movs	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	18cb      	adds	r3, r1, r3
 800417a:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <init_mode_menu+0x2c4>)
 800417c:	615a      	str	r2, [r3, #20]
	act_goto_parent_arg * post_args_back = malloc(sizeof(act_goto_parent_arg)); // never deleted
 800417e:	2008      	movs	r0, #8
 8004180:	f006 f8f4 	bl	800a36c <malloc>
 8004184:	0003      	movs	r3, r0
 8004186:	60bb      	str	r3, [r7, #8]
	post_args_back->m = modemenu;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	605a      	str	r2, [r3, #4]
	post_args_back->s = s;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	601a      	str	r2, [r3, #0]
	modemenu->items[i].action_arg = post_args_back;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68d9      	ldr	r1, [r3, #12]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	0013      	movs	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	18cb      	adds	r3, r1, r3
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	619a      	str	r2, [r3, #24]
}
 80041a8:	46c0      	nop			; (mov r8, r8)
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b006      	add	sp, #24
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	0800b5cc 	.word	0x0800b5cc
 80041b4:	08004b2b 	.word	0x08004b2b
 80041b8:	0800b5d4 	.word	0x0800b5d4
 80041bc:	08004a01 	.word	0x08004a01
 80041c0:	0800b5dc 	.word	0x0800b5dc
 80041c4:	0800b5c0 	.word	0x0800b5c0
 80041c8:	080047fd 	.word	0x080047fd

080041cc <init_motors_menu>:

void init_motors_menu(menu * motorsmenu, menu_supervisor *s) {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
	motorsmenu->id = ID_MOTORSMENU;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2204      	movs	r2, #4
 80041da:	701a      	strb	r2, [r3, #0]
	motorsmenu->size = 4;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2204      	movs	r2, #4
 80041e0:	721a      	strb	r2, [r3, #8]
	motorsmenu->heading = STR_MAIN_ITEM_POST_MOTORS;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4ad7      	ldr	r2, [pc, #860]	; (8004544 <init_motors_menu+0x378>)
 80041e6:	605a      	str	r2, [r3, #4]
	motorsmenu->items = malloc(TOTAL_POSTS*sizeof(menu));
 80041e8:	23a8      	movs	r3, #168	; 0xa8
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	0018      	movs	r0, r3
 80041ee:	f006 f8bd 	bl	800a36c <malloc>
 80041f2:	0003      	movs	r3, r0
 80041f4:	001a      	movs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60da      	str	r2, [r3, #12]
	motorsmenu->action = 0;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	615a      	str	r2, [r3, #20]
	motorsmenu->is_selected = 0;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	725a      	strb	r2, [r3, #9]
	act_submenu_arg * args = malloc(sizeof(act_submenu_arg)); // will never be destroyed
 8004206:	2008      	movs	r0, #8
 8004208:	f006 f8b0 	bl	800a36c <malloc>
 800420c:	0003      	movs	r3, r0
 800420e:	617b      	str	r3, [r7, #20]

	args->m = motorsmenu;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	605a      	str	r2, [r3, #4]
	args->s = s;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	601a      	str	r2, [r3, #0]

	motorsmenu->action = act_submenu_motor;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4aca      	ldr	r2, [pc, #808]	; (8004548 <init_motors_menu+0x37c>)
 8004220:	615a      	str	r2, [r3, #20]
	motorsmenu->action_arg = args;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	619a      	str	r2, [r3, #24]

	int i=0;
 8004228:	2300      	movs	r3, #0
 800422a:	613b      	str	r3, [r7, #16]

	// esq500 item
	motorsmenu->items[i].id = i;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68d9      	ldr	r1, [r3, #12]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	0013      	movs	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	18cb      	adds	r3, r1, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]
	motorsmenu->items[i].size = 0;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68d9      	ldr	r1, [r3, #12]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	0013      	movs	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	18cb      	adds	r3, r1, r3
 8004252:	2200      	movs	r2, #0
 8004254:	721a      	strb	r2, [r3, #8]
	motorsmenu->items[i].heading = STR_DRIVER_ESQ500;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68d9      	ldr	r1, [r3, #12]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	0013      	movs	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	18cb      	adds	r3, r1, r3
 8004266:	4ab9      	ldr	r2, [pc, #740]	; (800454c <init_motors_menu+0x380>)
 8004268:	605a      	str	r2, [r3, #4]
	motorsmenu->items[i].items = 0;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68d9      	ldr	r1, [r3, #12]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	0013      	movs	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	18cb      	adds	r3, r1, r3
 800427a:	2200      	movs	r2, #0
 800427c:	60da      	str	r2, [r3, #12]
	motorsmenu->items[i].action = 0;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68d9      	ldr	r1, [r3, #12]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	0013      	movs	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	18cb      	adds	r3, r1, r3
 800428e:	2200      	movs	r2, #0
 8004290:	615a      	str	r2, [r3, #20]
	motorsmenu->items[i].is_selected = 0;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68d9      	ldr	r1, [r3, #12]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	0013      	movs	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	18cb      	adds	r3, r1, r3
 80042a2:	2200      	movs	r2, #0
 80042a4:	725a      	strb	r2, [r3, #9]
	motorsmenu->items[i].items = 0;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68d9      	ldr	r1, [r3, #12]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	0013      	movs	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	18cb      	adds	r3, r1, r3
 80042b6:	2200      	movs	r2, #0
 80042b8:	60da      	str	r2, [r3, #12]
	motorsmenu->items[i].action = act_set_active_motor;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68d9      	ldr	r1, [r3, #12]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	0013      	movs	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	18cb      	adds	r3, r1, r3
 80042ca:	4aa1      	ldr	r2, [pc, #644]	; (8004550 <init_motors_menu+0x384>)
 80042cc:	615a      	str	r2, [r3, #20]
	motorsmenu->items[i].action_arg = &(motorsmenu->items[0]);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68d9      	ldr	r1, [r3, #12]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	0013      	movs	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	18cb      	adds	r3, r1, r3
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	68d2      	ldr	r2, [r2, #12]
 80042e2:	619a      	str	r2, [r3, #24]
	motorsmenu->items[i].parent = motorsmenu;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68d9      	ldr	r1, [r3, #12]
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	0013      	movs	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	18cb      	adds	r3, r1, r3
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	611a      	str	r2, [r3, #16]

	// esq770 item
	i++;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	3301      	adds	r3, #1
 80042fc:	613b      	str	r3, [r7, #16]
	motorsmenu->items[i].id = i;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68d9      	ldr	r1, [r3, #12]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	0013      	movs	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	18cb      	adds	r3, r1, r3
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]
	motorsmenu->items[i].size = 0;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68d9      	ldr	r1, [r3, #12]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	0013      	movs	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	18cb      	adds	r3, r1, r3
 8004324:	2200      	movs	r2, #0
 8004326:	721a      	strb	r2, [r3, #8]
	motorsmenu->items[i].heading = STR_DRIVER_ESQ770;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68d9      	ldr	r1, [r3, #12]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	0013      	movs	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	18cb      	adds	r3, r1, r3
 8004338:	4a86      	ldr	r2, [pc, #536]	; (8004554 <init_motors_menu+0x388>)
 800433a:	605a      	str	r2, [r3, #4]
	motorsmenu->items[i].items = 0;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68d9      	ldr	r1, [r3, #12]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	0013      	movs	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	18cb      	adds	r3, r1, r3
 800434c:	2200      	movs	r2, #0
 800434e:	60da      	str	r2, [r3, #12]
	motorsmenu->items[i].action = 0;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68d9      	ldr	r1, [r3, #12]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	0013      	movs	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	18cb      	adds	r3, r1, r3
 8004360:	2200      	movs	r2, #0
 8004362:	615a      	str	r2, [r3, #20]
	motorsmenu->items[i].is_selected = 0;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68d9      	ldr	r1, [r3, #12]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	0013      	movs	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	18cb      	adds	r3, r1, r3
 8004374:	2200      	movs	r2, #0
 8004376:	725a      	strb	r2, [r3, #9]
	motorsmenu->items[i].items = 0;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68d9      	ldr	r1, [r3, #12]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	0013      	movs	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	18cb      	adds	r3, r1, r3
 8004388:	2200      	movs	r2, #0
 800438a:	60da      	str	r2, [r3, #12]
	motorsmenu->items[i].action = act_set_active_motor;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68d9      	ldr	r1, [r3, #12]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	0013      	movs	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	1a9b      	subs	r3, r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	18cb      	adds	r3, r1, r3
 800439c:	4a6c      	ldr	r2, [pc, #432]	; (8004550 <init_motors_menu+0x384>)
 800439e:	615a      	str	r2, [r3, #20]
	motorsmenu->items[i].action_arg = &(motorsmenu->items[1]);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68d9      	ldr	r1, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68d8      	ldr	r0, [r3, #12]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	0013      	movs	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	18c3      	adds	r3, r0, r3
 80043b4:	000a      	movs	r2, r1
 80043b6:	321c      	adds	r2, #28
 80043b8:	619a      	str	r2, [r3, #24]
	motorsmenu->items[i].parent = motorsmenu;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68d9      	ldr	r1, [r3, #12]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	0013      	movs	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	18cb      	adds	r3, r1, r3
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	611a      	str	r2, [r3, #16]

	// ae200h item
	i++;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	3301      	adds	r3, #1
 80043d2:	613b      	str	r3, [r7, #16]
	motorsmenu->items[i].id = i;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68d9      	ldr	r1, [r3, #12]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	0013      	movs	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	18cb      	adds	r3, r1, r3
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]
	motorsmenu->items[i].size = 0;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68d9      	ldr	r1, [r3, #12]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	0013      	movs	r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	18cb      	adds	r3, r1, r3
 80043fa:	2200      	movs	r2, #0
 80043fc:	721a      	strb	r2, [r3, #8]
	motorsmenu->items[i].heading = STR_DRIVER_AE200H;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68d9      	ldr	r1, [r3, #12]
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	0013      	movs	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	18cb      	adds	r3, r1, r3
 800440e:	4a52      	ldr	r2, [pc, #328]	; (8004558 <init_motors_menu+0x38c>)
 8004410:	605a      	str	r2, [r3, #4]
	motorsmenu->items[i].items = 0;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68d9      	ldr	r1, [r3, #12]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	0013      	movs	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	1a9b      	subs	r3, r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	18cb      	adds	r3, r1, r3
 8004422:	2200      	movs	r2, #0
 8004424:	60da      	str	r2, [r3, #12]
	motorsmenu->items[i].action = 0;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68d9      	ldr	r1, [r3, #12]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	0013      	movs	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	1a9b      	subs	r3, r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	18cb      	adds	r3, r1, r3
 8004436:	2200      	movs	r2, #0
 8004438:	615a      	str	r2, [r3, #20]
	motorsmenu->items[i].is_selected = 0;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68d9      	ldr	r1, [r3, #12]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	0013      	movs	r3, r2
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	18cb      	adds	r3, r1, r3
 800444a:	2200      	movs	r2, #0
 800444c:	725a      	strb	r2, [r3, #9]
	motorsmenu->items[i].items = 0;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68d9      	ldr	r1, [r3, #12]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	0013      	movs	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	18cb      	adds	r3, r1, r3
 800445e:	2200      	movs	r2, #0
 8004460:	60da      	str	r2, [r3, #12]
	motorsmenu->items[i].action = act_set_active_motor;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68d9      	ldr	r1, [r3, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	0013      	movs	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	18cb      	adds	r3, r1, r3
 8004472:	4a37      	ldr	r2, [pc, #220]	; (8004550 <init_motors_menu+0x384>)
 8004474:	615a      	str	r2, [r3, #20]
	motorsmenu->items[i].action_arg = &(motorsmenu->items[2]);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68d9      	ldr	r1, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68d8      	ldr	r0, [r3, #12]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	0013      	movs	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	18c3      	adds	r3, r0, r3
 800448a:	000a      	movs	r2, r1
 800448c:	3238      	adds	r2, #56	; 0x38
 800448e:	619a      	str	r2, [r3, #24]
	motorsmenu->items[i].parent = motorsmenu;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68d9      	ldr	r1, [r3, #12]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	0013      	movs	r3, r2
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	18cb      	adds	r3, r1, r3
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	611a      	str	r2, [r3, #16]

	// exit item
	i++;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	3301      	adds	r3, #1
 80044a8:	613b      	str	r3, [r7, #16]
	motorsmenu->items[i].id = i;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68d9      	ldr	r1, [r3, #12]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	0013      	movs	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	18cb      	adds	r3, r1, r3
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	701a      	strb	r2, [r3, #0]
	motorsmenu->items[i].size = 0;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68d9      	ldr	r1, [r3, #12]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	0013      	movs	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	18cb      	adds	r3, r1, r3
 80044d0:	2200      	movs	r2, #0
 80044d2:	721a      	strb	r2, [r3, #8]
	motorsmenu->items[i].heading = STR_BACK;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68d9      	ldr	r1, [r3, #12]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	0013      	movs	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	18cb      	adds	r3, r1, r3
 80044e4:	4a1d      	ldr	r2, [pc, #116]	; (800455c <init_motors_menu+0x390>)
 80044e6:	605a      	str	r2, [r3, #4]
	motorsmenu->items[i].items = 0;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68d9      	ldr	r1, [r3, #12]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	0013      	movs	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	1a9b      	subs	r3, r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	18cb      	adds	r3, r1, r3
 80044f8:	2200      	movs	r2, #0
 80044fa:	60da      	str	r2, [r3, #12]
	motorsmenu->items[i].action = act_goto_parent;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68d9      	ldr	r1, [r3, #12]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	0013      	movs	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	18cb      	adds	r3, r1, r3
 800450c:	4a14      	ldr	r2, [pc, #80]	; (8004560 <init_motors_menu+0x394>)
 800450e:	615a      	str	r2, [r3, #20]
	act_goto_parent_arg * post_args_back = malloc(sizeof(act_goto_parent_arg)); // never deleted
 8004510:	2008      	movs	r0, #8
 8004512:	f005 ff2b 	bl	800a36c <malloc>
 8004516:	0003      	movs	r3, r0
 8004518:	60fb      	str	r3, [r7, #12]
	post_args_back->m = motorsmenu;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	605a      	str	r2, [r3, #4]
	post_args_back->s = s;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	601a      	str	r2, [r3, #0]
	motorsmenu->items[i].action_arg = post_args_back;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68d9      	ldr	r1, [r3, #12]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	0013      	movs	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	18cb      	adds	r3, r1, r3
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	619a      	str	r2, [r3, #24]
}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	46bd      	mov	sp, r7
 800453e:	b006      	add	sp, #24
 8004540:	bd80      	pop	{r7, pc}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	0800b5e0 	.word	0x0800b5e0
 8004548:	08004a89 	.word	0x08004a89
 800454c:	0800b5e8 	.word	0x0800b5e8
 8004550:	08004979 	.word	0x08004979
 8004554:	0800b5f0 	.word	0x0800b5f0
 8004558:	0800b5f8 	.word	0x0800b5f8
 800455c:	0800b5c0 	.word	0x0800b5c0
 8004560:	080047fd 	.word	0x080047fd

08004564 <display_menu_item>:


void display_menu_item(menu * menu_item, int8_t start_item, int8_t cursor) {
 8004564:	b5b0      	push	{r4, r5, r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af02      	add	r7, sp, #8
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	0008      	movs	r0, r1
 800456e:	0011      	movs	r1, r2
 8004570:	1cfb      	adds	r3, r7, #3
 8004572:	1c02      	adds	r2, r0, #0
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	1cbb      	adds	r3, r7, #2
 8004578:	1c0a      	adds	r2, r1, #0
 800457a:	701a      	strb	r2, [r3, #0]
	SSD1306_Clear();
 800457c:	f7fe f9f1 	bl	8002962 <SSD1306_Clear>
	SSD1306_GotoXY(0, 0);
 8004580:	2100      	movs	r1, #0
 8004582:	2000      	movs	r0, #0
 8004584:	f7fd ff32 	bl	80023ec <SSD1306_GotoXY>
	SSD1306_Puts(menu_item->heading, &Font_7x10, 1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	4960      	ldr	r1, [pc, #384]	; (8004710 <display_menu_item+0x1ac>)
 800458e:	2201      	movs	r2, #1
 8004590:	0018      	movs	r0, r3
 8004592:	f7fd ffc5 	bl	8002520 <SSD1306_Puts>

	int8_t cur_line = 1; // we're starting not from 0
 8004596:	230f      	movs	r3, #15
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	2201      	movs	r2, #1
 800459c:	701a      	strb	r2, [r3, #0]
	for(int8_t i=start_item; i < menu_item->size && cur_line < MAX_MENU_LINES; i++) {
 800459e:	230e      	movs	r3, #14
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	1cfa      	adds	r2, r7, #3
 80045a4:	7812      	ldrb	r2, [r2, #0]
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	e09d      	b.n	80046e6 <display_menu_item+0x182>
		SSD1306_GotoXY(8, 10 * cur_line);
 80045aa:	250f      	movs	r5, #15
 80045ac:	197b      	adds	r3, r7, r5
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	b25b      	sxtb	r3, r3
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	1c1a      	adds	r2, r3, #0
 80045b6:	0092      	lsls	r2, r2, #2
 80045b8:	18d3      	adds	r3, r2, r3
 80045ba:	18db      	adds	r3, r3, r3
 80045bc:	b29b      	uxth	r3, r3
 80045be:	0019      	movs	r1, r3
 80045c0:	2008      	movs	r0, #8
 80045c2:	f7fd ff13 	bl	80023ec <SSD1306_GotoXY>
		if (cursor != i) {
 80045c6:	1cba      	adds	r2, r7, #2
 80045c8:	240e      	movs	r4, #14
 80045ca:	193b      	adds	r3, r7, r4
 80045cc:	7812      	ldrb	r2, [r2, #0]
 80045ce:	b252      	sxtb	r2, r2
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	b25b      	sxtb	r3, r3
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d030      	beq.n	800463a <display_menu_item+0xd6>
			SSD1306_Puts(menu_item->items[i].heading, &Font_7x10, 1);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68d9      	ldr	r1, [r3, #12]
 80045dc:	193b      	adds	r3, r7, r4
 80045de:	2200      	movs	r2, #0
 80045e0:	569a      	ldrsb	r2, [r3, r2]
 80045e2:	0013      	movs	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	18cb      	adds	r3, r1, r3
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	4948      	ldr	r1, [pc, #288]	; (8004710 <display_menu_item+0x1ac>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	0018      	movs	r0, r3
 80045f4:	f7fd ff94 	bl	8002520 <SSD1306_Puts>
			if (menu_item->items[i].is_selected) {
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68d9      	ldr	r1, [r3, #12]
 80045fc:	193b      	adds	r3, r7, r4
 80045fe:	2200      	movs	r2, #0
 8004600:	569a      	ldrsb	r2, [r3, r2]
 8004602:	0013      	movs	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	18cb      	adds	r3, r1, r3
 800460c:	7a5b      	ldrb	r3, [r3, #9]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d057      	beq.n	80046c2 <display_menu_item+0x15e>
				SSD1306_GotoXY(0, 10 * cur_line);
 8004612:	197b      	adds	r3, r7, r5
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	b25b      	sxtb	r3, r3
 8004618:	b29b      	uxth	r3, r3
 800461a:	1c1a      	adds	r2, r3, #0
 800461c:	0092      	lsls	r2, r2, #2
 800461e:	18d3      	adds	r3, r2, r3
 8004620:	18db      	adds	r3, r3, r3
 8004622:	b29b      	uxth	r3, r3
 8004624:	0019      	movs	r1, r3
 8004626:	2000      	movs	r0, #0
 8004628:	f7fd fee0 	bl	80023ec <SSD1306_GotoXY>
				SSD1306_Puts(">", &Font_7x10, 1);
 800462c:	4938      	ldr	r1, [pc, #224]	; (8004710 <display_menu_item+0x1ac>)
 800462e:	4b39      	ldr	r3, [pc, #228]	; (8004714 <display_menu_item+0x1b0>)
 8004630:	2201      	movs	r2, #1
 8004632:	0018      	movs	r0, r3
 8004634:	f7fd ff74 	bl	8002520 <SSD1306_Puts>
 8004638:	e043      	b.n	80046c2 <display_menu_item+0x15e>
			}
		} else {
			SSD1306_DrawFilledRectangle(0, 10 * cur_line-1, 127, 10, 1);
 800463a:	240f      	movs	r4, #15
 800463c:	193b      	adds	r3, r7, r4
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	b25b      	sxtb	r3, r3
 8004642:	b29b      	uxth	r3, r3
 8004644:	1c1a      	adds	r2, r3, #0
 8004646:	0092      	lsls	r2, r2, #2
 8004648:	18d3      	adds	r3, r2, r3
 800464a:	18db      	adds	r3, r3, r3
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b299      	uxth	r1, r3
 8004652:	2301      	movs	r3, #1
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	230a      	movs	r3, #10
 8004658:	227f      	movs	r2, #127	; 0x7f
 800465a:	2000      	movs	r0, #0
 800465c:	f7fe f915 	bl	800288a <SSD1306_DrawFilledRectangle>
			SSD1306_Puts(menu_item->items[i].heading, &Font_7x10, 0);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68d9      	ldr	r1, [r3, #12]
 8004664:	250e      	movs	r5, #14
 8004666:	197b      	adds	r3, r7, r5
 8004668:	2200      	movs	r2, #0
 800466a:	569a      	ldrsb	r2, [r3, r2]
 800466c:	0013      	movs	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	18cb      	adds	r3, r1, r3
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	4925      	ldr	r1, [pc, #148]	; (8004710 <display_menu_item+0x1ac>)
 800467a:	2200      	movs	r2, #0
 800467c:	0018      	movs	r0, r3
 800467e:	f7fd ff4f 	bl	8002520 <SSD1306_Puts>
			if (menu_item->items[i].is_selected) {
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68d9      	ldr	r1, [r3, #12]
 8004686:	197b      	adds	r3, r7, r5
 8004688:	2200      	movs	r2, #0
 800468a:	569a      	ldrsb	r2, [r3, r2]
 800468c:	0013      	movs	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	18cb      	adds	r3, r1, r3
 8004696:	7a5b      	ldrb	r3, [r3, #9]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d012      	beq.n	80046c2 <display_menu_item+0x15e>
				SSD1306_GotoXY(0, 10 * cur_line);
 800469c:	193b      	adds	r3, r7, r4
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	b25b      	sxtb	r3, r3
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	1c1a      	adds	r2, r3, #0
 80046a6:	0092      	lsls	r2, r2, #2
 80046a8:	18d3      	adds	r3, r2, r3
 80046aa:	18db      	adds	r3, r3, r3
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	0019      	movs	r1, r3
 80046b0:	2000      	movs	r0, #0
 80046b2:	f7fd fe9b 	bl	80023ec <SSD1306_GotoXY>
				SSD1306_Puts(">", &Font_7x10, 0);
 80046b6:	4916      	ldr	r1, [pc, #88]	; (8004710 <display_menu_item+0x1ac>)
 80046b8:	4b16      	ldr	r3, [pc, #88]	; (8004714 <display_menu_item+0x1b0>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	0018      	movs	r0, r3
 80046be:	f7fd ff2f 	bl	8002520 <SSD1306_Puts>
			}
		}
		cur_line++;
 80046c2:	210f      	movs	r1, #15
 80046c4:	187b      	adds	r3, r7, r1
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	b25b      	sxtb	r3, r3
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	3301      	adds	r3, #1
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	187b      	adds	r3, r7, r1
 80046d2:	701a      	strb	r2, [r3, #0]
	for(int8_t i=start_item; i < menu_item->size && cur_line < MAX_MENU_LINES; i++) {
 80046d4:	210e      	movs	r1, #14
 80046d6:	187b      	adds	r3, r7, r1
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	b25b      	sxtb	r3, r3
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	3301      	adds	r3, #1
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	187b      	adds	r3, r7, r1
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	230e      	movs	r3, #14
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	b25b      	sxtb	r3, r3
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	7a12      	ldrb	r2, [r2, #8]
 80046f2:	4293      	cmp	r3, r2
 80046f4:	da06      	bge.n	8004704 <display_menu_item+0x1a0>
 80046f6:	230f      	movs	r3, #15
 80046f8:	18fb      	adds	r3, r7, r3
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	b25b      	sxtb	r3, r3
 80046fe:	2b05      	cmp	r3, #5
 8004700:	dc00      	bgt.n	8004704 <display_menu_item+0x1a0>
 8004702:	e752      	b.n	80045aa <display_menu_item+0x46>
	}
	SSD1306_UpdateScreen();
 8004704:	f7fd fd84 	bl	8002210 <SSD1306_UpdateScreen>
}
 8004708:	46c0      	nop			; (mov r8, r8)
 800470a:	46bd      	mov	sp, r7
 800470c:	b004      	add	sp, #16
 800470e:	bdb0      	pop	{r4, r5, r7, pc}
 8004710:	20000000 	.word	0x20000000
 8004714:	0800b600 	.word	0x0800b600

08004718 <act_submenu_pos>:

void act_submenu_pos(void *arg) {
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	act_submenu_arg * args = (act_submenu_arg *)arg;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	613b      	str	r3, [r7, #16]
	uint8_t post_num = get_post_num();
 8004724:	230f      	movs	r3, #15
 8004726:	18fc      	adds	r4, r7, r3
 8004728:	f7fc fad2 	bl	8000cd0 <get_post_num>
 800472c:	0003      	movs	r3, r0
 800472e:	7023      	strb	r3, [r4, #0]
	// Let's make just one of them selected
	for (uint8_t i = 0;i<args->m->size; i++) {
 8004730:	2317      	movs	r3, #23
 8004732:	18fb      	adds	r3, r7, r3
 8004734:	2200      	movs	r2, #0
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	e035      	b.n	80047a6 <act_submenu_pos+0x8e>
	if (i + 1 == post_num) {
 800473a:	2017      	movs	r0, #23
 800473c:	183b      	adds	r3, r7, r0
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	230f      	movs	r3, #15
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d10c      	bne.n	8004766 <act_submenu_pos+0x4e>
		args->m->items[i].is_selected = 1;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	68d9      	ldr	r1, [r3, #12]
 8004752:	183b      	adds	r3, r7, r0
 8004754:	781a      	ldrb	r2, [r3, #0]
 8004756:	0013      	movs	r3, r2
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	18cb      	adds	r3, r1, r3
 8004760:	2201      	movs	r2, #1
 8004762:	725a      	strb	r2, [r3, #9]
 8004764:	e00c      	b.n	8004780 <act_submenu_pos+0x68>
	} else {
		args->m->items[i].is_selected = 0;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	68d9      	ldr	r1, [r3, #12]
 800476c:	2317      	movs	r3, #23
 800476e:	18fb      	adds	r3, r7, r3
 8004770:	781a      	ldrb	r2, [r3, #0]
 8004772:	0013      	movs	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	18cb      	adds	r3, r1, r3
 800477c:	2200      	movs	r2, #0
 800477e:	725a      	strb	r2, [r3, #9]
	}

	act_goto_menu_aux(args->s, args->m, post_num - 1);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	6859      	ldr	r1, [r3, #4]
 8004788:	230f      	movs	r3, #15
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	3b01      	subs	r3, #1
 8004790:	b2db      	uxtb	r3, r3
 8004792:	b25b      	sxtb	r3, r3
 8004794:	001a      	movs	r2, r3
 8004796:	f000 f8be 	bl	8004916 <act_goto_menu_aux>
	for (uint8_t i = 0;i<args->m->size; i++) {
 800479a:	2117      	movs	r1, #23
 800479c:	187b      	adds	r3, r7, r1
 800479e:	781a      	ldrb	r2, [r3, #0]
 80047a0:	187b      	adds	r3, r7, r1
 80047a2:	3201      	adds	r2, #1
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	7a1b      	ldrb	r3, [r3, #8]
 80047ac:	2217      	movs	r2, #23
 80047ae:	18ba      	adds	r2, r7, r2
 80047b0:	7812      	ldrb	r2, [r2, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d3c1      	bcc.n	800473a <act_submenu_pos+0x22>
}
}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	46c0      	nop			; (mov r8, r8)
 80047ba:	46bd      	mov	sp, r7
 80047bc:	b007      	add	sp, #28
 80047be:	bd90      	pop	{r4, r7, pc}

080047c0 <act_exit>:

void act_exit(void *arg) {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	menu_supervisor * s = (menu_supervisor *)arg;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60fb      	str	r3, [r7, #12]
	s->exit = 1;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	721a      	strb	r2, [r3, #8]
}
 80047d2:	46c0      	nop			; (mov r8, r8)
 80047d4:	46bd      	mov	sp, r7
 80047d6:	b004      	add	sp, #16
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <act_test_relays>:

void act_test_relays(void * arg) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	const char * cmd = "RUN T60|1/900/900|2/850/850|3/800/800|4/750/750|5/725/725|6/700/700|7/650/650|8/630/630|9/600/600|10/550/550|11/500/500|;";
 80047e4:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <act_test_relays+0x1c>)
 80047e6:	60fb      	str	r3, [r7, #12]
	app_process_cmd(cmd);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	0018      	movs	r0, r3
 80047ec:	f7fc fbc2 	bl	8000f74 <app_process_cmd>
}
 80047f0:	46c0      	nop			; (mov r8, r8)
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b004      	add	sp, #16
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	0800b604 	.word	0x0800b604

080047fc <act_goto_parent>:

void act_goto_parent(void * arg) {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
	act_goto_parent_arg * args = (act_goto_parent_arg *)arg;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60bb      	str	r3, [r7, #8]

	int8_t desired_position = 0;
 8004808:	230f      	movs	r3, #15
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]

	// Let's find required position
	for (int8_t i=0;i<args->m->parent->size;i++) {
 8004810:	230e      	movs	r3, #14
 8004812:	18fb      	adds	r3, r7, r3
 8004814:	2200      	movs	r2, #0
 8004816:	701a      	strb	r2, [r3, #0]
 8004818:	e01e      	b.n	8004858 <act_goto_parent+0x5c>
		if (&(args->m->parent->items[i]) == args->m) {
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	68d9      	ldr	r1, [r3, #12]
 8004822:	200e      	movs	r0, #14
 8004824:	183b      	adds	r3, r7, r0
 8004826:	2200      	movs	r2, #0
 8004828:	569a      	ldrsb	r2, [r3, r2]
 800482a:	0013      	movs	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	18ca      	adds	r2, r1, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	429a      	cmp	r2, r3
 800483a:	d104      	bne.n	8004846 <act_goto_parent+0x4a>
			desired_position = i;
 800483c:	230f      	movs	r3, #15
 800483e:	18fb      	adds	r3, r7, r3
 8004840:	183a      	adds	r2, r7, r0
 8004842:	7812      	ldrb	r2, [r2, #0]
 8004844:	701a      	strb	r2, [r3, #0]
	for (int8_t i=0;i<args->m->parent->size;i++) {
 8004846:	210e      	movs	r1, #14
 8004848:	187b      	adds	r3, r7, r1
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	b25b      	sxtb	r3, r3
 800484e:	b2db      	uxtb	r3, r3
 8004850:	3301      	adds	r3, #1
 8004852:	b2da      	uxtb	r2, r3
 8004854:	187b      	adds	r3, r7, r1
 8004856:	701a      	strb	r2, [r3, #0]
 8004858:	230e      	movs	r3, #14
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	2200      	movs	r2, #0
 800485e:	569a      	ldrsb	r2, [r3, r2]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	7a1b      	ldrb	r3, [r3, #8]
 8004868:	429a      	cmp	r2, r3
 800486a:	dbd6      	blt.n	800481a <act_goto_parent+0x1e>
		}
	}

	act_goto_menu_aux(args->s, args->m->parent, desired_position);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	6919      	ldr	r1, [r3, #16]
 8004876:	230f      	movs	r3, #15
 8004878:	18fb      	adds	r3, r7, r3
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	b25b      	sxtb	r3, r3
 800487e:	001a      	movs	r2, r3
 8004880:	f000 f849 	bl	8004916 <act_goto_menu_aux>
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b004      	add	sp, #16
 800488a:	bd80      	pop	{r7, pc}

0800488c <act_set_active>:

void act_set_active(void * arg) {
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	menu * post_item = (menu *) arg;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	613b      	str	r3, [r7, #16]
	menu * parent = post_item->parent;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0;i<parent->size;i++) {
 800489e:	2317      	movs	r3, #23
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	2200      	movs	r2, #0
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	e02a      	b.n	80048fe <act_set_active+0x72>
		if (i+1 == post_item->id) {
 80048a8:	2017      	movs	r0, #23
 80048aa:	183b      	adds	r3, r7, r0
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	3301      	adds	r3, #1
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	7812      	ldrb	r2, [r2, #0]
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d110      	bne.n	80048da <act_set_active+0x4e>
			// we need to make it selected
			parent->items[i].is_selected = 1;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68d9      	ldr	r1, [r3, #12]
 80048bc:	183b      	adds	r3, r7, r0
 80048be:	781a      	ldrb	r2, [r3, #0]
 80048c0:	0013      	movs	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	18cb      	adds	r3, r1, r3
 80048ca:	2201      	movs	r2, #1
 80048cc:	725a      	strb	r2, [r3, #9]
			set_post_num(post_item->id);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	0018      	movs	r0, r3
 80048d4:	f7fc fa1a 	bl	8000d0c <set_post_num>
 80048d8:	e00b      	b.n	80048f2 <act_set_active+0x66>
		} else {
			parent->items[i].is_selected = 0;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	68d9      	ldr	r1, [r3, #12]
 80048de:	2317      	movs	r3, #23
 80048e0:	18fb      	adds	r3, r7, r3
 80048e2:	781a      	ldrb	r2, [r3, #0]
 80048e4:	0013      	movs	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	18cb      	adds	r3, r1, r3
 80048ee:	2200      	movs	r2, #0
 80048f0:	725a      	strb	r2, [r3, #9]
	for (uint8_t i=0;i<parent->size;i++) {
 80048f2:	2117      	movs	r1, #23
 80048f4:	187b      	adds	r3, r7, r1
 80048f6:	781a      	ldrb	r2, [r3, #0]
 80048f8:	187b      	adds	r3, r7, r1
 80048fa:	3201      	adds	r2, #1
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	7a1b      	ldrb	r3, [r3, #8]
 8004902:	2217      	movs	r2, #23
 8004904:	18ba      	adds	r2, r7, r2
 8004906:	7812      	ldrb	r2, [r2, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d3cd      	bcc.n	80048a8 <act_set_active+0x1c>
		}
	}
}
 800490c:	46c0      	nop			; (mov r8, r8)
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	46bd      	mov	sp, r7
 8004912:	b006      	add	sp, #24
 8004914:	bd80      	pop	{r7, pc}

08004916 <act_goto_menu_aux>:
void act_goto_menu_aux(menu_supervisor *s, menu *m, int8_t desired_position) {
 8004916:	b580      	push	{r7, lr}
 8004918:	b086      	sub	sp, #24
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	1dfb      	adds	r3, r7, #7
 8004922:	701a      	strb	r2, [r3, #0]
	s->cursor = desired_position;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1dfa      	adds	r2, r7, #7
 8004928:	7812      	ldrb	r2, [r2, #0]
 800492a:	705a      	strb	r2, [r3, #1]
	s->start_item = desired_position;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1dfa      	adds	r2, r7, #7
 8004930:	7812      	ldrb	r2, [r2, #0]
 8004932:	701a      	strb	r2, [r3, #0]

	// Let's position it properly on the screen
	// e.g. if the last element is selected we won't see just one element
	// on the screen
	if (m->size < MAX_MENU_LINES) {
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	7a1b      	ldrb	r3, [r3, #8]
 8004938:	2b05      	cmp	r3, #5
 800493a:	d803      	bhi.n	8004944 <act_goto_menu_aux+0x2e>
		s->start_item = 0;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	e012      	b.n	800496a <act_goto_menu_aux+0x54>
	} else {
		int8_t max_start_item = 1 + m->size - MAX_MENU_LINES;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	7a1b      	ldrb	r3, [r3, #8]
 8004948:	3b05      	subs	r3, #5
 800494a:	b2da      	uxtb	r2, r3
 800494c:	2117      	movs	r1, #23
 800494e:	187b      	adds	r3, r7, r1
 8004950:	701a      	strb	r2, [r3, #0]
		if (s->start_item > max_start_item) {
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	b25b      	sxtb	r3, r3
 8004958:	187a      	adds	r2, r7, r1
 800495a:	7812      	ldrb	r2, [r2, #0]
 800495c:	b252      	sxtb	r2, r2
 800495e:	429a      	cmp	r2, r3
 8004960:	da03      	bge.n	800496a <act_goto_menu_aux+0x54>
			s->start_item = max_start_item;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	187a      	adds	r2, r7, r1
 8004966:	7812      	ldrb	r2, [r2, #0]
 8004968:	701a      	strb	r2, [r3, #0]
		}
	}

	s->cur_item = m;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	605a      	str	r2, [r3, #4]
}
 8004970:	46c0      	nop			; (mov r8, r8)
 8004972:	46bd      	mov	sp, r7
 8004974:	b006      	add	sp, #24
 8004976:	bd80      	pop	{r7, pc}

08004978 <act_set_active_motor>:

void act_set_active_motor(void * arg) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
	menu * item = (menu *) arg;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	613b      	str	r3, [r7, #16]
	menu * parent = item->parent;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0;i<parent->size;i++) {
 800498a:	2317      	movs	r3, #23
 800498c:	18fb      	adds	r3, r7, r3
 800498e:	2200      	movs	r2, #0
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	e029      	b.n	80049e8 <act_set_active_motor+0x70>
		if (i == item->id) {
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2017      	movs	r0, #23
 800499a:	183a      	adds	r2, r7, r0
 800499c:	7812      	ldrb	r2, [r2, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d110      	bne.n	80049c4 <act_set_active_motor+0x4c>
			// we need to make it selected
			parent->items[i].is_selected = 1;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	68d9      	ldr	r1, [r3, #12]
 80049a6:	183b      	adds	r3, r7, r0
 80049a8:	781a      	ldrb	r2, [r3, #0]
 80049aa:	0013      	movs	r3, r2
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	18cb      	adds	r3, r1, r3
 80049b4:	2201      	movs	r2, #1
 80049b6:	725a      	strb	r2, [r3, #9]
			set_motor(item->id);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	0018      	movs	r0, r3
 80049be:	f7fc f9d5 	bl	8000d6c <set_motor>
 80049c2:	e00b      	b.n	80049dc <act_set_active_motor+0x64>
		} else {
			parent->items[i].is_selected = 0;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	68d9      	ldr	r1, [r3, #12]
 80049c8:	2317      	movs	r3, #23
 80049ca:	18fb      	adds	r3, r7, r3
 80049cc:	781a      	ldrb	r2, [r3, #0]
 80049ce:	0013      	movs	r3, r2
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	1a9b      	subs	r3, r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	18cb      	adds	r3, r1, r3
 80049d8:	2200      	movs	r2, #0
 80049da:	725a      	strb	r2, [r3, #9]
	for (uint8_t i=0;i<parent->size;i++) {
 80049dc:	2117      	movs	r1, #23
 80049de:	187b      	adds	r3, r7, r1
 80049e0:	781a      	ldrb	r2, [r3, #0]
 80049e2:	187b      	adds	r3, r7, r1
 80049e4:	3201      	adds	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	7a1b      	ldrb	r3, [r3, #8]
 80049ec:	2217      	movs	r2, #23
 80049ee:	18ba      	adds	r2, r7, r2
 80049f0:	7812      	ldrb	r2, [r2, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d3ce      	bcc.n	8004994 <act_set_active_motor+0x1c>
		}
	}
}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	46c0      	nop			; (mov r8, r8)
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b006      	add	sp, #24
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <act_set_active_mode>:

void act_set_active_mode(void * arg) {
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
	menu * item = (menu *) arg;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	613b      	str	r3, [r7, #16]
	menu * parent = item->parent;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0;i<parent->size;i++) {
 8004a12:	2317      	movs	r3, #23
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
 8004a1a:	e029      	b.n	8004a70 <act_set_active_mode+0x70>
		if (i == item->id) {
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2017      	movs	r0, #23
 8004a22:	183a      	adds	r2, r7, r0
 8004a24:	7812      	ldrb	r2, [r2, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d110      	bne.n	8004a4c <act_set_active_mode+0x4c>
			// we need to make it selected
			parent->items[i].is_selected = 1;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68d9      	ldr	r1, [r3, #12]
 8004a2e:	183b      	adds	r3, r7, r0
 8004a30:	781a      	ldrb	r2, [r3, #0]
 8004a32:	0013      	movs	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	18cb      	adds	r3, r1, r3
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	725a      	strb	r2, [r3, #9]
			set_connection_mode(item->id);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	0018      	movs	r0, r3
 8004a46:	f7fc f9b9 	bl	8000dbc <set_connection_mode>
 8004a4a:	e00b      	b.n	8004a64 <act_set_active_mode+0x64>
		} else {
			parent->items[i].is_selected = 0;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68d9      	ldr	r1, [r3, #12]
 8004a50:	2317      	movs	r3, #23
 8004a52:	18fb      	adds	r3, r7, r3
 8004a54:	781a      	ldrb	r2, [r3, #0]
 8004a56:	0013      	movs	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	18cb      	adds	r3, r1, r3
 8004a60:	2200      	movs	r2, #0
 8004a62:	725a      	strb	r2, [r3, #9]
	for (uint8_t i=0;i<parent->size;i++) {
 8004a64:	2117      	movs	r1, #23
 8004a66:	187b      	adds	r3, r7, r1
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	187b      	adds	r3, r7, r1
 8004a6c:	3201      	adds	r2, #1
 8004a6e:	701a      	strb	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	7a1b      	ldrb	r3, [r3, #8]
 8004a74:	2217      	movs	r2, #23
 8004a76:	18ba      	adds	r2, r7, r2
 8004a78:	7812      	ldrb	r2, [r2, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d3ce      	bcc.n	8004a1c <act_set_active_mode+0x1c>
		}
	}
}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	46c0      	nop			; (mov r8, r8)
 8004a82:	46bd      	mov	sp, r7
 8004a84:	b006      	add	sp, #24
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <act_submenu_motor>:

void act_submenu_motor(void *arg) {
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	act_submenu_arg * args = (act_submenu_arg *)arg;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	613b      	str	r3, [r7, #16]
	uint8_t motor = get_motor();
 8004a94:	230f      	movs	r3, #15
 8004a96:	18fc      	adds	r4, r7, r3
 8004a98:	f7fc f924 	bl	8000ce4 <get_motor>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	7023      	strb	r3, [r4, #0]
	// Let's make just one of them selected
	for (uint8_t i = 0;i<args->m->size; i++) {
 8004aa0:	2317      	movs	r3, #23
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	701a      	strb	r2, [r3, #0]
 8004aa8:	e032      	b.n	8004b10 <act_submenu_motor+0x88>
	if (i == motor) {
 8004aaa:	2017      	movs	r0, #23
 8004aac:	183a      	adds	r2, r7, r0
 8004aae:	230f      	movs	r3, #15
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	7812      	ldrb	r2, [r2, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d10c      	bne.n	8004ad4 <act_submenu_motor+0x4c>
		args->m->items[i].is_selected = 1;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	68d9      	ldr	r1, [r3, #12]
 8004ac0:	183b      	adds	r3, r7, r0
 8004ac2:	781a      	ldrb	r2, [r3, #0]
 8004ac4:	0013      	movs	r3, r2
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	1a9b      	subs	r3, r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	18cb      	adds	r3, r1, r3
 8004ace:	2201      	movs	r2, #1
 8004ad0:	725a      	strb	r2, [r3, #9]
 8004ad2:	e00c      	b.n	8004aee <act_submenu_motor+0x66>
	} else {
		args->m->items[i].is_selected = 0;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	68d9      	ldr	r1, [r3, #12]
 8004ada:	2317      	movs	r3, #23
 8004adc:	18fb      	adds	r3, r7, r3
 8004ade:	781a      	ldrb	r2, [r3, #0]
 8004ae0:	0013      	movs	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	18cb      	adds	r3, r1, r3
 8004aea:	2200      	movs	r2, #0
 8004aec:	725a      	strb	r2, [r3, #9]
	}

	act_goto_menu_aux(args->s, args->m, motor);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	230f      	movs	r3, #15
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	b25b      	sxtb	r3, r3
 8004afe:	001a      	movs	r2, r3
 8004b00:	f7ff ff09 	bl	8004916 <act_goto_menu_aux>
	for (uint8_t i = 0;i<args->m->size; i++) {
 8004b04:	2117      	movs	r1, #23
 8004b06:	187b      	adds	r3, r7, r1
 8004b08:	781a      	ldrb	r2, [r3, #0]
 8004b0a:	187b      	adds	r3, r7, r1
 8004b0c:	3201      	adds	r2, #1
 8004b0e:	701a      	strb	r2, [r3, #0]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	7a1b      	ldrb	r3, [r3, #8]
 8004b16:	2217      	movs	r2, #23
 8004b18:	18ba      	adds	r2, r7, r2
 8004b1a:	7812      	ldrb	r2, [r2, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d3c4      	bcc.n	8004aaa <act_submenu_motor+0x22>
}
}
 8004b20:	46c0      	nop			; (mov r8, r8)
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b007      	add	sp, #28
 8004b28:	bd90      	pop	{r4, r7, pc}

08004b2a <act_submenu_mode>:

void act_submenu_mode(void *arg) {
 8004b2a:	b590      	push	{r4, r7, lr}
 8004b2c:	b087      	sub	sp, #28
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
	act_submenu_arg * args = (act_submenu_arg *)arg;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	613b      	str	r3, [r7, #16]
	uint8_t mode = get_connection_mode();
 8004b36:	230f      	movs	r3, #15
 8004b38:	18fc      	adds	r4, r7, r3
 8004b3a:	f7fc f8dd 	bl	8000cf8 <get_connection_mode>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	7023      	strb	r3, [r4, #0]
	// Let's make just one of them selected
	for (uint8_t i = 0;i<args->m->size; i++) {
 8004b42:	2317      	movs	r3, #23
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	e032      	b.n	8004bb2 <act_submenu_mode+0x88>
	if (i == mode) {
 8004b4c:	2017      	movs	r0, #23
 8004b4e:	183a      	adds	r2, r7, r0
 8004b50:	230f      	movs	r3, #15
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	7812      	ldrb	r2, [r2, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d10c      	bne.n	8004b76 <act_submenu_mode+0x4c>
		args->m->items[i].is_selected = 1;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	68d9      	ldr	r1, [r3, #12]
 8004b62:	183b      	adds	r3, r7, r0
 8004b64:	781a      	ldrb	r2, [r3, #0]
 8004b66:	0013      	movs	r3, r2
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	18cb      	adds	r3, r1, r3
 8004b70:	2201      	movs	r2, #1
 8004b72:	725a      	strb	r2, [r3, #9]
 8004b74:	e00c      	b.n	8004b90 <act_submenu_mode+0x66>
	} else {
		args->m->items[i].is_selected = 0;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	68d9      	ldr	r1, [r3, #12]
 8004b7c:	2317      	movs	r3, #23
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	781a      	ldrb	r2, [r3, #0]
 8004b82:	0013      	movs	r3, r2
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	1a9b      	subs	r3, r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	18cb      	adds	r3, r1, r3
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	725a      	strb	r2, [r3, #9]
	}

	act_goto_menu_aux(args->s, args->m, mode);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	6818      	ldr	r0, [r3, #0]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	6859      	ldr	r1, [r3, #4]
 8004b98:	230f      	movs	r3, #15
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	b25b      	sxtb	r3, r3
 8004ba0:	001a      	movs	r2, r3
 8004ba2:	f7ff feb8 	bl	8004916 <act_goto_menu_aux>
	for (uint8_t i = 0;i<args->m->size; i++) {
 8004ba6:	2117      	movs	r1, #23
 8004ba8:	187b      	adds	r3, r7, r1
 8004baa:	781a      	ldrb	r2, [r3, #0]
 8004bac:	187b      	adds	r3, r7, r1
 8004bae:	3201      	adds	r2, #1
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	7a1b      	ldrb	r3, [r3, #8]
 8004bb8:	2217      	movs	r2, #23
 8004bba:	18ba      	adds	r2, r7, r2
 8004bbc:	7812      	ldrb	r2, [r2, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d3c4      	bcc.n	8004b4c <act_submenu_mode+0x22>
}
}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	46c0      	nop			; (mov r8, r8)
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b007      	add	sp, #28
 8004bca:	bd90      	pop	{r4, r7, pc}

08004bcc <add_relay>:
 *      Author: roman
 */

#include "relays.h"

void add_relay(gpio_entity *obj, uint16_t pin, GPIO_TypeDef * port) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	607a      	str	r2, [r7, #4]
 8004bd6:	200a      	movs	r0, #10
 8004bd8:	183b      	adds	r3, r7, r0
 8004bda:	1c0a      	adds	r2, r1, #0
 8004bdc:	801a      	strh	r2, [r3, #0]
	obj->relays[obj->cursor].pin = pin;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	18d3      	adds	r3, r2, r3
 8004be8:	3304      	adds	r3, #4
 8004bea:	183a      	adds	r2, r7, r0
 8004bec:	8812      	ldrh	r2, [r2, #0]
 8004bee:	801a      	strh	r2, [r3, #0]
	obj->relays[obj->cursor].port = port;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	18d3      	adds	r3, r2, r3
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	601a      	str	r2, [r3, #0]
	obj->cursor = obj->cursor + 1;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	601a      	str	r2, [r3, #0]
}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b004      	add	sp, #16
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <init_gpio_entity>:

void init_gpio_entity(gpio_entity *obj) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
	obj->cursor = 0;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
	add_relay(obj, OUT_1_Pin, OUT_1_GPIO_Port);
 8004c22:	2390      	movs	r3, #144	; 0x90
 8004c24:	05da      	lsls	r2, r3, #23
 8004c26:	2380      	movs	r3, #128	; 0x80
 8004c28:	0059      	lsls	r1, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7ff ffcd 	bl	8004bcc <add_relay>
	add_relay(obj, OUT_2_Pin, OUT_2_GPIO_Port);
 8004c32:	4a24      	ldr	r2, [pc, #144]	; (8004cc4 <init_gpio_entity+0xb0>)
 8004c34:	2380      	movs	r3, #128	; 0x80
 8004c36:	0219      	lsls	r1, r3, #8
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f7ff ffc6 	bl	8004bcc <add_relay>
	add_relay(obj, OUT_3_Pin, OUT_3_GPIO_Port);
 8004c40:	4a20      	ldr	r2, [pc, #128]	; (8004cc4 <init_gpio_entity+0xb0>)
 8004c42:	2380      	movs	r3, #128	; 0x80
 8004c44:	01d9      	lsls	r1, r3, #7
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f7ff ffbf 	bl	8004bcc <add_relay>
	add_relay(obj, OUT_4_Pin, OUT_4_GPIO_Port);
 8004c4e:	4a1d      	ldr	r2, [pc, #116]	; (8004cc4 <init_gpio_entity+0xb0>)
 8004c50:	2380      	movs	r3, #128	; 0x80
 8004c52:	0199      	lsls	r1, r3, #6
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	0018      	movs	r0, r3
 8004c58:	f7ff ffb8 	bl	8004bcc <add_relay>
	add_relay(obj, OUT_5_Pin, OUT_5_GPIO_Port);
 8004c5c:	4a19      	ldr	r2, [pc, #100]	; (8004cc4 <init_gpio_entity+0xb0>)
 8004c5e:	2380      	movs	r3, #128	; 0x80
 8004c60:	0159      	lsls	r1, r3, #5
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7ff ffb1 	bl	8004bcc <add_relay>
	add_relay(obj, OUT_6_Pin, OUT_6_GPIO_Port);
 8004c6a:	4a16      	ldr	r2, [pc, #88]	; (8004cc4 <init_gpio_entity+0xb0>)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2101      	movs	r1, #1
 8004c70:	0018      	movs	r0, r3
 8004c72:	f7ff ffab 	bl	8004bcc <add_relay>
	add_relay(obj, OUT_7_Pin, OUT_7_GPIO_Port);
 8004c76:	2390      	movs	r3, #144	; 0x90
 8004c78:	05da      	lsls	r2, r3, #23
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2180      	movs	r1, #128	; 0x80
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f7ff ffa4 	bl	8004bcc <add_relay>
	add_relay(obj, OUT_8_Pin, OUT_8_GPIO_Port);
 8004c84:	2390      	movs	r3, #144	; 0x90
 8004c86:	05da      	lsls	r2, r3, #23
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2140      	movs	r1, #64	; 0x40
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7ff ff9d 	bl	8004bcc <add_relay>
	add_relay(obj, OUT_9_Pin, OUT_9_GPIO_Port);
 8004c92:	2390      	movs	r3, #144	; 0x90
 8004c94:	05da      	lsls	r2, r3, #23
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2120      	movs	r1, #32
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f7ff ff96 	bl	8004bcc <add_relay>
	add_relay(obj, OUT_10_Pin, OUT_10_GPIO_Port);
 8004ca0:	2390      	movs	r3, #144	; 0x90
 8004ca2:	05da      	lsls	r2, r3, #23
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2110      	movs	r1, #16
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f7ff ff8f 	bl	8004bcc <add_relay>
	add_relay(obj, OUT_11_Pin, OUT_11_GPIO_Port);
 8004cae:	2390      	movs	r3, #144	; 0x90
 8004cb0:	05da      	lsls	r2, r3, #23
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f7ff ff88 	bl	8004bcc <add_relay>
}
 8004cbc:	46c0      	nop			; (mov r8, r8)
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	b002      	add	sp, #8
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	48000400 	.word	0x48000400

08004cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cce:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <HAL_MspInit+0x50>)
 8004cd0:	699a      	ldr	r2, [r3, #24]
 8004cd2:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <HAL_MspInit+0x50>)
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	619a      	str	r2, [r3, #24]
 8004cda:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <HAL_MspInit+0x50>)
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	607b      	str	r3, [r7, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ce6:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <HAL_MspInit+0x50>)
 8004ce8:	69da      	ldr	r2, [r3, #28]
 8004cea:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <HAL_MspInit+0x50>)
 8004cec:	2180      	movs	r1, #128	; 0x80
 8004cee:	0549      	lsls	r1, r1, #21
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	61da      	str	r2, [r3, #28]
 8004cf4:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <HAL_MspInit+0x50>)
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	055b      	lsls	r3, r3, #21
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8004d02:	2302      	movs	r3, #2
 8004d04:	425b      	negs	r3, r3
 8004d06:	2200      	movs	r2, #0
 8004d08:	2103      	movs	r1, #3
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f000 fd5e 	bl	80057cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d10:	46c0      	nop			; (mov r8, r8)
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b002      	add	sp, #8
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40021000 	.word	0x40021000

08004d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004d1c:	b590      	push	{r4, r7, lr}
 8004d1e:	b08b      	sub	sp, #44	; 0x2c
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d24:	2414      	movs	r4, #20
 8004d26:	193b      	adds	r3, r7, r4
 8004d28:	0018      	movs	r0, r3
 8004d2a:	2314      	movs	r3, #20
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	2100      	movs	r1, #0
 8004d30:	f005 fd28 	bl	800a784 <memset>
  if(hi2c->Instance==I2C1)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <HAL_I2C_MspInit+0x90>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d131      	bne.n	8004da2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d3e:	4b1c      	ldr	r3, [pc, #112]	; (8004db0 <HAL_I2C_MspInit+0x94>)
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <HAL_I2C_MspInit+0x94>)
 8004d44:	2180      	movs	r1, #128	; 0x80
 8004d46:	02c9      	lsls	r1, r1, #11
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	615a      	str	r2, [r3, #20]
 8004d4c:	4b18      	ldr	r3, [pc, #96]	; (8004db0 <HAL_I2C_MspInit+0x94>)
 8004d4e:	695a      	ldr	r2, [r3, #20]
 8004d50:	2380      	movs	r3, #128	; 0x80
 8004d52:	02db      	lsls	r3, r3, #11
 8004d54:	4013      	ands	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004d5a:	0021      	movs	r1, r4
 8004d5c:	187b      	adds	r3, r7, r1
 8004d5e:	22c0      	movs	r2, #192	; 0xc0
 8004d60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d62:	187b      	adds	r3, r7, r1
 8004d64:	2212      	movs	r2, #18
 8004d66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d68:	187b      	adds	r3, r7, r1
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d6e:	187b      	adds	r3, r7, r1
 8004d70:	2203      	movs	r2, #3
 8004d72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004d74:	187b      	adds	r3, r7, r1
 8004d76:	2201      	movs	r2, #1
 8004d78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d7a:	187b      	adds	r3, r7, r1
 8004d7c:	4a0d      	ldr	r2, [pc, #52]	; (8004db4 <HAL_I2C_MspInit+0x98>)
 8004d7e:	0019      	movs	r1, r3
 8004d80:	0010      	movs	r0, r2
 8004d82:	f000 ff4b 	bl	8005c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d86:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <HAL_I2C_MspInit+0x94>)
 8004d88:	69da      	ldr	r2, [r3, #28]
 8004d8a:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <HAL_I2C_MspInit+0x94>)
 8004d8c:	2180      	movs	r1, #128	; 0x80
 8004d8e:	0389      	lsls	r1, r1, #14
 8004d90:	430a      	orrs	r2, r1
 8004d92:	61da      	str	r2, [r3, #28]
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <HAL_I2C_MspInit+0x94>)
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	2380      	movs	r3, #128	; 0x80
 8004d9a:	039b      	lsls	r3, r3, #14
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	46bd      	mov	sp, r7
 8004da6:	b00b      	add	sp, #44	; 0x2c
 8004da8:	bd90      	pop	{r4, r7, pc}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	40005400 	.word	0x40005400
 8004db0:	40021000 	.word	0x40021000
 8004db4:	48000400 	.word	0x48000400

08004db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b08f      	sub	sp, #60	; 0x3c
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc0:	2424      	movs	r4, #36	; 0x24
 8004dc2:	193b      	adds	r3, r7, r4
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	2314      	movs	r3, #20
 8004dc8:	001a      	movs	r2, r3
 8004dca:	2100      	movs	r1, #0
 8004dcc:	f005 fcda 	bl	800a784 <memset>
  if(huart->Instance==USART1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a55      	ldr	r2, [pc, #340]	; (8004f2c <HAL_UART_MspInit+0x174>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d134      	bne.n	8004e44 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004dda:	4b55      	ldr	r3, [pc, #340]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	4b54      	ldr	r3, [pc, #336]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004de0:	2180      	movs	r1, #128	; 0x80
 8004de2:	01c9      	lsls	r1, r1, #7
 8004de4:	430a      	orrs	r2, r1
 8004de6:	619a      	str	r2, [r3, #24]
 8004de8:	4b51      	ldr	r3, [pc, #324]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004dea:	699a      	ldr	r2, [r3, #24]
 8004dec:	2380      	movs	r3, #128	; 0x80
 8004dee:	01db      	lsls	r3, r3, #7
 8004df0:	4013      	ands	r3, r2
 8004df2:	623b      	str	r3, [r7, #32]
 8004df4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df6:	4b4e      	ldr	r3, [pc, #312]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	4b4d      	ldr	r3, [pc, #308]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004dfc:	2180      	movs	r1, #128	; 0x80
 8004dfe:	0289      	lsls	r1, r1, #10
 8004e00:	430a      	orrs	r2, r1
 8004e02:	615a      	str	r2, [r3, #20]
 8004e04:	4b4a      	ldr	r3, [pc, #296]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	029b      	lsls	r3, r3, #10
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	61fb      	str	r3, [r7, #28]
 8004e10:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8004e12:	193b      	adds	r3, r7, r4
 8004e14:	22b0      	movs	r2, #176	; 0xb0
 8004e16:	0152      	lsls	r2, r2, #5
 8004e18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e1a:	0021      	movs	r1, r4
 8004e1c:	187b      	adds	r3, r7, r1
 8004e1e:	2202      	movs	r2, #2
 8004e20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e22:	187b      	adds	r3, r7, r1
 8004e24:	2200      	movs	r2, #0
 8004e26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e28:	187b      	adds	r3, r7, r1
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004e2e:	187b      	adds	r3, r7, r1
 8004e30:	2201      	movs	r2, #1
 8004e32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e34:	187a      	adds	r2, r7, r1
 8004e36:	2390      	movs	r3, #144	; 0x90
 8004e38:	05db      	lsls	r3, r3, #23
 8004e3a:	0011      	movs	r1, r2
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f000 feed 	bl	8005c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004e42:	e06f      	b.n	8004f24 <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==USART2)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a3a      	ldr	r2, [pc, #232]	; (8004f34 <HAL_UART_MspInit+0x17c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d133      	bne.n	8004eb6 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e4e:	4b38      	ldr	r3, [pc, #224]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004e50:	69da      	ldr	r2, [r3, #28]
 8004e52:	4b37      	ldr	r3, [pc, #220]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004e54:	2180      	movs	r1, #128	; 0x80
 8004e56:	0289      	lsls	r1, r1, #10
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	61da      	str	r2, [r3, #28]
 8004e5c:	4b34      	ldr	r3, [pc, #208]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	2380      	movs	r3, #128	; 0x80
 8004e62:	029b      	lsls	r3, r3, #10
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
 8004e68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004e6c:	695a      	ldr	r2, [r3, #20]
 8004e6e:	4b30      	ldr	r3, [pc, #192]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004e70:	2180      	movs	r1, #128	; 0x80
 8004e72:	0289      	lsls	r1, r1, #10
 8004e74:	430a      	orrs	r2, r1
 8004e76:	615a      	str	r2, [r3, #20]
 8004e78:	4b2d      	ldr	r3, [pc, #180]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004e7a:	695a      	ldr	r2, [r3, #20]
 8004e7c:	2380      	movs	r3, #128	; 0x80
 8004e7e:	029b      	lsls	r3, r3, #10
 8004e80:	4013      	ands	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004e86:	2124      	movs	r1, #36	; 0x24
 8004e88:	187b      	adds	r3, r7, r1
 8004e8a:	220e      	movs	r2, #14
 8004e8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e8e:	187b      	adds	r3, r7, r1
 8004e90:	2202      	movs	r2, #2
 8004e92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e94:	187b      	adds	r3, r7, r1
 8004e96:	2200      	movs	r2, #0
 8004e98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e9a:	187b      	adds	r3, r7, r1
 8004e9c:	2203      	movs	r2, #3
 8004e9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004ea0:	187b      	adds	r3, r7, r1
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ea6:	187a      	adds	r2, r7, r1
 8004ea8:	2390      	movs	r3, #144	; 0x90
 8004eaa:	05db      	lsls	r3, r3, #23
 8004eac:	0011      	movs	r1, r2
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f000 feb4 	bl	8005c1c <HAL_GPIO_Init>
}
 8004eb4:	e036      	b.n	8004f24 <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==USART3)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1f      	ldr	r2, [pc, #124]	; (8004f38 <HAL_UART_MspInit+0x180>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d131      	bne.n	8004f24 <HAL_UART_MspInit+0x16c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004ec2:	69da      	ldr	r2, [r3, #28]
 8004ec4:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	02c9      	lsls	r1, r1, #11
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	61da      	str	r2, [r3, #28]
 8004ece:	4b18      	ldr	r3, [pc, #96]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004ed0:	69da      	ldr	r2, [r3, #28]
 8004ed2:	2380      	movs	r3, #128	; 0x80
 8004ed4:	02db      	lsls	r3, r3, #11
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
 8004eda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004edc:	4b14      	ldr	r3, [pc, #80]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004ede:	695a      	ldr	r2, [r3, #20]
 8004ee0:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004ee2:	2180      	movs	r1, #128	; 0x80
 8004ee4:	02c9      	lsls	r1, r1, #11
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	615a      	str	r2, [r3, #20]
 8004eea:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <HAL_UART_MspInit+0x178>)
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	2380      	movs	r3, #128	; 0x80
 8004ef0:	02db      	lsls	r3, r3, #11
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8004ef8:	2124      	movs	r1, #36	; 0x24
 8004efa:	187b      	adds	r3, r7, r1
 8004efc:	4a0f      	ldr	r2, [pc, #60]	; (8004f3c <HAL_UART_MspInit+0x184>)
 8004efe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f00:	187b      	adds	r3, r7, r1
 8004f02:	2202      	movs	r2, #2
 8004f04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f06:	187b      	adds	r3, r7, r1
 8004f08:	2200      	movs	r2, #0
 8004f0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f0c:	187b      	adds	r3, r7, r1
 8004f0e:	2203      	movs	r2, #3
 8004f10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004f12:	187b      	adds	r3, r7, r1
 8004f14:	2204      	movs	r2, #4
 8004f16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f18:	187b      	adds	r3, r7, r1
 8004f1a:	4a09      	ldr	r2, [pc, #36]	; (8004f40 <HAL_UART_MspInit+0x188>)
 8004f1c:	0019      	movs	r1, r3
 8004f1e:	0010      	movs	r0, r2
 8004f20:	f000 fe7c 	bl	8005c1c <HAL_GPIO_Init>
}
 8004f24:	46c0      	nop			; (mov r8, r8)
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b00f      	add	sp, #60	; 0x3c
 8004f2a:	bd90      	pop	{r4, r7, pc}
 8004f2c:	40013800 	.word	0x40013800
 8004f30:	40021000 	.word	0x40021000
 8004f34:	40004400 	.word	0x40004400
 8004f38:	40004800 	.word	0x40004800
 8004f3c:	00000c02 	.word	0x00000c02
 8004f40:	48000400 	.word	0x48000400

08004f44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	; 0x28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	0019      	movs	r1, r3
 8004f5a:	2011      	movs	r0, #17
 8004f5c:	f000 fc36 	bl	80057cc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004f60:	2011      	movs	r0, #17
 8004f62:	f000 fc48 	bl	80057f6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004f66:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <HAL_InitTick+0xa4>)
 8004f68:	69da      	ldr	r2, [r3, #28]
 8004f6a:	4b1f      	ldr	r3, [pc, #124]	; (8004fe8 <HAL_InitTick+0xa4>)
 8004f6c:	2110      	movs	r1, #16
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	61da      	str	r2, [r3, #28]
 8004f72:	4b1d      	ldr	r3, [pc, #116]	; (8004fe8 <HAL_InitTick+0xa4>)
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	2210      	movs	r2, #16
 8004f78:	4013      	ands	r3, r2
 8004f7a:	60bb      	str	r3, [r7, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004f7e:	230c      	movs	r3, #12
 8004f80:	18fa      	adds	r2, r7, r3
 8004f82:	2310      	movs	r3, #16
 8004f84:	18fb      	adds	r3, r7, r3
 8004f86:	0011      	movs	r1, r2
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f002 f92b 	bl	80071e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004f8e:	f002 f913 	bl	80071b8 <HAL_RCC_GetPCLK1Freq>
 8004f92:	0003      	movs	r3, r0
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	4914      	ldr	r1, [pc, #80]	; (8004fec <HAL_InitTick+0xa8>)
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f7fb f8be 	bl	800011c <__udivsi3>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004fa6:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <HAL_InitTick+0xac>)
 8004fa8:	4a12      	ldr	r2, [pc, #72]	; (8004ff4 <HAL_InitTick+0xb0>)
 8004faa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004fac:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <HAL_InitTick+0xac>)
 8004fae:	4a12      	ldr	r2, [pc, #72]	; (8004ff8 <HAL_InitTick+0xb4>)
 8004fb0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004fb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <HAL_InitTick+0xac>)
 8004fb4:	6a3a      	ldr	r2, [r7, #32]
 8004fb6:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <HAL_InitTick+0xac>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <HAL_InitTick+0xac>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004fc4:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <HAL_InitTick+0xac>)
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f002 fa14 	bl	80073f4 <HAL_TIM_Base_Init>
 8004fcc:	1e03      	subs	r3, r0, #0
 8004fce:	d105      	bne.n	8004fdc <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <HAL_InitTick+0xac>)
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f002 fa66 	bl	80074a4 <HAL_TIM_Base_Start_IT>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	e000      	b.n	8004fde <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
}
 8004fde:	0018      	movs	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b00a      	add	sp, #40	; 0x28
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	000f4240 	.word	0x000f4240
 8004ff0:	200009e4 	.word	0x200009e4
 8004ff4:	40001000 	.word	0x40001000
 8004ff8:	000003e7 	.word	0x000003e7

08004ffc <NMI_Handler>:


// let's use this mutex for remaining bytes
volatile xSemaphoreHandle xMutex;

void NMI_Handler(void) {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  while (1) {
 8005000:	e7fe      	b.n	8005000 <NMI_Handler+0x4>

08005002 <HardFault_Handler>:
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void) {
 8005002:	b580      	push	{r7, lr}
 8005004:	af00      	add	r7, sp, #0
  while (1) {
 8005006:	e7fe      	b.n	8005006 <HardFault_Handler+0x4>

08005008 <TIM6_IRQHandler>:
  }
}

void TIM6_IRQHandler(void) {
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 800500c:	4b03      	ldr	r3, [pc, #12]	; (800501c <TIM6_IRQHandler+0x14>)
 800500e:	0018      	movs	r0, r3
 8005010:	f002 fa94 	bl	800753c <HAL_TIM_IRQHandler>
}
 8005014:	46c0      	nop			; (mov r8, r8)
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	200009e4 	.word	0x200009e4

08005020 <init_usart>:

void init_usart(uart_user_friendly *user_usart, USART_TypeDef * actual_port) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
	user_usart->port = actual_port;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	601a      	str	r2, [r3, #0]

	// sending buffer
	user_usart->remaining_bytes = 0;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2227      	movs	r2, #39	; 0x27
 8005034:	2100      	movs	r1, #0
 8005036:	5499      	strb	r1, [r3, r2]
	user_usart->send_cursor = 0;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2226      	movs	r2, #38	; 0x26
 800503c:	2100      	movs	r1, #0
 800503e:	5499      	strb	r1, [r3, r2]
	user_usart->send_cycle_buffer[0] = 0;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	711a      	strb	r2, [r3, #4]

	user_usart->event_handler = 0;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800504c:	46c0      	nop			; (mov r8, r8)
 800504e:	46bd      	mov	sp, r7
 8005050:	b002      	add	sp, #8
 8005052:	bd80      	pop	{r7, pc}

08005054 <init_usarts>:

void init_usarts() {
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
	init_usart(&user_uart1, USART1);
 8005058:	4a0b      	ldr	r2, [pc, #44]	; (8005088 <init_usarts+0x34>)
 800505a:	4b0c      	ldr	r3, [pc, #48]	; (800508c <init_usarts+0x38>)
 800505c:	0011      	movs	r1, r2
 800505e:	0018      	movs	r0, r3
 8005060:	f7ff ffde 	bl	8005020 <init_usart>
	user_uart1.can_do_both_dirs = 1;
 8005064:	4b09      	ldr	r3, [pc, #36]	; (800508c <init_usarts+0x38>)
 8005066:	222c      	movs	r2, #44	; 0x2c
 8005068:	2101      	movs	r1, #1
 800506a:	5499      	strb	r1, [r3, r2]
	init_usart(&user_uart2, USART2);
 800506c:	4a08      	ldr	r2, [pc, #32]	; (8005090 <init_usarts+0x3c>)
 800506e:	4b09      	ldr	r3, [pc, #36]	; (8005094 <init_usarts+0x40>)
 8005070:	0011      	movs	r1, r2
 8005072:	0018      	movs	r0, r3
 8005074:	f7ff ffd4 	bl	8005020 <init_usart>
	user_uart2.can_do_both_dirs = 0;
 8005078:	4b06      	ldr	r3, [pc, #24]	; (8005094 <init_usarts+0x40>)
 800507a:	222c      	movs	r2, #44	; 0x2c
 800507c:	2100      	movs	r1, #0
 800507e:	5499      	strb	r1, [r3, r2]
}
 8005080:	46c0      	nop			; (mov r8, r8)
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	46c0      	nop			; (mov r8, r8)
 8005088:	40013800 	.word	0x40013800
 800508c:	20000a2c 	.word	0x20000a2c
 8005090:	40004400 	.word	0x40004400
 8005094:	20000a5c 	.word	0x20000a5c

08005098 <set_incoming_byte_handler>:
}
uart_user_friendly * get_usart2() {
	return &user_uart2;
}

void set_incoming_byte_handler(uint8_t port_num, void (*event_handler)(uint8_t symbol)) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	0002      	movs	r2, r0
 80050a0:	6039      	str	r1, [r7, #0]
 80050a2:	1dfb      	adds	r3, r7, #7
 80050a4:	701a      	strb	r2, [r3, #0]
	if(port_num == 1) {
 80050a6:	1dfb      	adds	r3, r7, #7
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d103      	bne.n	80050b6 <set_incoming_byte_handler+0x1e>
		user_uart1.event_handler = event_handler;
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <set_incoming_byte_handler+0x2c>)
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	629a      	str	r2, [r3, #40]	; 0x28
	} else {
		user_uart2.event_handler = event_handler;
	}
}
 80050b4:	e002      	b.n	80050bc <set_incoming_byte_handler+0x24>
		user_uart2.event_handler = event_handler;
 80050b6:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <set_incoming_byte_handler+0x30>)
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050bc:	46c0      	nop			; (mov r8, r8)
 80050be:	46bd      	mov	sp, r7
 80050c0:	b002      	add	sp, #8
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	20000a2c 	.word	0x20000a2c
 80050c8:	20000a5c 	.word	0x20000a5c

080050cc <send_bytes>:

uint8_t send_bytes(uint8_t port_num, const char * new_data, uint8_t size) {
 80050cc:	b590      	push	{r4, r7, lr}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6039      	str	r1, [r7, #0]
 80050d4:	0011      	movs	r1, r2
 80050d6:	1dfb      	adds	r3, r7, #7
 80050d8:	1c02      	adds	r2, r0, #0
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	1dbb      	adds	r3, r7, #6
 80050de:	1c0a      	adds	r2, r1, #0
 80050e0:	701a      	strb	r2, [r3, #0]
	uart_user_friendly * usart;
	if(port_num == 1) {
 80050e2:	1dfb      	adds	r3, r7, #7
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d102      	bne.n	80050f0 <send_bytes+0x24>
		usart = &user_uart1;
 80050ea:	4b36      	ldr	r3, [pc, #216]	; (80051c4 <send_bytes+0xf8>)
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e001      	b.n	80050f4 <send_bytes+0x28>
	} else {
		usart = &user_uart2;
 80050f0:	4b35      	ldr	r3, [pc, #212]	; (80051c8 <send_bytes+0xfc>)
 80050f2:	60fb      	str	r3, [r7, #12]
	}
	usart_sending_off(usart->port);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	0018      	movs	r0, r3
 80050fa:	f000 f8dd 	bl	80052b8 <usart_sending_off>
	if (!usart->can_do_both_dirs) {
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	222c      	movs	r2, #44	; 0x2c
 8005102:	5c9b      	ldrb	r3, [r3, r2]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d102      	bne.n	800510e <send_bytes+0x42>
		set_rs_mode(RS485_DISABLE);
 8005108:	2000      	movs	r0, #0
 800510a:	f000 f8eb 	bl	80052e4 <set_rs_mode>
	}
	if (usart->remaining_bytes > 0) {
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2227      	movs	r2, #39	; 0x27
 8005112:	5c9b      	ldrb	r3, [r3, r2]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <send_bytes+0x50>
		return 3; // let's not allow sending something while the previous operation is in progress
 8005118:	2303      	movs	r3, #3
 800511a:	e04e      	b.n	80051ba <send_bytes+0xee>
	}
	if (size > MAX_SEND_BUF) {
 800511c:	1dbb      	adds	r3, r7, #6
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b20      	cmp	r3, #32
 8005122:	d901      	bls.n	8005128 <send_bytes+0x5c>
		return 1;
 8005124:	2301      	movs	r3, #1
 8005126:	e048      	b.n	80051ba <send_bytes+0xee>
	}
	uint8_t write_cursor = usart->send_cursor + 1;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2226      	movs	r2, #38	; 0x26
 800512c:	5c9a      	ldrb	r2, [r3, r2]
 800512e:	230b      	movs	r3, #11
 8005130:	18fb      	adds	r3, r7, r3
 8005132:	3201      	adds	r2, #1
 8005134:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<size; i++) {
 8005136:	230a      	movs	r3, #10
 8005138:	18fb      	adds	r3, r7, r3
 800513a:	2200      	movs	r2, #0
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	e02f      	b.n	80051a0 <send_bytes+0xd4>
		if(write_cursor>=MAX_SEND_BUF) write_cursor = write_cursor - MAX_SEND_BUF;
 8005140:	220b      	movs	r2, #11
 8005142:	18bb      	adds	r3, r7, r2
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b1f      	cmp	r3, #31
 8005148:	d904      	bls.n	8005154 <send_bytes+0x88>
 800514a:	18bb      	adds	r3, r7, r2
 800514c:	18ba      	adds	r2, r7, r2
 800514e:	7812      	ldrb	r2, [r2, #0]
 8005150:	3a20      	subs	r2, #32
 8005152:	701a      	strb	r2, [r3, #0]
		if(write_cursor>=MAX_SEND_BUF) {
 8005154:	230b      	movs	r3, #11
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b1f      	cmp	r3, #31
 800515c:	d901      	bls.n	8005162 <send_bytes+0x96>
			return 2;
 800515e:	2302      	movs	r3, #2
 8005160:	e02b      	b.n	80051ba <send_bytes+0xee>
		}
		usart->send_cycle_buffer[write_cursor] = new_data[i];
 8005162:	200a      	movs	r0, #10
 8005164:	183b      	adds	r3, r7, r0
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	18d2      	adds	r2, r2, r3
 800516c:	240b      	movs	r4, #11
 800516e:	193b      	adds	r3, r7, r4
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	7811      	ldrb	r1, [r2, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	18d3      	adds	r3, r2, r3
 8005178:	1c0a      	adds	r2, r1, #0
 800517a:	711a      	strb	r2, [r3, #4]
		usart->remaining_bytes++;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2227      	movs	r2, #39	; 0x27
 8005180:	5c9b      	ldrb	r3, [r3, r2]
 8005182:	3301      	adds	r3, #1
 8005184:	b2d9      	uxtb	r1, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2227      	movs	r2, #39	; 0x27
 800518a:	5499      	strb	r1, [r3, r2]
		write_cursor++;
 800518c:	193b      	adds	r3, r7, r4
 800518e:	781a      	ldrb	r2, [r3, #0]
 8005190:	193b      	adds	r3, r7, r4
 8005192:	3201      	adds	r2, #1
 8005194:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<size; i++) {
 8005196:	183b      	adds	r3, r7, r0
 8005198:	781a      	ldrb	r2, [r3, #0]
 800519a:	183b      	adds	r3, r7, r0
 800519c:	3201      	adds	r2, #1
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	230a      	movs	r3, #10
 80051a2:	18fa      	adds	r2, r7, r3
 80051a4:	1dbb      	adds	r3, r7, #6
 80051a6:	7812      	ldrb	r2, [r2, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d3c8      	bcc.n	8005140 <send_bytes+0x74>
	}
	usart_sending_on(usart->port);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	0018      	movs	r0, r3
 80051b4:	f000 f872 	bl	800529c <usart_sending_on>
	return 0;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	0018      	movs	r0, r3
 80051bc:	46bd      	mov	sp, r7
 80051be:	b005      	add	sp, #20
 80051c0:	bd90      	pop	{r4, r7, pc}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	20000a2c 	.word	0x20000a2c
 80051c8:	20000a5c 	.word	0x20000a5c

080051cc <send_byte_from_buffer>:

uint8_t send_byte_from_buffer(uart_user_friendly * user_uart) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
	USART_TypeDef * port = user_uart->port;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60fb      	str	r3, [r7, #12]
	if(user_uart->remaining_bytes == 0) {
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2227      	movs	r2, #39	; 0x27
 80051de:	5c9b      	ldrb	r3, [r3, r2]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10d      	bne.n	8005200 <send_byte_from_buffer+0x34>
		usart_sending_off(port);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	0018      	movs	r0, r3
 80051e8:	f000 f866 	bl	80052b8 <usart_sending_off>
		if (!user_uart->can_do_both_dirs) {
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	222c      	movs	r2, #44	; 0x2c
 80051f0:	5c9b      	ldrb	r3, [r3, r2]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d102      	bne.n	80051fc <send_byte_from_buffer+0x30>
			set_rs_mode(RS485_RX);
 80051f6:	2002      	movs	r0, #2
 80051f8:	f000 f874 	bl	80052e4 <set_rs_mode>
		}
		return 1;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e02f      	b.n	8005260 <send_byte_from_buffer+0x94>
	}
	if ((port->ISR & USART_ISR_TXE)==0) return 2;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	2280      	movs	r2, #128	; 0x80
 8005206:	4013      	ands	r3, r2
 8005208:	d101      	bne.n	800520e <send_byte_from_buffer+0x42>
 800520a:	2302      	movs	r3, #2
 800520c:	e028      	b.n	8005260 <send_byte_from_buffer+0x94>
	user_uart->send_cursor = user_uart->send_cursor + 1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2226      	movs	r2, #38	; 0x26
 8005212:	5c9b      	ldrb	r3, [r3, r2]
 8005214:	3301      	adds	r3, #1
 8005216:	b2d9      	uxtb	r1, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2226      	movs	r2, #38	; 0x26
 800521c:	5499      	strb	r1, [r3, r2]

	if(user_uart->send_cursor >= MAX_SEND_BUF) user_uart->send_cursor = 0;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2226      	movs	r2, #38	; 0x26
 8005222:	5c9b      	ldrb	r3, [r3, r2]
 8005224:	2b1f      	cmp	r3, #31
 8005226:	d903      	bls.n	8005230 <send_byte_from_buffer+0x64>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2226      	movs	r2, #38	; 0x26
 800522c:	2100      	movs	r1, #0
 800522e:	5499      	strb	r1, [r3, r2]
	uint8_t to_be_sent = (uint8_t)user_uart->send_cycle_buffer[user_uart->send_cursor];
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2226      	movs	r2, #38	; 0x26
 8005234:	5c9b      	ldrb	r3, [r3, r2]
 8005236:	0019      	movs	r1, r3
 8005238:	200b      	movs	r0, #11
 800523a:	183b      	adds	r3, r7, r0
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	1852      	adds	r2, r2, r1
 8005240:	7912      	ldrb	r2, [r2, #4]
 8005242:	701a      	strb	r2, [r3, #0]
	user_uart->remaining_bytes = user_uart->remaining_bytes - 1;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2227      	movs	r2, #39	; 0x27
 8005248:	5c9b      	ldrb	r3, [r3, r2]
 800524a:	3b01      	subs	r3, #1
 800524c:	b2d9      	uxtb	r1, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2227      	movs	r2, #39	; 0x27
 8005252:	5499      	strb	r1, [r3, r2]
	port->TDR = to_be_sent;
 8005254:	183b      	adds	r3, r7, r0
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	851a      	strh	r2, [r3, #40]	; 0x28
	return 0;
 800525e:	2300      	movs	r3, #0
}
 8005260:	0018      	movs	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	b004      	add	sp, #16
 8005266:	bd80      	pop	{r7, pc}

08005268 <process_accepted_byte>:



void process_accepted_byte(uart_user_friendly * user_uart) {
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	uint8_t d = user_uart->port->RDR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005276:	b29a      	uxth	r2, r3
 8005278:	210f      	movs	r1, #15
 800527a:	187b      	adds	r3, r7, r1
 800527c:	701a      	strb	r2, [r3, #0]

	if(user_uart->event_handler) {
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005282:	2b00      	cmp	r3, #0
 8005284:	d006      	beq.n	8005294 <process_accepted_byte+0x2c>
		user_uart->event_handler(d);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528a:	187a      	adds	r2, r7, r1
 800528c:	7812      	ldrb	r2, [r2, #0]
 800528e:	0010      	movs	r0, r2
 8005290:	4798      	blx	r3
	}
	return;
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	46c0      	nop			; (mov r8, r8)

}
 8005296:	46bd      	mov	sp, r7
 8005298:	b004      	add	sp, #16
 800529a:	bd80      	pop	{r7, pc}

0800529c <usart_sending_on>:

void usart_sending_on(USART_TypeDef * usart) {
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
	usart->CR1 |= USART_CR1_TXEIE | USART_CR1_TE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2288      	movs	r2, #136	; 0x88
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	601a      	str	r2, [r3, #0]
}
 80052b0:	46c0      	nop			; (mov r8, r8)
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b002      	add	sp, #8
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <usart_sending_off>:

void usart_sending_off(USART_TypeDef * usart) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	usart->CR1 &= ~(USART_CR1_TXEIE | USART_CR1_TE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2288      	movs	r2, #136	; 0x88
 80052c6:	4393      	bics	r3, r2
 80052c8:	001a      	movs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	601a      	str	r2, [r3, #0]
	usart->CR1 |= USART_CR1_RE  | USART_CR1_RXNEIE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2224      	movs	r2, #36	; 0x24
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	601a      	str	r2, [r3, #0]
}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	46bd      	mov	sp, r7
 80052de:	b002      	add	sp, #8
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <set_rs_mode>:

void set_rs_mode(uint8_t new_mode) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	0002      	movs	r2, r0
 80052ec:	1dfb      	adds	r3, r7, #7
 80052ee:	701a      	strb	r2, [r3, #0]
	USART_TypeDef * usart = USART2;
 80052f0:	4b18      	ldr	r3, [pc, #96]	; (8005354 <set_rs_mode+0x70>)
 80052f2:	60fb      	str	r3, [r7, #12]

	if (new_mode == RS485_DISABLE) {
 80052f4:	1dfb      	adds	r3, r7, #7
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d107      	bne.n	800530c <set_rs_mode+0x28>
		usart->CR1 &= ~(USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_TXEIE);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	22ac      	movs	r2, #172	; 0xac
 8005302:	4393      	bics	r3, r2
 8005304:	001a      	movs	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	601a      	str	r2, [r3, #0]
		usart->CR1 &= ~(USART_CR1_RE  | USART_CR1_RXNEIE);
	} else {
		usart->CR1 &= ~(USART_CR1_TE | USART_CR1_TXEIE);
		usart->CR1 |= USART_CR1_RE  | USART_CR1_RXNEIE;
	}
}
 800530a:	e01e      	b.n	800534a <set_rs_mode+0x66>
	} else if (new_mode == RS485_TX) {
 800530c:	1dfb      	adds	r3, r7, #7
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d10d      	bne.n	8005330 <set_rs_mode+0x4c>
		usart->CR1 |= USART_CR1_TE | USART_CR1_TXEIE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2288      	movs	r2, #136	; 0x88
 800531a:	431a      	orrs	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	601a      	str	r2, [r3, #0]
		usart->CR1 &= ~(USART_CR1_RE  | USART_CR1_RXNEIE);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2224      	movs	r2, #36	; 0x24
 8005326:	4393      	bics	r3, r2
 8005328:	001a      	movs	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	601a      	str	r2, [r3, #0]
}
 800532e:	e00c      	b.n	800534a <set_rs_mode+0x66>
		usart->CR1 &= ~(USART_CR1_TE | USART_CR1_TXEIE);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2288      	movs	r2, #136	; 0x88
 8005336:	4393      	bics	r3, r2
 8005338:	001a      	movs	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	601a      	str	r2, [r3, #0]
		usart->CR1 |= USART_CR1_RE  | USART_CR1_RXNEIE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2224      	movs	r2, #36	; 0x24
 8005344:	431a      	orrs	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	601a      	str	r2, [r3, #0]
}
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	46bd      	mov	sp, r7
 800534e:	b004      	add	sp, #16
 8005350:	bd80      	pop	{r7, pc}
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	40004400 	.word	0x40004400

08005358 <default_usart_handler>:

void default_usart_handler(uart_user_friendly * user_uart) {
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
	USART_TypeDef * usart = user_uart->port;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	60fb      	str	r3, [r7, #12]
	if(usart->ISR & USART_ISR_RXNE) {
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	2220      	movs	r2, #32
 800536c:	4013      	ands	r3, r2
 800536e:	d004      	beq.n	800537a <default_usart_handler+0x22>
		process_accepted_byte(user_uart);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	0018      	movs	r0, r3
 8005374:	f7ff ff78 	bl	8005268 <process_accepted_byte>
		return;
 8005378:	e028      	b.n	80053cc <default_usart_handler+0x74>
	}
	if(usart->ISR & USART_ISR_ORE) {
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	2208      	movs	r2, #8
 8005380:	4013      	ands	r3, r2
 8005382:	d00a      	beq.n	800539a <default_usart_handler+0x42>
		usart->ICR = (UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	220f      	movs	r2, #15
 8005388:	621a      	str	r2, [r3, #32]
		usart->CR1 &= ~USART_CR1_IDLEIE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2210      	movs	r2, #16
 8005390:	4393      	bics	r3, r2
 8005392:	001a      	movs	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	601a      	str	r2, [r3, #0]
		return;
 8005398:	e018      	b.n	80053cc <default_usart_handler+0x74>
	}
	if(usart->ISR & USART_ISR_TXE) {
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	2280      	movs	r2, #128	; 0x80
 80053a0:	4013      	ands	r3, r2
 80053a2:	d004      	beq.n	80053ae <default_usart_handler+0x56>
		send_byte_from_buffer(user_uart);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	0018      	movs	r0, r3
 80053a8:	f7ff ff10 	bl	80051cc <send_byte_from_buffer>
		return;
 80053ac:	e00e      	b.n	80053cc <default_usart_handler+0x74>
	}
	if(usart->ISR & USART_ISR_FE) {
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	2202      	movs	r2, #2
 80053b4:	4013      	ands	r3, r2
 80053b6:	d009      	beq.n	80053cc <default_usart_handler+0x74>
		usart->ICR = (UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	220f      	movs	r2, #15
 80053bc:	621a      	str	r2, [r3, #32]
		usart->CR1 &= ~USART_CR1_IDLEIE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2210      	movs	r2, #16
 80053c4:	4393      	bics	r3, r2
 80053c6:	001a      	movs	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	601a      	str	r2, [r3, #0]
	}
}
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b004      	add	sp, #16
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <flash_read>:

uint32_t flash_read(){
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
	uint32_t * res = (uint32_t*)(FLASH_BANK1_END - 2047);
 80053da:	4b04      	ldr	r3, [pc, #16]	; (80053ec <flash_read+0x18>)
 80053dc:	607b      	str	r3, [r7, #4]
    return res[0];
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
}
 80053e2:	0018      	movs	r0, r3
 80053e4:	46bd      	mov	sp, r7
 80053e6:	b002      	add	sp, #8
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	0801f800 	.word	0x0801f800

080053f0 <flash_write>:

void flash_write(uint32_t data){
 80053f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.PageAddress = FLASH_BANK1_END - 2047;
 80053f8:	260c      	movs	r6, #12
 80053fa:	19bb      	adds	r3, r7, r6
 80053fc:	4a13      	ldr	r2, [pc, #76]	; (800544c <flash_write+0x5c>)
 80053fe:	605a      	str	r2, [r3, #4]
    EraseInitStruct.TypeErase = TYPEERASE_PAGES;
 8005400:	19bb      	adds	r3, r7, r6
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
    EraseInitStruct.NbPages = 1;
 8005406:	19bb      	adds	r3, r7, r6
 8005408:	2201      	movs	r2, #1
 800540a:	609a      	str	r2, [r3, #8]
    uint32_t PageError = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	60bb      	str	r3, [r7, #8]
    if (HAL_FLASH_Unlock() == HAL_OK) {
 8005410:	f000 fa98 	bl	8005944 <HAL_FLASH_Unlock>
 8005414:	1e03      	subs	r3, r0, #0
 8005416:	d114      	bne.n	8005442 <flash_write+0x52>
    	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK) {
 8005418:	2308      	movs	r3, #8
 800541a:	18fa      	adds	r2, r7, r3
 800541c:	19bb      	adds	r3, r7, r6
 800541e:	0011      	movs	r1, r2
 8005420:	0018      	movs	r0, r3
 8005422:	f000 fb4f 	bl	8005ac4 <HAL_FLASHEx_Erase>
 8005426:	1e03      	subs	r3, r0, #0
 8005428:	d109      	bne.n	800543e <flash_write+0x4e>
    		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_BANK1_END - 2047, data);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	001c      	movs	r4, r3
 800542e:	2300      	movs	r3, #0
 8005430:	001d      	movs	r5, r3
 8005432:	4906      	ldr	r1, [pc, #24]	; (800544c <flash_write+0x5c>)
 8005434:	0022      	movs	r2, r4
 8005436:	002b      	movs	r3, r5
 8005438:	2002      	movs	r0, #2
 800543a:	f000 f9ed 	bl	8005818 <HAL_FLASH_Program>
    	}
    	HAL_FLASH_Lock();
 800543e:	f000 faa7 	bl	8005990 <HAL_FLASH_Lock>
    }
}
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	46bd      	mov	sp, r7
 8005446:	b007      	add	sp, #28
 8005448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	0801f800 	.word	0x0801f800

08005450 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
	default_usart_handler(&user_uart1);
 8005454:	4b03      	ldr	r3, [pc, #12]	; (8005464 <USART1_IRQHandler+0x14>)
 8005456:	0018      	movs	r0, r3
 8005458:	f7ff ff7e 	bl	8005358 <default_usart_handler>
}
 800545c:	46c0      	nop			; (mov r8, r8)
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	20000a2c 	.word	0x20000a2c

08005468 <USART2_IRQHandler>:
void USART2_IRQHandler(void) {
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
	default_usart_handler(&user_uart2);
 800546c:	4b03      	ldr	r3, [pc, #12]	; (800547c <USART2_IRQHandler+0x14>)
 800546e:	0018      	movs	r0, r3
 8005470:	f7ff ff72 	bl	8005358 <default_usart_handler>
}
 8005474:	46c0      	nop			; (mov r8, r8)
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	20000a5c 	.word	0x20000a5c

08005480 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
	return 1;
 8005484:	2301      	movs	r3, #1
}
 8005486:	0018      	movs	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <_kill>:

int _kill(int pid, int sig)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005496:	f005 f9dd 	bl	800a854 <__errno>
 800549a:	0003      	movs	r3, r0
 800549c:	2216      	movs	r2, #22
 800549e:	601a      	str	r2, [r3, #0]
	return -1;
 80054a0:	2301      	movs	r3, #1
 80054a2:	425b      	negs	r3, r3
}
 80054a4:	0018      	movs	r0, r3
 80054a6:	46bd      	mov	sp, r7
 80054a8:	b002      	add	sp, #8
 80054aa:	bd80      	pop	{r7, pc}

080054ac <_exit>:

void _exit (int status)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80054b4:	2301      	movs	r3, #1
 80054b6:	425a      	negs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	0011      	movs	r1, r2
 80054bc:	0018      	movs	r0, r3
 80054be:	f7ff ffe5 	bl	800548c <_kill>
	while (1) {}		/* Make sure we hang here */
 80054c2:	e7fe      	b.n	80054c2 <_exit+0x16>

080054c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e00a      	b.n	80054ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80054d6:	e000      	b.n	80054da <_read+0x16>
 80054d8:	bf00      	nop
 80054da:	0001      	movs	r1, r0
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	60ba      	str	r2, [r7, #8]
 80054e2:	b2ca      	uxtb	r2, r1
 80054e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	3301      	adds	r3, #1
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	dbf0      	blt.n	80054d6 <_read+0x12>
	}

return len;
 80054f4:	687b      	ldr	r3, [r7, #4]
}
 80054f6:	0018      	movs	r0, r3
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b006      	add	sp, #24
 80054fc:	bd80      	pop	{r7, pc}

080054fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b086      	sub	sp, #24
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	e009      	b.n	8005524 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	60ba      	str	r2, [r7, #8]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	0018      	movs	r0, r3
 800551a:	e000      	b.n	800551e <_write+0x20>
 800551c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	3301      	adds	r3, #1
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	429a      	cmp	r2, r3
 800552a:	dbf1      	blt.n	8005510 <_write+0x12>
	}
	return len;
 800552c:	687b      	ldr	r3, [r7, #4]
}
 800552e:	0018      	movs	r0, r3
 8005530:	46bd      	mov	sp, r7
 8005532:	b006      	add	sp, #24
 8005534:	bd80      	pop	{r7, pc}

08005536 <_close>:

int _close(int file)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b082      	sub	sp, #8
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
	return -1;
 800553e:	2301      	movs	r3, #1
 8005540:	425b      	negs	r3, r3
}
 8005542:	0018      	movs	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	b002      	add	sp, #8
 8005548:	bd80      	pop	{r7, pc}

0800554a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	2280      	movs	r2, #128	; 0x80
 8005558:	0192      	lsls	r2, r2, #6
 800555a:	605a      	str	r2, [r3, #4]
	return 0;
 800555c:	2300      	movs	r3, #0
}
 800555e:	0018      	movs	r0, r3
 8005560:	46bd      	mov	sp, r7
 8005562:	b002      	add	sp, #8
 8005564:	bd80      	pop	{r7, pc}

08005566 <_isatty>:

int _isatty(int file)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
	return 1;
 800556e:	2301      	movs	r3, #1
}
 8005570:	0018      	movs	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	b002      	add	sp, #8
 8005576:	bd80      	pop	{r7, pc}

08005578 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
	return 0;
 8005584:	2300      	movs	r3, #0
}
 8005586:	0018      	movs	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	b004      	add	sp, #16
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005598:	4a14      	ldr	r2, [pc, #80]	; (80055ec <_sbrk+0x5c>)
 800559a:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <_sbrk+0x60>)
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055a4:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <_sbrk+0x64>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d102      	bne.n	80055b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055ac:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <_sbrk+0x64>)
 80055ae:	4a12      	ldr	r2, [pc, #72]	; (80055f8 <_sbrk+0x68>)
 80055b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055b2:	4b10      	ldr	r3, [pc, #64]	; (80055f4 <_sbrk+0x64>)
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	18d3      	adds	r3, r2, r3
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d207      	bcs.n	80055d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055c0:	f005 f948 	bl	800a854 <__errno>
 80055c4:	0003      	movs	r3, r0
 80055c6:	220c      	movs	r2, #12
 80055c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055ca:	2301      	movs	r3, #1
 80055cc:	425b      	negs	r3, r3
 80055ce:	e009      	b.n	80055e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055d0:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <_sbrk+0x64>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055d6:	4b07      	ldr	r3, [pc, #28]	; (80055f4 <_sbrk+0x64>)
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	18d2      	adds	r2, r2, r3
 80055de:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <_sbrk+0x64>)
 80055e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80055e2:	68fb      	ldr	r3, [r7, #12]
}
 80055e4:	0018      	movs	r0, r3
 80055e6:	46bd      	mov	sp, r7
 80055e8:	b006      	add	sp, #24
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	20004000 	.word	0x20004000
 80055f0:	00000400 	.word	0x00000400
 80055f4:	20000a8c 	.word	0x20000a8c
 80055f8:	20002548 	.word	0x20002548

080055fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005600:	46c0      	nop			; (mov r8, r8)
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005608:	480d      	ldr	r0, [pc, #52]	; (8005640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800560a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800560c:	480d      	ldr	r0, [pc, #52]	; (8005644 <LoopForever+0x6>)
  ldr r1, =_edata
 800560e:	490e      	ldr	r1, [pc, #56]	; (8005648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005610:	4a0e      	ldr	r2, [pc, #56]	; (800564c <LoopForever+0xe>)
  movs r3, #0
 8005612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005614:	e002      	b.n	800561c <LoopCopyDataInit>

08005616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800561a:	3304      	adds	r3, #4

0800561c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800561c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800561e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005620:	d3f9      	bcc.n	8005616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005622:	4a0b      	ldr	r2, [pc, #44]	; (8005650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005624:	4c0b      	ldr	r4, [pc, #44]	; (8005654 <LoopForever+0x16>)
  movs r3, #0
 8005626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005628:	e001      	b.n	800562e <LoopFillZerobss>

0800562a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800562a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800562c:	3204      	adds	r2, #4

0800562e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800562e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005630:	d3fb      	bcc.n	800562a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005632:	f7ff ffe3 	bl	80055fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005636:	f005 f913 	bl	800a860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800563a:	f7fd fa9d 	bl	8002b78 <main>

0800563e <LoopForever>:

LoopForever:
    b LoopForever
 800563e:	e7fe      	b.n	800563e <LoopForever>
  ldr   r0, =_estack
 8005640:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005648:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800564c:	0800e894 	.word	0x0800e894
  ldr r2, =_sbss
 8005650:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8005654:	20002544 	.word	0x20002544

08005658 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005658:	e7fe      	b.n	8005658 <ADC1_IRQHandler>
	...

0800565c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <HAL_Init+0x24>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4b06      	ldr	r3, [pc, #24]	; (8005680 <HAL_Init+0x24>)
 8005666:	2110      	movs	r1, #16
 8005668:	430a      	orrs	r2, r1
 800566a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800566c:	2000      	movs	r0, #0
 800566e:	f7ff fc69 	bl	8004f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005672:	f7ff fb29 	bl	8004cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	0018      	movs	r0, r3
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	40022000 	.word	0x40022000

08005684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005688:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <HAL_IncTick+0x1c>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	001a      	movs	r2, r3
 800568e:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <HAL_IncTick+0x20>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	18d2      	adds	r2, r2, r3
 8005694:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <HAL_IncTick+0x20>)
 8005696:	601a      	str	r2, [r3, #0]
}
 8005698:	46c0      	nop			; (mov r8, r8)
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	2000001c 	.word	0x2000001c
 80056a4:	20000a90 	.word	0x20000a90

080056a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  return uwTick;
 80056ac:	4b02      	ldr	r3, [pc, #8]	; (80056b8 <HAL_GetTick+0x10>)
 80056ae:	681b      	ldr	r3, [r3, #0]
}
 80056b0:	0018      	movs	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	20000a90 	.word	0x20000a90

080056bc <__NVIC_EnableIRQ>:
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	0002      	movs	r2, r0
 80056c4:	1dfb      	adds	r3, r7, #7
 80056c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80056c8:	1dfb      	adds	r3, r7, #7
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b7f      	cmp	r3, #127	; 0x7f
 80056ce:	d809      	bhi.n	80056e4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056d0:	1dfb      	adds	r3, r7, #7
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	001a      	movs	r2, r3
 80056d6:	231f      	movs	r3, #31
 80056d8:	401a      	ands	r2, r3
 80056da:	4b04      	ldr	r3, [pc, #16]	; (80056ec <__NVIC_EnableIRQ+0x30>)
 80056dc:	2101      	movs	r1, #1
 80056de:	4091      	lsls	r1, r2
 80056e0:	000a      	movs	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	46c0      	nop			; (mov r8, r8)
 80056e6:	46bd      	mov	sp, r7
 80056e8:	b002      	add	sp, #8
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	e000e100 	.word	0xe000e100

080056f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056f0:	b590      	push	{r4, r7, lr}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	0002      	movs	r2, r0
 80056f8:	6039      	str	r1, [r7, #0]
 80056fa:	1dfb      	adds	r3, r7, #7
 80056fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80056fe:	1dfb      	adds	r3, r7, #7
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b7f      	cmp	r3, #127	; 0x7f
 8005704:	d828      	bhi.n	8005758 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005706:	4a2f      	ldr	r2, [pc, #188]	; (80057c4 <__NVIC_SetPriority+0xd4>)
 8005708:	1dfb      	adds	r3, r7, #7
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	b25b      	sxtb	r3, r3
 800570e:	089b      	lsrs	r3, r3, #2
 8005710:	33c0      	adds	r3, #192	; 0xc0
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	589b      	ldr	r3, [r3, r2]
 8005716:	1dfa      	adds	r2, r7, #7
 8005718:	7812      	ldrb	r2, [r2, #0]
 800571a:	0011      	movs	r1, r2
 800571c:	2203      	movs	r2, #3
 800571e:	400a      	ands	r2, r1
 8005720:	00d2      	lsls	r2, r2, #3
 8005722:	21ff      	movs	r1, #255	; 0xff
 8005724:	4091      	lsls	r1, r2
 8005726:	000a      	movs	r2, r1
 8005728:	43d2      	mvns	r2, r2
 800572a:	401a      	ands	r2, r3
 800572c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	019b      	lsls	r3, r3, #6
 8005732:	22ff      	movs	r2, #255	; 0xff
 8005734:	401a      	ands	r2, r3
 8005736:	1dfb      	adds	r3, r7, #7
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	0018      	movs	r0, r3
 800573c:	2303      	movs	r3, #3
 800573e:	4003      	ands	r3, r0
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005744:	481f      	ldr	r0, [pc, #124]	; (80057c4 <__NVIC_SetPriority+0xd4>)
 8005746:	1dfb      	adds	r3, r7, #7
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	b25b      	sxtb	r3, r3
 800574c:	089b      	lsrs	r3, r3, #2
 800574e:	430a      	orrs	r2, r1
 8005750:	33c0      	adds	r3, #192	; 0xc0
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005756:	e031      	b.n	80057bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005758:	4a1b      	ldr	r2, [pc, #108]	; (80057c8 <__NVIC_SetPriority+0xd8>)
 800575a:	1dfb      	adds	r3, r7, #7
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	0019      	movs	r1, r3
 8005760:	230f      	movs	r3, #15
 8005762:	400b      	ands	r3, r1
 8005764:	3b08      	subs	r3, #8
 8005766:	089b      	lsrs	r3, r3, #2
 8005768:	3306      	adds	r3, #6
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	18d3      	adds	r3, r2, r3
 800576e:	3304      	adds	r3, #4
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	1dfa      	adds	r2, r7, #7
 8005774:	7812      	ldrb	r2, [r2, #0]
 8005776:	0011      	movs	r1, r2
 8005778:	2203      	movs	r2, #3
 800577a:	400a      	ands	r2, r1
 800577c:	00d2      	lsls	r2, r2, #3
 800577e:	21ff      	movs	r1, #255	; 0xff
 8005780:	4091      	lsls	r1, r2
 8005782:	000a      	movs	r2, r1
 8005784:	43d2      	mvns	r2, r2
 8005786:	401a      	ands	r2, r3
 8005788:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	019b      	lsls	r3, r3, #6
 800578e:	22ff      	movs	r2, #255	; 0xff
 8005790:	401a      	ands	r2, r3
 8005792:	1dfb      	adds	r3, r7, #7
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	0018      	movs	r0, r3
 8005798:	2303      	movs	r3, #3
 800579a:	4003      	ands	r3, r0
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80057a0:	4809      	ldr	r0, [pc, #36]	; (80057c8 <__NVIC_SetPriority+0xd8>)
 80057a2:	1dfb      	adds	r3, r7, #7
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	001c      	movs	r4, r3
 80057a8:	230f      	movs	r3, #15
 80057aa:	4023      	ands	r3, r4
 80057ac:	3b08      	subs	r3, #8
 80057ae:	089b      	lsrs	r3, r3, #2
 80057b0:	430a      	orrs	r2, r1
 80057b2:	3306      	adds	r3, #6
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	18c3      	adds	r3, r0, r3
 80057b8:	3304      	adds	r3, #4
 80057ba:	601a      	str	r2, [r3, #0]
}
 80057bc:	46c0      	nop			; (mov r8, r8)
 80057be:	46bd      	mov	sp, r7
 80057c0:	b003      	add	sp, #12
 80057c2:	bd90      	pop	{r4, r7, pc}
 80057c4:	e000e100 	.word	0xe000e100
 80057c8:	e000ed00 	.word	0xe000ed00

080057cc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
 80057d6:	210f      	movs	r1, #15
 80057d8:	187b      	adds	r3, r7, r1
 80057da:	1c02      	adds	r2, r0, #0
 80057dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	187b      	adds	r3, r7, r1
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	b25b      	sxtb	r3, r3
 80057e6:	0011      	movs	r1, r2
 80057e8:	0018      	movs	r0, r3
 80057ea:	f7ff ff81 	bl	80056f0 <__NVIC_SetPriority>
}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	46bd      	mov	sp, r7
 80057f2:	b004      	add	sp, #16
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	0002      	movs	r2, r0
 80057fe:	1dfb      	adds	r3, r7, #7
 8005800:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005802:	1dfb      	adds	r3, r7, #7
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	b25b      	sxtb	r3, r3
 8005808:	0018      	movs	r0, r3
 800580a:	f7ff ff57 	bl	80056bc <__NVIC_EnableIRQ>
}
 800580e:	46c0      	nop			; (mov r8, r8)
 8005810:	46bd      	mov	sp, r7
 8005812:	b002      	add	sp, #8
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	603a      	str	r2, [r7, #0]
 8005824:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005826:	2317      	movs	r3, #23
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 800582e:	2316      	movs	r3, #22
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	2200      	movs	r2, #0
 8005834:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8005836:	2315      	movs	r3, #21
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800583e:	4b3e      	ldr	r3, [pc, #248]	; (8005938 <HAL_FLASH_Program+0x120>)
 8005840:	7e1b      	ldrb	r3, [r3, #24]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_FLASH_Program+0x32>
 8005846:	2302      	movs	r3, #2
 8005848:	e072      	b.n	8005930 <HAL_FLASH_Program+0x118>
 800584a:	4b3b      	ldr	r3, [pc, #236]	; (8005938 <HAL_FLASH_Program+0x120>)
 800584c:	2201      	movs	r2, #1
 800584e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005850:	2317      	movs	r3, #23
 8005852:	18fe      	adds	r6, r7, r3
 8005854:	4b39      	ldr	r3, [pc, #228]	; (800593c <HAL_FLASH_Program+0x124>)
 8005856:	0018      	movs	r0, r3
 8005858:	f000 f8c4 	bl	80059e4 <FLASH_WaitForLastOperation>
 800585c:	0003      	movs	r3, r0
 800585e:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8005860:	2317      	movs	r3, #23
 8005862:	18fb      	adds	r3, r7, r3
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d15c      	bne.n	8005924 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d104      	bne.n	800587a <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005870:	2315      	movs	r3, #21
 8005872:	18fb      	adds	r3, r7, r3
 8005874:	2201      	movs	r2, #1
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	e00b      	b.n	8005892 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d104      	bne.n	800588a <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005880:	2315      	movs	r3, #21
 8005882:	18fb      	adds	r3, r7, r3
 8005884:	2202      	movs	r2, #2
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	e003      	b.n	8005892 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800588a:	2315      	movs	r3, #21
 800588c:	18fb      	adds	r3, r7, r3
 800588e:	2204      	movs	r2, #4
 8005890:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8005892:	2316      	movs	r3, #22
 8005894:	18fb      	adds	r3, r7, r3
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e039      	b.n	8005910 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800589c:	2116      	movs	r1, #22
 800589e:	187b      	adds	r3, r7, r1
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	005a      	lsls	r2, r3, #1
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	18d0      	adds	r0, r2, r3
 80058a8:	187b      	adds	r3, r7, r1
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	001a      	movs	r2, r3
 80058b0:	3a20      	subs	r2, #32
 80058b2:	2a00      	cmp	r2, #0
 80058b4:	db03      	blt.n	80058be <HAL_FLASH_Program+0xa6>
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	40d1      	lsrs	r1, r2
 80058ba:	000c      	movs	r4, r1
 80058bc:	e008      	b.n	80058d0 <HAL_FLASH_Program+0xb8>
 80058be:	2220      	movs	r2, #32
 80058c0:	1ad2      	subs	r2, r2, r3
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	4091      	lsls	r1, r2
 80058c6:	000a      	movs	r2, r1
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	40d9      	lsrs	r1, r3
 80058cc:	000c      	movs	r4, r1
 80058ce:	4314      	orrs	r4, r2
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	40da      	lsrs	r2, r3
 80058d4:	0015      	movs	r5, r2
 80058d6:	b2a3      	uxth	r3, r4
 80058d8:	0019      	movs	r1, r3
 80058da:	f000 f867 	bl	80059ac <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80058de:	2317      	movs	r3, #23
 80058e0:	18fe      	adds	r6, r7, r3
 80058e2:	4b16      	ldr	r3, [pc, #88]	; (800593c <HAL_FLASH_Program+0x124>)
 80058e4:	0018      	movs	r0, r3
 80058e6:	f000 f87d 	bl	80059e4 <FLASH_WaitForLastOperation>
 80058ea:	0003      	movs	r3, r0
 80058ec:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80058ee:	4b14      	ldr	r3, [pc, #80]	; (8005940 <HAL_FLASH_Program+0x128>)
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	4b13      	ldr	r3, [pc, #76]	; (8005940 <HAL_FLASH_Program+0x128>)
 80058f4:	2101      	movs	r1, #1
 80058f6:	438a      	bics	r2, r1
 80058f8:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80058fa:	2317      	movs	r3, #23
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10e      	bne.n	8005922 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8005904:	2116      	movs	r1, #22
 8005906:	187b      	adds	r3, r7, r1
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	187b      	adds	r3, r7, r1
 800590c:	3201      	adds	r2, #1
 800590e:	701a      	strb	r2, [r3, #0]
 8005910:	2316      	movs	r3, #22
 8005912:	18fa      	adds	r2, r7, r3
 8005914:	2315      	movs	r3, #21
 8005916:	18fb      	adds	r3, r7, r3
 8005918:	7812      	ldrb	r2, [r2, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d3bd      	bcc.n	800589c <HAL_FLASH_Program+0x84>
 8005920:	e000      	b.n	8005924 <HAL_FLASH_Program+0x10c>
      {
        break;
 8005922:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005924:	4b04      	ldr	r3, [pc, #16]	; (8005938 <HAL_FLASH_Program+0x120>)
 8005926:	2200      	movs	r2, #0
 8005928:	761a      	strb	r2, [r3, #24]

  return status;
 800592a:	2317      	movs	r3, #23
 800592c:	18fb      	adds	r3, r7, r3
 800592e:	781b      	ldrb	r3, [r3, #0]
}
 8005930:	0018      	movs	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	b007      	add	sp, #28
 8005936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005938:	20000a98 	.word	0x20000a98
 800593c:	0000c350 	.word	0x0000c350
 8005940:	40022000 	.word	0x40022000

08005944 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800594a:	1dfb      	adds	r3, r7, #7
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005950:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <HAL_FLASH_Unlock+0x40>)
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	2280      	movs	r2, #128	; 0x80
 8005956:	4013      	ands	r3, r2
 8005958:	d00d      	beq.n	8005976 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800595a:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <HAL_FLASH_Unlock+0x40>)
 800595c:	4a0a      	ldr	r2, [pc, #40]	; (8005988 <HAL_FLASH_Unlock+0x44>)
 800595e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005960:	4b08      	ldr	r3, [pc, #32]	; (8005984 <HAL_FLASH_Unlock+0x40>)
 8005962:	4a0a      	ldr	r2, [pc, #40]	; (800598c <HAL_FLASH_Unlock+0x48>)
 8005964:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005966:	4b07      	ldr	r3, [pc, #28]	; (8005984 <HAL_FLASH_Unlock+0x40>)
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	2280      	movs	r2, #128	; 0x80
 800596c:	4013      	ands	r3, r2
 800596e:	d002      	beq.n	8005976 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005970:	1dfb      	adds	r3, r7, #7
 8005972:	2201      	movs	r2, #1
 8005974:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005976:	1dfb      	adds	r3, r7, #7
 8005978:	781b      	ldrb	r3, [r3, #0]
}
 800597a:	0018      	movs	r0, r3
 800597c:	46bd      	mov	sp, r7
 800597e:	b002      	add	sp, #8
 8005980:	bd80      	pop	{r7, pc}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	40022000 	.word	0x40022000
 8005988:	45670123 	.word	0x45670123
 800598c:	cdef89ab 	.word	0xcdef89ab

08005990 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005994:	4b04      	ldr	r3, [pc, #16]	; (80059a8 <HAL_FLASH_Lock+0x18>)
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	4b03      	ldr	r3, [pc, #12]	; (80059a8 <HAL_FLASH_Lock+0x18>)
 800599a:	2180      	movs	r1, #128	; 0x80
 800599c:	430a      	orrs	r2, r1
 800599e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	0018      	movs	r0, r3
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40022000 	.word	0x40022000

080059ac <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	000a      	movs	r2, r1
 80059b6:	1cbb      	adds	r3, r7, #2
 80059b8:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80059ba:	4b08      	ldr	r3, [pc, #32]	; (80059dc <FLASH_Program_HalfWord+0x30>)
 80059bc:	2200      	movs	r2, #0
 80059be:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80059c0:	4b07      	ldr	r3, [pc, #28]	; (80059e0 <FLASH_Program_HalfWord+0x34>)
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <FLASH_Program_HalfWord+0x34>)
 80059c6:	2101      	movs	r1, #1
 80059c8:	430a      	orrs	r2, r1
 80059ca:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	1cba      	adds	r2, r7, #2
 80059d0:	8812      	ldrh	r2, [r2, #0]
 80059d2:	801a      	strh	r2, [r3, #0]
}
 80059d4:	46c0      	nop			; (mov r8, r8)
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b002      	add	sp, #8
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20000a98 	.word	0x20000a98
 80059e0:	40022000 	.word	0x40022000

080059e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80059ec:	f7ff fe5c 	bl	80056a8 <HAL_GetTick>
 80059f0:	0003      	movs	r3, r0
 80059f2:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80059f4:	e00f      	b.n	8005a16 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3301      	adds	r3, #1
 80059fa:	d00c      	beq.n	8005a16 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d007      	beq.n	8005a12 <FLASH_WaitForLastOperation+0x2e>
 8005a02:	f7ff fe51 	bl	80056a8 <HAL_GetTick>
 8005a06:	0002      	movs	r2, r0
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d201      	bcs.n	8005a16 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e01f      	b.n	8005a56 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005a16:	4b12      	ldr	r3, [pc, #72]	; (8005a60 <FLASH_WaitForLastOperation+0x7c>)
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d0e9      	beq.n	80059f6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005a22:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <FLASH_WaitForLastOperation+0x7c>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	4013      	ands	r3, r2
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d102      	bne.n	8005a34 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <FLASH_WaitForLastOperation+0x7c>)
 8005a30:	2220      	movs	r2, #32
 8005a32:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005a34:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <FLASH_WaitForLastOperation+0x7c>)
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	2210      	movs	r2, #16
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b10      	cmp	r3, #16
 8005a3e:	d005      	beq.n	8005a4c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005a40:	4b07      	ldr	r3, [pc, #28]	; (8005a60 <FLASH_WaitForLastOperation+0x7c>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	2204      	movs	r2, #4
 8005a46:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d103      	bne.n	8005a54 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005a4c:	f000 f80a 	bl	8005a64 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e000      	b.n	8005a56 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	0018      	movs	r0, r3
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	b004      	add	sp, #16
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	40022000 	.word	0x40022000

08005a64 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005a6e:	4b13      	ldr	r3, [pc, #76]	; (8005abc <FLASH_SetErrorCode+0x58>)
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	2210      	movs	r2, #16
 8005a74:	4013      	ands	r3, r2
 8005a76:	2b10      	cmp	r3, #16
 8005a78:	d109      	bne.n	8005a8e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005a7a:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <FLASH_SetErrorCode+0x5c>)
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	431a      	orrs	r2, r3
 8005a82:	4b0f      	ldr	r3, [pc, #60]	; (8005ac0 <FLASH_SetErrorCode+0x5c>)
 8005a84:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2210      	movs	r2, #16
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005a8e:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <FLASH_SetErrorCode+0x58>)
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	2204      	movs	r2, #4
 8005a94:	4013      	ands	r3, r2
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d109      	bne.n	8005aae <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005a9a:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <FLASH_SetErrorCode+0x5c>)
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <FLASH_SetErrorCode+0x5c>)
 8005aa4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2204      	movs	r2, #4
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005aae:	4b03      	ldr	r3, [pc, #12]	; (8005abc <FLASH_SetErrorCode+0x58>)
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	60da      	str	r2, [r3, #12]
}  
 8005ab4:	46c0      	nop			; (mov r8, r8)
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b002      	add	sp, #8
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40022000 	.word	0x40022000
 8005ac0:	20000a98 	.word	0x20000a98

08005ac4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005ac4:	b5b0      	push	{r4, r5, r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ace:	230f      	movs	r3, #15
 8005ad0:	18fb      	adds	r3, r7, r3
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005ada:	4b32      	ldr	r3, [pc, #200]	; (8005ba4 <HAL_FLASHEx_Erase+0xe0>)
 8005adc:	7e1b      	ldrb	r3, [r3, #24]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_FLASHEx_Erase+0x22>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e05a      	b.n	8005b9c <HAL_FLASHEx_Erase+0xd8>
 8005ae6:	4b2f      	ldr	r3, [pc, #188]	; (8005ba4 <HAL_FLASHEx_Erase+0xe0>)
 8005ae8:	2201      	movs	r2, #1
 8005aea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d116      	bne.n	8005b22 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005af4:	4b2c      	ldr	r3, [pc, #176]	; (8005ba8 <HAL_FLASHEx_Erase+0xe4>)
 8005af6:	0018      	movs	r0, r3
 8005af8:	f7ff ff74 	bl	80059e4 <FLASH_WaitForLastOperation>
 8005afc:	1e03      	subs	r3, r0, #0
 8005afe:	d147      	bne.n	8005b90 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8005b00:	f000 f856 	bl	8005bb0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b04:	230f      	movs	r3, #15
 8005b06:	18fc      	adds	r4, r7, r3
 8005b08:	4b27      	ldr	r3, [pc, #156]	; (8005ba8 <HAL_FLASHEx_Erase+0xe4>)
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	f7ff ff6a 	bl	80059e4 <FLASH_WaitForLastOperation>
 8005b10:	0003      	movs	r3, r0
 8005b12:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005b14:	4b25      	ldr	r3, [pc, #148]	; (8005bac <HAL_FLASHEx_Erase+0xe8>)
 8005b16:	691a      	ldr	r2, [r3, #16]
 8005b18:	4b24      	ldr	r3, [pc, #144]	; (8005bac <HAL_FLASHEx_Erase+0xe8>)
 8005b1a:	2104      	movs	r1, #4
 8005b1c:	438a      	bics	r2, r1
 8005b1e:	611a      	str	r2, [r3, #16]
 8005b20:	e036      	b.n	8005b90 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005b22:	4b21      	ldr	r3, [pc, #132]	; (8005ba8 <HAL_FLASHEx_Erase+0xe4>)
 8005b24:	0018      	movs	r0, r3
 8005b26:	f7ff ff5d 	bl	80059e4 <FLASH_WaitForLastOperation>
 8005b2a:	1e03      	subs	r3, r0, #0
 8005b2c:	d130      	bne.n	8005b90 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2201      	movs	r2, #1
 8005b32:	4252      	negs	r2, r2
 8005b34:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	60bb      	str	r3, [r7, #8]
 8005b3c:	e01f      	b.n	8005b7e <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	0018      	movs	r0, r3
 8005b42:	f000 f84d 	bl	8005be0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b46:	250f      	movs	r5, #15
 8005b48:	197c      	adds	r4, r7, r5
 8005b4a:	4b17      	ldr	r3, [pc, #92]	; (8005ba8 <HAL_FLASHEx_Erase+0xe4>)
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	f7ff ff49 	bl	80059e4 <FLASH_WaitForLastOperation>
 8005b52:	0003      	movs	r3, r0
 8005b54:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005b56:	4b15      	ldr	r3, [pc, #84]	; (8005bac <HAL_FLASHEx_Erase+0xe8>)
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	4b14      	ldr	r3, [pc, #80]	; (8005bac <HAL_FLASHEx_Erase+0xe8>)
 8005b5c:	2102      	movs	r1, #2
 8005b5e:	438a      	bics	r2, r1
 8005b60:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8005b62:	197b      	adds	r3, r7, r5
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	601a      	str	r2, [r3, #0]
            break;
 8005b70:	e00e      	b.n	8005b90 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2280      	movs	r2, #128	; 0x80
 8005b76:	0112      	lsls	r2, r2, #4
 8005b78:	4694      	mov	ip, r2
 8005b7a:	4463      	add	r3, ip
 8005b7c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	02da      	lsls	r2, r3, #11
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	18d3      	adds	r3, r2, r3
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d3d6      	bcc.n	8005b3e <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005b90:	4b04      	ldr	r3, [pc, #16]	; (8005ba4 <HAL_FLASHEx_Erase+0xe0>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	761a      	strb	r2, [r3, #24]

  return status;
 8005b96:	230f      	movs	r3, #15
 8005b98:	18fb      	adds	r3, r7, r3
 8005b9a:	781b      	ldrb	r3, [r3, #0]
}
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b004      	add	sp, #16
 8005ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ba4:	20000a98 	.word	0x20000a98
 8005ba8:	0000c350 	.word	0x0000c350
 8005bac:	40022000 	.word	0x40022000

08005bb0 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005bb4:	4b08      	ldr	r3, [pc, #32]	; (8005bd8 <FLASH_MassErase+0x28>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005bba:	4b08      	ldr	r3, [pc, #32]	; (8005bdc <FLASH_MassErase+0x2c>)
 8005bbc:	691a      	ldr	r2, [r3, #16]
 8005bbe:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <FLASH_MassErase+0x2c>)
 8005bc0:	2104      	movs	r1, #4
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005bc6:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <FLASH_MassErase+0x2c>)
 8005bc8:	691a      	ldr	r2, [r3, #16]
 8005bca:	4b04      	ldr	r3, [pc, #16]	; (8005bdc <FLASH_MassErase+0x2c>)
 8005bcc:	2140      	movs	r1, #64	; 0x40
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	611a      	str	r2, [r3, #16]
}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20000a98 	.word	0x20000a98
 8005bdc:	40022000 	.word	0x40022000

08005be0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <FLASH_PageErase+0x34>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005bee:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <FLASH_PageErase+0x38>)
 8005bf0:	691a      	ldr	r2, [r3, #16]
 8005bf2:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <FLASH_PageErase+0x38>)
 8005bf4:	2102      	movs	r1, #2
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005bfa:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <FLASH_PageErase+0x38>)
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005c00:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <FLASH_PageErase+0x38>)
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <FLASH_PageErase+0x38>)
 8005c06:	2140      	movs	r1, #64	; 0x40
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	611a      	str	r2, [r3, #16]
}
 8005c0c:	46c0      	nop			; (mov r8, r8)
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	b002      	add	sp, #8
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	20000a98 	.word	0x20000a98
 8005c18:	40022000 	.word	0x40022000

08005c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c26:	2300      	movs	r3, #0
 8005c28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c2a:	e14f      	b.n	8005ecc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2101      	movs	r1, #1
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4091      	lsls	r1, r2
 8005c36:	000a      	movs	r2, r1
 8005c38:	4013      	ands	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d100      	bne.n	8005c44 <HAL_GPIO_Init+0x28>
 8005c42:	e140      	b.n	8005ec6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d00b      	beq.n	8005c64 <HAL_GPIO_Init+0x48>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d007      	beq.n	8005c64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c58:	2b11      	cmp	r3, #17
 8005c5a:	d003      	beq.n	8005c64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b12      	cmp	r3, #18
 8005c62:	d130      	bne.n	8005cc6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	2203      	movs	r2, #3
 8005c70:	409a      	lsls	r2, r3
 8005c72:	0013      	movs	r3, r2
 8005c74:	43da      	mvns	r2, r3
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	409a      	lsls	r2, r3
 8005c86:	0013      	movs	r3, r2
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	409a      	lsls	r2, r3
 8005ca0:	0013      	movs	r3, r2
 8005ca2:	43da      	mvns	r2, r3
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	091b      	lsrs	r3, r3, #4
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	401a      	ands	r2, r3
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	409a      	lsls	r2, r3
 8005cb8:	0013      	movs	r3, r2
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	2203      	movs	r2, #3
 8005cd2:	409a      	lsls	r2, r3
 8005cd4:	0013      	movs	r3, r2
 8005cd6:	43da      	mvns	r2, r3
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	409a      	lsls	r2, r3
 8005ce8:	0013      	movs	r3, r2
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d003      	beq.n	8005d06 <HAL_GPIO_Init+0xea>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b12      	cmp	r3, #18
 8005d04:	d123      	bne.n	8005d4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	08da      	lsrs	r2, r3, #3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3208      	adds	r2, #8
 8005d0e:	0092      	lsls	r2, r2, #2
 8005d10:	58d3      	ldr	r3, [r2, r3]
 8005d12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2207      	movs	r2, #7
 8005d18:	4013      	ands	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	220f      	movs	r2, #15
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	0013      	movs	r3, r2
 8005d22:	43da      	mvns	r2, r3
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	4013      	ands	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2107      	movs	r1, #7
 8005d32:	400b      	ands	r3, r1
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	409a      	lsls	r2, r3
 8005d38:	0013      	movs	r3, r2
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	08da      	lsrs	r2, r3, #3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3208      	adds	r2, #8
 8005d48:	0092      	lsls	r2, r2, #2
 8005d4a:	6939      	ldr	r1, [r7, #16]
 8005d4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	2203      	movs	r2, #3
 8005d5a:	409a      	lsls	r2, r3
 8005d5c:	0013      	movs	r3, r2
 8005d5e:	43da      	mvns	r2, r3
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	4013      	ands	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2203      	movs	r2, #3
 8005d6c:	401a      	ands	r2, r3
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	409a      	lsls	r2, r3
 8005d74:	0013      	movs	r3, r2
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	2380      	movs	r3, #128	; 0x80
 8005d88:	055b      	lsls	r3, r3, #21
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	d100      	bne.n	8005d90 <HAL_GPIO_Init+0x174>
 8005d8e:	e09a      	b.n	8005ec6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d90:	4b54      	ldr	r3, [pc, #336]	; (8005ee4 <HAL_GPIO_Init+0x2c8>)
 8005d92:	699a      	ldr	r2, [r3, #24]
 8005d94:	4b53      	ldr	r3, [pc, #332]	; (8005ee4 <HAL_GPIO_Init+0x2c8>)
 8005d96:	2101      	movs	r1, #1
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	619a      	str	r2, [r3, #24]
 8005d9c:	4b51      	ldr	r3, [pc, #324]	; (8005ee4 <HAL_GPIO_Init+0x2c8>)
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	2201      	movs	r2, #1
 8005da2:	4013      	ands	r3, r2
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005da8:	4a4f      	ldr	r2, [pc, #316]	; (8005ee8 <HAL_GPIO_Init+0x2cc>)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	089b      	lsrs	r3, r3, #2
 8005dae:	3302      	adds	r3, #2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	589b      	ldr	r3, [r3, r2]
 8005db4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2203      	movs	r2, #3
 8005dba:	4013      	ands	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	220f      	movs	r2, #15
 8005dc0:	409a      	lsls	r2, r3
 8005dc2:	0013      	movs	r3, r2
 8005dc4:	43da      	mvns	r2, r3
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	2390      	movs	r3, #144	; 0x90
 8005dd0:	05db      	lsls	r3, r3, #23
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d013      	beq.n	8005dfe <HAL_GPIO_Init+0x1e2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a44      	ldr	r2, [pc, #272]	; (8005eec <HAL_GPIO_Init+0x2d0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00d      	beq.n	8005dfa <HAL_GPIO_Init+0x1de>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a43      	ldr	r2, [pc, #268]	; (8005ef0 <HAL_GPIO_Init+0x2d4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d007      	beq.n	8005df6 <HAL_GPIO_Init+0x1da>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a42      	ldr	r2, [pc, #264]	; (8005ef4 <HAL_GPIO_Init+0x2d8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d101      	bne.n	8005df2 <HAL_GPIO_Init+0x1d6>
 8005dee:	2303      	movs	r3, #3
 8005df0:	e006      	b.n	8005e00 <HAL_GPIO_Init+0x1e4>
 8005df2:	2305      	movs	r3, #5
 8005df4:	e004      	b.n	8005e00 <HAL_GPIO_Init+0x1e4>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e002      	b.n	8005e00 <HAL_GPIO_Init+0x1e4>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e000      	b.n	8005e00 <HAL_GPIO_Init+0x1e4>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	2103      	movs	r1, #3
 8005e04:	400a      	ands	r2, r1
 8005e06:	0092      	lsls	r2, r2, #2
 8005e08:	4093      	lsls	r3, r2
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005e10:	4935      	ldr	r1, [pc, #212]	; (8005ee8 <HAL_GPIO_Init+0x2cc>)
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	089b      	lsrs	r3, r3, #2
 8005e16:	3302      	adds	r3, #2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e1e:	4b36      	ldr	r3, [pc, #216]	; (8005ef8 <HAL_GPIO_Init+0x2dc>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	43da      	mvns	r2, r3
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	2380      	movs	r3, #128	; 0x80
 8005e34:	025b      	lsls	r3, r3, #9
 8005e36:	4013      	ands	r3, r2
 8005e38:	d003      	beq.n	8005e42 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005e42:	4b2d      	ldr	r3, [pc, #180]	; (8005ef8 <HAL_GPIO_Init+0x2dc>)
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005e48:	4b2b      	ldr	r3, [pc, #172]	; (8005ef8 <HAL_GPIO_Init+0x2dc>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	43da      	mvns	r2, r3
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4013      	ands	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	2380      	movs	r3, #128	; 0x80
 8005e5e:	029b      	lsls	r3, r3, #10
 8005e60:	4013      	ands	r3, r2
 8005e62:	d003      	beq.n	8005e6c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005e6c:	4b22      	ldr	r3, [pc, #136]	; (8005ef8 <HAL_GPIO_Init+0x2dc>)
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e72:	4b21      	ldr	r3, [pc, #132]	; (8005ef8 <HAL_GPIO_Init+0x2dc>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	43da      	mvns	r2, r3
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	2380      	movs	r3, #128	; 0x80
 8005e88:	035b      	lsls	r3, r3, #13
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d003      	beq.n	8005e96 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005e96:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <HAL_GPIO_Init+0x2dc>)
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005e9c:	4b16      	ldr	r3, [pc, #88]	; (8005ef8 <HAL_GPIO_Init+0x2dc>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	43da      	mvns	r2, r3
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	039b      	lsls	r3, r3, #14
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005ec0:	4b0d      	ldr	r3, [pc, #52]	; (8005ef8 <HAL_GPIO_Init+0x2dc>)
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	40da      	lsrs	r2, r3
 8005ed4:	1e13      	subs	r3, r2, #0
 8005ed6:	d000      	beq.n	8005eda <HAL_GPIO_Init+0x2be>
 8005ed8:	e6a8      	b.n	8005c2c <HAL_GPIO_Init+0x10>
  } 
}
 8005eda:	46c0      	nop			; (mov r8, r8)
 8005edc:	46c0      	nop			; (mov r8, r8)
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	b006      	add	sp, #24
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	40010000 	.word	0x40010000
 8005eec:	48000400 	.word	0x48000400
 8005ef0:	48000800 	.word	0x48000800
 8005ef4:	48000c00 	.word	0x48000c00
 8005ef8:	40010400 	.word	0x40010400

08005efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	000a      	movs	r2, r1
 8005f06:	1cbb      	adds	r3, r7, #2
 8005f08:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	1cba      	adds	r2, r7, #2
 8005f10:	8812      	ldrh	r2, [r2, #0]
 8005f12:	4013      	ands	r3, r2
 8005f14:	d004      	beq.n	8005f20 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005f16:	230f      	movs	r3, #15
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	e003      	b.n	8005f28 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f20:	230f      	movs	r3, #15
 8005f22:	18fb      	adds	r3, r7, r3
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005f28:	230f      	movs	r3, #15
 8005f2a:	18fb      	adds	r3, r7, r3
 8005f2c:	781b      	ldrb	r3, [r3, #0]
  }
 8005f2e:	0018      	movs	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	b004      	add	sp, #16
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b082      	sub	sp, #8
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	0008      	movs	r0, r1
 8005f40:	0011      	movs	r1, r2
 8005f42:	1cbb      	adds	r3, r7, #2
 8005f44:	1c02      	adds	r2, r0, #0
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	1c7b      	adds	r3, r7, #1
 8005f4a:	1c0a      	adds	r2, r1, #0
 8005f4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f4e:	1c7b      	adds	r3, r7, #1
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d004      	beq.n	8005f60 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f56:	1cbb      	adds	r3, r7, #2
 8005f58:	881a      	ldrh	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f5e:	e003      	b.n	8005f68 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f60:	1cbb      	adds	r3, r7, #2
 8005f62:	881a      	ldrh	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f68:	46c0      	nop			; (mov r8, r8)
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b002      	add	sp, #8
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e082      	b.n	8006088 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2241      	movs	r2, #65	; 0x41
 8005f86:	5c9b      	ldrb	r3, [r3, r2]
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d107      	bne.n	8005f9e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2240      	movs	r2, #64	; 0x40
 8005f92:	2100      	movs	r1, #0
 8005f94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	0018      	movs	r0, r3
 8005f9a:	f7fe febf 	bl	8004d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2241      	movs	r2, #65	; 0x41
 8005fa2:	2124      	movs	r1, #36	; 0x24
 8005fa4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	438a      	bics	r2, r1
 8005fb4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4934      	ldr	r1, [pc, #208]	; (8006090 <HAL_I2C_Init+0x120>)
 8005fc0:	400a      	ands	r2, r1
 8005fc2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4931      	ldr	r1, [pc, #196]	; (8006094 <HAL_I2C_Init+0x124>)
 8005fd0:	400a      	ands	r2, r1
 8005fd2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d108      	bne.n	8005fee <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2180      	movs	r1, #128	; 0x80
 8005fe6:	0209      	lsls	r1, r1, #8
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	609a      	str	r2, [r3, #8]
 8005fec:	e007      	b.n	8005ffe <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2184      	movs	r1, #132	; 0x84
 8005ff8:	0209      	lsls	r1, r1, #8
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	2b02      	cmp	r3, #2
 8006004:	d104      	bne.n	8006010 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2280      	movs	r2, #128	; 0x80
 800600c:	0112      	lsls	r2, r2, #4
 800600e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	491f      	ldr	r1, [pc, #124]	; (8006098 <HAL_I2C_Init+0x128>)
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	491a      	ldr	r1, [pc, #104]	; (8006094 <HAL_I2C_Init+0x124>)
 800602c:	400a      	ands	r2, r1
 800602e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	431a      	orrs	r2, r3
 800603a:	0011      	movs	r1, r2
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	021a      	lsls	r2, r3, #8
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	69d9      	ldr	r1, [r3, #28]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1a      	ldr	r2, [r3, #32]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2101      	movs	r1, #1
 8006066:	430a      	orrs	r2, r1
 8006068:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2241      	movs	r2, #65	; 0x41
 8006074:	2120      	movs	r1, #32
 8006076:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2242      	movs	r2, #66	; 0x42
 8006082:	2100      	movs	r1, #0
 8006084:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	0018      	movs	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	b002      	add	sp, #8
 800608e:	bd80      	pop	{r7, pc}
 8006090:	f0ffffff 	.word	0xf0ffffff
 8006094:	ffff7fff 	.word	0xffff7fff
 8006098:	02008000 	.word	0x02008000

0800609c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800609c:	b590      	push	{r4, r7, lr}
 800609e:	b089      	sub	sp, #36	; 0x24
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	0008      	movs	r0, r1
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	0019      	movs	r1, r3
 80060aa:	230a      	movs	r3, #10
 80060ac:	18fb      	adds	r3, r7, r3
 80060ae:	1c02      	adds	r2, r0, #0
 80060b0:	801a      	strh	r2, [r3, #0]
 80060b2:	2308      	movs	r3, #8
 80060b4:	18fb      	adds	r3, r7, r3
 80060b6:	1c0a      	adds	r2, r1, #0
 80060b8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2241      	movs	r2, #65	; 0x41
 80060be:	5c9b      	ldrb	r3, [r3, r2]
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b20      	cmp	r3, #32
 80060c4:	d000      	beq.n	80060c8 <HAL_I2C_Master_Transmit+0x2c>
 80060c6:	e0e7      	b.n	8006298 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2240      	movs	r2, #64	; 0x40
 80060cc:	5c9b      	ldrb	r3, [r3, r2]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_I2C_Master_Transmit+0x3a>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e0e1      	b.n	800629a <HAL_I2C_Master_Transmit+0x1fe>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2240      	movs	r2, #64	; 0x40
 80060da:	2101      	movs	r1, #1
 80060dc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060de:	f7ff fae3 	bl	80056a8 <HAL_GetTick>
 80060e2:	0003      	movs	r3, r0
 80060e4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060e6:	2380      	movs	r3, #128	; 0x80
 80060e8:	0219      	lsls	r1, r3, #8
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	2319      	movs	r3, #25
 80060f2:	2201      	movs	r2, #1
 80060f4:	f000 fa16 	bl	8006524 <I2C_WaitOnFlagUntilTimeout>
 80060f8:	1e03      	subs	r3, r0, #0
 80060fa:	d001      	beq.n	8006100 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e0cc      	b.n	800629a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2241      	movs	r2, #65	; 0x41
 8006104:	2121      	movs	r1, #33	; 0x21
 8006106:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2242      	movs	r2, #66	; 0x42
 800610c:	2110      	movs	r1, #16
 800610e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2208      	movs	r2, #8
 8006120:	18ba      	adds	r2, r7, r2
 8006122:	8812      	ldrh	r2, [r2, #0]
 8006124:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006130:	b29b      	uxth	r3, r3
 8006132:	2bff      	cmp	r3, #255	; 0xff
 8006134:	d911      	bls.n	800615a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	22ff      	movs	r2, #255	; 0xff
 800613a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006140:	b2da      	uxtb	r2, r3
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	045c      	lsls	r4, r3, #17
 8006146:	230a      	movs	r3, #10
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	8819      	ldrh	r1, [r3, #0]
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	4b55      	ldr	r3, [pc, #340]	; (80062a4 <HAL_I2C_Master_Transmit+0x208>)
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	0023      	movs	r3, r4
 8006154:	f000 fb06 	bl	8006764 <I2C_TransferConfig>
 8006158:	e075      	b.n	8006246 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615e:	b29a      	uxth	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006168:	b2da      	uxtb	r2, r3
 800616a:	2380      	movs	r3, #128	; 0x80
 800616c:	049c      	lsls	r4, r3, #18
 800616e:	230a      	movs	r3, #10
 8006170:	18fb      	adds	r3, r7, r3
 8006172:	8819      	ldrh	r1, [r3, #0]
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	4b4b      	ldr	r3, [pc, #300]	; (80062a4 <HAL_I2C_Master_Transmit+0x208>)
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	0023      	movs	r3, r4
 800617c:	f000 faf2 	bl	8006764 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006180:	e061      	b.n	8006246 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	0018      	movs	r0, r3
 800618a:	f000 fa0a 	bl	80065a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800618e:	1e03      	subs	r3, r0, #0
 8006190:	d001      	beq.n	8006196 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e081      	b.n	800629a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	781a      	ldrb	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d03a      	beq.n	8006246 <HAL_I2C_Master_Transmit+0x1aa>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d136      	bne.n	8006246 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	0013      	movs	r3, r2
 80061e2:	2200      	movs	r2, #0
 80061e4:	2180      	movs	r1, #128	; 0x80
 80061e6:	f000 f99d 	bl	8006524 <I2C_WaitOnFlagUntilTimeout>
 80061ea:	1e03      	subs	r3, r0, #0
 80061ec:	d001      	beq.n	80061f2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e053      	b.n	800629a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2bff      	cmp	r3, #255	; 0xff
 80061fa:	d911      	bls.n	8006220 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	22ff      	movs	r2, #255	; 0xff
 8006200:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006206:	b2da      	uxtb	r2, r3
 8006208:	2380      	movs	r3, #128	; 0x80
 800620a:	045c      	lsls	r4, r3, #17
 800620c:	230a      	movs	r3, #10
 800620e:	18fb      	adds	r3, r7, r3
 8006210:	8819      	ldrh	r1, [r3, #0]
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	2300      	movs	r3, #0
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	0023      	movs	r3, r4
 800621a:	f000 faa3 	bl	8006764 <I2C_TransferConfig>
 800621e:	e012      	b.n	8006246 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622e:	b2da      	uxtb	r2, r3
 8006230:	2380      	movs	r3, #128	; 0x80
 8006232:	049c      	lsls	r4, r3, #18
 8006234:	230a      	movs	r3, #10
 8006236:	18fb      	adds	r3, r7, r3
 8006238:	8819      	ldrh	r1, [r3, #0]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	2300      	movs	r3, #0
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	0023      	movs	r3, r4
 8006242:	f000 fa8f 	bl	8006764 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d198      	bne.n	8006182 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	0018      	movs	r0, r3
 8006258:	f000 f9e2 	bl	8006620 <I2C_WaitOnSTOPFlagUntilTimeout>
 800625c:	1e03      	subs	r3, r0, #0
 800625e:	d001      	beq.n	8006264 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e01a      	b.n	800629a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2220      	movs	r2, #32
 800626a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	490c      	ldr	r1, [pc, #48]	; (80062a8 <HAL_I2C_Master_Transmit+0x20c>)
 8006278:	400a      	ands	r2, r1
 800627a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2241      	movs	r2, #65	; 0x41
 8006280:	2120      	movs	r1, #32
 8006282:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2242      	movs	r2, #66	; 0x42
 8006288:	2100      	movs	r1, #0
 800628a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2240      	movs	r2, #64	; 0x40
 8006290:	2100      	movs	r1, #0
 8006292:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	e000      	b.n	800629a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8006298:	2302      	movs	r3, #2
  }
}
 800629a:	0018      	movs	r0, r3
 800629c:	46bd      	mov	sp, r7
 800629e:	b007      	add	sp, #28
 80062a0:	bd90      	pop	{r4, r7, pc}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	80002000 	.word	0x80002000
 80062a8:	fe00e800 	.word	0xfe00e800

080062ac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08a      	sub	sp, #40	; 0x28
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	230a      	movs	r3, #10
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	1c0a      	adds	r2, r1, #0
 80062be:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80062c0:	2300      	movs	r3, #0
 80062c2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2241      	movs	r2, #65	; 0x41
 80062c8:	5c9b      	ldrb	r3, [r3, r2]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b20      	cmp	r3, #32
 80062ce:	d000      	beq.n	80062d2 <HAL_I2C_IsDeviceReady+0x26>
 80062d0:	e0fe      	b.n	80064d0 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	699a      	ldr	r2, [r3, #24]
 80062d8:	2380      	movs	r3, #128	; 0x80
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	401a      	ands	r2, r3
 80062de:	2380      	movs	r3, #128	; 0x80
 80062e0:	021b      	lsls	r3, r3, #8
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d101      	bne.n	80062ea <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80062e6:	2302      	movs	r3, #2
 80062e8:	e0f3      	b.n	80064d2 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2240      	movs	r2, #64	; 0x40
 80062ee:	5c9b      	ldrb	r3, [r3, r2]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_I2C_IsDeviceReady+0x4c>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e0ec      	b.n	80064d2 <HAL_I2C_IsDeviceReady+0x226>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2240      	movs	r2, #64	; 0x40
 80062fc:	2101      	movs	r1, #1
 80062fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2241      	movs	r2, #65	; 0x41
 8006304:	2124      	movs	r1, #36	; 0x24
 8006306:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d107      	bne.n	8006326 <HAL_I2C_IsDeviceReady+0x7a>
 8006316:	230a      	movs	r3, #10
 8006318:	18fb      	adds	r3, r7, r3
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	059b      	lsls	r3, r3, #22
 800631e:	0d9b      	lsrs	r3, r3, #22
 8006320:	4a6e      	ldr	r2, [pc, #440]	; (80064dc <HAL_I2C_IsDeviceReady+0x230>)
 8006322:	431a      	orrs	r2, r3
 8006324:	e007      	b.n	8006336 <HAL_I2C_IsDeviceReady+0x8a>
 8006326:	230a      	movs	r3, #10
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	059b      	lsls	r3, r3, #22
 800632e:	0d9b      	lsrs	r3, r3, #22
 8006330:	22a0      	movs	r2, #160	; 0xa0
 8006332:	0192      	lsls	r2, r2, #6
 8006334:	431a      	orrs	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800633c:	f7ff f9b4 	bl	80056a8 <HAL_GetTick>
 8006340:	0003      	movs	r3, r0
 8006342:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	2220      	movs	r2, #32
 800634c:	4013      	ands	r3, r2
 800634e:	3b20      	subs	r3, #32
 8006350:	425a      	negs	r2, r3
 8006352:	4153      	adcs	r3, r2
 8006354:	b2da      	uxtb	r2, r3
 8006356:	231f      	movs	r3, #31
 8006358:	18fb      	adds	r3, r7, r3
 800635a:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	2210      	movs	r2, #16
 8006364:	4013      	ands	r3, r2
 8006366:	3b10      	subs	r3, #16
 8006368:	425a      	negs	r2, r3
 800636a:	4153      	adcs	r3, r2
 800636c:	b2da      	uxtb	r2, r3
 800636e:	231e      	movs	r3, #30
 8006370:	18fb      	adds	r3, r7, r3
 8006372:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006374:	e035      	b.n	80063e2 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	3301      	adds	r3, #1
 800637a:	d01a      	beq.n	80063b2 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800637c:	f7ff f994 	bl	80056a8 <HAL_GetTick>
 8006380:	0002      	movs	r2, r0
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d302      	bcc.n	8006392 <HAL_I2C_IsDeviceReady+0xe6>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10f      	bne.n	80063b2 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2241      	movs	r2, #65	; 0x41
 8006396:	2120      	movs	r1, #32
 8006398:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639e:	2220      	movs	r2, #32
 80063a0:	431a      	orrs	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2240      	movs	r2, #64	; 0x40
 80063aa:	2100      	movs	r1, #0
 80063ac:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e08f      	b.n	80064d2 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	2220      	movs	r2, #32
 80063ba:	4013      	ands	r3, r2
 80063bc:	3b20      	subs	r3, #32
 80063be:	425a      	negs	r2, r3
 80063c0:	4153      	adcs	r3, r2
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	231f      	movs	r3, #31
 80063c6:	18fb      	adds	r3, r7, r3
 80063c8:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	2210      	movs	r2, #16
 80063d2:	4013      	ands	r3, r2
 80063d4:	3b10      	subs	r3, #16
 80063d6:	425a      	negs	r2, r3
 80063d8:	4153      	adcs	r3, r2
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	231e      	movs	r3, #30
 80063de:	18fb      	adds	r3, r7, r3
 80063e0:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80063e2:	231f      	movs	r3, #31
 80063e4:	18fb      	adds	r3, r7, r3
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d104      	bne.n	80063f6 <HAL_I2C_IsDeviceReady+0x14a>
 80063ec:	231e      	movs	r3, #30
 80063ee:	18fb      	adds	r3, r7, r3
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0bf      	beq.n	8006376 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	2210      	movs	r2, #16
 80063fe:	4013      	ands	r3, r2
 8006400:	2b10      	cmp	r3, #16
 8006402:	d01a      	beq.n	800643a <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	0013      	movs	r3, r2
 800640e:	2200      	movs	r2, #0
 8006410:	2120      	movs	r1, #32
 8006412:	f000 f887 	bl	8006524 <I2C_WaitOnFlagUntilTimeout>
 8006416:	1e03      	subs	r3, r0, #0
 8006418:	d001      	beq.n	800641e <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e059      	b.n	80064d2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2220      	movs	r2, #32
 8006424:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2241      	movs	r2, #65	; 0x41
 800642a:	2120      	movs	r1, #32
 800642c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2240      	movs	r2, #64	; 0x40
 8006432:	2100      	movs	r1, #0
 8006434:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	e04b      	b.n	80064d2 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	0013      	movs	r3, r2
 8006444:	2200      	movs	r2, #0
 8006446:	2120      	movs	r1, #32
 8006448:	f000 f86c 	bl	8006524 <I2C_WaitOnFlagUntilTimeout>
 800644c:	1e03      	subs	r3, r0, #0
 800644e:	d001      	beq.n	8006454 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e03e      	b.n	80064d2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2210      	movs	r2, #16
 800645a:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2220      	movs	r2, #32
 8006462:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	429a      	cmp	r2, r3
 800646a:	d119      	bne.n	80064a0 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2180      	movs	r1, #128	; 0x80
 8006478:	01c9      	lsls	r1, r1, #7
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	0013      	movs	r3, r2
 8006488:	2200      	movs	r2, #0
 800648a:	2120      	movs	r1, #32
 800648c:	f000 f84a 	bl	8006524 <I2C_WaitOnFlagUntilTimeout>
 8006490:	1e03      	subs	r3, r0, #0
 8006492:	d001      	beq.n	8006498 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e01c      	b.n	80064d2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2220      	movs	r2, #32
 800649e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	3301      	adds	r3, #1
 80064a4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d900      	bls.n	80064b0 <HAL_I2C_IsDeviceReady+0x204>
 80064ae:	e72e      	b.n	800630e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2241      	movs	r2, #65	; 0x41
 80064b4:	2120      	movs	r1, #32
 80064b6:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064bc:	2220      	movs	r2, #32
 80064be:	431a      	orrs	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2240      	movs	r2, #64	; 0x40
 80064c8:	2100      	movs	r1, #0
 80064ca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e000      	b.n	80064d2 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80064d0:	2302      	movs	r3, #2
  }
}
 80064d2:	0018      	movs	r0, r3
 80064d4:	46bd      	mov	sp, r7
 80064d6:	b008      	add	sp, #32
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	02002000 	.word	0x02002000

080064e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	2202      	movs	r2, #2
 80064f0:	4013      	ands	r3, r2
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d103      	bne.n	80064fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2200      	movs	r2, #0
 80064fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	2201      	movs	r2, #1
 8006506:	4013      	ands	r3, r2
 8006508:	2b01      	cmp	r3, #1
 800650a:	d007      	beq.n	800651c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699a      	ldr	r2, [r3, #24]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2101      	movs	r1, #1
 8006518:	430a      	orrs	r2, r1
 800651a:	619a      	str	r2, [r3, #24]
  }
}
 800651c:	46c0      	nop			; (mov r8, r8)
 800651e:	46bd      	mov	sp, r7
 8006520:	b002      	add	sp, #8
 8006522:	bd80      	pop	{r7, pc}

08006524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	1dfb      	adds	r3, r7, #7
 8006532:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006534:	e021      	b.n	800657a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	3301      	adds	r3, #1
 800653a:	d01e      	beq.n	800657a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800653c:	f7ff f8b4 	bl	80056a8 <HAL_GetTick>
 8006540:	0002      	movs	r2, r0
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d302      	bcc.n	8006552 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d113      	bne.n	800657a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006556:	2220      	movs	r2, #32
 8006558:	431a      	orrs	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2241      	movs	r2, #65	; 0x41
 8006562:	2120      	movs	r1, #32
 8006564:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2242      	movs	r2, #66	; 0x42
 800656a:	2100      	movs	r1, #0
 800656c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2240      	movs	r2, #64	; 0x40
 8006572:	2100      	movs	r1, #0
 8006574:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e00f      	b.n	800659a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	4013      	ands	r3, r2
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	425a      	negs	r2, r3
 800658a:	4153      	adcs	r3, r2
 800658c:	b2db      	uxtb	r3, r3
 800658e:	001a      	movs	r2, r3
 8006590:	1dfb      	adds	r3, r7, #7
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	429a      	cmp	r2, r3
 8006596:	d0ce      	beq.n	8006536 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	0018      	movs	r0, r3
 800659c:	46bd      	mov	sp, r7
 800659e:	b004      	add	sp, #16
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065ae:	e02b      	b.n	8006608 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	0018      	movs	r0, r3
 80065b8:	f000 f86e 	bl	8006698 <I2C_IsAcknowledgeFailed>
 80065bc:	1e03      	subs	r3, r0, #0
 80065be:	d001      	beq.n	80065c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e029      	b.n	8006618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	3301      	adds	r3, #1
 80065c8:	d01e      	beq.n	8006608 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ca:	f7ff f86d 	bl	80056a8 <HAL_GetTick>
 80065ce:	0002      	movs	r2, r0
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d302      	bcc.n	80065e0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d113      	bne.n	8006608 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e4:	2220      	movs	r2, #32
 80065e6:	431a      	orrs	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2241      	movs	r2, #65	; 0x41
 80065f0:	2120      	movs	r1, #32
 80065f2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2242      	movs	r2, #66	; 0x42
 80065f8:	2100      	movs	r1, #0
 80065fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2240      	movs	r2, #64	; 0x40
 8006600:	2100      	movs	r1, #0
 8006602:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e007      	b.n	8006618 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	2202      	movs	r2, #2
 8006610:	4013      	ands	r3, r2
 8006612:	2b02      	cmp	r3, #2
 8006614:	d1cc      	bne.n	80065b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	0018      	movs	r0, r3
 800661a:	46bd      	mov	sp, r7
 800661c:	b004      	add	sp, #16
 800661e:	bd80      	pop	{r7, pc}

08006620 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800662c:	e028      	b.n	8006680 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	0018      	movs	r0, r3
 8006636:	f000 f82f 	bl	8006698 <I2C_IsAcknowledgeFailed>
 800663a:	1e03      	subs	r3, r0, #0
 800663c:	d001      	beq.n	8006642 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e026      	b.n	8006690 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006642:	f7ff f831 	bl	80056a8 <HAL_GetTick>
 8006646:	0002      	movs	r2, r0
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	429a      	cmp	r2, r3
 8006650:	d302      	bcc.n	8006658 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d113      	bne.n	8006680 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665c:	2220      	movs	r2, #32
 800665e:	431a      	orrs	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2241      	movs	r2, #65	; 0x41
 8006668:	2120      	movs	r1, #32
 800666a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2242      	movs	r2, #66	; 0x42
 8006670:	2100      	movs	r1, #0
 8006672:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2240      	movs	r2, #64	; 0x40
 8006678:	2100      	movs	r1, #0
 800667a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e007      	b.n	8006690 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	2220      	movs	r2, #32
 8006688:	4013      	ands	r3, r2
 800668a:	2b20      	cmp	r3, #32
 800668c:	d1cf      	bne.n	800662e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	0018      	movs	r0, r3
 8006692:	46bd      	mov	sp, r7
 8006694:	b004      	add	sp, #16
 8006696:	bd80      	pop	{r7, pc}

08006698 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	2210      	movs	r2, #16
 80066ac:	4013      	ands	r3, r2
 80066ae:	2b10      	cmp	r3, #16
 80066b0:	d151      	bne.n	8006756 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066b2:	e021      	b.n	80066f8 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	3301      	adds	r3, #1
 80066b8:	d01e      	beq.n	80066f8 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ba:	f7fe fff5 	bl	80056a8 <HAL_GetTick>
 80066be:	0002      	movs	r2, r0
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d302      	bcc.n	80066d0 <I2C_IsAcknowledgeFailed+0x38>
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d113      	bne.n	80066f8 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	2220      	movs	r2, #32
 80066d6:	431a      	orrs	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2241      	movs	r2, #65	; 0x41
 80066e0:	2120      	movs	r1, #32
 80066e2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2242      	movs	r2, #66	; 0x42
 80066e8:	2100      	movs	r1, #0
 80066ea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2240      	movs	r2, #64	; 0x40
 80066f0:	2100      	movs	r1, #0
 80066f2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e02f      	b.n	8006758 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	2220      	movs	r2, #32
 8006700:	4013      	ands	r3, r2
 8006702:	2b20      	cmp	r3, #32
 8006704:	d1d6      	bne.n	80066b4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2210      	movs	r2, #16
 800670c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2220      	movs	r2, #32
 8006714:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	0018      	movs	r0, r3
 800671a:	f7ff fee1 	bl	80064e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	490d      	ldr	r1, [pc, #52]	; (8006760 <I2C_IsAcknowledgeFailed+0xc8>)
 800672a:	400a      	ands	r2, r1
 800672c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006732:	2204      	movs	r2, #4
 8006734:	431a      	orrs	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2241      	movs	r2, #65	; 0x41
 800673e:	2120      	movs	r1, #32
 8006740:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2242      	movs	r2, #66	; 0x42
 8006746:	2100      	movs	r1, #0
 8006748:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2240      	movs	r2, #64	; 0x40
 800674e:	2100      	movs	r1, #0
 8006750:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	0018      	movs	r0, r3
 800675a:	46bd      	mov	sp, r7
 800675c:	b004      	add	sp, #16
 800675e:	bd80      	pop	{r7, pc}
 8006760:	fe00e800 	.word	0xfe00e800

08006764 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006764:	b590      	push	{r4, r7, lr}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	0008      	movs	r0, r1
 800676e:	0011      	movs	r1, r2
 8006770:	607b      	str	r3, [r7, #4]
 8006772:	240a      	movs	r4, #10
 8006774:	193b      	adds	r3, r7, r4
 8006776:	1c02      	adds	r2, r0, #0
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	2009      	movs	r0, #9
 800677c:	183b      	adds	r3, r7, r0
 800677e:	1c0a      	adds	r2, r1, #0
 8006780:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	6a3a      	ldr	r2, [r7, #32]
 800678a:	0d51      	lsrs	r1, r2, #21
 800678c:	2280      	movs	r2, #128	; 0x80
 800678e:	00d2      	lsls	r2, r2, #3
 8006790:	400a      	ands	r2, r1
 8006792:	490e      	ldr	r1, [pc, #56]	; (80067cc <I2C_TransferConfig+0x68>)
 8006794:	430a      	orrs	r2, r1
 8006796:	43d2      	mvns	r2, r2
 8006798:	401a      	ands	r2, r3
 800679a:	0011      	movs	r1, r2
 800679c:	193b      	adds	r3, r7, r4
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	059b      	lsls	r3, r3, #22
 80067a2:	0d9a      	lsrs	r2, r3, #22
 80067a4:	183b      	adds	r3, r7, r0
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	0418      	lsls	r0, r3, #16
 80067aa:	23ff      	movs	r3, #255	; 0xff
 80067ac:	041b      	lsls	r3, r3, #16
 80067ae:	4003      	ands	r3, r0
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	431a      	orrs	r2, r3
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	431a      	orrs	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80067c2:	46c0      	nop			; (mov r8, r8)
 80067c4:	46bd      	mov	sp, r7
 80067c6:	b005      	add	sp, #20
 80067c8:	bd90      	pop	{r4, r7, pc}
 80067ca:	46c0      	nop			; (mov r8, r8)
 80067cc:	03ff63ff 	.word	0x03ff63ff

080067d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2241      	movs	r2, #65	; 0x41
 80067de:	5c9b      	ldrb	r3, [r3, r2]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d138      	bne.n	8006858 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2240      	movs	r2, #64	; 0x40
 80067ea:	5c9b      	ldrb	r3, [r3, r2]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e032      	b.n	800685a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2240      	movs	r2, #64	; 0x40
 80067f8:	2101      	movs	r1, #1
 80067fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2241      	movs	r2, #65	; 0x41
 8006800:	2124      	movs	r1, #36	; 0x24
 8006802:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2101      	movs	r1, #1
 8006810:	438a      	bics	r2, r1
 8006812:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4911      	ldr	r1, [pc, #68]	; (8006864 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006820:	400a      	ands	r2, r1
 8006822:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6819      	ldr	r1, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2101      	movs	r1, #1
 8006840:	430a      	orrs	r2, r1
 8006842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2241      	movs	r2, #65	; 0x41
 8006848:	2120      	movs	r1, #32
 800684a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2240      	movs	r2, #64	; 0x40
 8006850:	2100      	movs	r1, #0
 8006852:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	e000      	b.n	800685a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006858:	2302      	movs	r3, #2
  }
}
 800685a:	0018      	movs	r0, r3
 800685c:	46bd      	mov	sp, r7
 800685e:	b002      	add	sp, #8
 8006860:	bd80      	pop	{r7, pc}
 8006862:	46c0      	nop			; (mov r8, r8)
 8006864:	ffffefff 	.word	0xffffefff

08006868 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2241      	movs	r2, #65	; 0x41
 8006876:	5c9b      	ldrb	r3, [r3, r2]
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b20      	cmp	r3, #32
 800687c:	d139      	bne.n	80068f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2240      	movs	r2, #64	; 0x40
 8006882:	5c9b      	ldrb	r3, [r3, r2]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006888:	2302      	movs	r3, #2
 800688a:	e033      	b.n	80068f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2240      	movs	r2, #64	; 0x40
 8006890:	2101      	movs	r1, #1
 8006892:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2241      	movs	r2, #65	; 0x41
 8006898:	2124      	movs	r1, #36	; 0x24
 800689a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2101      	movs	r1, #1
 80068a8:	438a      	bics	r2, r1
 80068aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4a11      	ldr	r2, [pc, #68]	; (80068fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	021b      	lsls	r3, r3, #8
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2101      	movs	r1, #1
 80068da:	430a      	orrs	r2, r1
 80068dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2241      	movs	r2, #65	; 0x41
 80068e2:	2120      	movs	r1, #32
 80068e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2240      	movs	r2, #64	; 0x40
 80068ea:	2100      	movs	r1, #0
 80068ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	e000      	b.n	80068f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068f2:	2302      	movs	r3, #2
  }
}
 80068f4:	0018      	movs	r0, r3
 80068f6:	46bd      	mov	sp, r7
 80068f8:	b004      	add	sp, #16
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	fffff0ff 	.word	0xfffff0ff

08006900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b088      	sub	sp, #32
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e305      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2201      	movs	r2, #1
 8006918:	4013      	ands	r3, r2
 800691a:	d100      	bne.n	800691e <HAL_RCC_OscConfig+0x1e>
 800691c:	e08d      	b.n	8006a3a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800691e:	4bc5      	ldr	r3, [pc, #788]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	220c      	movs	r2, #12
 8006924:	4013      	ands	r3, r2
 8006926:	2b04      	cmp	r3, #4
 8006928:	d00e      	beq.n	8006948 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800692a:	4bc2      	ldr	r3, [pc, #776]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	220c      	movs	r2, #12
 8006930:	4013      	ands	r3, r2
 8006932:	2b08      	cmp	r3, #8
 8006934:	d116      	bne.n	8006964 <HAL_RCC_OscConfig+0x64>
 8006936:	4bbf      	ldr	r3, [pc, #764]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	23c0      	movs	r3, #192	; 0xc0
 800693c:	025b      	lsls	r3, r3, #9
 800693e:	401a      	ands	r2, r3
 8006940:	2380      	movs	r3, #128	; 0x80
 8006942:	025b      	lsls	r3, r3, #9
 8006944:	429a      	cmp	r2, r3
 8006946:	d10d      	bne.n	8006964 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006948:	4bba      	ldr	r3, [pc, #744]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	2380      	movs	r3, #128	; 0x80
 800694e:	029b      	lsls	r3, r3, #10
 8006950:	4013      	ands	r3, r2
 8006952:	d100      	bne.n	8006956 <HAL_RCC_OscConfig+0x56>
 8006954:	e070      	b.n	8006a38 <HAL_RCC_OscConfig+0x138>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d000      	beq.n	8006960 <HAL_RCC_OscConfig+0x60>
 800695e:	e06b      	b.n	8006a38 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e2dc      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d107      	bne.n	800697c <HAL_RCC_OscConfig+0x7c>
 800696c:	4bb1      	ldr	r3, [pc, #708]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	4bb0      	ldr	r3, [pc, #704]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006972:	2180      	movs	r1, #128	; 0x80
 8006974:	0249      	lsls	r1, r1, #9
 8006976:	430a      	orrs	r2, r1
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	e02f      	b.n	80069dc <HAL_RCC_OscConfig+0xdc>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10c      	bne.n	800699e <HAL_RCC_OscConfig+0x9e>
 8006984:	4bab      	ldr	r3, [pc, #684]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	4baa      	ldr	r3, [pc, #680]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 800698a:	49ab      	ldr	r1, [pc, #684]	; (8006c38 <HAL_RCC_OscConfig+0x338>)
 800698c:	400a      	ands	r2, r1
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	4ba8      	ldr	r3, [pc, #672]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	4ba7      	ldr	r3, [pc, #668]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006996:	49a9      	ldr	r1, [pc, #676]	; (8006c3c <HAL_RCC_OscConfig+0x33c>)
 8006998:	400a      	ands	r2, r1
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	e01e      	b.n	80069dc <HAL_RCC_OscConfig+0xdc>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2b05      	cmp	r3, #5
 80069a4:	d10e      	bne.n	80069c4 <HAL_RCC_OscConfig+0xc4>
 80069a6:	4ba3      	ldr	r3, [pc, #652]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	4ba2      	ldr	r3, [pc, #648]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 80069ac:	2180      	movs	r1, #128	; 0x80
 80069ae:	02c9      	lsls	r1, r1, #11
 80069b0:	430a      	orrs	r2, r1
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	4b9f      	ldr	r3, [pc, #636]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	4b9e      	ldr	r3, [pc, #632]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 80069ba:	2180      	movs	r1, #128	; 0x80
 80069bc:	0249      	lsls	r1, r1, #9
 80069be:	430a      	orrs	r2, r1
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	e00b      	b.n	80069dc <HAL_RCC_OscConfig+0xdc>
 80069c4:	4b9b      	ldr	r3, [pc, #620]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	4b9a      	ldr	r3, [pc, #616]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 80069ca:	499b      	ldr	r1, [pc, #620]	; (8006c38 <HAL_RCC_OscConfig+0x338>)
 80069cc:	400a      	ands	r2, r1
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	4b98      	ldr	r3, [pc, #608]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	4b97      	ldr	r3, [pc, #604]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 80069d6:	4999      	ldr	r1, [pc, #612]	; (8006c3c <HAL_RCC_OscConfig+0x33c>)
 80069d8:	400a      	ands	r2, r1
 80069da:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d014      	beq.n	8006a0e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069e4:	f7fe fe60 	bl	80056a8 <HAL_GetTick>
 80069e8:	0003      	movs	r3, r0
 80069ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ec:	e008      	b.n	8006a00 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069ee:	f7fe fe5b 	bl	80056a8 <HAL_GetTick>
 80069f2:	0002      	movs	r2, r0
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b64      	cmp	r3, #100	; 0x64
 80069fa:	d901      	bls.n	8006a00 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e28e      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a00:	4b8c      	ldr	r3, [pc, #560]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	2380      	movs	r3, #128	; 0x80
 8006a06:	029b      	lsls	r3, r3, #10
 8006a08:	4013      	ands	r3, r2
 8006a0a:	d0f0      	beq.n	80069ee <HAL_RCC_OscConfig+0xee>
 8006a0c:	e015      	b.n	8006a3a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a0e:	f7fe fe4b 	bl	80056a8 <HAL_GetTick>
 8006a12:	0003      	movs	r3, r0
 8006a14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a18:	f7fe fe46 	bl	80056a8 <HAL_GetTick>
 8006a1c:	0002      	movs	r2, r0
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b64      	cmp	r3, #100	; 0x64
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e279      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a2a:	4b82      	ldr	r3, [pc, #520]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	2380      	movs	r3, #128	; 0x80
 8006a30:	029b      	lsls	r3, r3, #10
 8006a32:	4013      	ands	r3, r2
 8006a34:	d1f0      	bne.n	8006a18 <HAL_RCC_OscConfig+0x118>
 8006a36:	e000      	b.n	8006a3a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a38:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	4013      	ands	r3, r2
 8006a42:	d100      	bne.n	8006a46 <HAL_RCC_OscConfig+0x146>
 8006a44:	e06c      	b.n	8006b20 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006a46:	4b7b      	ldr	r3, [pc, #492]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	220c      	movs	r2, #12
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	d00e      	beq.n	8006a6e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006a50:	4b78      	ldr	r3, [pc, #480]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	220c      	movs	r2, #12
 8006a56:	4013      	ands	r3, r2
 8006a58:	2b08      	cmp	r3, #8
 8006a5a:	d11f      	bne.n	8006a9c <HAL_RCC_OscConfig+0x19c>
 8006a5c:	4b75      	ldr	r3, [pc, #468]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	23c0      	movs	r3, #192	; 0xc0
 8006a62:	025b      	lsls	r3, r3, #9
 8006a64:	401a      	ands	r2, r3
 8006a66:	2380      	movs	r3, #128	; 0x80
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d116      	bne.n	8006a9c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a6e:	4b71      	ldr	r3, [pc, #452]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2202      	movs	r2, #2
 8006a74:	4013      	ands	r3, r2
 8006a76:	d005      	beq.n	8006a84 <HAL_RCC_OscConfig+0x184>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d001      	beq.n	8006a84 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e24c      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a84:	4b6b      	ldr	r3, [pc, #428]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	22f8      	movs	r2, #248	; 0xf8
 8006a8a:	4393      	bics	r3, r2
 8006a8c:	0019      	movs	r1, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	00da      	lsls	r2, r3, #3
 8006a94:	4b67      	ldr	r3, [pc, #412]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006a96:	430a      	orrs	r2, r1
 8006a98:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a9a:	e041      	b.n	8006b20 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d024      	beq.n	8006aee <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006aa4:	4b63      	ldr	r3, [pc, #396]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	4b62      	ldr	r3, [pc, #392]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006aaa:	2101      	movs	r1, #1
 8006aac:	430a      	orrs	r2, r1
 8006aae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab0:	f7fe fdfa 	bl	80056a8 <HAL_GetTick>
 8006ab4:	0003      	movs	r3, r0
 8006ab6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ab8:	e008      	b.n	8006acc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006aba:	f7fe fdf5 	bl	80056a8 <HAL_GetTick>
 8006abe:	0002      	movs	r2, r0
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e228      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006acc:	4b59      	ldr	r3, [pc, #356]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	d0f1      	beq.n	8006aba <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ad6:	4b57      	ldr	r3, [pc, #348]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	22f8      	movs	r2, #248	; 0xf8
 8006adc:	4393      	bics	r3, r2
 8006ade:	0019      	movs	r1, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	00da      	lsls	r2, r3, #3
 8006ae6:	4b53      	ldr	r3, [pc, #332]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	e018      	b.n	8006b20 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aee:	4b51      	ldr	r3, [pc, #324]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	4b50      	ldr	r3, [pc, #320]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006af4:	2101      	movs	r1, #1
 8006af6:	438a      	bics	r2, r1
 8006af8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006afa:	f7fe fdd5 	bl	80056a8 <HAL_GetTick>
 8006afe:	0003      	movs	r3, r0
 8006b00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b02:	e008      	b.n	8006b16 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b04:	f7fe fdd0 	bl	80056a8 <HAL_GetTick>
 8006b08:	0002      	movs	r2, r0
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e203      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b16:	4b47      	ldr	r3, [pc, #284]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	d1f1      	bne.n	8006b04 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2208      	movs	r2, #8
 8006b26:	4013      	ands	r3, r2
 8006b28:	d036      	beq.n	8006b98 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d019      	beq.n	8006b66 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b32:	4b40      	ldr	r3, [pc, #256]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b36:	4b3f      	ldr	r3, [pc, #252]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006b38:	2101      	movs	r1, #1
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b3e:	f7fe fdb3 	bl	80056a8 <HAL_GetTick>
 8006b42:	0003      	movs	r3, r0
 8006b44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b48:	f7fe fdae 	bl	80056a8 <HAL_GetTick>
 8006b4c:	0002      	movs	r2, r0
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e1e1      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b5a:	4b36      	ldr	r3, [pc, #216]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	2202      	movs	r2, #2
 8006b60:	4013      	ands	r3, r2
 8006b62:	d0f1      	beq.n	8006b48 <HAL_RCC_OscConfig+0x248>
 8006b64:	e018      	b.n	8006b98 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b66:	4b33      	ldr	r3, [pc, #204]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b6a:	4b32      	ldr	r3, [pc, #200]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	438a      	bics	r2, r1
 8006b70:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b72:	f7fe fd99 	bl	80056a8 <HAL_GetTick>
 8006b76:	0003      	movs	r3, r0
 8006b78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b7c:	f7fe fd94 	bl	80056a8 <HAL_GetTick>
 8006b80:	0002      	movs	r2, r0
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e1c7      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b8e:	4b29      	ldr	r3, [pc, #164]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b92:	2202      	movs	r2, #2
 8006b94:	4013      	ands	r3, r2
 8006b96:	d1f1      	bne.n	8006b7c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2204      	movs	r2, #4
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	d100      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x2a4>
 8006ba2:	e0b5      	b.n	8006d10 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ba4:	201f      	movs	r0, #31
 8006ba6:	183b      	adds	r3, r7, r0
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bac:	4b21      	ldr	r3, [pc, #132]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	2380      	movs	r3, #128	; 0x80
 8006bb2:	055b      	lsls	r3, r3, #21
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	d110      	bne.n	8006bda <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bb8:	4b1e      	ldr	r3, [pc, #120]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006bba:	69da      	ldr	r2, [r3, #28]
 8006bbc:	4b1d      	ldr	r3, [pc, #116]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006bbe:	2180      	movs	r1, #128	; 0x80
 8006bc0:	0549      	lsls	r1, r1, #21
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	61da      	str	r2, [r3, #28]
 8006bc6:	4b1b      	ldr	r3, [pc, #108]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006bc8:	69da      	ldr	r2, [r3, #28]
 8006bca:	2380      	movs	r3, #128	; 0x80
 8006bcc:	055b      	lsls	r3, r3, #21
 8006bce:	4013      	ands	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006bd4:	183b      	adds	r3, r7, r0
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bda:	4b19      	ldr	r3, [pc, #100]	; (8006c40 <HAL_RCC_OscConfig+0x340>)
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	2380      	movs	r3, #128	; 0x80
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	4013      	ands	r3, r2
 8006be4:	d11a      	bne.n	8006c1c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006be6:	4b16      	ldr	r3, [pc, #88]	; (8006c40 <HAL_RCC_OscConfig+0x340>)
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	4b15      	ldr	r3, [pc, #84]	; (8006c40 <HAL_RCC_OscConfig+0x340>)
 8006bec:	2180      	movs	r1, #128	; 0x80
 8006bee:	0049      	lsls	r1, r1, #1
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bf4:	f7fe fd58 	bl	80056a8 <HAL_GetTick>
 8006bf8:	0003      	movs	r3, r0
 8006bfa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bfe:	f7fe fd53 	bl	80056a8 <HAL_GetTick>
 8006c02:	0002      	movs	r2, r0
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b64      	cmp	r3, #100	; 0x64
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e186      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c10:	4b0b      	ldr	r3, [pc, #44]	; (8006c40 <HAL_RCC_OscConfig+0x340>)
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	2380      	movs	r3, #128	; 0x80
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	4013      	ands	r3, r2
 8006c1a:	d0f0      	beq.n	8006bfe <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d10f      	bne.n	8006c44 <HAL_RCC_OscConfig+0x344>
 8006c24:	4b03      	ldr	r3, [pc, #12]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006c26:	6a1a      	ldr	r2, [r3, #32]
 8006c28:	4b02      	ldr	r3, [pc, #8]	; (8006c34 <HAL_RCC_OscConfig+0x334>)
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	621a      	str	r2, [r3, #32]
 8006c30:	e036      	b.n	8006ca0 <HAL_RCC_OscConfig+0x3a0>
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	40021000 	.word	0x40021000
 8006c38:	fffeffff 	.word	0xfffeffff
 8006c3c:	fffbffff 	.word	0xfffbffff
 8006c40:	40007000 	.word	0x40007000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10c      	bne.n	8006c66 <HAL_RCC_OscConfig+0x366>
 8006c4c:	4bb6      	ldr	r3, [pc, #728]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006c4e:	6a1a      	ldr	r2, [r3, #32]
 8006c50:	4bb5      	ldr	r3, [pc, #724]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006c52:	2101      	movs	r1, #1
 8006c54:	438a      	bics	r2, r1
 8006c56:	621a      	str	r2, [r3, #32]
 8006c58:	4bb3      	ldr	r3, [pc, #716]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006c5a:	6a1a      	ldr	r2, [r3, #32]
 8006c5c:	4bb2      	ldr	r3, [pc, #712]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006c5e:	2104      	movs	r1, #4
 8006c60:	438a      	bics	r2, r1
 8006c62:	621a      	str	r2, [r3, #32]
 8006c64:	e01c      	b.n	8006ca0 <HAL_RCC_OscConfig+0x3a0>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	2b05      	cmp	r3, #5
 8006c6c:	d10c      	bne.n	8006c88 <HAL_RCC_OscConfig+0x388>
 8006c6e:	4bae      	ldr	r3, [pc, #696]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006c70:	6a1a      	ldr	r2, [r3, #32]
 8006c72:	4bad      	ldr	r3, [pc, #692]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006c74:	2104      	movs	r1, #4
 8006c76:	430a      	orrs	r2, r1
 8006c78:	621a      	str	r2, [r3, #32]
 8006c7a:	4bab      	ldr	r3, [pc, #684]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006c7c:	6a1a      	ldr	r2, [r3, #32]
 8006c7e:	4baa      	ldr	r3, [pc, #680]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006c80:	2101      	movs	r1, #1
 8006c82:	430a      	orrs	r2, r1
 8006c84:	621a      	str	r2, [r3, #32]
 8006c86:	e00b      	b.n	8006ca0 <HAL_RCC_OscConfig+0x3a0>
 8006c88:	4ba7      	ldr	r3, [pc, #668]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006c8a:	6a1a      	ldr	r2, [r3, #32]
 8006c8c:	4ba6      	ldr	r3, [pc, #664]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006c8e:	2101      	movs	r1, #1
 8006c90:	438a      	bics	r2, r1
 8006c92:	621a      	str	r2, [r3, #32]
 8006c94:	4ba4      	ldr	r3, [pc, #656]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006c96:	6a1a      	ldr	r2, [r3, #32]
 8006c98:	4ba3      	ldr	r3, [pc, #652]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006c9a:	2104      	movs	r1, #4
 8006c9c:	438a      	bics	r2, r1
 8006c9e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d014      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ca8:	f7fe fcfe 	bl	80056a8 <HAL_GetTick>
 8006cac:	0003      	movs	r3, r0
 8006cae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cb0:	e009      	b.n	8006cc6 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cb2:	f7fe fcf9 	bl	80056a8 <HAL_GetTick>
 8006cb6:	0002      	movs	r2, r0
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	4a9b      	ldr	r2, [pc, #620]	; (8006f2c <HAL_RCC_OscConfig+0x62c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e12b      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cc6:	4b98      	ldr	r3, [pc, #608]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	4013      	ands	r3, r2
 8006cce:	d0f0      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x3b2>
 8006cd0:	e013      	b.n	8006cfa <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cd2:	f7fe fce9 	bl	80056a8 <HAL_GetTick>
 8006cd6:	0003      	movs	r3, r0
 8006cd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cda:	e009      	b.n	8006cf0 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cdc:	f7fe fce4 	bl	80056a8 <HAL_GetTick>
 8006ce0:	0002      	movs	r2, r0
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	4a91      	ldr	r2, [pc, #580]	; (8006f2c <HAL_RCC_OscConfig+0x62c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d901      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e116      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cf0:	4b8d      	ldr	r3, [pc, #564]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	d1f0      	bne.n	8006cdc <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006cfa:	231f      	movs	r3, #31
 8006cfc:	18fb      	adds	r3, r7, r3
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d105      	bne.n	8006d10 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d04:	4b88      	ldr	r3, [pc, #544]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006d06:	69da      	ldr	r2, [r3, #28]
 8006d08:	4b87      	ldr	r3, [pc, #540]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006d0a:	4989      	ldr	r1, [pc, #548]	; (8006f30 <HAL_RCC_OscConfig+0x630>)
 8006d0c:	400a      	ands	r2, r1
 8006d0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2210      	movs	r2, #16
 8006d16:	4013      	ands	r3, r2
 8006d18:	d063      	beq.n	8006de2 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d12a      	bne.n	8006d78 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006d22:	4b81      	ldr	r3, [pc, #516]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d26:	4b80      	ldr	r3, [pc, #512]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006d28:	2104      	movs	r1, #4
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006d2e:	4b7e      	ldr	r3, [pc, #504]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d32:	4b7d      	ldr	r3, [pc, #500]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006d34:	2101      	movs	r1, #1
 8006d36:	430a      	orrs	r2, r1
 8006d38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d3a:	f7fe fcb5 	bl	80056a8 <HAL_GetTick>
 8006d3e:	0003      	movs	r3, r0
 8006d40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006d44:	f7fe fcb0 	bl	80056a8 <HAL_GetTick>
 8006d48:	0002      	movs	r2, r0
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e0e3      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006d56:	4b74      	ldr	r3, [pc, #464]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	d0f1      	beq.n	8006d44 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006d60:	4b71      	ldr	r3, [pc, #452]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d64:	22f8      	movs	r2, #248	; 0xf8
 8006d66:	4393      	bics	r3, r2
 8006d68:	0019      	movs	r1, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	00da      	lsls	r2, r3, #3
 8006d70:	4b6d      	ldr	r3, [pc, #436]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006d72:	430a      	orrs	r2, r1
 8006d74:	635a      	str	r2, [r3, #52]	; 0x34
 8006d76:	e034      	b.n	8006de2 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	3305      	adds	r3, #5
 8006d7e:	d111      	bne.n	8006da4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006d80:	4b69      	ldr	r3, [pc, #420]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d84:	4b68      	ldr	r3, [pc, #416]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006d86:	2104      	movs	r1, #4
 8006d88:	438a      	bics	r2, r1
 8006d8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006d8c:	4b66      	ldr	r3, [pc, #408]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d90:	22f8      	movs	r2, #248	; 0xf8
 8006d92:	4393      	bics	r3, r2
 8006d94:	0019      	movs	r1, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	00da      	lsls	r2, r3, #3
 8006d9c:	4b62      	ldr	r3, [pc, #392]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	635a      	str	r2, [r3, #52]	; 0x34
 8006da2:	e01e      	b.n	8006de2 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006da4:	4b60      	ldr	r3, [pc, #384]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da8:	4b5f      	ldr	r3, [pc, #380]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006daa:	2104      	movs	r1, #4
 8006dac:	430a      	orrs	r2, r1
 8006dae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006db0:	4b5d      	ldr	r3, [pc, #372]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db4:	4b5c      	ldr	r3, [pc, #368]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006db6:	2101      	movs	r1, #1
 8006db8:	438a      	bics	r2, r1
 8006dba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dbc:	f7fe fc74 	bl	80056a8 <HAL_GetTick>
 8006dc0:	0003      	movs	r3, r0
 8006dc2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006dc4:	e008      	b.n	8006dd8 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006dc6:	f7fe fc6f 	bl	80056a8 <HAL_GetTick>
 8006dca:	0002      	movs	r2, r0
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d901      	bls.n	8006dd8 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e0a2      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006dd8:	4b53      	ldr	r3, [pc, #332]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ddc:	2202      	movs	r2, #2
 8006dde:	4013      	ands	r3, r2
 8006de0:	d1f1      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d100      	bne.n	8006dec <HAL_RCC_OscConfig+0x4ec>
 8006dea:	e097      	b.n	8006f1c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006dec:	4b4e      	ldr	r3, [pc, #312]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	220c      	movs	r2, #12
 8006df2:	4013      	ands	r3, r2
 8006df4:	2b08      	cmp	r3, #8
 8006df6:	d100      	bne.n	8006dfa <HAL_RCC_OscConfig+0x4fa>
 8006df8:	e06b      	b.n	8006ed2 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d14c      	bne.n	8006e9c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e02:	4b49      	ldr	r3, [pc, #292]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	4b48      	ldr	r3, [pc, #288]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006e08:	494a      	ldr	r1, [pc, #296]	; (8006f34 <HAL_RCC_OscConfig+0x634>)
 8006e0a:	400a      	ands	r2, r1
 8006e0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0e:	f7fe fc4b 	bl	80056a8 <HAL_GetTick>
 8006e12:	0003      	movs	r3, r0
 8006e14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e16:	e008      	b.n	8006e2a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e18:	f7fe fc46 	bl	80056a8 <HAL_GetTick>
 8006e1c:	0002      	movs	r2, r0
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d901      	bls.n	8006e2a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e079      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e2a:	4b3f      	ldr	r3, [pc, #252]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	2380      	movs	r3, #128	; 0x80
 8006e30:	049b      	lsls	r3, r3, #18
 8006e32:	4013      	ands	r3, r2
 8006e34:	d1f0      	bne.n	8006e18 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e36:	4b3c      	ldr	r3, [pc, #240]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3a:	220f      	movs	r2, #15
 8006e3c:	4393      	bics	r3, r2
 8006e3e:	0019      	movs	r1, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e44:	4b38      	ldr	r3, [pc, #224]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006e46:	430a      	orrs	r2, r1
 8006e48:	62da      	str	r2, [r3, #44]	; 0x2c
 8006e4a:	4b37      	ldr	r3, [pc, #220]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	4a3a      	ldr	r2, [pc, #232]	; (8006f38 <HAL_RCC_OscConfig+0x638>)
 8006e50:	4013      	ands	r3, r2
 8006e52:	0019      	movs	r1, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	4b32      	ldr	r3, [pc, #200]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006e60:	430a      	orrs	r2, r1
 8006e62:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e64:	4b30      	ldr	r3, [pc, #192]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	4b2f      	ldr	r3, [pc, #188]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006e6a:	2180      	movs	r1, #128	; 0x80
 8006e6c:	0449      	lsls	r1, r1, #17
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e72:	f7fe fc19 	bl	80056a8 <HAL_GetTick>
 8006e76:	0003      	movs	r3, r0
 8006e78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e7c:	f7fe fc14 	bl	80056a8 <HAL_GetTick>
 8006e80:	0002      	movs	r2, r0
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e047      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e8e:	4b26      	ldr	r3, [pc, #152]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	2380      	movs	r3, #128	; 0x80
 8006e94:	049b      	lsls	r3, r3, #18
 8006e96:	4013      	ands	r3, r2
 8006e98:	d0f0      	beq.n	8006e7c <HAL_RCC_OscConfig+0x57c>
 8006e9a:	e03f      	b.n	8006f1c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e9c:	4b22      	ldr	r3, [pc, #136]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	4b21      	ldr	r3, [pc, #132]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006ea2:	4924      	ldr	r1, [pc, #144]	; (8006f34 <HAL_RCC_OscConfig+0x634>)
 8006ea4:	400a      	ands	r2, r1
 8006ea6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ea8:	f7fe fbfe 	bl	80056a8 <HAL_GetTick>
 8006eac:	0003      	movs	r3, r0
 8006eae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006eb0:	e008      	b.n	8006ec4 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eb2:	f7fe fbf9 	bl	80056a8 <HAL_GetTick>
 8006eb6:	0002      	movs	r2, r0
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d901      	bls.n	8006ec4 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e02c      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ec4:	4b18      	ldr	r3, [pc, #96]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	2380      	movs	r3, #128	; 0x80
 8006eca:	049b      	lsls	r3, r3, #18
 8006ecc:	4013      	ands	r3, r2
 8006ece:	d1f0      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x5b2>
 8006ed0:	e024      	b.n	8006f1c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d101      	bne.n	8006ede <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e01f      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006ede:	4b12      	ldr	r3, [pc, #72]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006ee4:	4b10      	ldr	r3, [pc, #64]	; (8006f28 <HAL_RCC_OscConfig+0x628>)
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	23c0      	movs	r3, #192	; 0xc0
 8006eee:	025b      	lsls	r3, r3, #9
 8006ef0:	401a      	ands	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d10e      	bne.n	8006f18 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	220f      	movs	r2, #15
 8006efe:	401a      	ands	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d107      	bne.n	8006f18 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	23f0      	movs	r3, #240	; 0xf0
 8006f0c:	039b      	lsls	r3, r3, #14
 8006f0e:	401a      	ands	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d001      	beq.n	8006f1c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e000      	b.n	8006f1e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	0018      	movs	r0, r3
 8006f20:	46bd      	mov	sp, r7
 8006f22:	b008      	add	sp, #32
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	46c0      	nop			; (mov r8, r8)
 8006f28:	40021000 	.word	0x40021000
 8006f2c:	00001388 	.word	0x00001388
 8006f30:	efffffff 	.word	0xefffffff
 8006f34:	feffffff 	.word	0xfeffffff
 8006f38:	ffc27fff 	.word	0xffc27fff

08006f3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e0b3      	b.n	80070b8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f50:	4b5b      	ldr	r3, [pc, #364]	; (80070c0 <HAL_RCC_ClockConfig+0x184>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2201      	movs	r2, #1
 8006f56:	4013      	ands	r3, r2
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d911      	bls.n	8006f82 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f5e:	4b58      	ldr	r3, [pc, #352]	; (80070c0 <HAL_RCC_ClockConfig+0x184>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2201      	movs	r2, #1
 8006f64:	4393      	bics	r3, r2
 8006f66:	0019      	movs	r1, r3
 8006f68:	4b55      	ldr	r3, [pc, #340]	; (80070c0 <HAL_RCC_ClockConfig+0x184>)
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f70:	4b53      	ldr	r3, [pc, #332]	; (80070c0 <HAL_RCC_ClockConfig+0x184>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2201      	movs	r2, #1
 8006f76:	4013      	ands	r3, r2
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d001      	beq.n	8006f82 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e09a      	b.n	80070b8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2202      	movs	r2, #2
 8006f88:	4013      	ands	r3, r2
 8006f8a:	d015      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2204      	movs	r2, #4
 8006f92:	4013      	ands	r3, r2
 8006f94:	d006      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006f96:	4b4b      	ldr	r3, [pc, #300]	; (80070c4 <HAL_RCC_ClockConfig+0x188>)
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	4b4a      	ldr	r3, [pc, #296]	; (80070c4 <HAL_RCC_ClockConfig+0x188>)
 8006f9c:	21e0      	movs	r1, #224	; 0xe0
 8006f9e:	00c9      	lsls	r1, r1, #3
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fa4:	4b47      	ldr	r3, [pc, #284]	; (80070c4 <HAL_RCC_ClockConfig+0x188>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	22f0      	movs	r2, #240	; 0xf0
 8006faa:	4393      	bics	r3, r2
 8006fac:	0019      	movs	r1, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	4b44      	ldr	r3, [pc, #272]	; (80070c4 <HAL_RCC_ClockConfig+0x188>)
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	d040      	beq.n	8007044 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d107      	bne.n	8006fda <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fca:	4b3e      	ldr	r3, [pc, #248]	; (80070c4 <HAL_RCC_ClockConfig+0x188>)
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	2380      	movs	r3, #128	; 0x80
 8006fd0:	029b      	lsls	r3, r3, #10
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d114      	bne.n	8007000 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e06e      	b.n	80070b8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d107      	bne.n	8006ff2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fe2:	4b38      	ldr	r3, [pc, #224]	; (80070c4 <HAL_RCC_ClockConfig+0x188>)
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	2380      	movs	r3, #128	; 0x80
 8006fe8:	049b      	lsls	r3, r3, #18
 8006fea:	4013      	ands	r3, r2
 8006fec:	d108      	bne.n	8007000 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e062      	b.n	80070b8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff2:	4b34      	ldr	r3, [pc, #208]	; (80070c4 <HAL_RCC_ClockConfig+0x188>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	d101      	bne.n	8007000 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e05b      	b.n	80070b8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007000:	4b30      	ldr	r3, [pc, #192]	; (80070c4 <HAL_RCC_ClockConfig+0x188>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	2203      	movs	r2, #3
 8007006:	4393      	bics	r3, r2
 8007008:	0019      	movs	r1, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	4b2d      	ldr	r3, [pc, #180]	; (80070c4 <HAL_RCC_ClockConfig+0x188>)
 8007010:	430a      	orrs	r2, r1
 8007012:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007014:	f7fe fb48 	bl	80056a8 <HAL_GetTick>
 8007018:	0003      	movs	r3, r0
 800701a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800701c:	e009      	b.n	8007032 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800701e:	f7fe fb43 	bl	80056a8 <HAL_GetTick>
 8007022:	0002      	movs	r2, r0
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	4a27      	ldr	r2, [pc, #156]	; (80070c8 <HAL_RCC_ClockConfig+0x18c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d901      	bls.n	8007032 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e042      	b.n	80070b8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007032:	4b24      	ldr	r3, [pc, #144]	; (80070c4 <HAL_RCC_ClockConfig+0x188>)
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	220c      	movs	r2, #12
 8007038:	401a      	ands	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	429a      	cmp	r2, r3
 8007042:	d1ec      	bne.n	800701e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007044:	4b1e      	ldr	r3, [pc, #120]	; (80070c0 <HAL_RCC_ClockConfig+0x184>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2201      	movs	r2, #1
 800704a:	4013      	ands	r3, r2
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d211      	bcs.n	8007076 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007052:	4b1b      	ldr	r3, [pc, #108]	; (80070c0 <HAL_RCC_ClockConfig+0x184>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2201      	movs	r2, #1
 8007058:	4393      	bics	r3, r2
 800705a:	0019      	movs	r1, r3
 800705c:	4b18      	ldr	r3, [pc, #96]	; (80070c0 <HAL_RCC_ClockConfig+0x184>)
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007064:	4b16      	ldr	r3, [pc, #88]	; (80070c0 <HAL_RCC_ClockConfig+0x184>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2201      	movs	r2, #1
 800706a:	4013      	ands	r3, r2
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d001      	beq.n	8007076 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e020      	b.n	80070b8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2204      	movs	r2, #4
 800707c:	4013      	ands	r3, r2
 800707e:	d009      	beq.n	8007094 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007080:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <HAL_RCC_ClockConfig+0x188>)
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	4a11      	ldr	r2, [pc, #68]	; (80070cc <HAL_RCC_ClockConfig+0x190>)
 8007086:	4013      	ands	r3, r2
 8007088:	0019      	movs	r1, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	4b0d      	ldr	r3, [pc, #52]	; (80070c4 <HAL_RCC_ClockConfig+0x188>)
 8007090:	430a      	orrs	r2, r1
 8007092:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007094:	f000 f820 	bl	80070d8 <HAL_RCC_GetSysClockFreq>
 8007098:	0001      	movs	r1, r0
 800709a:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <HAL_RCC_ClockConfig+0x188>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	091b      	lsrs	r3, r3, #4
 80070a0:	220f      	movs	r2, #15
 80070a2:	4013      	ands	r3, r2
 80070a4:	4a0a      	ldr	r2, [pc, #40]	; (80070d0 <HAL_RCC_ClockConfig+0x194>)
 80070a6:	5cd3      	ldrb	r3, [r2, r3]
 80070a8:	000a      	movs	r2, r1
 80070aa:	40da      	lsrs	r2, r3
 80070ac:	4b09      	ldr	r3, [pc, #36]	; (80070d4 <HAL_RCC_ClockConfig+0x198>)
 80070ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80070b0:	2000      	movs	r0, #0
 80070b2:	f7fd ff47 	bl	8004f44 <HAL_InitTick>
  
  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	0018      	movs	r0, r3
 80070ba:	46bd      	mov	sp, r7
 80070bc:	b004      	add	sp, #16
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	40022000 	.word	0x40022000
 80070c4:	40021000 	.word	0x40021000
 80070c8:	00001388 	.word	0x00001388
 80070cc:	fffff8ff 	.word	0xfffff8ff
 80070d0:	0800e76c 	.word	0x0800e76c
 80070d4:	20000018 	.word	0x20000018

080070d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070d8:	b590      	push	{r4, r7, lr}
 80070da:	b08f      	sub	sp, #60	; 0x3c
 80070dc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80070de:	2314      	movs	r3, #20
 80070e0:	18fb      	adds	r3, r7, r3
 80070e2:	4a2c      	ldr	r2, [pc, #176]	; (8007194 <HAL_RCC_GetSysClockFreq+0xbc>)
 80070e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80070e6:	c313      	stmia	r3!, {r0, r1, r4}
 80070e8:	6812      	ldr	r2, [r2, #0]
 80070ea:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80070ec:	1d3b      	adds	r3, r7, #4
 80070ee:	4a2a      	ldr	r2, [pc, #168]	; (8007198 <HAL_RCC_GetSysClockFreq+0xc0>)
 80070f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80070f2:	c313      	stmia	r3!, {r0, r1, r4}
 80070f4:	6812      	ldr	r2, [r2, #0]
 80070f6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070fc:	2300      	movs	r3, #0
 80070fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007100:	2300      	movs	r3, #0
 8007102:	637b      	str	r3, [r7, #52]	; 0x34
 8007104:	2300      	movs	r3, #0
 8007106:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8007108:	2300      	movs	r3, #0
 800710a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800710c:	4b23      	ldr	r3, [pc, #140]	; (800719c <HAL_RCC_GetSysClockFreq+0xc4>)
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007114:	220c      	movs	r2, #12
 8007116:	4013      	ands	r3, r2
 8007118:	2b04      	cmp	r3, #4
 800711a:	d002      	beq.n	8007122 <HAL_RCC_GetSysClockFreq+0x4a>
 800711c:	2b08      	cmp	r3, #8
 800711e:	d003      	beq.n	8007128 <HAL_RCC_GetSysClockFreq+0x50>
 8007120:	e02f      	b.n	8007182 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007122:	4b1f      	ldr	r3, [pc, #124]	; (80071a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007124:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007126:	e02f      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8007128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712a:	0c9b      	lsrs	r3, r3, #18
 800712c:	220f      	movs	r2, #15
 800712e:	4013      	ands	r3, r2
 8007130:	2214      	movs	r2, #20
 8007132:	18ba      	adds	r2, r7, r2
 8007134:	5cd3      	ldrb	r3, [r2, r3]
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8007138:	4b18      	ldr	r3, [pc, #96]	; (800719c <HAL_RCC_GetSysClockFreq+0xc4>)
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713c:	220f      	movs	r2, #15
 800713e:	4013      	ands	r3, r2
 8007140:	1d3a      	adds	r2, r7, #4
 8007142:	5cd3      	ldrb	r3, [r2, r3]
 8007144:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007148:	23c0      	movs	r3, #192	; 0xc0
 800714a:	025b      	lsls	r3, r3, #9
 800714c:	401a      	ands	r2, r3
 800714e:	2380      	movs	r3, #128	; 0x80
 8007150:	025b      	lsls	r3, r3, #9
 8007152:	429a      	cmp	r2, r3
 8007154:	d109      	bne.n	800716a <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007158:	4811      	ldr	r0, [pc, #68]	; (80071a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800715a:	f7f8 ffdf 	bl	800011c <__udivsi3>
 800715e:	0003      	movs	r3, r0
 8007160:	001a      	movs	r2, r3
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	4353      	muls	r3, r2
 8007166:	637b      	str	r3, [r7, #52]	; 0x34
 8007168:	e008      	b.n	800717c <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800716a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800716c:	480c      	ldr	r0, [pc, #48]	; (80071a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800716e:	f7f8 ffd5 	bl	800011c <__udivsi3>
 8007172:	0003      	movs	r3, r0
 8007174:	001a      	movs	r2, r3
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	4353      	muls	r3, r2
 800717a:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800717c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800717e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007180:	e002      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007182:	4b07      	ldr	r3, [pc, #28]	; (80071a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007184:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007186:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800718a:	0018      	movs	r0, r3
 800718c:	46bd      	mov	sp, r7
 800718e:	b00f      	add	sp, #60	; 0x3c
 8007190:	bd90      	pop	{r4, r7, pc}
 8007192:	46c0      	nop			; (mov r8, r8)
 8007194:	0800b680 	.word	0x0800b680
 8007198:	0800b690 	.word	0x0800b690
 800719c:	40021000 	.word	0x40021000
 80071a0:	007a1200 	.word	0x007a1200

080071a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071a8:	4b02      	ldr	r3, [pc, #8]	; (80071b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80071aa:	681b      	ldr	r3, [r3, #0]
}
 80071ac:	0018      	movs	r0, r3
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	46c0      	nop			; (mov r8, r8)
 80071b4:	20000018 	.word	0x20000018

080071b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80071bc:	f7ff fff2 	bl	80071a4 <HAL_RCC_GetHCLKFreq>
 80071c0:	0001      	movs	r1, r0
 80071c2:	4b06      	ldr	r3, [pc, #24]	; (80071dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	0a1b      	lsrs	r3, r3, #8
 80071c8:	2207      	movs	r2, #7
 80071ca:	4013      	ands	r3, r2
 80071cc:	4a04      	ldr	r2, [pc, #16]	; (80071e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80071ce:	5cd3      	ldrb	r3, [r2, r3]
 80071d0:	40d9      	lsrs	r1, r3
 80071d2:	000b      	movs	r3, r1
}    
 80071d4:	0018      	movs	r0, r3
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	46c0      	nop			; (mov r8, r8)
 80071dc:	40021000 	.word	0x40021000
 80071e0:	0800e77c 	.word	0x0800e77c

080071e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2207      	movs	r2, #7
 80071f2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80071f4:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <HAL_RCC_GetClockConfig+0x4c>)
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2203      	movs	r2, #3
 80071fa:	401a      	ands	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8007200:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <HAL_RCC_GetClockConfig+0x4c>)
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	22f0      	movs	r2, #240	; 0xf0
 8007206:	401a      	ands	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800720c:	4b08      	ldr	r3, [pc, #32]	; (8007230 <HAL_RCC_GetClockConfig+0x4c>)
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	23e0      	movs	r3, #224	; 0xe0
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	401a      	ands	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800721a:	4b06      	ldr	r3, [pc, #24]	; (8007234 <HAL_RCC_GetClockConfig+0x50>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2201      	movs	r2, #1
 8007220:	401a      	ands	r2, r3
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	601a      	str	r2, [r3, #0]
}
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	46bd      	mov	sp, r7
 800722a:	b002      	add	sp, #8
 800722c:	bd80      	pop	{r7, pc}
 800722e:	46c0      	nop			; (mov r8, r8)
 8007230:	40021000 	.word	0x40021000
 8007234:	40022000 	.word	0x40022000

08007238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	2380      	movs	r3, #128	; 0x80
 800724e:	025b      	lsls	r3, r3, #9
 8007250:	4013      	ands	r3, r2
 8007252:	d100      	bne.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8007254:	e08e      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8007256:	2017      	movs	r0, #23
 8007258:	183b      	adds	r3, r7, r0
 800725a:	2200      	movs	r2, #0
 800725c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800725e:	4b5f      	ldr	r3, [pc, #380]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007260:	69da      	ldr	r2, [r3, #28]
 8007262:	2380      	movs	r3, #128	; 0x80
 8007264:	055b      	lsls	r3, r3, #21
 8007266:	4013      	ands	r3, r2
 8007268:	d110      	bne.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800726a:	4b5c      	ldr	r3, [pc, #368]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800726c:	69da      	ldr	r2, [r3, #28]
 800726e:	4b5b      	ldr	r3, [pc, #364]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007270:	2180      	movs	r1, #128	; 0x80
 8007272:	0549      	lsls	r1, r1, #21
 8007274:	430a      	orrs	r2, r1
 8007276:	61da      	str	r2, [r3, #28]
 8007278:	4b58      	ldr	r3, [pc, #352]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800727a:	69da      	ldr	r2, [r3, #28]
 800727c:	2380      	movs	r3, #128	; 0x80
 800727e:	055b      	lsls	r3, r3, #21
 8007280:	4013      	ands	r3, r2
 8007282:	60bb      	str	r3, [r7, #8]
 8007284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007286:	183b      	adds	r3, r7, r0
 8007288:	2201      	movs	r2, #1
 800728a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800728c:	4b54      	ldr	r3, [pc, #336]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	2380      	movs	r3, #128	; 0x80
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	4013      	ands	r3, r2
 8007296:	d11a      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007298:	4b51      	ldr	r3, [pc, #324]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	4b50      	ldr	r3, [pc, #320]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800729e:	2180      	movs	r1, #128	; 0x80
 80072a0:	0049      	lsls	r1, r1, #1
 80072a2:	430a      	orrs	r2, r1
 80072a4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072a6:	f7fe f9ff 	bl	80056a8 <HAL_GetTick>
 80072aa:	0003      	movs	r3, r0
 80072ac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ae:	e008      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072b0:	f7fe f9fa 	bl	80056a8 <HAL_GetTick>
 80072b4:	0002      	movs	r2, r0
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	2b64      	cmp	r3, #100	; 0x64
 80072bc:	d901      	bls.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e087      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072c2:	4b47      	ldr	r3, [pc, #284]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	2380      	movs	r3, #128	; 0x80
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	4013      	ands	r3, r2
 80072cc:	d0f0      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072ce:	4b43      	ldr	r3, [pc, #268]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80072d0:	6a1a      	ldr	r2, [r3, #32]
 80072d2:	23c0      	movs	r3, #192	; 0xc0
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4013      	ands	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d034      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	23c0      	movs	r3, #192	; 0xc0
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4013      	ands	r3, r2
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d02c      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072f0:	4b3a      	ldr	r3, [pc, #232]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	4a3b      	ldr	r2, [pc, #236]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072f6:	4013      	ands	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072fa:	4b38      	ldr	r3, [pc, #224]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80072fc:	6a1a      	ldr	r2, [r3, #32]
 80072fe:	4b37      	ldr	r3, [pc, #220]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007300:	2180      	movs	r1, #128	; 0x80
 8007302:	0249      	lsls	r1, r1, #9
 8007304:	430a      	orrs	r2, r1
 8007306:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007308:	4b34      	ldr	r3, [pc, #208]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800730a:	6a1a      	ldr	r2, [r3, #32]
 800730c:	4b33      	ldr	r3, [pc, #204]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800730e:	4936      	ldr	r1, [pc, #216]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007310:	400a      	ands	r2, r1
 8007312:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007314:	4b31      	ldr	r3, [pc, #196]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2201      	movs	r2, #1
 800731e:	4013      	ands	r3, r2
 8007320:	d013      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007322:	f7fe f9c1 	bl	80056a8 <HAL_GetTick>
 8007326:	0003      	movs	r3, r0
 8007328:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800732a:	e009      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800732c:	f7fe f9bc 	bl	80056a8 <HAL_GetTick>
 8007330:	0002      	movs	r2, r0
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	4a2d      	ldr	r2, [pc, #180]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d901      	bls.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e048      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007340:	4b26      	ldr	r3, [pc, #152]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	2202      	movs	r2, #2
 8007346:	4013      	ands	r3, r2
 8007348:	d0f0      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800734a:	4b24      	ldr	r3, [pc, #144]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	4a25      	ldr	r2, [pc, #148]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007350:	4013      	ands	r3, r2
 8007352:	0019      	movs	r1, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	4b20      	ldr	r3, [pc, #128]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800735a:	430a      	orrs	r2, r1
 800735c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800735e:	2317      	movs	r3, #23
 8007360:	18fb      	adds	r3, r7, r3
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d105      	bne.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007368:	4b1c      	ldr	r3, [pc, #112]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800736a:	69da      	ldr	r2, [r3, #28]
 800736c:	4b1b      	ldr	r3, [pc, #108]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800736e:	4920      	ldr	r1, [pc, #128]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007370:	400a      	ands	r2, r1
 8007372:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2201      	movs	r2, #1
 800737a:	4013      	ands	r3, r2
 800737c:	d009      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800737e:	4b17      	ldr	r3, [pc, #92]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	2203      	movs	r2, #3
 8007384:	4393      	bics	r3, r2
 8007386:	0019      	movs	r1, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	4b13      	ldr	r3, [pc, #76]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800738e:	430a      	orrs	r2, r1
 8007390:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2220      	movs	r2, #32
 8007398:	4013      	ands	r3, r2
 800739a:	d009      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800739c:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800739e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a0:	2210      	movs	r2, #16
 80073a2:	4393      	bics	r3, r2
 80073a4:	0019      	movs	r1, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	4b0c      	ldr	r3, [pc, #48]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80073ac:	430a      	orrs	r2, r1
 80073ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	2380      	movs	r3, #128	; 0x80
 80073b6:	029b      	lsls	r3, r3, #10
 80073b8:	4013      	ands	r3, r2
 80073ba:	d009      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073bc:	4b07      	ldr	r3, [pc, #28]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80073be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c0:	2280      	movs	r2, #128	; 0x80
 80073c2:	4393      	bics	r3, r2
 80073c4:	0019      	movs	r1, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691a      	ldr	r2, [r3, #16]
 80073ca:	4b04      	ldr	r3, [pc, #16]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80073cc:	430a      	orrs	r2, r1
 80073ce:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	0018      	movs	r0, r3
 80073d4:	46bd      	mov	sp, r7
 80073d6:	b006      	add	sp, #24
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	46c0      	nop			; (mov r8, r8)
 80073dc:	40021000 	.word	0x40021000
 80073e0:	40007000 	.word	0x40007000
 80073e4:	fffffcff 	.word	0xfffffcff
 80073e8:	fffeffff 	.word	0xfffeffff
 80073ec:	00001388 	.word	0x00001388
 80073f0:	efffffff 	.word	0xefffffff

080073f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e042      	b.n	800748c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	223d      	movs	r2, #61	; 0x3d
 800740a:	5c9b      	ldrb	r3, [r3, r2]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d107      	bne.n	8007422 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	223c      	movs	r2, #60	; 0x3c
 8007416:	2100      	movs	r1, #0
 8007418:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	0018      	movs	r0, r3
 800741e:	f000 f839 	bl	8007494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	223d      	movs	r2, #61	; 0x3d
 8007426:	2102      	movs	r1, #2
 8007428:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3304      	adds	r3, #4
 8007432:	0019      	movs	r1, r3
 8007434:	0010      	movs	r0, r2
 8007436:	f000 f9b7 	bl	80077a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2246      	movs	r2, #70	; 0x46
 800743e:	2101      	movs	r1, #1
 8007440:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	223e      	movs	r2, #62	; 0x3e
 8007446:	2101      	movs	r1, #1
 8007448:	5499      	strb	r1, [r3, r2]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	223f      	movs	r2, #63	; 0x3f
 800744e:	2101      	movs	r1, #1
 8007450:	5499      	strb	r1, [r3, r2]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2240      	movs	r2, #64	; 0x40
 8007456:	2101      	movs	r1, #1
 8007458:	5499      	strb	r1, [r3, r2]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2241      	movs	r2, #65	; 0x41
 800745e:	2101      	movs	r1, #1
 8007460:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2242      	movs	r2, #66	; 0x42
 8007466:	2101      	movs	r1, #1
 8007468:	5499      	strb	r1, [r3, r2]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2243      	movs	r2, #67	; 0x43
 800746e:	2101      	movs	r1, #1
 8007470:	5499      	strb	r1, [r3, r2]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2244      	movs	r2, #68	; 0x44
 8007476:	2101      	movs	r1, #1
 8007478:	5499      	strb	r1, [r3, r2]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2245      	movs	r2, #69	; 0x45
 800747e:	2101      	movs	r1, #1
 8007480:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	223d      	movs	r2, #61	; 0x3d
 8007486:	2101      	movs	r1, #1
 8007488:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	0018      	movs	r0, r3
 800748e:	46bd      	mov	sp, r7
 8007490:	b002      	add	sp, #8
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800749c:	46c0      	nop			; (mov r8, r8)
 800749e:	46bd      	mov	sp, r7
 80074a0:	b002      	add	sp, #8
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	223d      	movs	r2, #61	; 0x3d
 80074b0:	5c9b      	ldrb	r3, [r3, r2]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d001      	beq.n	80074bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e035      	b.n	8007528 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	223d      	movs	r2, #61	; 0x3d
 80074c0:	2102      	movs	r1, #2
 80074c2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68da      	ldr	r2, [r3, #12]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2101      	movs	r1, #1
 80074d0:	430a      	orrs	r2, r1
 80074d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a15      	ldr	r2, [pc, #84]	; (8007530 <HAL_TIM_Base_Start_IT+0x8c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d009      	beq.n	80074f2 <HAL_TIM_Base_Start_IT+0x4e>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a14      	ldr	r2, [pc, #80]	; (8007534 <HAL_TIM_Base_Start_IT+0x90>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d004      	beq.n	80074f2 <HAL_TIM_Base_Start_IT+0x4e>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a12      	ldr	r2, [pc, #72]	; (8007538 <HAL_TIM_Base_Start_IT+0x94>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d111      	bne.n	8007516 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	2207      	movs	r2, #7
 80074fa:	4013      	ands	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b06      	cmp	r3, #6
 8007502:	d010      	beq.n	8007526 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2101      	movs	r1, #1
 8007510:	430a      	orrs	r2, r1
 8007512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007514:	e007      	b.n	8007526 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2101      	movs	r1, #1
 8007522:	430a      	orrs	r2, r1
 8007524:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	0018      	movs	r0, r3
 800752a:	46bd      	mov	sp, r7
 800752c:	b004      	add	sp, #16
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40012c00 	.word	0x40012c00
 8007534:	40000400 	.word	0x40000400
 8007538:	40014000 	.word	0x40014000

0800753c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	2202      	movs	r2, #2
 800754c:	4013      	ands	r3, r2
 800754e:	2b02      	cmp	r3, #2
 8007550:	d124      	bne.n	800759c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	2202      	movs	r2, #2
 800755a:	4013      	ands	r3, r2
 800755c:	2b02      	cmp	r3, #2
 800755e:	d11d      	bne.n	800759c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2203      	movs	r2, #3
 8007566:	4252      	negs	r2, r2
 8007568:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	2203      	movs	r2, #3
 8007578:	4013      	ands	r3, r2
 800757a:	d004      	beq.n	8007586 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	0018      	movs	r0, r3
 8007580:	f000 f8fa 	bl	8007778 <HAL_TIM_IC_CaptureCallback>
 8007584:	e007      	b.n	8007596 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	0018      	movs	r0, r3
 800758a:	f000 f8ed 	bl	8007768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	0018      	movs	r0, r3
 8007592:	f000 f8f9 	bl	8007788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2204      	movs	r2, #4
 80075a4:	4013      	ands	r3, r2
 80075a6:	2b04      	cmp	r3, #4
 80075a8:	d125      	bne.n	80075f6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	2204      	movs	r2, #4
 80075b2:	4013      	ands	r3, r2
 80075b4:	2b04      	cmp	r3, #4
 80075b6:	d11e      	bne.n	80075f6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2205      	movs	r2, #5
 80075be:	4252      	negs	r2, r2
 80075c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2202      	movs	r2, #2
 80075c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	699a      	ldr	r2, [r3, #24]
 80075ce:	23c0      	movs	r3, #192	; 0xc0
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4013      	ands	r3, r2
 80075d4:	d004      	beq.n	80075e0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	0018      	movs	r0, r3
 80075da:	f000 f8cd 	bl	8007778 <HAL_TIM_IC_CaptureCallback>
 80075de:	e007      	b.n	80075f0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	0018      	movs	r0, r3
 80075e4:	f000 f8c0 	bl	8007768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	0018      	movs	r0, r3
 80075ec:	f000 f8cc 	bl	8007788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	2208      	movs	r2, #8
 80075fe:	4013      	ands	r3, r2
 8007600:	2b08      	cmp	r3, #8
 8007602:	d124      	bne.n	800764e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	2208      	movs	r2, #8
 800760c:	4013      	ands	r3, r2
 800760e:	2b08      	cmp	r3, #8
 8007610:	d11d      	bne.n	800764e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2209      	movs	r2, #9
 8007618:	4252      	negs	r2, r2
 800761a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2204      	movs	r2, #4
 8007620:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	2203      	movs	r2, #3
 800762a:	4013      	ands	r3, r2
 800762c:	d004      	beq.n	8007638 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	0018      	movs	r0, r3
 8007632:	f000 f8a1 	bl	8007778 <HAL_TIM_IC_CaptureCallback>
 8007636:	e007      	b.n	8007648 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	0018      	movs	r0, r3
 800763c:	f000 f894 	bl	8007768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	0018      	movs	r0, r3
 8007644:	f000 f8a0 	bl	8007788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	2210      	movs	r2, #16
 8007656:	4013      	ands	r3, r2
 8007658:	2b10      	cmp	r3, #16
 800765a:	d125      	bne.n	80076a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	2210      	movs	r2, #16
 8007664:	4013      	ands	r3, r2
 8007666:	2b10      	cmp	r3, #16
 8007668:	d11e      	bne.n	80076a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2211      	movs	r2, #17
 8007670:	4252      	negs	r2, r2
 8007672:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2208      	movs	r2, #8
 8007678:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	69da      	ldr	r2, [r3, #28]
 8007680:	23c0      	movs	r3, #192	; 0xc0
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4013      	ands	r3, r2
 8007686:	d004      	beq.n	8007692 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	0018      	movs	r0, r3
 800768c:	f000 f874 	bl	8007778 <HAL_TIM_IC_CaptureCallback>
 8007690:	e007      	b.n	80076a2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	0018      	movs	r0, r3
 8007696:	f000 f867 	bl	8007768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	0018      	movs	r0, r3
 800769e:	f000 f873 	bl	8007788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2201      	movs	r2, #1
 80076b0:	4013      	ands	r3, r2
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d10f      	bne.n	80076d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	4013      	ands	r3, r2
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d108      	bne.n	80076d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2202      	movs	r2, #2
 80076ca:	4252      	negs	r2, r2
 80076cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	0018      	movs	r0, r3
 80076d2:	f7fb ffdd 	bl	8003690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	2280      	movs	r2, #128	; 0x80
 80076de:	4013      	ands	r3, r2
 80076e0:	2b80      	cmp	r3, #128	; 0x80
 80076e2:	d10f      	bne.n	8007704 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	2280      	movs	r2, #128	; 0x80
 80076ec:	4013      	ands	r3, r2
 80076ee:	2b80      	cmp	r3, #128	; 0x80
 80076f0:	d108      	bne.n	8007704 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2281      	movs	r2, #129	; 0x81
 80076f8:	4252      	negs	r2, r2
 80076fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	0018      	movs	r0, r3
 8007700:	f000 f8d0 	bl	80078a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2240      	movs	r2, #64	; 0x40
 800770c:	4013      	ands	r3, r2
 800770e:	2b40      	cmp	r3, #64	; 0x40
 8007710:	d10f      	bne.n	8007732 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	2240      	movs	r2, #64	; 0x40
 800771a:	4013      	ands	r3, r2
 800771c:	2b40      	cmp	r3, #64	; 0x40
 800771e:	d108      	bne.n	8007732 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2241      	movs	r2, #65	; 0x41
 8007726:	4252      	negs	r2, r2
 8007728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	0018      	movs	r0, r3
 800772e:	f000 f833 	bl	8007798 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	2220      	movs	r2, #32
 800773a:	4013      	ands	r3, r2
 800773c:	2b20      	cmp	r3, #32
 800773e:	d10f      	bne.n	8007760 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	2220      	movs	r2, #32
 8007748:	4013      	ands	r3, r2
 800774a:	2b20      	cmp	r3, #32
 800774c:	d108      	bne.n	8007760 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2221      	movs	r2, #33	; 0x21
 8007754:	4252      	negs	r2, r2
 8007756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	0018      	movs	r0, r3
 800775c:	f000 f89a 	bl	8007894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007760:	46c0      	nop			; (mov r8, r8)
 8007762:	46bd      	mov	sp, r7
 8007764:	b002      	add	sp, #8
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007770:	46c0      	nop			; (mov r8, r8)
 8007772:	46bd      	mov	sp, r7
 8007774:	b002      	add	sp, #8
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007780:	46c0      	nop			; (mov r8, r8)
 8007782:	46bd      	mov	sp, r7
 8007784:	b002      	add	sp, #8
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007790:	46c0      	nop			; (mov r8, r8)
 8007792:	46bd      	mov	sp, r7
 8007794:	b002      	add	sp, #8
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077a0:	46c0      	nop			; (mov r8, r8)
 80077a2:	46bd      	mov	sp, r7
 80077a4:	b002      	add	sp, #8
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a2f      	ldr	r2, [pc, #188]	; (8007878 <TIM_Base_SetConfig+0xd0>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d003      	beq.n	80077c8 <TIM_Base_SetConfig+0x20>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a2e      	ldr	r2, [pc, #184]	; (800787c <TIM_Base_SetConfig+0xd4>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d108      	bne.n	80077da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2270      	movs	r2, #112	; 0x70
 80077cc:	4393      	bics	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a26      	ldr	r2, [pc, #152]	; (8007878 <TIM_Base_SetConfig+0xd0>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d013      	beq.n	800780a <TIM_Base_SetConfig+0x62>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a25      	ldr	r2, [pc, #148]	; (800787c <TIM_Base_SetConfig+0xd4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d00f      	beq.n	800780a <TIM_Base_SetConfig+0x62>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a24      	ldr	r2, [pc, #144]	; (8007880 <TIM_Base_SetConfig+0xd8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d00b      	beq.n	800780a <TIM_Base_SetConfig+0x62>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a23      	ldr	r2, [pc, #140]	; (8007884 <TIM_Base_SetConfig+0xdc>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d007      	beq.n	800780a <TIM_Base_SetConfig+0x62>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a22      	ldr	r2, [pc, #136]	; (8007888 <TIM_Base_SetConfig+0xe0>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d003      	beq.n	800780a <TIM_Base_SetConfig+0x62>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a21      	ldr	r2, [pc, #132]	; (800788c <TIM_Base_SetConfig+0xe4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d108      	bne.n	800781c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4a20      	ldr	r2, [pc, #128]	; (8007890 <TIM_Base_SetConfig+0xe8>)
 800780e:	4013      	ands	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	4313      	orrs	r3, r2
 800781a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2280      	movs	r2, #128	; 0x80
 8007820:	4393      	bics	r3, r2
 8007822:	001a      	movs	r2, r3
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	4313      	orrs	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a0c      	ldr	r2, [pc, #48]	; (8007878 <TIM_Base_SetConfig+0xd0>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d00b      	beq.n	8007862 <TIM_Base_SetConfig+0xba>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a0d      	ldr	r2, [pc, #52]	; (8007884 <TIM_Base_SetConfig+0xdc>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d007      	beq.n	8007862 <TIM_Base_SetConfig+0xba>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a0c      	ldr	r2, [pc, #48]	; (8007888 <TIM_Base_SetConfig+0xe0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d003      	beq.n	8007862 <TIM_Base_SetConfig+0xba>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a0b      	ldr	r2, [pc, #44]	; (800788c <TIM_Base_SetConfig+0xe4>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d103      	bne.n	800786a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	691a      	ldr	r2, [r3, #16]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	615a      	str	r2, [r3, #20]
}
 8007870:	46c0      	nop			; (mov r8, r8)
 8007872:	46bd      	mov	sp, r7
 8007874:	b004      	add	sp, #16
 8007876:	bd80      	pop	{r7, pc}
 8007878:	40012c00 	.word	0x40012c00
 800787c:	40000400 	.word	0x40000400
 8007880:	40002000 	.word	0x40002000
 8007884:	40014000 	.word	0x40014000
 8007888:	40014400 	.word	0x40014400
 800788c:	40014800 	.word	0x40014800
 8007890:	fffffcff 	.word	0xfffffcff

08007894 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800789c:	46c0      	nop			; (mov r8, r8)
 800789e:	46bd      	mov	sp, r7
 80078a0:	b002      	add	sp, #8
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078ac:	46c0      	nop			; (mov r8, r8)
 80078ae:	46bd      	mov	sp, r7
 80078b0:	b002      	add	sp, #8
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078bc:	231e      	movs	r3, #30
 80078be:	18fb      	adds	r3, r7, r3
 80078c0:	2200      	movs	r2, #0
 80078c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	431a      	orrs	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	431a      	orrs	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	4313      	orrs	r3, r2
 80078da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a97      	ldr	r2, [pc, #604]	; (8007b40 <UART_SetConfig+0x28c>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	0019      	movs	r1, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	4a92      	ldr	r2, [pc, #584]	; (8007b44 <UART_SetConfig+0x290>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	0019      	movs	r1, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	4313      	orrs	r3, r2
 8007918:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	4a89      	ldr	r2, [pc, #548]	; (8007b48 <UART_SetConfig+0x294>)
 8007922:	4013      	ands	r3, r2
 8007924:	0019      	movs	r1, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	430a      	orrs	r2, r1
 800792e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a85      	ldr	r2, [pc, #532]	; (8007b4c <UART_SetConfig+0x298>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d127      	bne.n	800798a <UART_SetConfig+0xd6>
 800793a:	4b85      	ldr	r3, [pc, #532]	; (8007b50 <UART_SetConfig+0x29c>)
 800793c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793e:	2203      	movs	r2, #3
 8007940:	4013      	ands	r3, r2
 8007942:	2b03      	cmp	r3, #3
 8007944:	d00d      	beq.n	8007962 <UART_SetConfig+0xae>
 8007946:	d81b      	bhi.n	8007980 <UART_SetConfig+0xcc>
 8007948:	2b02      	cmp	r3, #2
 800794a:	d014      	beq.n	8007976 <UART_SetConfig+0xc2>
 800794c:	d818      	bhi.n	8007980 <UART_SetConfig+0xcc>
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <UART_SetConfig+0xa4>
 8007952:	2b01      	cmp	r3, #1
 8007954:	d00a      	beq.n	800796c <UART_SetConfig+0xb8>
 8007956:	e013      	b.n	8007980 <UART_SetConfig+0xcc>
 8007958:	231f      	movs	r3, #31
 800795a:	18fb      	adds	r3, r7, r3
 800795c:	2200      	movs	r2, #0
 800795e:	701a      	strb	r2, [r3, #0]
 8007960:	e035      	b.n	80079ce <UART_SetConfig+0x11a>
 8007962:	231f      	movs	r3, #31
 8007964:	18fb      	adds	r3, r7, r3
 8007966:	2202      	movs	r2, #2
 8007968:	701a      	strb	r2, [r3, #0]
 800796a:	e030      	b.n	80079ce <UART_SetConfig+0x11a>
 800796c:	231f      	movs	r3, #31
 800796e:	18fb      	adds	r3, r7, r3
 8007970:	2204      	movs	r2, #4
 8007972:	701a      	strb	r2, [r3, #0]
 8007974:	e02b      	b.n	80079ce <UART_SetConfig+0x11a>
 8007976:	231f      	movs	r3, #31
 8007978:	18fb      	adds	r3, r7, r3
 800797a:	2208      	movs	r2, #8
 800797c:	701a      	strb	r2, [r3, #0]
 800797e:	e026      	b.n	80079ce <UART_SetConfig+0x11a>
 8007980:	231f      	movs	r3, #31
 8007982:	18fb      	adds	r3, r7, r3
 8007984:	2210      	movs	r2, #16
 8007986:	701a      	strb	r2, [r3, #0]
 8007988:	e021      	b.n	80079ce <UART_SetConfig+0x11a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a71      	ldr	r2, [pc, #452]	; (8007b54 <UART_SetConfig+0x2a0>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d104      	bne.n	800799e <UART_SetConfig+0xea>
 8007994:	231f      	movs	r3, #31
 8007996:	18fb      	adds	r3, r7, r3
 8007998:	2200      	movs	r2, #0
 800799a:	701a      	strb	r2, [r3, #0]
 800799c:	e017      	b.n	80079ce <UART_SetConfig+0x11a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a6d      	ldr	r2, [pc, #436]	; (8007b58 <UART_SetConfig+0x2a4>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d104      	bne.n	80079b2 <UART_SetConfig+0xfe>
 80079a8:	231f      	movs	r3, #31
 80079aa:	18fb      	adds	r3, r7, r3
 80079ac:	2200      	movs	r2, #0
 80079ae:	701a      	strb	r2, [r3, #0]
 80079b0:	e00d      	b.n	80079ce <UART_SetConfig+0x11a>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a69      	ldr	r2, [pc, #420]	; (8007b5c <UART_SetConfig+0x2a8>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d104      	bne.n	80079c6 <UART_SetConfig+0x112>
 80079bc:	231f      	movs	r3, #31
 80079be:	18fb      	adds	r3, r7, r3
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
 80079c4:	e003      	b.n	80079ce <UART_SetConfig+0x11a>
 80079c6:	231f      	movs	r3, #31
 80079c8:	18fb      	adds	r3, r7, r3
 80079ca:	2210      	movs	r2, #16
 80079cc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	69da      	ldr	r2, [r3, #28]
 80079d2:	2380      	movs	r3, #128	; 0x80
 80079d4:	021b      	lsls	r3, r3, #8
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d15d      	bne.n	8007a96 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 80079da:	231f      	movs	r3, #31
 80079dc:	18fb      	adds	r3, r7, r3
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	2b08      	cmp	r3, #8
 80079e2:	d015      	beq.n	8007a10 <UART_SetConfig+0x15c>
 80079e4:	dc18      	bgt.n	8007a18 <UART_SetConfig+0x164>
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d00d      	beq.n	8007a06 <UART_SetConfig+0x152>
 80079ea:	dc15      	bgt.n	8007a18 <UART_SetConfig+0x164>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <UART_SetConfig+0x142>
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d005      	beq.n	8007a00 <UART_SetConfig+0x14c>
 80079f4:	e010      	b.n	8007a18 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f6:	f7ff fbdf 	bl	80071b8 <HAL_RCC_GetPCLK1Freq>
 80079fa:	0003      	movs	r3, r0
 80079fc:	61bb      	str	r3, [r7, #24]
        break;
 80079fe:	e012      	b.n	8007a26 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a00:	4b57      	ldr	r3, [pc, #348]	; (8007b60 <UART_SetConfig+0x2ac>)
 8007a02:	61bb      	str	r3, [r7, #24]
        break;
 8007a04:	e00f      	b.n	8007a26 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a06:	f7ff fb67 	bl	80070d8 <HAL_RCC_GetSysClockFreq>
 8007a0a:	0003      	movs	r3, r0
 8007a0c:	61bb      	str	r3, [r7, #24]
        break;
 8007a0e:	e00a      	b.n	8007a26 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a10:	2380      	movs	r3, #128	; 0x80
 8007a12:	021b      	lsls	r3, r3, #8
 8007a14:	61bb      	str	r3, [r7, #24]
        break;
 8007a16:	e006      	b.n	8007a26 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a1c:	231e      	movs	r3, #30
 8007a1e:	18fb      	adds	r3, r7, r3
 8007a20:	2201      	movs	r2, #1
 8007a22:	701a      	strb	r2, [r3, #0]
        break;
 8007a24:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d100      	bne.n	8007a2e <UART_SetConfig+0x17a>
 8007a2c:	e07b      	b.n	8007b26 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	005a      	lsls	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	085b      	lsrs	r3, r3, #1
 8007a38:	18d2      	adds	r2, r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	0019      	movs	r1, r3
 8007a40:	0010      	movs	r0, r2
 8007a42:	f7f8 fb6b 	bl	800011c <__udivsi3>
 8007a46:	0003      	movs	r3, r0
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2b0f      	cmp	r3, #15
 8007a50:	d91c      	bls.n	8007a8c <UART_SetConfig+0x1d8>
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	2380      	movs	r3, #128	; 0x80
 8007a56:	025b      	lsls	r3, r3, #9
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d217      	bcs.n	8007a8c <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	200e      	movs	r0, #14
 8007a62:	183b      	adds	r3, r7, r0
 8007a64:	210f      	movs	r1, #15
 8007a66:	438a      	bics	r2, r1
 8007a68:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	085b      	lsrs	r3, r3, #1
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2207      	movs	r2, #7
 8007a72:	4013      	ands	r3, r2
 8007a74:	b299      	uxth	r1, r3
 8007a76:	183b      	adds	r3, r7, r0
 8007a78:	183a      	adds	r2, r7, r0
 8007a7a:	8812      	ldrh	r2, [r2, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	183a      	adds	r2, r7, r0
 8007a86:	8812      	ldrh	r2, [r2, #0]
 8007a88:	60da      	str	r2, [r3, #12]
 8007a8a:	e04c      	b.n	8007b26 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8007a8c:	231e      	movs	r3, #30
 8007a8e:	18fb      	adds	r3, r7, r3
 8007a90:	2201      	movs	r2, #1
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	e047      	b.n	8007b26 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a96:	231f      	movs	r3, #31
 8007a98:	18fb      	adds	r3, r7, r3
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d015      	beq.n	8007acc <UART_SetConfig+0x218>
 8007aa0:	dc18      	bgt.n	8007ad4 <UART_SetConfig+0x220>
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d00d      	beq.n	8007ac2 <UART_SetConfig+0x20e>
 8007aa6:	dc15      	bgt.n	8007ad4 <UART_SetConfig+0x220>
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <UART_SetConfig+0x1fe>
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d005      	beq.n	8007abc <UART_SetConfig+0x208>
 8007ab0:	e010      	b.n	8007ad4 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ab2:	f7ff fb81 	bl	80071b8 <HAL_RCC_GetPCLK1Freq>
 8007ab6:	0003      	movs	r3, r0
 8007ab8:	61bb      	str	r3, [r7, #24]
        break;
 8007aba:	e012      	b.n	8007ae2 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007abc:	4b28      	ldr	r3, [pc, #160]	; (8007b60 <UART_SetConfig+0x2ac>)
 8007abe:	61bb      	str	r3, [r7, #24]
        break;
 8007ac0:	e00f      	b.n	8007ae2 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ac2:	f7ff fb09 	bl	80070d8 <HAL_RCC_GetSysClockFreq>
 8007ac6:	0003      	movs	r3, r0
 8007ac8:	61bb      	str	r3, [r7, #24]
        break;
 8007aca:	e00a      	b.n	8007ae2 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007acc:	2380      	movs	r3, #128	; 0x80
 8007ace:	021b      	lsls	r3, r3, #8
 8007ad0:	61bb      	str	r3, [r7, #24]
        break;
 8007ad2:	e006      	b.n	8007ae2 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ad8:	231e      	movs	r3, #30
 8007ada:	18fb      	adds	r3, r7, r3
 8007adc:	2201      	movs	r2, #1
 8007ade:	701a      	strb	r2, [r3, #0]
        break;
 8007ae0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d01e      	beq.n	8007b26 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	085a      	lsrs	r2, r3, #1
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	18d2      	adds	r2, r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	0019      	movs	r1, r3
 8007af8:	0010      	movs	r0, r2
 8007afa:	f7f8 fb0f 	bl	800011c <__udivsi3>
 8007afe:	0003      	movs	r3, r0
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	2b0f      	cmp	r3, #15
 8007b08:	d909      	bls.n	8007b1e <UART_SetConfig+0x26a>
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	2380      	movs	r3, #128	; 0x80
 8007b0e:	025b      	lsls	r3, r3, #9
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d204      	bcs.n	8007b1e <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	60da      	str	r2, [r3, #12]
 8007b1c:	e003      	b.n	8007b26 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8007b1e:	231e      	movs	r3, #30
 8007b20:	18fb      	adds	r3, r7, r3
 8007b22:	2201      	movs	r2, #1
 8007b24:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007b32:	231e      	movs	r3, #30
 8007b34:	18fb      	adds	r3, r7, r3
 8007b36:	781b      	ldrb	r3, [r3, #0]
}
 8007b38:	0018      	movs	r0, r3
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	b008      	add	sp, #32
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	efff69f3 	.word	0xefff69f3
 8007b44:	ffffcfff 	.word	0xffffcfff
 8007b48:	fffff4ff 	.word	0xfffff4ff
 8007b4c:	40013800 	.word	0x40013800
 8007b50:	40021000 	.word	0x40021000
 8007b54:	40004400 	.word	0x40004400
 8007b58:	40004800 	.word	0x40004800
 8007b5c:	40004c00 	.word	0x40004c00
 8007b60:	007a1200 	.word	0x007a1200

08007b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	2201      	movs	r2, #1
 8007b72:	4013      	ands	r3, r2
 8007b74:	d00b      	beq.n	8007b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	4a4a      	ldr	r2, [pc, #296]	; (8007ca8 <UART_AdvFeatureConfig+0x144>)
 8007b7e:	4013      	ands	r3, r2
 8007b80:	0019      	movs	r1, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b92:	2202      	movs	r2, #2
 8007b94:	4013      	ands	r3, r2
 8007b96:	d00b      	beq.n	8007bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	4a43      	ldr	r2, [pc, #268]	; (8007cac <UART_AdvFeatureConfig+0x148>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	0019      	movs	r1, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	2204      	movs	r2, #4
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	d00b      	beq.n	8007bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	4a3b      	ldr	r2, [pc, #236]	; (8007cb0 <UART_AdvFeatureConfig+0x14c>)
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	0019      	movs	r1, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	2208      	movs	r2, #8
 8007bd8:	4013      	ands	r3, r2
 8007bda:	d00b      	beq.n	8007bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	4a34      	ldr	r2, [pc, #208]	; (8007cb4 <UART_AdvFeatureConfig+0x150>)
 8007be4:	4013      	ands	r3, r2
 8007be6:	0019      	movs	r1, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	2210      	movs	r2, #16
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	d00b      	beq.n	8007c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	4a2c      	ldr	r2, [pc, #176]	; (8007cb8 <UART_AdvFeatureConfig+0x154>)
 8007c06:	4013      	ands	r3, r2
 8007c08:	0019      	movs	r1, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	d00b      	beq.n	8007c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	4a25      	ldr	r2, [pc, #148]	; (8007cbc <UART_AdvFeatureConfig+0x158>)
 8007c28:	4013      	ands	r3, r2
 8007c2a:	0019      	movs	r1, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	430a      	orrs	r2, r1
 8007c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	2240      	movs	r2, #64	; 0x40
 8007c3e:	4013      	ands	r3, r2
 8007c40:	d01d      	beq.n	8007c7e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	4a1d      	ldr	r2, [pc, #116]	; (8007cc0 <UART_AdvFeatureConfig+0x15c>)
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	0019      	movs	r1, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c5e:	2380      	movs	r3, #128	; 0x80
 8007c60:	035b      	lsls	r3, r3, #13
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d10b      	bne.n	8007c7e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	4a15      	ldr	r2, [pc, #84]	; (8007cc4 <UART_AdvFeatureConfig+0x160>)
 8007c6e:	4013      	ands	r3, r2
 8007c70:	0019      	movs	r1, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	2280      	movs	r2, #128	; 0x80
 8007c84:	4013      	ands	r3, r2
 8007c86:	d00b      	beq.n	8007ca0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	4a0e      	ldr	r2, [pc, #56]	; (8007cc8 <UART_AdvFeatureConfig+0x164>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	0019      	movs	r1, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	605a      	str	r2, [r3, #4]
  }
}
 8007ca0:	46c0      	nop			; (mov r8, r8)
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	b002      	add	sp, #8
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	fffdffff 	.word	0xfffdffff
 8007cac:	fffeffff 	.word	0xfffeffff
 8007cb0:	fffbffff 	.word	0xfffbffff
 8007cb4:	ffff7fff 	.word	0xffff7fff
 8007cb8:	ffffefff 	.word	0xffffefff
 8007cbc:	ffffdfff 	.word	0xffffdfff
 8007cc0:	ffefffff 	.word	0xffefffff
 8007cc4:	ff9fffff 	.word	0xff9fffff
 8007cc8:	fff7ffff 	.word	0xfff7ffff

08007ccc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af02      	add	r7, sp, #8
 8007cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2280      	movs	r2, #128	; 0x80
 8007cd8:	2100      	movs	r1, #0
 8007cda:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cdc:	f7fd fce4 	bl	80056a8 <HAL_GetTick>
 8007ce0:	0003      	movs	r3, r0
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2208      	movs	r2, #8
 8007cec:	4013      	ands	r3, r2
 8007cee:	2b08      	cmp	r3, #8
 8007cf0:	d10c      	bne.n	8007d0c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2280      	movs	r2, #128	; 0x80
 8007cf6:	0391      	lsls	r1, r2, #14
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	4a17      	ldr	r2, [pc, #92]	; (8007d58 <UART_CheckIdleState+0x8c>)
 8007cfc:	9200      	str	r2, [sp, #0]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f000 f82c 	bl	8007d5c <UART_WaitOnFlagUntilTimeout>
 8007d04:	1e03      	subs	r3, r0, #0
 8007d06:	d001      	beq.n	8007d0c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e021      	b.n	8007d50 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2204      	movs	r2, #4
 8007d14:	4013      	ands	r3, r2
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d10c      	bne.n	8007d34 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2280      	movs	r2, #128	; 0x80
 8007d1e:	03d1      	lsls	r1, r2, #15
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	4a0d      	ldr	r2, [pc, #52]	; (8007d58 <UART_CheckIdleState+0x8c>)
 8007d24:	9200      	str	r2, [sp, #0]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f000 f818 	bl	8007d5c <UART_WaitOnFlagUntilTimeout>
 8007d2c:	1e03      	subs	r3, r0, #0
 8007d2e:	d001      	beq.n	8007d34 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e00d      	b.n	8007d50 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2274      	movs	r2, #116	; 0x74
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	0018      	movs	r0, r3
 8007d52:	46bd      	mov	sp, r7
 8007d54:	b004      	add	sp, #16
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	01ffffff 	.word	0x01ffffff

08007d5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	1dfb      	adds	r3, r7, #7
 8007d6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d6c:	e05e      	b.n	8007e2c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	3301      	adds	r3, #1
 8007d72:	d05b      	beq.n	8007e2c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d74:	f7fd fc98 	bl	80056a8 <HAL_GetTick>
 8007d78:	0002      	movs	r2, r0
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d302      	bcc.n	8007d8a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d11b      	bne.n	8007dc2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	492f      	ldr	r1, [pc, #188]	; (8007e54 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007d96:	400a      	ands	r2, r1
 8007d98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689a      	ldr	r2, [r3, #8]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2101      	movs	r1, #1
 8007da6:	438a      	bics	r2, r1
 8007da8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2220      	movs	r2, #32
 8007dae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2220      	movs	r2, #32
 8007db4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2274      	movs	r2, #116	; 0x74
 8007dba:	2100      	movs	r1, #0
 8007dbc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e044      	b.n	8007e4c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2204      	movs	r2, #4
 8007dca:	4013      	ands	r3, r2
 8007dcc:	d02e      	beq.n	8007e2c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69da      	ldr	r2, [r3, #28]
 8007dd4:	2380      	movs	r3, #128	; 0x80
 8007dd6:	011b      	lsls	r3, r3, #4
 8007dd8:	401a      	ands	r2, r3
 8007dda:	2380      	movs	r3, #128	; 0x80
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d124      	bne.n	8007e2c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2280      	movs	r2, #128	; 0x80
 8007de8:	0112      	lsls	r2, r2, #4
 8007dea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4917      	ldr	r1, [pc, #92]	; (8007e54 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007df8:	400a      	ands	r2, r1
 8007dfa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689a      	ldr	r2, [r3, #8]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2101      	movs	r1, #1
 8007e08:	438a      	bics	r2, r1
 8007e0a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2220      	movs	r2, #32
 8007e10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2220      	movs	r2, #32
 8007e16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2280      	movs	r2, #128	; 0x80
 8007e1c:	2120      	movs	r1, #32
 8007e1e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2274      	movs	r2, #116	; 0x74
 8007e24:	2100      	movs	r1, #0
 8007e26:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e00f      	b.n	8007e4c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	4013      	ands	r3, r2
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	425a      	negs	r2, r3
 8007e3c:	4153      	adcs	r3, r2
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	001a      	movs	r2, r3
 8007e42:	1dfb      	adds	r3, r7, #7
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d091      	beq.n	8007d6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	b004      	add	sp, #16
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	fffffe5f 	.word	0xfffffe5f

08007e58 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e05b      	b.n	8007f28 <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d107      	bne.n	8007e88 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2274      	movs	r2, #116	; 0x74
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	0018      	movs	r0, r3
 8007e84:	f7fc ff98 	bl	8004db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2224      	movs	r2, #36	; 0x24
 8007e8c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2101      	movs	r1, #1
 8007e9a:	438a      	bics	r2, r1
 8007e9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	0018      	movs	r0, r3
 8007ea2:	f7ff fd07 	bl	80078b4 <UART_SetConfig>
 8007ea6:	0003      	movs	r3, r0
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d101      	bne.n	8007eb0 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e03b      	b.n	8007f28 <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d003      	beq.n	8007ec0 <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	0018      	movs	r0, r3
 8007ebc:	f7ff fe52 	bl	8007b64 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689a      	ldr	r2, [r3, #8]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2180      	movs	r1, #128	; 0x80
 8007ecc:	01c9      	lsls	r1, r1, #7
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	4a15      	ldr	r2, [pc, #84]	; (8007f30 <HAL_RS485Ex_Init+0xd8>)
 8007eda:	4013      	ands	r3, r2
 8007edc:	0019      	movs	r1, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	055b      	lsls	r3, r3, #21
 8007eec:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	041b      	lsls	r3, r3, #16
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a0d      	ldr	r2, [pc, #52]	; (8007f34 <HAL_RS485Ex_Init+0xdc>)
 8007f00:	4013      	ands	r3, r2
 8007f02:	0019      	movs	r1, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2101      	movs	r1, #1
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	0018      	movs	r0, r3
 8007f22:	f7ff fed3 	bl	8007ccc <UART_CheckIdleState>
 8007f26:	0003      	movs	r3, r0
}
 8007f28:	0018      	movs	r0, r3
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	b006      	add	sp, #24
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	ffff7fff 	.word	0xffff7fff
 8007f34:	fc00ffff 	.word	0xfc00ffff

08007f38 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f3e:	f3ef 8305 	mrs	r3, IPSR
 8007f42:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d109      	bne.n	8007f5e <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f4e:	607b      	str	r3, [r7, #4]
  return(result);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d007      	beq.n	8007f66 <osKernelInitialize+0x2e>
 8007f56:	4b0d      	ldr	r3, [pc, #52]	; (8007f8c <osKernelInitialize+0x54>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d103      	bne.n	8007f66 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8007f5e:	2306      	movs	r3, #6
 8007f60:	425b      	negs	r3, r3
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	e00c      	b.n	8007f80 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f66:	4b09      	ldr	r3, [pc, #36]	; (8007f8c <osKernelInitialize+0x54>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d105      	bne.n	8007f7a <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007f6e:	4b07      	ldr	r3, [pc, #28]	; (8007f8c <osKernelInitialize+0x54>)
 8007f70:	2201      	movs	r2, #1
 8007f72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	e002      	b.n	8007f80 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	425b      	negs	r3, r3
 8007f7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007f80:	68fb      	ldr	r3, [r7, #12]
}
 8007f82:	0018      	movs	r0, r3
 8007f84:	46bd      	mov	sp, r7
 8007f86:	b004      	add	sp, #16
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	46c0      	nop			; (mov r8, r8)
 8007f8c:	20000ab8 	.word	0x20000ab8

08007f90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f96:	f3ef 8305 	mrs	r3, IPSR
 8007f9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d109      	bne.n	8007fb6 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8007fa6:	607b      	str	r3, [r7, #4]
  return(result);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d007      	beq.n	8007fbe <osKernelStart+0x2e>
 8007fae:	4b0e      	ldr	r3, [pc, #56]	; (8007fe8 <osKernelStart+0x58>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d103      	bne.n	8007fbe <osKernelStart+0x2e>
    stat = osErrorISR;
 8007fb6:	2306      	movs	r3, #6
 8007fb8:	425b      	negs	r3, r3
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	e00e      	b.n	8007fdc <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007fbe:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <osKernelStart+0x58>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d107      	bne.n	8007fd6 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8007fc6:	4b08      	ldr	r3, [pc, #32]	; (8007fe8 <osKernelStart+0x58>)
 8007fc8:	2202      	movs	r2, #2
 8007fca:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007fcc:	f000 ff7e 	bl	8008ecc <vTaskStartScheduler>
      stat = osOK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	e002      	b.n	8007fdc <osKernelStart+0x4c>
    } else {
      stat = osError;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	425b      	negs	r3, r3
 8007fda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
}
 8007fde:	0018      	movs	r0, r3
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	b004      	add	sp, #16
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	20000ab8 	.word	0x20000ab8

08007fec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007fec:	b5b0      	push	{r4, r5, r7, lr}
 8007fee:	b090      	sub	sp, #64	; 0x40
 8007ff0:	af04      	add	r7, sp, #16
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ffc:	f3ef 8305 	mrs	r3, IPSR
 8008000:	61fb      	str	r3, [r7, #28]
  return(result);
 8008002:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008004:	2b00      	cmp	r3, #0
 8008006:	d000      	beq.n	800800a <osThreadNew+0x1e>
 8008008:	e090      	b.n	800812c <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800800a:	f3ef 8310 	mrs	r3, PRIMASK
 800800e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d004      	beq.n	8008020 <osThreadNew+0x34>
 8008016:	4b48      	ldr	r3, [pc, #288]	; (8008138 <osThreadNew+0x14c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b02      	cmp	r3, #2
 800801c:	d100      	bne.n	8008020 <osThreadNew+0x34>
 800801e:	e085      	b.n	800812c <osThreadNew+0x140>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d100      	bne.n	8008028 <osThreadNew+0x3c>
 8008026:	e081      	b.n	800812c <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8008028:	2380      	movs	r3, #128	; 0x80
 800802a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800802c:	2318      	movs	r3, #24
 800802e:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8008030:	2117      	movs	r1, #23
 8008032:	187b      	adds	r3, r7, r1
 8008034:	2200      	movs	r2, #0
 8008036:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8008038:	187b      	adds	r3, r7, r1
 800803a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 800803c:	2301      	movs	r3, #1
 800803e:	425b      	negs	r3, r3
 8008040:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d044      	beq.n	80080d2 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <osThreadNew+0x6a>
        name = attr->name;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	2b00      	cmp	r3, #0
 8008068:	d007      	beq.n	800807a <osThreadNew+0x8e>
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	2b38      	cmp	r3, #56	; 0x38
 800806e:	d804      	bhi.n	800807a <osThreadNew+0x8e>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	4013      	ands	r3, r2
 8008078:	d001      	beq.n	800807e <osThreadNew+0x92>
        return (NULL);
 800807a:	2300      	movs	r3, #0
 800807c:	e057      	b.n	800812e <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	089b      	lsrs	r3, r3, #2
 800808c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00e      	beq.n	80080b4 <osThreadNew+0xc8>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	2b5b      	cmp	r3, #91	; 0x5b
 800809c:	d90a      	bls.n	80080b4 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d006      	beq.n	80080b4 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <osThreadNew+0xc8>
        mem = 1;
 80080ae:	2301      	movs	r3, #1
 80080b0:	623b      	str	r3, [r7, #32]
 80080b2:	e010      	b.n	80080d6 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10c      	bne.n	80080d6 <osThreadNew+0xea>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d108      	bne.n	80080d6 <osThreadNew+0xea>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d104      	bne.n	80080d6 <osThreadNew+0xea>
          mem = 0;
 80080cc:	2300      	movs	r3, #0
 80080ce:	623b      	str	r3, [r7, #32]
 80080d0:	e001      	b.n	80080d6 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d112      	bne.n	8008102 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080e4:	68bd      	ldr	r5, [r7, #8]
 80080e6:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80080e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	9302      	str	r3, [sp, #8]
 80080ee:	9201      	str	r2, [sp, #4]
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	002b      	movs	r3, r5
 80080f6:	0022      	movs	r2, r4
 80080f8:	f000 fd49 	bl	8008b8e <xTaskCreateStatic>
 80080fc:	0003      	movs	r3, r0
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	e014      	b.n	800812c <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d111      	bne.n	800812c <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	b29a      	uxth	r2, r3
 800810c:	68bc      	ldr	r4, [r7, #8]
 800810e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	2310      	movs	r3, #16
 8008114:	18fb      	adds	r3, r7, r3
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	0023      	movs	r3, r4
 800811e:	f000 fd79 	bl	8008c14 <xTaskCreate>
 8008122:	0003      	movs	r3, r0
 8008124:	2b01      	cmp	r3, #1
 8008126:	d001      	beq.n	800812c <osThreadNew+0x140>
          hTask = NULL;
 8008128:	2300      	movs	r3, #0
 800812a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800812c:	693b      	ldr	r3, [r7, #16]
}
 800812e:	0018      	movs	r0, r3
 8008130:	46bd      	mov	sp, r7
 8008132:	b00c      	add	sp, #48	; 0x30
 8008134:	bdb0      	pop	{r4, r5, r7, pc}
 8008136:	46c0      	nop			; (mov r8, r8)
 8008138:	20000ab8 	.word	0x20000ab8

0800813c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008144:	f3ef 8305 	mrs	r3, IPSR
 8008148:	613b      	str	r3, [r7, #16]
  return(result);
 800814a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800814c:	2b00      	cmp	r3, #0
 800814e:	d109      	bne.n	8008164 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008150:	f3ef 8310 	mrs	r3, PRIMASK
 8008154:	60fb      	str	r3, [r7, #12]
  return(result);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d007      	beq.n	800816c <osDelay+0x30>
 800815c:	4b0a      	ldr	r3, [pc, #40]	; (8008188 <osDelay+0x4c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b02      	cmp	r3, #2
 8008162:	d103      	bne.n	800816c <osDelay+0x30>
    stat = osErrorISR;
 8008164:	2306      	movs	r3, #6
 8008166:	425b      	negs	r3, r3
 8008168:	617b      	str	r3, [r7, #20]
 800816a:	e008      	b.n	800817e <osDelay+0x42>
  }
  else {
    stat = osOK;
 800816c:	2300      	movs	r3, #0
 800816e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <osDelay+0x42>
      vTaskDelay(ticks);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	0018      	movs	r0, r3
 800817a:	f000 fe81 	bl	8008e80 <vTaskDelay>
    }
  }

  return (stat);
 800817e:	697b      	ldr	r3, [r7, #20]
}
 8008180:	0018      	movs	r0, r3
 8008182:	46bd      	mov	sp, r7
 8008184:	b006      	add	sp, #24
 8008186:	bd80      	pop	{r7, pc}
 8008188:	20000ab8 	.word	0x20000ab8

0800818c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4a06      	ldr	r2, [pc, #24]	; (80081b4 <vApplicationGetIdleTaskMemory+0x28>)
 800819c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	4a05      	ldr	r2, [pc, #20]	; (80081b8 <vApplicationGetIdleTaskMemory+0x2c>)
 80081a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2280      	movs	r2, #128	; 0x80
 80081a8:	601a      	str	r2, [r3, #0]
}
 80081aa:	46c0      	nop			; (mov r8, r8)
 80081ac:	46bd      	mov	sp, r7
 80081ae:	b004      	add	sp, #16
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	46c0      	nop			; (mov r8, r8)
 80081b4:	20000abc 	.word	0x20000abc
 80081b8:	20000b18 	.word	0x20000b18

080081bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4a06      	ldr	r2, [pc, #24]	; (80081e4 <vApplicationGetTimerTaskMemory+0x28>)
 80081cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	4a05      	ldr	r2, [pc, #20]	; (80081e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80081d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2280      	movs	r2, #128	; 0x80
 80081d8:	0052      	lsls	r2, r2, #1
 80081da:	601a      	str	r2, [r3, #0]
}
 80081dc:	46c0      	nop			; (mov r8, r8)
 80081de:	46bd      	mov	sp, r7
 80081e0:	b004      	add	sp, #16
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	20000d18 	.word	0x20000d18
 80081e8:	20000d74 	.word	0x20000d74

080081ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	3308      	adds	r3, #8
 80081f8:	001a      	movs	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	4252      	negs	r2, r2
 8008204:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	3308      	adds	r3, #8
 800820a:	001a      	movs	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3308      	adds	r3, #8
 8008214:	001a      	movs	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008220:	46c0      	nop			; (mov r8, r8)
 8008222:	46bd      	mov	sp, r7
 8008224:	b002      	add	sp, #8
 8008226:	bd80      	pop	{r7, pc}

08008228 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008236:	46c0      	nop			; (mov r8, r8)
 8008238:	46bd      	mov	sp, r7
 800823a:	b002      	add	sp, #8
 800823c:	bd80      	pop	{r7, pc}

0800823e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	1c5a      	adds	r2, r3, #1
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	601a      	str	r2, [r3, #0]
}
 800827a:	46c0      	nop			; (mov r8, r8)
 800827c:	46bd      	mov	sp, r7
 800827e:	b004      	add	sp, #16
 8008280:	bd80      	pop	{r7, pc}

08008282 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	3301      	adds	r3, #1
 8008296:	d103      	bne.n	80082a0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	e00c      	b.n	80082ba <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3308      	adds	r3, #8
 80082a4:	60fb      	str	r3, [r7, #12]
 80082a6:	e002      	b.n	80082ae <vListInsert+0x2c>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	60fb      	str	r3, [r7, #12]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d2f6      	bcs.n	80082a8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	601a      	str	r2, [r3, #0]
}
 80082e6:	46c0      	nop			; (mov r8, r8)
 80082e8:	46bd      	mov	sp, r7
 80082ea:	b004      	add	sp, #16
 80082ec:	bd80      	pop	{r7, pc}

080082ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	6892      	ldr	r2, [r2, #8]
 8008304:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	6852      	ldr	r2, [r2, #4]
 800830e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	429a      	cmp	r2, r3
 8008318:	d103      	bne.n	8008322 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	689a      	ldr	r2, [r3, #8]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	1e5a      	subs	r2, r3, #1
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
}
 8008336:	0018      	movs	r0, r3
 8008338:	46bd      	mov	sp, r7
 800833a:	b004      	add	sp, #16
 800833c:	bd80      	pop	{r7, pc}

0800833e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <xQueueGenericReset+0x18>
 8008352:	b672      	cpsid	i
 8008354:	e7fe      	b.n	8008354 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8008356:	f001 fdcb 	bl	8009ef0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008366:	434b      	muls	r3, r1
 8008368:	18d2      	adds	r2, r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008384:	1e59      	subs	r1, r3, #1
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	434b      	muls	r3, r1
 800838c:	18d2      	adds	r2, r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2244      	movs	r2, #68	; 0x44
 8008396:	21ff      	movs	r1, #255	; 0xff
 8008398:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2245      	movs	r2, #69	; 0x45
 800839e:	21ff      	movs	r1, #255	; 0xff
 80083a0:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10d      	bne.n	80083c4 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d013      	beq.n	80083d8 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	3310      	adds	r3, #16
 80083b4:	0018      	movs	r0, r3
 80083b6:	f000 ffcd 	bl	8009354 <xTaskRemoveFromEventList>
 80083ba:	1e03      	subs	r3, r0, #0
 80083bc:	d00c      	beq.n	80083d8 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083be:	f001 fd87 	bl	8009ed0 <vPortYield>
 80083c2:	e009      	b.n	80083d8 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	3310      	adds	r3, #16
 80083c8:	0018      	movs	r0, r3
 80083ca:	f7ff ff0f 	bl	80081ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	3324      	adds	r3, #36	; 0x24
 80083d2:	0018      	movs	r0, r3
 80083d4:	f7ff ff0a 	bl	80081ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80083d8:	f001 fd9c 	bl	8009f14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083dc:	2301      	movs	r3, #1
}
 80083de:	0018      	movs	r0, r3
 80083e0:	46bd      	mov	sp, r7
 80083e2:	b004      	add	sp, #16
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80083e6:	b590      	push	{r4, r7, lr}
 80083e8:	b089      	sub	sp, #36	; 0x24
 80083ea:	af02      	add	r7, sp, #8
 80083ec:	60f8      	str	r0, [r7, #12]
 80083ee:	60b9      	str	r1, [r7, #8]
 80083f0:	607a      	str	r2, [r7, #4]
 80083f2:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <xQueueGenericCreateStatic+0x18>
 80083fa:	b672      	cpsid	i
 80083fc:	e7fe      	b.n	80083fc <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <xQueueGenericCreateStatic+0x22>
 8008404:	b672      	cpsid	i
 8008406:	e7fe      	b.n	8008406 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d002      	beq.n	8008414 <xQueueGenericCreateStatic+0x2e>
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <xQueueGenericCreateStatic+0x32>
 8008414:	2301      	movs	r3, #1
 8008416:	e000      	b.n	800841a <xQueueGenericCreateStatic+0x34>
 8008418:	2300      	movs	r3, #0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <xQueueGenericCreateStatic+0x3c>
 800841e:	b672      	cpsid	i
 8008420:	e7fe      	b.n	8008420 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d102      	bne.n	800842e <xQueueGenericCreateStatic+0x48>
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <xQueueGenericCreateStatic+0x4c>
 800842e:	2301      	movs	r3, #1
 8008430:	e000      	b.n	8008434 <xQueueGenericCreateStatic+0x4e>
 8008432:	2300      	movs	r3, #0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <xQueueGenericCreateStatic+0x56>
 8008438:	b672      	cpsid	i
 800843a:	e7fe      	b.n	800843a <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800843c:	2350      	movs	r3, #80	; 0x50
 800843e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	2b50      	cmp	r3, #80	; 0x50
 8008444:	d001      	beq.n	800844a <xQueueGenericCreateStatic+0x64>
 8008446:	b672      	cpsid	i
 8008448:	e7fe      	b.n	8008448 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00e      	beq.n	8008472 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	2246      	movs	r2, #70	; 0x46
 8008458:	2101      	movs	r1, #1
 800845a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800845c:	2328      	movs	r3, #40	; 0x28
 800845e:	18fb      	adds	r3, r7, r3
 8008460:	781c      	ldrb	r4, [r3, #0]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	68b9      	ldr	r1, [r7, #8]
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	0023      	movs	r3, r4
 800846e:	f000 f805 	bl	800847c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008472:	697b      	ldr	r3, [r7, #20]
	}
 8008474:	0018      	movs	r0, r3
 8008476:	46bd      	mov	sp, r7
 8008478:	b007      	add	sp, #28
 800847a:	bd90      	pop	{r4, r7, pc}

0800847c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	001a      	movs	r2, r3
 800848a:	1cfb      	adds	r3, r7, #3
 800848c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d103      	bne.n	800849c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	69ba      	ldr	r2, [r7, #24]
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	e002      	b.n	80084a2 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	2101      	movs	r1, #1
 80084b2:	0018      	movs	r0, r3
 80084b4:	f7ff ff43 	bl	800833e <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	1cfa      	adds	r2, r7, #3
 80084bc:	214c      	movs	r1, #76	; 0x4c
 80084be:	7812      	ldrb	r2, [r2, #0]
 80084c0:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084c2:	46c0      	nop			; (mov r8, r8)
 80084c4:	46bd      	mov	sp, r7
 80084c6:	b004      	add	sp, #16
 80084c8:	bd80      	pop	{r7, pc}

080084ca <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b08a      	sub	sp, #40	; 0x28
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	60f8      	str	r0, [r7, #12]
 80084d2:	60b9      	str	r1, [r7, #8]
 80084d4:	607a      	str	r2, [r7, #4]
 80084d6:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084d8:	2300      	movs	r3, #0
 80084da:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <xQueueGenericSend+0x20>
 80084e6:	b672      	cpsid	i
 80084e8:	e7fe      	b.n	80084e8 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d103      	bne.n	80084f8 <xQueueGenericSend+0x2e>
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <xQueueGenericSend+0x32>
 80084f8:	2301      	movs	r3, #1
 80084fa:	e000      	b.n	80084fe <xQueueGenericSend+0x34>
 80084fc:	2300      	movs	r3, #0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <xQueueGenericSend+0x3c>
 8008502:	b672      	cpsid	i
 8008504:	e7fe      	b.n	8008504 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	2b02      	cmp	r3, #2
 800850a:	d103      	bne.n	8008514 <xQueueGenericSend+0x4a>
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008510:	2b01      	cmp	r3, #1
 8008512:	d101      	bne.n	8008518 <xQueueGenericSend+0x4e>
 8008514:	2301      	movs	r3, #1
 8008516:	e000      	b.n	800851a <xQueueGenericSend+0x50>
 8008518:	2300      	movs	r3, #0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <xQueueGenericSend+0x58>
 800851e:	b672      	cpsid	i
 8008520:	e7fe      	b.n	8008520 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008522:	f001 f8af 	bl	8009684 <xTaskGetSchedulerState>
 8008526:	1e03      	subs	r3, r0, #0
 8008528:	d102      	bne.n	8008530 <xQueueGenericSend+0x66>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <xQueueGenericSend+0x6a>
 8008530:	2301      	movs	r3, #1
 8008532:	e000      	b.n	8008536 <xQueueGenericSend+0x6c>
 8008534:	2300      	movs	r3, #0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <xQueueGenericSend+0x74>
 800853a:	b672      	cpsid	i
 800853c:	e7fe      	b.n	800853c <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800853e:	f001 fcd7 	bl	8009ef0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800854a:	429a      	cmp	r2, r3
 800854c:	d302      	bcc.n	8008554 <xQueueGenericSend+0x8a>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b02      	cmp	r3, #2
 8008552:	d11e      	bne.n	8008592 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	68b9      	ldr	r1, [r7, #8]
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	0018      	movs	r0, r3
 800855c:	f000 f99f 	bl	800889e <prvCopyDataToQueue>
 8008560:	0003      	movs	r3, r0
 8008562:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	2b00      	cmp	r3, #0
 800856a:	d009      	beq.n	8008580 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	3324      	adds	r3, #36	; 0x24
 8008570:	0018      	movs	r0, r3
 8008572:	f000 feef 	bl	8009354 <xTaskRemoveFromEventList>
 8008576:	1e03      	subs	r3, r0, #0
 8008578:	d007      	beq.n	800858a <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800857a:	f001 fca9 	bl	8009ed0 <vPortYield>
 800857e:	e004      	b.n	800858a <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008586:	f001 fca3 	bl	8009ed0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800858a:	f001 fcc3 	bl	8009f14 <vPortExitCritical>
				return pdPASS;
 800858e:	2301      	movs	r3, #1
 8008590:	e05b      	b.n	800864a <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d103      	bne.n	80085a0 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008598:	f001 fcbc 	bl	8009f14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800859c:	2300      	movs	r3, #0
 800859e:	e054      	b.n	800864a <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d106      	bne.n	80085b4 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085a6:	2314      	movs	r3, #20
 80085a8:	18fb      	adds	r3, r7, r3
 80085aa:	0018      	movs	r0, r3
 80085ac:	f000 ff2e 	bl	800940c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085b0:	2301      	movs	r3, #1
 80085b2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085b4:	f001 fcae 	bl	8009f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085b8:	f000 fcdc 	bl	8008f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085bc:	f001 fc98 	bl	8009ef0 <vPortEnterCritical>
 80085c0:	6a3b      	ldr	r3, [r7, #32]
 80085c2:	2244      	movs	r2, #68	; 0x44
 80085c4:	5c9b      	ldrb	r3, [r3, r2]
 80085c6:	b25b      	sxtb	r3, r3
 80085c8:	3301      	adds	r3, #1
 80085ca:	d103      	bne.n	80085d4 <xQueueGenericSend+0x10a>
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	2244      	movs	r2, #68	; 0x44
 80085d0:	2100      	movs	r1, #0
 80085d2:	5499      	strb	r1, [r3, r2]
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	2245      	movs	r2, #69	; 0x45
 80085d8:	5c9b      	ldrb	r3, [r3, r2]
 80085da:	b25b      	sxtb	r3, r3
 80085dc:	3301      	adds	r3, #1
 80085de:	d103      	bne.n	80085e8 <xQueueGenericSend+0x11e>
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	2245      	movs	r2, #69	; 0x45
 80085e4:	2100      	movs	r1, #0
 80085e6:	5499      	strb	r1, [r3, r2]
 80085e8:	f001 fc94 	bl	8009f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085ec:	1d3a      	adds	r2, r7, #4
 80085ee:	2314      	movs	r3, #20
 80085f0:	18fb      	adds	r3, r7, r3
 80085f2:	0011      	movs	r1, r2
 80085f4:	0018      	movs	r0, r3
 80085f6:	f000 ff1d 	bl	8009434 <xTaskCheckForTimeOut>
 80085fa:	1e03      	subs	r3, r0, #0
 80085fc:	d11e      	bne.n	800863c <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	0018      	movs	r0, r3
 8008602:	f000 fa51 	bl	8008aa8 <prvIsQueueFull>
 8008606:	1e03      	subs	r3, r0, #0
 8008608:	d011      	beq.n	800862e <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	3310      	adds	r3, #16
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	0011      	movs	r1, r2
 8008612:	0018      	movs	r0, r3
 8008614:	f000 fe5a 	bl	80092cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	0018      	movs	r0, r3
 800861c:	f000 f9d0 	bl	80089c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008620:	f000 fcb4 	bl	8008f8c <xTaskResumeAll>
 8008624:	1e03      	subs	r3, r0, #0
 8008626:	d18a      	bne.n	800853e <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8008628:	f001 fc52 	bl	8009ed0 <vPortYield>
 800862c:	e787      	b.n	800853e <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800862e:	6a3b      	ldr	r3, [r7, #32]
 8008630:	0018      	movs	r0, r3
 8008632:	f000 f9c5 	bl	80089c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008636:	f000 fca9 	bl	8008f8c <xTaskResumeAll>
 800863a:	e780      	b.n	800853e <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	0018      	movs	r0, r3
 8008640:	f000 f9be 	bl	80089c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008644:	f000 fca2 	bl	8008f8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008648:	2300      	movs	r3, #0
		}
	}
}
 800864a:	0018      	movs	r0, r3
 800864c:	46bd      	mov	sp, r7
 800864e:	b00a      	add	sp, #40	; 0x28
 8008650:	bd80      	pop	{r7, pc}

08008652 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008652:	b590      	push	{r4, r7, lr}
 8008654:	b089      	sub	sp, #36	; 0x24
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	607a      	str	r2, [r7, #4]
 800865e:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <xQueueGenericSendFromISR+0x1c>
 800866a:	b672      	cpsid	i
 800866c:	e7fe      	b.n	800866c <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d103      	bne.n	800867c <xQueueGenericSendFromISR+0x2a>
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <xQueueGenericSendFromISR+0x2e>
 800867c:	2301      	movs	r3, #1
 800867e:	e000      	b.n	8008682 <xQueueGenericSendFromISR+0x30>
 8008680:	2300      	movs	r3, #0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <xQueueGenericSendFromISR+0x38>
 8008686:	b672      	cpsid	i
 8008688:	e7fe      	b.n	8008688 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b02      	cmp	r3, #2
 800868e:	d103      	bne.n	8008698 <xQueueGenericSendFromISR+0x46>
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008694:	2b01      	cmp	r3, #1
 8008696:	d101      	bne.n	800869c <xQueueGenericSendFromISR+0x4a>
 8008698:	2301      	movs	r3, #1
 800869a:	e000      	b.n	800869e <xQueueGenericSendFromISR+0x4c>
 800869c:	2300      	movs	r3, #0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <xQueueGenericSendFromISR+0x54>
 80086a2:	b672      	cpsid	i
 80086a4:	e7fe      	b.n	80086a4 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086a6:	f001 fc4d 	bl	8009f44 <ulSetInterruptMaskFromISR>
 80086aa:	0003      	movs	r3, r0
 80086ac:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d302      	bcc.n	80086c0 <xQueueGenericSendFromISR+0x6e>
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d12e      	bne.n	800871e <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086c0:	2413      	movs	r4, #19
 80086c2:	193b      	adds	r3, r7, r4
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	2145      	movs	r1, #69	; 0x45
 80086c8:	5c52      	ldrb	r2, [r2, r1]
 80086ca:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	68b9      	ldr	r1, [r7, #8]
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	0018      	movs	r0, r3
 80086d4:	f000 f8e3 	bl	800889e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086d8:	193b      	adds	r3, r7, r4
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	b25b      	sxtb	r3, r3
 80086de:	3301      	adds	r3, #1
 80086e0:	d111      	bne.n	8008706 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d016      	beq.n	8008718 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	3324      	adds	r3, #36	; 0x24
 80086ee:	0018      	movs	r0, r3
 80086f0:	f000 fe30 	bl	8009354 <xTaskRemoveFromEventList>
 80086f4:	1e03      	subs	r3, r0, #0
 80086f6:	d00f      	beq.n	8008718 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00c      	beq.n	8008718 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	e008      	b.n	8008718 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008706:	2313      	movs	r3, #19
 8008708:	18fb      	adds	r3, r7, r3
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	3301      	adds	r3, #1
 800870e:	b2db      	uxtb	r3, r3
 8008710:	b259      	sxtb	r1, r3
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	2245      	movs	r2, #69	; 0x45
 8008716:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8008718:	2301      	movs	r3, #1
 800871a:	61fb      	str	r3, [r7, #28]
		{
 800871c:	e001      	b.n	8008722 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800871e:	2300      	movs	r3, #0
 8008720:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	0018      	movs	r0, r3
 8008726:	f001 fc13 	bl	8009f50 <vClearInterruptMaskFromISR>

	return xReturn;
 800872a:	69fb      	ldr	r3, [r7, #28]
}
 800872c:	0018      	movs	r0, r3
 800872e:	46bd      	mov	sp, r7
 8008730:	b009      	add	sp, #36	; 0x24
 8008732:	bd90      	pop	{r4, r7, pc}

08008734 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b08a      	sub	sp, #40	; 0x28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008740:	2300      	movs	r3, #0
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <xQueueReceive+0x1e>
 800874e:	b672      	cpsid	i
 8008750:	e7fe      	b.n	8008750 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d103      	bne.n	8008760 <xQueueReceive+0x2c>
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <xQueueReceive+0x30>
 8008760:	2301      	movs	r3, #1
 8008762:	e000      	b.n	8008766 <xQueueReceive+0x32>
 8008764:	2300      	movs	r3, #0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d101      	bne.n	800876e <xQueueReceive+0x3a>
 800876a:	b672      	cpsid	i
 800876c:	e7fe      	b.n	800876c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800876e:	f000 ff89 	bl	8009684 <xTaskGetSchedulerState>
 8008772:	1e03      	subs	r3, r0, #0
 8008774:	d102      	bne.n	800877c <xQueueReceive+0x48>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <xQueueReceive+0x4c>
 800877c:	2301      	movs	r3, #1
 800877e:	e000      	b.n	8008782 <xQueueReceive+0x4e>
 8008780:	2300      	movs	r3, #0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d101      	bne.n	800878a <xQueueReceive+0x56>
 8008786:	b672      	cpsid	i
 8008788:	e7fe      	b.n	8008788 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800878a:	f001 fbb1 	bl	8009ef0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008792:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d01a      	beq.n	80087d0 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	0011      	movs	r1, r2
 80087a0:	0018      	movs	r0, r3
 80087a2:	f000 f8e7 	bl	8008974 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	1e5a      	subs	r2, r3, #1
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d008      	beq.n	80087c8 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	3310      	adds	r3, #16
 80087ba:	0018      	movs	r0, r3
 80087bc:	f000 fdca 	bl	8009354 <xTaskRemoveFromEventList>
 80087c0:	1e03      	subs	r3, r0, #0
 80087c2:	d001      	beq.n	80087c8 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087c4:	f001 fb84 	bl	8009ed0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087c8:	f001 fba4 	bl	8009f14 <vPortExitCritical>
				return pdPASS;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e062      	b.n	8008896 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d103      	bne.n	80087de <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087d6:	f001 fb9d 	bl	8009f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087da:	2300      	movs	r3, #0
 80087dc:	e05b      	b.n	8008896 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d106      	bne.n	80087f2 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087e4:	2314      	movs	r3, #20
 80087e6:	18fb      	adds	r3, r7, r3
 80087e8:	0018      	movs	r0, r3
 80087ea:	f000 fe0f 	bl	800940c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087ee:	2301      	movs	r3, #1
 80087f0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087f2:	f001 fb8f 	bl	8009f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087f6:	f000 fbbd 	bl	8008f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087fa:	f001 fb79 	bl	8009ef0 <vPortEnterCritical>
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	2244      	movs	r2, #68	; 0x44
 8008802:	5c9b      	ldrb	r3, [r3, r2]
 8008804:	b25b      	sxtb	r3, r3
 8008806:	3301      	adds	r3, #1
 8008808:	d103      	bne.n	8008812 <xQueueReceive+0xde>
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	2244      	movs	r2, #68	; 0x44
 800880e:	2100      	movs	r1, #0
 8008810:	5499      	strb	r1, [r3, r2]
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	2245      	movs	r2, #69	; 0x45
 8008816:	5c9b      	ldrb	r3, [r3, r2]
 8008818:	b25b      	sxtb	r3, r3
 800881a:	3301      	adds	r3, #1
 800881c:	d103      	bne.n	8008826 <xQueueReceive+0xf2>
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	2245      	movs	r2, #69	; 0x45
 8008822:	2100      	movs	r1, #0
 8008824:	5499      	strb	r1, [r3, r2]
 8008826:	f001 fb75 	bl	8009f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800882a:	1d3a      	adds	r2, r7, #4
 800882c:	2314      	movs	r3, #20
 800882e:	18fb      	adds	r3, r7, r3
 8008830:	0011      	movs	r1, r2
 8008832:	0018      	movs	r0, r3
 8008834:	f000 fdfe 	bl	8009434 <xTaskCheckForTimeOut>
 8008838:	1e03      	subs	r3, r0, #0
 800883a:	d11e      	bne.n	800887a <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	0018      	movs	r0, r3
 8008840:	f000 f91c 	bl	8008a7c <prvIsQueueEmpty>
 8008844:	1e03      	subs	r3, r0, #0
 8008846:	d011      	beq.n	800886c <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	3324      	adds	r3, #36	; 0x24
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	0011      	movs	r1, r2
 8008850:	0018      	movs	r0, r3
 8008852:	f000 fd3b 	bl	80092cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	0018      	movs	r0, r3
 800885a:	f000 f8b1 	bl	80089c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800885e:	f000 fb95 	bl	8008f8c <xTaskResumeAll>
 8008862:	1e03      	subs	r3, r0, #0
 8008864:	d191      	bne.n	800878a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8008866:	f001 fb33 	bl	8009ed0 <vPortYield>
 800886a:	e78e      	b.n	800878a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	0018      	movs	r0, r3
 8008870:	f000 f8a6 	bl	80089c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008874:	f000 fb8a 	bl	8008f8c <xTaskResumeAll>
 8008878:	e787      	b.n	800878a <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	0018      	movs	r0, r3
 800887e:	f000 f89f 	bl	80089c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008882:	f000 fb83 	bl	8008f8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	0018      	movs	r0, r3
 800888a:	f000 f8f7 	bl	8008a7c <prvIsQueueEmpty>
 800888e:	1e03      	subs	r3, r0, #0
 8008890:	d100      	bne.n	8008894 <xQueueReceive+0x160>
 8008892:	e77a      	b.n	800878a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008894:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008896:	0018      	movs	r0, r3
 8008898:	46bd      	mov	sp, r7
 800889a:	b00a      	add	sp, #40	; 0x28
 800889c:	bd80      	pop	{r7, pc}

0800889e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b086      	sub	sp, #24
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	60f8      	str	r0, [r7, #12]
 80088a6:	60b9      	str	r1, [r7, #8]
 80088a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80088aa:	2300      	movs	r3, #0
 80088ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10e      	bne.n	80088da <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d14e      	bne.n	8008962 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	0018      	movs	r0, r3
 80088ca:	f000 fef7 	bl	80096bc <xTaskPriorityDisinherit>
 80088ce:	0003      	movs	r3, r0
 80088d0:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	605a      	str	r2, [r3, #4]
 80088d8:	e043      	b.n	8008962 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d119      	bne.n	8008914 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6898      	ldr	r0, [r3, #8]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	0019      	movs	r1, r3
 80088ec:	f001 ffdf 	bl	800a8ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f8:	18d2      	adds	r2, r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	429a      	cmp	r2, r3
 8008908:	d32b      	bcc.n	8008962 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	609a      	str	r2, [r3, #8]
 8008912:	e026      	b.n	8008962 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	68d8      	ldr	r0, [r3, #12]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	0019      	movs	r1, r3
 8008920:	f001 ffc5 	bl	800a8ae <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	68da      	ldr	r2, [r3, #12]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892c:	425b      	negs	r3, r3
 800892e:	18d2      	adds	r2, r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	68da      	ldr	r2, [r3, #12]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	429a      	cmp	r2, r3
 800893e:	d207      	bcs.n	8008950 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008948:	425b      	negs	r3, r3
 800894a:	18d2      	adds	r2, r2, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b02      	cmp	r3, #2
 8008954:	d105      	bne.n	8008962 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	3b01      	subs	r3, #1
 8008960:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	1c5a      	adds	r2, r3, #1
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800896a:	697b      	ldr	r3, [r7, #20]
}
 800896c:	0018      	movs	r0, r3
 800896e:	46bd      	mov	sp, r7
 8008970:	b006      	add	sp, #24
 8008972:	bd80      	pop	{r7, pc}

08008974 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008982:	2b00      	cmp	r3, #0
 8008984:	d018      	beq.n	80089b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68da      	ldr	r2, [r3, #12]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898e:	18d2      	adds	r2, r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68da      	ldr	r2, [r3, #12]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	429a      	cmp	r2, r3
 800899e:	d303      	bcc.n	80089a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68d9      	ldr	r1, [r3, #12]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	0018      	movs	r0, r3
 80089b4:	f001 ff7b 	bl	800a8ae <memcpy>
	}
}
 80089b8:	46c0      	nop			; (mov r8, r8)
 80089ba:	46bd      	mov	sp, r7
 80089bc:	b002      	add	sp, #8
 80089be:	bd80      	pop	{r7, pc}

080089c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089c8:	f001 fa92 	bl	8009ef0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089cc:	230f      	movs	r3, #15
 80089ce:	18fb      	adds	r3, r7, r3
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	2145      	movs	r1, #69	; 0x45
 80089d4:	5c52      	ldrb	r2, [r2, r1]
 80089d6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089d8:	e013      	b.n	8008a02 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d016      	beq.n	8008a10 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	3324      	adds	r3, #36	; 0x24
 80089e6:	0018      	movs	r0, r3
 80089e8:	f000 fcb4 	bl	8009354 <xTaskRemoveFromEventList>
 80089ec:	1e03      	subs	r3, r0, #0
 80089ee:	d001      	beq.n	80089f4 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089f0:	f000 fd70 	bl	80094d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089f4:	210f      	movs	r1, #15
 80089f6:	187b      	adds	r3, r7, r1
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	3b01      	subs	r3, #1
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	187b      	adds	r3, r7, r1
 8008a00:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a02:	230f      	movs	r3, #15
 8008a04:	18fb      	adds	r3, r7, r3
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	b25b      	sxtb	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	dce5      	bgt.n	80089da <prvUnlockQueue+0x1a>
 8008a0e:	e000      	b.n	8008a12 <prvUnlockQueue+0x52>
					break;
 8008a10:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2245      	movs	r2, #69	; 0x45
 8008a16:	21ff      	movs	r1, #255	; 0xff
 8008a18:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008a1a:	f001 fa7b 	bl	8009f14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a1e:	f001 fa67 	bl	8009ef0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a22:	230e      	movs	r3, #14
 8008a24:	18fb      	adds	r3, r7, r3
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	2144      	movs	r1, #68	; 0x44
 8008a2a:	5c52      	ldrb	r2, [r2, r1]
 8008a2c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a2e:	e013      	b.n	8008a58 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d016      	beq.n	8008a66 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3310      	adds	r3, #16
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f000 fc89 	bl	8009354 <xTaskRemoveFromEventList>
 8008a42:	1e03      	subs	r3, r0, #0
 8008a44:	d001      	beq.n	8008a4a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8008a46:	f000 fd45 	bl	80094d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a4a:	210e      	movs	r1, #14
 8008a4c:	187b      	adds	r3, r7, r1
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	187b      	adds	r3, r7, r1
 8008a56:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a58:	230e      	movs	r3, #14
 8008a5a:	18fb      	adds	r3, r7, r3
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	b25b      	sxtb	r3, r3
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	dce5      	bgt.n	8008a30 <prvUnlockQueue+0x70>
 8008a64:	e000      	b.n	8008a68 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8008a66:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2244      	movs	r2, #68	; 0x44
 8008a6c:	21ff      	movs	r1, #255	; 0xff
 8008a6e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008a70:	f001 fa50 	bl	8009f14 <vPortExitCritical>
}
 8008a74:	46c0      	nop			; (mov r8, r8)
 8008a76:	46bd      	mov	sp, r7
 8008a78:	b004      	add	sp, #16
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a84:	f001 fa34 	bl	8009ef0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d102      	bne.n	8008a96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a90:	2301      	movs	r3, #1
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	e001      	b.n	8008a9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a96:	2300      	movs	r3, #0
 8008a98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a9a:	f001 fa3b 	bl	8009f14 <vPortExitCritical>

	return xReturn;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
}
 8008aa0:	0018      	movs	r0, r3
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	b004      	add	sp, #16
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ab0:	f001 fa1e 	bl	8009ef0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d102      	bne.n	8008ac6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	e001      	b.n	8008aca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008aca:	f001 fa23 	bl	8009f14 <vPortExitCritical>

	return xReturn;
 8008ace:	68fb      	ldr	r3, [r7, #12]
}
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	b004      	add	sp, #16
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	60fb      	str	r3, [r7, #12]
 8008ae6:	e015      	b.n	8008b14 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ae8:	4b0e      	ldr	r3, [pc, #56]	; (8008b24 <vQueueAddToRegistry+0x4c>)
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	00d2      	lsls	r2, r2, #3
 8008aee:	58d3      	ldr	r3, [r2, r3]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10c      	bne.n	8008b0e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008af4:	4b0b      	ldr	r3, [pc, #44]	; (8008b24 <vQueueAddToRegistry+0x4c>)
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	00d2      	lsls	r2, r2, #3
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008afe:	4a09      	ldr	r2, [pc, #36]	; (8008b24 <vQueueAddToRegistry+0x4c>)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	18d3      	adds	r3, r2, r3
 8008b06:	3304      	adds	r3, #4
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b0c:	e006      	b.n	8008b1c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	3301      	adds	r3, #1
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2b07      	cmp	r3, #7
 8008b18:	d9e6      	bls.n	8008ae8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b1a:	46c0      	nop			; (mov r8, r8)
 8008b1c:	46c0      	nop			; (mov r8, r8)
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	b004      	add	sp, #16
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	20001174 	.word	0x20001174

08008b28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b38:	f001 f9da 	bl	8009ef0 <vPortEnterCritical>
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	2244      	movs	r2, #68	; 0x44
 8008b40:	5c9b      	ldrb	r3, [r3, r2]
 8008b42:	b25b      	sxtb	r3, r3
 8008b44:	3301      	adds	r3, #1
 8008b46:	d103      	bne.n	8008b50 <vQueueWaitForMessageRestricted+0x28>
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2244      	movs	r2, #68	; 0x44
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	5499      	strb	r1, [r3, r2]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	2245      	movs	r2, #69	; 0x45
 8008b54:	5c9b      	ldrb	r3, [r3, r2]
 8008b56:	b25b      	sxtb	r3, r3
 8008b58:	3301      	adds	r3, #1
 8008b5a:	d103      	bne.n	8008b64 <vQueueWaitForMessageRestricted+0x3c>
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2245      	movs	r2, #69	; 0x45
 8008b60:	2100      	movs	r1, #0
 8008b62:	5499      	strb	r1, [r3, r2]
 8008b64:	f001 f9d6 	bl	8009f14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d106      	bne.n	8008b7e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	3324      	adds	r3, #36	; 0x24
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	68b9      	ldr	r1, [r7, #8]
 8008b78:	0018      	movs	r0, r3
 8008b7a:	f000 fbc5 	bl	8009308 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	0018      	movs	r0, r3
 8008b82:	f7ff ff1d 	bl	80089c0 <prvUnlockQueue>
	}
 8008b86:	46c0      	nop			; (mov r8, r8)
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	b006      	add	sp, #24
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b8e:	b590      	push	{r4, r7, lr}
 8008b90:	b08d      	sub	sp, #52	; 0x34
 8008b92:	af04      	add	r7, sp, #16
 8008b94:	60f8      	str	r0, [r7, #12]
 8008b96:	60b9      	str	r1, [r7, #8]
 8008b98:	607a      	str	r2, [r7, #4]
 8008b9a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <xTaskCreateStatic+0x18>
 8008ba2:	b672      	cpsid	i
 8008ba4:	e7fe      	b.n	8008ba4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <xTaskCreateStatic+0x22>
 8008bac:	b672      	cpsid	i
 8008bae:	e7fe      	b.n	8008bae <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008bb0:	235c      	movs	r3, #92	; 0x5c
 8008bb2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	2b5c      	cmp	r3, #92	; 0x5c
 8008bb8:	d001      	beq.n	8008bbe <xTaskCreateStatic+0x30>
 8008bba:	b672      	cpsid	i
 8008bbc:	e7fe      	b.n	8008bbc <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d020      	beq.n	8008c06 <xTaskCreateStatic+0x78>
 8008bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d01d      	beq.n	8008c06 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bcc:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bd2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	2259      	movs	r2, #89	; 0x59
 8008bd8:	2102      	movs	r1, #2
 8008bda:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008bdc:	683c      	ldr	r4, [r7, #0]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	68b9      	ldr	r1, [r7, #8]
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	2300      	movs	r3, #0
 8008be6:	9303      	str	r3, [sp, #12]
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	9302      	str	r3, [sp, #8]
 8008bec:	2318      	movs	r3, #24
 8008bee:	18fb      	adds	r3, r7, r3
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	0023      	movs	r3, r4
 8008bf8:	f000 f858 	bl	8008cac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	0018      	movs	r0, r3
 8008c00:	f000 f8d6 	bl	8008db0 <prvAddNewTaskToReadyList>
 8008c04:	e001      	b.n	8008c0a <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8008c06:	2300      	movs	r3, #0
 8008c08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c0a:	69bb      	ldr	r3, [r7, #24]
	}
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	b009      	add	sp, #36	; 0x24
 8008c12:	bd90      	pop	{r4, r7, pc}

08008c14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c14:	b590      	push	{r4, r7, lr}
 8008c16:	b08d      	sub	sp, #52	; 0x34
 8008c18:	af04      	add	r7, sp, #16
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	603b      	str	r3, [r7, #0]
 8008c20:	1dbb      	adds	r3, r7, #6
 8008c22:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c24:	1dbb      	adds	r3, r7, #6
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	f001 f9f8 	bl	800a020 <pvPortMalloc>
 8008c30:	0003      	movs	r3, r0
 8008c32:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d010      	beq.n	8008c5c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008c3a:	205c      	movs	r0, #92	; 0x5c
 8008c3c:	f001 f9f0 	bl	800a020 <pvPortMalloc>
 8008c40:	0003      	movs	r3, r0
 8008c42:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	631a      	str	r2, [r3, #48]	; 0x30
 8008c50:	e006      	b.n	8008c60 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	0018      	movs	r0, r3
 8008c56:	f001 fa89 	bl	800a16c <vPortFree>
 8008c5a:	e001      	b.n	8008c60 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d01a      	beq.n	8008c9c <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	2259      	movs	r2, #89	; 0x59
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c6e:	1dbb      	adds	r3, r7, #6
 8008c70:	881a      	ldrh	r2, [r3, #0]
 8008c72:	683c      	ldr	r4, [r7, #0]
 8008c74:	68b9      	ldr	r1, [r7, #8]
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	9303      	str	r3, [sp, #12]
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	9302      	str	r3, [sp, #8]
 8008c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c82:	9301      	str	r3, [sp, #4]
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	0023      	movs	r3, r4
 8008c8a:	f000 f80f 	bl	8008cac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	0018      	movs	r0, r3
 8008c92:	f000 f88d 	bl	8008db0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c96:	2301      	movs	r3, #1
 8008c98:	61bb      	str	r3, [r7, #24]
 8008c9a:	e002      	b.n	8008ca2 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	425b      	negs	r3, r3
 8008ca0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ca2:	69bb      	ldr	r3, [r7, #24]
	}
 8008ca4:	0018      	movs	r0, r3
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	b009      	add	sp, #36	; 0x24
 8008caa:	bd90      	pop	{r4, r7, pc}

08008cac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	001a      	movs	r2, r3
 8008cc4:	21a5      	movs	r1, #165	; 0xa5
 8008cc6:	f001 fd5d 	bl	800a784 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4936      	ldr	r1, [pc, #216]	; (8008dac <prvInitialiseNewTask+0x100>)
 8008cd2:	468c      	mov	ip, r1
 8008cd4:	4463      	add	r3, ip
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	18d3      	adds	r3, r2, r3
 8008cda:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	2207      	movs	r2, #7
 8008ce0:	4393      	bics	r3, r2
 8008ce2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	2207      	movs	r2, #7
 8008ce8:	4013      	ands	r3, r2
 8008cea:	d001      	beq.n	8008cf0 <prvInitialiseNewTask+0x44>
 8008cec:	b672      	cpsid	i
 8008cee:	e7fe      	b.n	8008cee <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	617b      	str	r3, [r7, #20]
 8008cf4:	e013      	b.n	8008d1e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	18d3      	adds	r3, r2, r3
 8008cfc:	7818      	ldrb	r0, [r3, #0]
 8008cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d00:	2134      	movs	r1, #52	; 0x34
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	18d3      	adds	r3, r2, r3
 8008d06:	185b      	adds	r3, r3, r1
 8008d08:	1c02      	adds	r2, r0, #0
 8008d0a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	18d3      	adds	r3, r2, r3
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d006      	beq.n	8008d26 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	617b      	str	r3, [r7, #20]
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b0f      	cmp	r3, #15
 8008d22:	d9e8      	bls.n	8008cf6 <prvInitialiseNewTask+0x4a>
 8008d24:	e000      	b.n	8008d28 <prvInitialiseNewTask+0x7c>
		{
			break;
 8008d26:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2a:	2243      	movs	r2, #67	; 0x43
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d30:	6a3b      	ldr	r3, [r7, #32]
 8008d32:	2b37      	cmp	r3, #55	; 0x37
 8008d34:	d901      	bls.n	8008d3a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d36:	2337      	movs	r3, #55	; 0x37
 8008d38:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3c:	6a3a      	ldr	r2, [r7, #32]
 8008d3e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d42:	6a3a      	ldr	r2, [r7, #32]
 8008d44:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d48:	2200      	movs	r2, #0
 8008d4a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4e:	3304      	adds	r3, #4
 8008d50:	0018      	movs	r0, r3
 8008d52:	f7ff fa69 	bl	8008228 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d58:	3318      	adds	r3, #24
 8008d5a:	0018      	movs	r0, r3
 8008d5c:	f7ff fa64 	bl	8008228 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	2238      	movs	r2, #56	; 0x38
 8008d6a:	1ad2      	subs	r2, r2, r3
 8008d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d74:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	2200      	movs	r2, #0
 8008d7a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	2258      	movs	r2, #88	; 0x58
 8008d80:	2100      	movs	r1, #0
 8008d82:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	68f9      	ldr	r1, [r7, #12]
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f001 f816 	bl	8009dbc <pxPortInitialiseStack>
 8008d90:	0002      	movs	r2, r0
 8008d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d94:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008da0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008da2:	46c0      	nop			; (mov r8, r8)
 8008da4:	46bd      	mov	sp, r7
 8008da6:	b006      	add	sp, #24
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	3fffffff 	.word	0x3fffffff

08008db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008db8:	f001 f89a 	bl	8009ef0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008dbc:	4b2a      	ldr	r3, [pc, #168]	; (8008e68 <prvAddNewTaskToReadyList+0xb8>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	4b29      	ldr	r3, [pc, #164]	; (8008e68 <prvAddNewTaskToReadyList+0xb8>)
 8008dc4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008dc6:	4b29      	ldr	r3, [pc, #164]	; (8008e6c <prvAddNewTaskToReadyList+0xbc>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d109      	bne.n	8008de2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008dce:	4b27      	ldr	r3, [pc, #156]	; (8008e6c <prvAddNewTaskToReadyList+0xbc>)
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008dd4:	4b24      	ldr	r3, [pc, #144]	; (8008e68 <prvAddNewTaskToReadyList+0xb8>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d110      	bne.n	8008dfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ddc:	f000 fb94 	bl	8009508 <prvInitialiseTaskLists>
 8008de0:	e00d      	b.n	8008dfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008de2:	4b23      	ldr	r3, [pc, #140]	; (8008e70 <prvAddNewTaskToReadyList+0xc0>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d109      	bne.n	8008dfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008dea:	4b20      	ldr	r3, [pc, #128]	; (8008e6c <prvAddNewTaskToReadyList+0xbc>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d802      	bhi.n	8008dfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008df8:	4b1c      	ldr	r3, [pc, #112]	; (8008e6c <prvAddNewTaskToReadyList+0xbc>)
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008dfe:	4b1d      	ldr	r3, [pc, #116]	; (8008e74 <prvAddNewTaskToReadyList+0xc4>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	1c5a      	adds	r2, r3, #1
 8008e04:	4b1b      	ldr	r3, [pc, #108]	; (8008e74 <prvAddNewTaskToReadyList+0xc4>)
 8008e06:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e08:	4b1a      	ldr	r3, [pc, #104]	; (8008e74 <prvAddNewTaskToReadyList+0xc4>)
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e14:	4b18      	ldr	r3, [pc, #96]	; (8008e78 <prvAddNewTaskToReadyList+0xc8>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d903      	bls.n	8008e24 <prvAddNewTaskToReadyList+0x74>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e20:	4b15      	ldr	r3, [pc, #84]	; (8008e78 <prvAddNewTaskToReadyList+0xc8>)
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e28:	0013      	movs	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	189b      	adds	r3, r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4a12      	ldr	r2, [pc, #72]	; (8008e7c <prvAddNewTaskToReadyList+0xcc>)
 8008e32:	189a      	adds	r2, r3, r2
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3304      	adds	r3, #4
 8008e38:	0019      	movs	r1, r3
 8008e3a:	0010      	movs	r0, r2
 8008e3c:	f7ff f9ff 	bl	800823e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e40:	f001 f868 	bl	8009f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e44:	4b0a      	ldr	r3, [pc, #40]	; (8008e70 <prvAddNewTaskToReadyList+0xc0>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d008      	beq.n	8008e5e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e4c:	4b07      	ldr	r3, [pc, #28]	; (8008e6c <prvAddNewTaskToReadyList+0xbc>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d201      	bcs.n	8008e5e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e5a:	f001 f839 	bl	8009ed0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e5e:	46c0      	nop			; (mov r8, r8)
 8008e60:	46bd      	mov	sp, r7
 8008e62:	b002      	add	sp, #8
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	46c0      	nop			; (mov r8, r8)
 8008e68:	20001688 	.word	0x20001688
 8008e6c:	200011b4 	.word	0x200011b4
 8008e70:	20001694 	.word	0x20001694
 8008e74:	200016a4 	.word	0x200016a4
 8008e78:	20001690 	.word	0x20001690
 8008e7c:	200011b8 	.word	0x200011b8

08008e80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d010      	beq.n	8008eb4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e92:	4b0d      	ldr	r3, [pc, #52]	; (8008ec8 <vTaskDelay+0x48>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <vTaskDelay+0x1e>
 8008e9a:	b672      	cpsid	i
 8008e9c:	e7fe      	b.n	8008e9c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8008e9e:	f000 f869 	bl	8008f74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	f000 fc64 	bl	8009774 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008eac:	f000 f86e 	bl	8008f8c <xTaskResumeAll>
 8008eb0:	0003      	movs	r3, r0
 8008eb2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d101      	bne.n	8008ebe <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8008eba:	f001 f809 	bl	8009ed0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ebe:	46c0      	nop			; (mov r8, r8)
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	b004      	add	sp, #16
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	46c0      	nop			; (mov r8, r8)
 8008ec8:	200016b0 	.word	0x200016b0

08008ecc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ecc:	b590      	push	{r4, r7, lr}
 8008ece:	b089      	sub	sp, #36	; 0x24
 8008ed0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008eda:	003a      	movs	r2, r7
 8008edc:	1d39      	adds	r1, r7, #4
 8008ede:	2308      	movs	r3, #8
 8008ee0:	18fb      	adds	r3, r7, r3
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	f7ff f952 	bl	800818c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ee8:	683c      	ldr	r4, [r7, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	491b      	ldr	r1, [pc, #108]	; (8008f5c <vTaskStartScheduler+0x90>)
 8008ef0:	481b      	ldr	r0, [pc, #108]	; (8008f60 <vTaskStartScheduler+0x94>)
 8008ef2:	9202      	str	r2, [sp, #8]
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	2300      	movs	r3, #0
 8008efc:	0022      	movs	r2, r4
 8008efe:	f7ff fe46 	bl	8008b8e <xTaskCreateStatic>
 8008f02:	0002      	movs	r2, r0
 8008f04:	4b17      	ldr	r3, [pc, #92]	; (8008f64 <vTaskStartScheduler+0x98>)
 8008f06:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f08:	4b16      	ldr	r3, [pc, #88]	; (8008f64 <vTaskStartScheduler+0x98>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f10:	2301      	movs	r3, #1
 8008f12:	60fb      	str	r3, [r7, #12]
 8008f14:	e001      	b.n	8008f1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f16:	2300      	movs	r3, #0
 8008f18:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d103      	bne.n	8008f28 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8008f20:	f000 fc7c 	bl	800981c <xTimerCreateTimerTask>
 8008f24:	0003      	movs	r3, r0
 8008f26:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d10d      	bne.n	8008f4a <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8008f2e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f30:	4b0d      	ldr	r3, [pc, #52]	; (8008f68 <vTaskStartScheduler+0x9c>)
 8008f32:	2201      	movs	r2, #1
 8008f34:	4252      	negs	r2, r2
 8008f36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f38:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <vTaskStartScheduler+0xa0>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008f3e:	4b0c      	ldr	r3, [pc, #48]	; (8008f70 <vTaskStartScheduler+0xa4>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f44:	f000 ffa0 	bl	8009e88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f48:	e004      	b.n	8008f54 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	d101      	bne.n	8008f54 <vTaskStartScheduler+0x88>
 8008f50:	b672      	cpsid	i
 8008f52:	e7fe      	b.n	8008f52 <vTaskStartScheduler+0x86>
}
 8008f54:	46c0      	nop			; (mov r8, r8)
 8008f56:	46bd      	mov	sp, r7
 8008f58:	b005      	add	sp, #20
 8008f5a:	bd90      	pop	{r4, r7, pc}
 8008f5c:	0800b6a0 	.word	0x0800b6a0
 8008f60:	080094e9 	.word	0x080094e9
 8008f64:	200016ac 	.word	0x200016ac
 8008f68:	200016a8 	.word	0x200016a8
 8008f6c:	20001694 	.word	0x20001694
 8008f70:	2000168c 	.word	0x2000168c

08008f74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008f78:	4b03      	ldr	r3, [pc, #12]	; (8008f88 <vTaskSuspendAll+0x14>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	4b02      	ldr	r3, [pc, #8]	; (8008f88 <vTaskSuspendAll+0x14>)
 8008f80:	601a      	str	r2, [r3, #0]
}
 8008f82:	46c0      	nop			; (mov r8, r8)
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	200016b0 	.word	0x200016b0

08008f8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f92:	2300      	movs	r3, #0
 8008f94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f96:	2300      	movs	r3, #0
 8008f98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f9a:	4b3a      	ldr	r3, [pc, #232]	; (8009084 <xTaskResumeAll+0xf8>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <xTaskResumeAll+0x1a>
 8008fa2:	b672      	cpsid	i
 8008fa4:	e7fe      	b.n	8008fa4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008fa6:	f000 ffa3 	bl	8009ef0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008faa:	4b36      	ldr	r3, [pc, #216]	; (8009084 <xTaskResumeAll+0xf8>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	1e5a      	subs	r2, r3, #1
 8008fb0:	4b34      	ldr	r3, [pc, #208]	; (8009084 <xTaskResumeAll+0xf8>)
 8008fb2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fb4:	4b33      	ldr	r3, [pc, #204]	; (8009084 <xTaskResumeAll+0xf8>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d15b      	bne.n	8009074 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008fbc:	4b32      	ldr	r3, [pc, #200]	; (8009088 <xTaskResumeAll+0xfc>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d057      	beq.n	8009074 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fc4:	e02f      	b.n	8009026 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008fc6:	4b31      	ldr	r3, [pc, #196]	; (800908c <xTaskResumeAll+0x100>)
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3318      	adds	r3, #24
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	f7ff f98b 	bl	80082ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3304      	adds	r3, #4
 8008fdc:	0018      	movs	r0, r3
 8008fde:	f7ff f986 	bl	80082ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe6:	4b2a      	ldr	r3, [pc, #168]	; (8009090 <xTaskResumeAll+0x104>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d903      	bls.n	8008ff6 <xTaskResumeAll+0x6a>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff2:	4b27      	ldr	r3, [pc, #156]	; (8009090 <xTaskResumeAll+0x104>)
 8008ff4:	601a      	str	r2, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ffa:	0013      	movs	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	189b      	adds	r3, r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4a24      	ldr	r2, [pc, #144]	; (8009094 <xTaskResumeAll+0x108>)
 8009004:	189a      	adds	r2, r3, r2
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	3304      	adds	r3, #4
 800900a:	0019      	movs	r1, r3
 800900c:	0010      	movs	r0, r2
 800900e:	f7ff f916 	bl	800823e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009016:	4b20      	ldr	r3, [pc, #128]	; (8009098 <xTaskResumeAll+0x10c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901c:	429a      	cmp	r2, r3
 800901e:	d302      	bcc.n	8009026 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8009020:	4b1e      	ldr	r3, [pc, #120]	; (800909c <xTaskResumeAll+0x110>)
 8009022:	2201      	movs	r2, #1
 8009024:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009026:	4b19      	ldr	r3, [pc, #100]	; (800908c <xTaskResumeAll+0x100>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1cb      	bne.n	8008fc6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009034:	f000 fb02 	bl	800963c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009038:	4b19      	ldr	r3, [pc, #100]	; (80090a0 <xTaskResumeAll+0x114>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00f      	beq.n	8009064 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009044:	f000 f83c 	bl	80090c0 <xTaskIncrementTick>
 8009048:	1e03      	subs	r3, r0, #0
 800904a:	d002      	beq.n	8009052 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800904c:	4b13      	ldr	r3, [pc, #76]	; (800909c <xTaskResumeAll+0x110>)
 800904e:	2201      	movs	r2, #1
 8009050:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	3b01      	subs	r3, #1
 8009056:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1f2      	bne.n	8009044 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800905e:	4b10      	ldr	r3, [pc, #64]	; (80090a0 <xTaskResumeAll+0x114>)
 8009060:	2200      	movs	r2, #0
 8009062:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009064:	4b0d      	ldr	r3, [pc, #52]	; (800909c <xTaskResumeAll+0x110>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800906c:	2301      	movs	r3, #1
 800906e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009070:	f000 ff2e 	bl	8009ed0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009074:	f000 ff4e 	bl	8009f14 <vPortExitCritical>

	return xAlreadyYielded;
 8009078:	68bb      	ldr	r3, [r7, #8]
}
 800907a:	0018      	movs	r0, r3
 800907c:	46bd      	mov	sp, r7
 800907e:	b004      	add	sp, #16
 8009080:	bd80      	pop	{r7, pc}
 8009082:	46c0      	nop			; (mov r8, r8)
 8009084:	200016b0 	.word	0x200016b0
 8009088:	20001688 	.word	0x20001688
 800908c:	20001648 	.word	0x20001648
 8009090:	20001690 	.word	0x20001690
 8009094:	200011b8 	.word	0x200011b8
 8009098:	200011b4 	.word	0x200011b4
 800909c:	2000169c 	.word	0x2000169c
 80090a0:	20001698 	.word	0x20001698

080090a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80090aa:	4b04      	ldr	r3, [pc, #16]	; (80090bc <xTaskGetTickCount+0x18>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80090b0:	687b      	ldr	r3, [r7, #4]
}
 80090b2:	0018      	movs	r0, r3
 80090b4:	46bd      	mov	sp, r7
 80090b6:	b002      	add	sp, #8
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	46c0      	nop			; (mov r8, r8)
 80090bc:	2000168c 	.word	0x2000168c

080090c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090c6:	2300      	movs	r3, #0
 80090c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090ca:	4b4c      	ldr	r3, [pc, #304]	; (80091fc <xTaskIncrementTick+0x13c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d000      	beq.n	80090d4 <xTaskIncrementTick+0x14>
 80090d2:	e083      	b.n	80091dc <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090d4:	4b4a      	ldr	r3, [pc, #296]	; (8009200 <xTaskIncrementTick+0x140>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	3301      	adds	r3, #1
 80090da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090dc:	4b48      	ldr	r3, [pc, #288]	; (8009200 <xTaskIncrementTick+0x140>)
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d117      	bne.n	8009118 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80090e8:	4b46      	ldr	r3, [pc, #280]	; (8009204 <xTaskIncrementTick+0x144>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <xTaskIncrementTick+0x36>
 80090f2:	b672      	cpsid	i
 80090f4:	e7fe      	b.n	80090f4 <xTaskIncrementTick+0x34>
 80090f6:	4b43      	ldr	r3, [pc, #268]	; (8009204 <xTaskIncrementTick+0x144>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	60fb      	str	r3, [r7, #12]
 80090fc:	4b42      	ldr	r3, [pc, #264]	; (8009208 <xTaskIncrementTick+0x148>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	4b40      	ldr	r3, [pc, #256]	; (8009204 <xTaskIncrementTick+0x144>)
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	4b40      	ldr	r3, [pc, #256]	; (8009208 <xTaskIncrementTick+0x148>)
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	4b40      	ldr	r3, [pc, #256]	; (800920c <xTaskIncrementTick+0x14c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	4b3e      	ldr	r3, [pc, #248]	; (800920c <xTaskIncrementTick+0x14c>)
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	f000 fa92 	bl	800963c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009118:	4b3d      	ldr	r3, [pc, #244]	; (8009210 <xTaskIncrementTick+0x150>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	429a      	cmp	r2, r3
 8009120:	d34e      	bcc.n	80091c0 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009122:	4b38      	ldr	r3, [pc, #224]	; (8009204 <xTaskIncrementTick+0x144>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <xTaskIncrementTick+0x70>
 800912c:	2301      	movs	r3, #1
 800912e:	e000      	b.n	8009132 <xTaskIncrementTick+0x72>
 8009130:	2300      	movs	r3, #0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d004      	beq.n	8009140 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009136:	4b36      	ldr	r3, [pc, #216]	; (8009210 <xTaskIncrementTick+0x150>)
 8009138:	2201      	movs	r2, #1
 800913a:	4252      	negs	r2, r2
 800913c:	601a      	str	r2, [r3, #0]
					break;
 800913e:	e03f      	b.n	80091c0 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009140:	4b30      	ldr	r3, [pc, #192]	; (8009204 <xTaskIncrementTick+0x144>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	429a      	cmp	r2, r3
 8009156:	d203      	bcs.n	8009160 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009158:	4b2d      	ldr	r3, [pc, #180]	; (8009210 <xTaskIncrementTick+0x150>)
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	601a      	str	r2, [r3, #0]
						break;
 800915e:	e02f      	b.n	80091c0 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	3304      	adds	r3, #4
 8009164:	0018      	movs	r0, r3
 8009166:	f7ff f8c2 	bl	80082ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916e:	2b00      	cmp	r3, #0
 8009170:	d004      	beq.n	800917c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	3318      	adds	r3, #24
 8009176:	0018      	movs	r0, r3
 8009178:	f7ff f8b9 	bl	80082ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009180:	4b24      	ldr	r3, [pc, #144]	; (8009214 <xTaskIncrementTick+0x154>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	429a      	cmp	r2, r3
 8009186:	d903      	bls.n	8009190 <xTaskIncrementTick+0xd0>
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800918c:	4b21      	ldr	r3, [pc, #132]	; (8009214 <xTaskIncrementTick+0x154>)
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009194:	0013      	movs	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	189b      	adds	r3, r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4a1e      	ldr	r2, [pc, #120]	; (8009218 <xTaskIncrementTick+0x158>)
 800919e:	189a      	adds	r2, r3, r2
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	3304      	adds	r3, #4
 80091a4:	0019      	movs	r1, r3
 80091a6:	0010      	movs	r0, r2
 80091a8:	f7ff f849 	bl	800823e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b0:	4b1a      	ldr	r3, [pc, #104]	; (800921c <xTaskIncrementTick+0x15c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d3b3      	bcc.n	8009122 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80091ba:	2301      	movs	r3, #1
 80091bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091be:	e7b0      	b.n	8009122 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091c0:	4b16      	ldr	r3, [pc, #88]	; (800921c <xTaskIncrementTick+0x15c>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c6:	4914      	ldr	r1, [pc, #80]	; (8009218 <xTaskIncrementTick+0x158>)
 80091c8:	0013      	movs	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	189b      	adds	r3, r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	585b      	ldr	r3, [r3, r1]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d907      	bls.n	80091e6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80091d6:	2301      	movs	r3, #1
 80091d8:	617b      	str	r3, [r7, #20]
 80091da:	e004      	b.n	80091e6 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80091dc:	4b10      	ldr	r3, [pc, #64]	; (8009220 <xTaskIncrementTick+0x160>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	1c5a      	adds	r2, r3, #1
 80091e2:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <xTaskIncrementTick+0x160>)
 80091e4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80091e6:	4b0f      	ldr	r3, [pc, #60]	; (8009224 <xTaskIncrementTick+0x164>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80091ee:	2301      	movs	r3, #1
 80091f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80091f2:	697b      	ldr	r3, [r7, #20]
}
 80091f4:	0018      	movs	r0, r3
 80091f6:	46bd      	mov	sp, r7
 80091f8:	b006      	add	sp, #24
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	200016b0 	.word	0x200016b0
 8009200:	2000168c 	.word	0x2000168c
 8009204:	20001640 	.word	0x20001640
 8009208:	20001644 	.word	0x20001644
 800920c:	200016a0 	.word	0x200016a0
 8009210:	200016a8 	.word	0x200016a8
 8009214:	20001690 	.word	0x20001690
 8009218:	200011b8 	.word	0x200011b8
 800921c:	200011b4 	.word	0x200011b4
 8009220:	20001698 	.word	0x20001698
 8009224:	2000169c 	.word	0x2000169c

08009228 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800922e:	4b22      	ldr	r3, [pc, #136]	; (80092b8 <vTaskSwitchContext+0x90>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009236:	4b21      	ldr	r3, [pc, #132]	; (80092bc <vTaskSwitchContext+0x94>)
 8009238:	2201      	movs	r2, #1
 800923a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800923c:	e037      	b.n	80092ae <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800923e:	4b1f      	ldr	r3, [pc, #124]	; (80092bc <vTaskSwitchContext+0x94>)
 8009240:	2200      	movs	r2, #0
 8009242:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009244:	4b1e      	ldr	r3, [pc, #120]	; (80092c0 <vTaskSwitchContext+0x98>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	607b      	str	r3, [r7, #4]
 800924a:	e007      	b.n	800925c <vTaskSwitchContext+0x34>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <vTaskSwitchContext+0x2e>
 8009252:	b672      	cpsid	i
 8009254:	e7fe      	b.n	8009254 <vTaskSwitchContext+0x2c>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	3b01      	subs	r3, #1
 800925a:	607b      	str	r3, [r7, #4]
 800925c:	4919      	ldr	r1, [pc, #100]	; (80092c4 <vTaskSwitchContext+0x9c>)
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	0013      	movs	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	189b      	adds	r3, r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	585b      	ldr	r3, [r3, r1]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0ee      	beq.n	800924c <vTaskSwitchContext+0x24>
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	0013      	movs	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	189b      	adds	r3, r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4a12      	ldr	r2, [pc, #72]	; (80092c4 <vTaskSwitchContext+0x9c>)
 800927a:	189b      	adds	r3, r3, r2
 800927c:	603b      	str	r3, [r7, #0]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	685a      	ldr	r2, [r3, #4]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	605a      	str	r2, [r3, #4]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	3308      	adds	r3, #8
 8009290:	429a      	cmp	r2, r3
 8009292:	d104      	bne.n	800929e <vTaskSwitchContext+0x76>
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	685a      	ldr	r2, [r3, #4]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	605a      	str	r2, [r3, #4]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	68da      	ldr	r2, [r3, #12]
 80092a4:	4b08      	ldr	r3, [pc, #32]	; (80092c8 <vTaskSwitchContext+0xa0>)
 80092a6:	601a      	str	r2, [r3, #0]
 80092a8:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <vTaskSwitchContext+0x98>)
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	601a      	str	r2, [r3, #0]
}
 80092ae:	46c0      	nop			; (mov r8, r8)
 80092b0:	46bd      	mov	sp, r7
 80092b2:	b002      	add	sp, #8
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	46c0      	nop			; (mov r8, r8)
 80092b8:	200016b0 	.word	0x200016b0
 80092bc:	2000169c 	.word	0x2000169c
 80092c0:	20001690 	.word	0x20001690
 80092c4:	200011b8 	.word	0x200011b8
 80092c8:	200011b4 	.word	0x200011b4

080092cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d101      	bne.n	80092e0 <vTaskPlaceOnEventList+0x14>
 80092dc:	b672      	cpsid	i
 80092de:	e7fe      	b.n	80092de <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092e0:	4b08      	ldr	r3, [pc, #32]	; (8009304 <vTaskPlaceOnEventList+0x38>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3318      	adds	r3, #24
 80092e6:	001a      	movs	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	0011      	movs	r1, r2
 80092ec:	0018      	movs	r0, r3
 80092ee:	f7fe ffc8 	bl	8008282 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	2101      	movs	r1, #1
 80092f6:	0018      	movs	r0, r3
 80092f8:	f000 fa3c 	bl	8009774 <prvAddCurrentTaskToDelayedList>
}
 80092fc:	46c0      	nop			; (mov r8, r8)
 80092fe:	46bd      	mov	sp, r7
 8009300:	b002      	add	sp, #8
 8009302:	bd80      	pop	{r7, pc}
 8009304:	200011b4 	.word	0x200011b4

08009308 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <vTaskPlaceOnEventListRestricted+0x16>
 800931a:	b672      	cpsid	i
 800931c:	e7fe      	b.n	800931c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800931e:	4b0c      	ldr	r3, [pc, #48]	; (8009350 <vTaskPlaceOnEventListRestricted+0x48>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3318      	adds	r3, #24
 8009324:	001a      	movs	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	0011      	movs	r1, r2
 800932a:	0018      	movs	r0, r3
 800932c:	f7fe ff87 	bl	800823e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d002      	beq.n	800933c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8009336:	2301      	movs	r3, #1
 8009338:	425b      	negs	r3, r3
 800933a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	0011      	movs	r1, r2
 8009342:	0018      	movs	r0, r3
 8009344:	f000 fa16 	bl	8009774 <prvAddCurrentTaskToDelayedList>
	}
 8009348:	46c0      	nop			; (mov r8, r8)
 800934a:	46bd      	mov	sp, r7
 800934c:	b004      	add	sp, #16
 800934e:	bd80      	pop	{r7, pc}
 8009350:	200011b4 	.word	0x200011b4

08009354 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d101      	bne.n	800936e <xTaskRemoveFromEventList+0x1a>
 800936a:	b672      	cpsid	i
 800936c:	e7fe      	b.n	800936c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	3318      	adds	r3, #24
 8009372:	0018      	movs	r0, r3
 8009374:	f7fe ffbb 	bl	80082ee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009378:	4b1e      	ldr	r3, [pc, #120]	; (80093f4 <xTaskRemoveFromEventList+0xa0>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d11d      	bne.n	80093bc <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	3304      	adds	r3, #4
 8009384:	0018      	movs	r0, r3
 8009386:	f7fe ffb2 	bl	80082ee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800938e:	4b1a      	ldr	r3, [pc, #104]	; (80093f8 <xTaskRemoveFromEventList+0xa4>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	429a      	cmp	r2, r3
 8009394:	d903      	bls.n	800939e <xTaskRemoveFromEventList+0x4a>
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939a:	4b17      	ldr	r3, [pc, #92]	; (80093f8 <xTaskRemoveFromEventList+0xa4>)
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a2:	0013      	movs	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	189b      	adds	r3, r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4a14      	ldr	r2, [pc, #80]	; (80093fc <xTaskRemoveFromEventList+0xa8>)
 80093ac:	189a      	adds	r2, r3, r2
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	3304      	adds	r3, #4
 80093b2:	0019      	movs	r1, r3
 80093b4:	0010      	movs	r0, r2
 80093b6:	f7fe ff42 	bl	800823e <vListInsertEnd>
 80093ba:	e007      	b.n	80093cc <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	3318      	adds	r3, #24
 80093c0:	001a      	movs	r2, r3
 80093c2:	4b0f      	ldr	r3, [pc, #60]	; (8009400 <xTaskRemoveFromEventList+0xac>)
 80093c4:	0011      	movs	r1, r2
 80093c6:	0018      	movs	r0, r3
 80093c8:	f7fe ff39 	bl	800823e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d0:	4b0c      	ldr	r3, [pc, #48]	; (8009404 <xTaskRemoveFromEventList+0xb0>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d905      	bls.n	80093e6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093da:	2301      	movs	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093de:	4b0a      	ldr	r3, [pc, #40]	; (8009408 <xTaskRemoveFromEventList+0xb4>)
 80093e0:	2201      	movs	r2, #1
 80093e2:	601a      	str	r2, [r3, #0]
 80093e4:	e001      	b.n	80093ea <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80093ea:	68fb      	ldr	r3, [r7, #12]
}
 80093ec:	0018      	movs	r0, r3
 80093ee:	46bd      	mov	sp, r7
 80093f0:	b004      	add	sp, #16
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	200016b0 	.word	0x200016b0
 80093f8:	20001690 	.word	0x20001690
 80093fc:	200011b8 	.word	0x200011b8
 8009400:	20001648 	.word	0x20001648
 8009404:	200011b4 	.word	0x200011b4
 8009408:	2000169c 	.word	0x2000169c

0800940c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009414:	4b05      	ldr	r3, [pc, #20]	; (800942c <vTaskInternalSetTimeOutState+0x20>)
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800941c:	4b04      	ldr	r3, [pc, #16]	; (8009430 <vTaskInternalSetTimeOutState+0x24>)
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	605a      	str	r2, [r3, #4]
}
 8009424:	46c0      	nop			; (mov r8, r8)
 8009426:	46bd      	mov	sp, r7
 8009428:	b002      	add	sp, #8
 800942a:	bd80      	pop	{r7, pc}
 800942c:	200016a0 	.word	0x200016a0
 8009430:	2000168c 	.word	0x2000168c

08009434 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <xTaskCheckForTimeOut+0x14>
 8009444:	b672      	cpsid	i
 8009446:	e7fe      	b.n	8009446 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <xTaskCheckForTimeOut+0x1e>
 800944e:	b672      	cpsid	i
 8009450:	e7fe      	b.n	8009450 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8009452:	f000 fd4d 	bl	8009ef0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009456:	4b1d      	ldr	r3, [pc, #116]	; (80094cc <xTaskCheckForTimeOut+0x98>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3301      	adds	r3, #1
 800946c:	d102      	bne.n	8009474 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800946e:	2300      	movs	r3, #0
 8009470:	617b      	str	r3, [r7, #20]
 8009472:	e024      	b.n	80094be <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	4b15      	ldr	r3, [pc, #84]	; (80094d0 <xTaskCheckForTimeOut+0x9c>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	429a      	cmp	r2, r3
 800947e:	d007      	beq.n	8009490 <xTaskCheckForTimeOut+0x5c>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	429a      	cmp	r2, r3
 8009488:	d302      	bcc.n	8009490 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800948a:	2301      	movs	r3, #1
 800948c:	617b      	str	r3, [r7, #20]
 800948e:	e016      	b.n	80094be <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	429a      	cmp	r2, r3
 8009498:	d20c      	bcs.n	80094b4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	1ad2      	subs	r2, r2, r3
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	0018      	movs	r0, r3
 80094aa:	f7ff ffaf 	bl	800940c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094ae:	2300      	movs	r3, #0
 80094b0:	617b      	str	r3, [r7, #20]
 80094b2:	e004      	b.n	80094be <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094ba:	2301      	movs	r3, #1
 80094bc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80094be:	f000 fd29 	bl	8009f14 <vPortExitCritical>

	return xReturn;
 80094c2:	697b      	ldr	r3, [r7, #20]
}
 80094c4:	0018      	movs	r0, r3
 80094c6:	46bd      	mov	sp, r7
 80094c8:	b006      	add	sp, #24
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	2000168c 	.word	0x2000168c
 80094d0:	200016a0 	.word	0x200016a0

080094d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094d8:	4b02      	ldr	r3, [pc, #8]	; (80094e4 <vTaskMissedYield+0x10>)
 80094da:	2201      	movs	r2, #1
 80094dc:	601a      	str	r2, [r3, #0]
}
 80094de:	46c0      	nop			; (mov r8, r8)
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	2000169c 	.word	0x2000169c

080094e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094f0:	f000 f84e 	bl	8009590 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094f4:	4b03      	ldr	r3, [pc, #12]	; (8009504 <prvIdleTask+0x1c>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d9f9      	bls.n	80094f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80094fc:	f000 fce8 	bl	8009ed0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8009500:	e7f6      	b.n	80094f0 <prvIdleTask+0x8>
 8009502:	46c0      	nop			; (mov r8, r8)
 8009504:	200011b8 	.word	0x200011b8

08009508 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800950e:	2300      	movs	r3, #0
 8009510:	607b      	str	r3, [r7, #4]
 8009512:	e00c      	b.n	800952e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	0013      	movs	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	189b      	adds	r3, r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4a14      	ldr	r2, [pc, #80]	; (8009570 <prvInitialiseTaskLists+0x68>)
 8009520:	189b      	adds	r3, r3, r2
 8009522:	0018      	movs	r0, r3
 8009524:	f7fe fe62 	bl	80081ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3301      	adds	r3, #1
 800952c:	607b      	str	r3, [r7, #4]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b37      	cmp	r3, #55	; 0x37
 8009532:	d9ef      	bls.n	8009514 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009534:	4b0f      	ldr	r3, [pc, #60]	; (8009574 <prvInitialiseTaskLists+0x6c>)
 8009536:	0018      	movs	r0, r3
 8009538:	f7fe fe58 	bl	80081ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800953c:	4b0e      	ldr	r3, [pc, #56]	; (8009578 <prvInitialiseTaskLists+0x70>)
 800953e:	0018      	movs	r0, r3
 8009540:	f7fe fe54 	bl	80081ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009544:	4b0d      	ldr	r3, [pc, #52]	; (800957c <prvInitialiseTaskLists+0x74>)
 8009546:	0018      	movs	r0, r3
 8009548:	f7fe fe50 	bl	80081ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800954c:	4b0c      	ldr	r3, [pc, #48]	; (8009580 <prvInitialiseTaskLists+0x78>)
 800954e:	0018      	movs	r0, r3
 8009550:	f7fe fe4c 	bl	80081ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009554:	4b0b      	ldr	r3, [pc, #44]	; (8009584 <prvInitialiseTaskLists+0x7c>)
 8009556:	0018      	movs	r0, r3
 8009558:	f7fe fe48 	bl	80081ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800955c:	4b0a      	ldr	r3, [pc, #40]	; (8009588 <prvInitialiseTaskLists+0x80>)
 800955e:	4a05      	ldr	r2, [pc, #20]	; (8009574 <prvInitialiseTaskLists+0x6c>)
 8009560:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009562:	4b0a      	ldr	r3, [pc, #40]	; (800958c <prvInitialiseTaskLists+0x84>)
 8009564:	4a04      	ldr	r2, [pc, #16]	; (8009578 <prvInitialiseTaskLists+0x70>)
 8009566:	601a      	str	r2, [r3, #0]
}
 8009568:	46c0      	nop			; (mov r8, r8)
 800956a:	46bd      	mov	sp, r7
 800956c:	b002      	add	sp, #8
 800956e:	bd80      	pop	{r7, pc}
 8009570:	200011b8 	.word	0x200011b8
 8009574:	20001618 	.word	0x20001618
 8009578:	2000162c 	.word	0x2000162c
 800957c:	20001648 	.word	0x20001648
 8009580:	2000165c 	.word	0x2000165c
 8009584:	20001674 	.word	0x20001674
 8009588:	20001640 	.word	0x20001640
 800958c:	20001644 	.word	0x20001644

08009590 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009596:	e01a      	b.n	80095ce <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8009598:	f000 fcaa 	bl	8009ef0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800959c:	4b10      	ldr	r3, [pc, #64]	; (80095e0 <prvCheckTasksWaitingTermination+0x50>)
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3304      	adds	r3, #4
 80095a8:	0018      	movs	r0, r3
 80095aa:	f7fe fea0 	bl	80082ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095ae:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <prvCheckTasksWaitingTermination+0x54>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	1e5a      	subs	r2, r3, #1
 80095b4:	4b0b      	ldr	r3, [pc, #44]	; (80095e4 <prvCheckTasksWaitingTermination+0x54>)
 80095b6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095b8:	4b0b      	ldr	r3, [pc, #44]	; (80095e8 <prvCheckTasksWaitingTermination+0x58>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	1e5a      	subs	r2, r3, #1
 80095be:	4b0a      	ldr	r3, [pc, #40]	; (80095e8 <prvCheckTasksWaitingTermination+0x58>)
 80095c0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80095c2:	f000 fca7 	bl	8009f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	0018      	movs	r0, r3
 80095ca:	f000 f80f 	bl	80095ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095ce:	4b06      	ldr	r3, [pc, #24]	; (80095e8 <prvCheckTasksWaitingTermination+0x58>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1e0      	bne.n	8009598 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095d6:	46c0      	nop			; (mov r8, r8)
 80095d8:	46c0      	nop			; (mov r8, r8)
 80095da:	46bd      	mov	sp, r7
 80095dc:	b002      	add	sp, #8
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	2000165c 	.word	0x2000165c
 80095e4:	20001688 	.word	0x20001688
 80095e8:	20001670 	.word	0x20001670

080095ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2259      	movs	r2, #89	; 0x59
 80095f8:	5c9b      	ldrb	r3, [r3, r2]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d109      	bne.n	8009612 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009602:	0018      	movs	r0, r3
 8009604:	f000 fdb2 	bl	800a16c <vPortFree>
				vPortFree( pxTCB );
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	0018      	movs	r0, r3
 800960c:	f000 fdae 	bl	800a16c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009610:	e010      	b.n	8009634 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2259      	movs	r2, #89	; 0x59
 8009616:	5c9b      	ldrb	r3, [r3, r2]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d104      	bne.n	8009626 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	0018      	movs	r0, r3
 8009620:	f000 fda4 	bl	800a16c <vPortFree>
	}
 8009624:	e006      	b.n	8009634 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2259      	movs	r2, #89	; 0x59
 800962a:	5c9b      	ldrb	r3, [r3, r2]
 800962c:	2b02      	cmp	r3, #2
 800962e:	d001      	beq.n	8009634 <prvDeleteTCB+0x48>
 8009630:	b672      	cpsid	i
 8009632:	e7fe      	b.n	8009632 <prvDeleteTCB+0x46>
	}
 8009634:	46c0      	nop			; (mov r8, r8)
 8009636:	46bd      	mov	sp, r7
 8009638:	b002      	add	sp, #8
 800963a:	bd80      	pop	{r7, pc}

0800963c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009642:	4b0e      	ldr	r3, [pc, #56]	; (800967c <prvResetNextTaskUnblockTime+0x40>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <prvResetNextTaskUnblockTime+0x14>
 800964c:	2301      	movs	r3, #1
 800964e:	e000      	b.n	8009652 <prvResetNextTaskUnblockTime+0x16>
 8009650:	2300      	movs	r3, #0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d004      	beq.n	8009660 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009656:	4b0a      	ldr	r3, [pc, #40]	; (8009680 <prvResetNextTaskUnblockTime+0x44>)
 8009658:	2201      	movs	r2, #1
 800965a:	4252      	negs	r2, r2
 800965c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800965e:	e008      	b.n	8009672 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009660:	4b06      	ldr	r3, [pc, #24]	; (800967c <prvResetNextTaskUnblockTime+0x40>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	4b04      	ldr	r3, [pc, #16]	; (8009680 <prvResetNextTaskUnblockTime+0x44>)
 8009670:	601a      	str	r2, [r3, #0]
}
 8009672:	46c0      	nop			; (mov r8, r8)
 8009674:	46bd      	mov	sp, r7
 8009676:	b002      	add	sp, #8
 8009678:	bd80      	pop	{r7, pc}
 800967a:	46c0      	nop			; (mov r8, r8)
 800967c:	20001640 	.word	0x20001640
 8009680:	200016a8 	.word	0x200016a8

08009684 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800968a:	4b0a      	ldr	r3, [pc, #40]	; (80096b4 <xTaskGetSchedulerState+0x30>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d102      	bne.n	8009698 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009692:	2301      	movs	r3, #1
 8009694:	607b      	str	r3, [r7, #4]
 8009696:	e008      	b.n	80096aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009698:	4b07      	ldr	r3, [pc, #28]	; (80096b8 <xTaskGetSchedulerState+0x34>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d102      	bne.n	80096a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096a0:	2302      	movs	r3, #2
 80096a2:	607b      	str	r3, [r7, #4]
 80096a4:	e001      	b.n	80096aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096a6:	2300      	movs	r3, #0
 80096a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096aa:	687b      	ldr	r3, [r7, #4]
	}
 80096ac:	0018      	movs	r0, r3
 80096ae:	46bd      	mov	sp, r7
 80096b0:	b002      	add	sp, #8
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	20001694 	.word	0x20001694
 80096b8:	200016b0 	.word	0x200016b0

080096bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80096c8:	2300      	movs	r3, #0
 80096ca:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d044      	beq.n	800975c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096d2:	4b25      	ldr	r3, [pc, #148]	; (8009768 <xTaskPriorityDisinherit+0xac>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d001      	beq.n	80096e0 <xTaskPriorityDisinherit+0x24>
 80096dc:	b672      	cpsid	i
 80096de:	e7fe      	b.n	80096de <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <xTaskPriorityDisinherit+0x30>
 80096e8:	b672      	cpsid	i
 80096ea:	e7fe      	b.n	80096ea <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096f0:	1e5a      	subs	r2, r3, #1
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096fe:	429a      	cmp	r2, r3
 8009700:	d02c      	beq.n	800975c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009706:	2b00      	cmp	r3, #0
 8009708:	d128      	bne.n	800975c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	3304      	adds	r3, #4
 800970e:	0018      	movs	r0, r3
 8009710:	f7fe fded 	bl	80082ee <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009720:	2238      	movs	r2, #56	; 0x38
 8009722:	1ad2      	subs	r2, r2, r3
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972c:	4b0f      	ldr	r3, [pc, #60]	; (800976c <xTaskPriorityDisinherit+0xb0>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	429a      	cmp	r2, r3
 8009732:	d903      	bls.n	800973c <xTaskPriorityDisinherit+0x80>
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009738:	4b0c      	ldr	r3, [pc, #48]	; (800976c <xTaskPriorityDisinherit+0xb0>)
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009740:	0013      	movs	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	189b      	adds	r3, r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4a09      	ldr	r2, [pc, #36]	; (8009770 <xTaskPriorityDisinherit+0xb4>)
 800974a:	189a      	adds	r2, r3, r2
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	3304      	adds	r3, #4
 8009750:	0019      	movs	r1, r3
 8009752:	0010      	movs	r0, r2
 8009754:	f7fe fd73 	bl	800823e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009758:	2301      	movs	r3, #1
 800975a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800975c:	68fb      	ldr	r3, [r7, #12]
	}
 800975e:	0018      	movs	r0, r3
 8009760:	46bd      	mov	sp, r7
 8009762:	b004      	add	sp, #16
 8009764:	bd80      	pop	{r7, pc}
 8009766:	46c0      	nop			; (mov r8, r8)
 8009768:	200011b4 	.word	0x200011b4
 800976c:	20001690 	.word	0x20001690
 8009770:	200011b8 	.word	0x200011b8

08009774 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800977e:	4b21      	ldr	r3, [pc, #132]	; (8009804 <prvAddCurrentTaskToDelayedList+0x90>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009784:	4b20      	ldr	r3, [pc, #128]	; (8009808 <prvAddCurrentTaskToDelayedList+0x94>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3304      	adds	r3, #4
 800978a:	0018      	movs	r0, r3
 800978c:	f7fe fdaf 	bl	80082ee <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	3301      	adds	r3, #1
 8009794:	d10b      	bne.n	80097ae <prvAddCurrentTaskToDelayedList+0x3a>
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d008      	beq.n	80097ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800979c:	4b1a      	ldr	r3, [pc, #104]	; (8009808 <prvAddCurrentTaskToDelayedList+0x94>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	1d1a      	adds	r2, r3, #4
 80097a2:	4b1a      	ldr	r3, [pc, #104]	; (800980c <prvAddCurrentTaskToDelayedList+0x98>)
 80097a4:	0011      	movs	r1, r2
 80097a6:	0018      	movs	r0, r3
 80097a8:	f7fe fd49 	bl	800823e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097ac:	e026      	b.n	80097fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	18d3      	adds	r3, r2, r3
 80097b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097b6:	4b14      	ldr	r3, [pc, #80]	; (8009808 <prvAddCurrentTaskToDelayedList+0x94>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d209      	bcs.n	80097da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097c6:	4b12      	ldr	r3, [pc, #72]	; (8009810 <prvAddCurrentTaskToDelayedList+0x9c>)
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	4b0f      	ldr	r3, [pc, #60]	; (8009808 <prvAddCurrentTaskToDelayedList+0x94>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	3304      	adds	r3, #4
 80097d0:	0019      	movs	r1, r3
 80097d2:	0010      	movs	r0, r2
 80097d4:	f7fe fd55 	bl	8008282 <vListInsert>
}
 80097d8:	e010      	b.n	80097fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097da:	4b0e      	ldr	r3, [pc, #56]	; (8009814 <prvAddCurrentTaskToDelayedList+0xa0>)
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	4b0a      	ldr	r3, [pc, #40]	; (8009808 <prvAddCurrentTaskToDelayedList+0x94>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3304      	adds	r3, #4
 80097e4:	0019      	movs	r1, r3
 80097e6:	0010      	movs	r0, r2
 80097e8:	f7fe fd4b 	bl	8008282 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80097ec:	4b0a      	ldr	r3, [pc, #40]	; (8009818 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d202      	bcs.n	80097fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80097f6:	4b08      	ldr	r3, [pc, #32]	; (8009818 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	601a      	str	r2, [r3, #0]
}
 80097fc:	46c0      	nop			; (mov r8, r8)
 80097fe:	46bd      	mov	sp, r7
 8009800:	b004      	add	sp, #16
 8009802:	bd80      	pop	{r7, pc}
 8009804:	2000168c 	.word	0x2000168c
 8009808:	200011b4 	.word	0x200011b4
 800980c:	20001674 	.word	0x20001674
 8009810:	20001644 	.word	0x20001644
 8009814:	20001640 	.word	0x20001640
 8009818:	200016a8 	.word	0x200016a8

0800981c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800981c:	b590      	push	{r4, r7, lr}
 800981e:	b089      	sub	sp, #36	; 0x24
 8009820:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009822:	2300      	movs	r3, #0
 8009824:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009826:	f000 fa87 	bl	8009d38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800982a:	4b17      	ldr	r3, [pc, #92]	; (8009888 <xTimerCreateTimerTask+0x6c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d020      	beq.n	8009874 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009832:	2300      	movs	r3, #0
 8009834:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009836:	2300      	movs	r3, #0
 8009838:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800983a:	003a      	movs	r2, r7
 800983c:	1d39      	adds	r1, r7, #4
 800983e:	2308      	movs	r3, #8
 8009840:	18fb      	adds	r3, r7, r3
 8009842:	0018      	movs	r0, r3
 8009844:	f7fe fcba 	bl	80081bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009848:	683c      	ldr	r4, [r7, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	490f      	ldr	r1, [pc, #60]	; (800988c <xTimerCreateTimerTask+0x70>)
 8009850:	480f      	ldr	r0, [pc, #60]	; (8009890 <xTimerCreateTimerTask+0x74>)
 8009852:	9202      	str	r2, [sp, #8]
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	2302      	movs	r3, #2
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	2300      	movs	r3, #0
 800985c:	0022      	movs	r2, r4
 800985e:	f7ff f996 	bl	8008b8e <xTaskCreateStatic>
 8009862:	0002      	movs	r2, r0
 8009864:	4b0b      	ldr	r3, [pc, #44]	; (8009894 <xTimerCreateTimerTask+0x78>)
 8009866:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009868:	4b0a      	ldr	r3, [pc, #40]	; (8009894 <xTimerCreateTimerTask+0x78>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8009870:	2301      	movs	r3, #1
 8009872:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <xTimerCreateTimerTask+0x62>
 800987a:	b672      	cpsid	i
 800987c:	e7fe      	b.n	800987c <xTimerCreateTimerTask+0x60>
	return xReturn;
 800987e:	68fb      	ldr	r3, [r7, #12]
}
 8009880:	0018      	movs	r0, r3
 8009882:	46bd      	mov	sp, r7
 8009884:	b005      	add	sp, #20
 8009886:	bd90      	pop	{r4, r7, pc}
 8009888:	200016e4 	.word	0x200016e4
 800988c:	0800b6a8 	.word	0x0800b6a8
 8009890:	0800999d 	.word	0x0800999d
 8009894:	200016e8 	.word	0x200016e8

08009898 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009898:	b590      	push	{r4, r7, lr}
 800989a:	b08b      	sub	sp, #44	; 0x2c
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
 80098a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80098a6:	2300      	movs	r3, #0
 80098a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <xTimerGenericCommand+0x1c>
 80098b0:	b672      	cpsid	i
 80098b2:	e7fe      	b.n	80098b2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80098b4:	4b1c      	ldr	r3, [pc, #112]	; (8009928 <xTimerGenericCommand+0x90>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d030      	beq.n	800991e <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80098bc:	2414      	movs	r4, #20
 80098be:	193b      	adds	r3, r7, r4
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80098c4:	193b      	adds	r3, r7, r4
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80098ca:	193b      	adds	r3, r7, r4
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2b05      	cmp	r3, #5
 80098d4:	dc19      	bgt.n	800990a <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80098d6:	f7ff fed5 	bl	8009684 <xTaskGetSchedulerState>
 80098da:	0003      	movs	r3, r0
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d109      	bne.n	80098f4 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80098e0:	4b11      	ldr	r3, [pc, #68]	; (8009928 <xTimerGenericCommand+0x90>)
 80098e2:	6818      	ldr	r0, [r3, #0]
 80098e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098e6:	1939      	adds	r1, r7, r4
 80098e8:	2300      	movs	r3, #0
 80098ea:	f7fe fdee 	bl	80084ca <xQueueGenericSend>
 80098ee:	0003      	movs	r3, r0
 80098f0:	627b      	str	r3, [r7, #36]	; 0x24
 80098f2:	e014      	b.n	800991e <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80098f4:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <xTimerGenericCommand+0x90>)
 80098f6:	6818      	ldr	r0, [r3, #0]
 80098f8:	2314      	movs	r3, #20
 80098fa:	18f9      	adds	r1, r7, r3
 80098fc:	2300      	movs	r3, #0
 80098fe:	2200      	movs	r2, #0
 8009900:	f7fe fde3 	bl	80084ca <xQueueGenericSend>
 8009904:	0003      	movs	r3, r0
 8009906:	627b      	str	r3, [r7, #36]	; 0x24
 8009908:	e009      	b.n	800991e <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800990a:	4b07      	ldr	r3, [pc, #28]	; (8009928 <xTimerGenericCommand+0x90>)
 800990c:	6818      	ldr	r0, [r3, #0]
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	2314      	movs	r3, #20
 8009912:	18f9      	adds	r1, r7, r3
 8009914:	2300      	movs	r3, #0
 8009916:	f7fe fe9c 	bl	8008652 <xQueueGenericSendFromISR>
 800991a:	0003      	movs	r3, r0
 800991c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800991e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009920:	0018      	movs	r0, r3
 8009922:	46bd      	mov	sp, r7
 8009924:	b00b      	add	sp, #44	; 0x2c
 8009926:	bd90      	pop	{r4, r7, pc}
 8009928:	200016e4 	.word	0x200016e4

0800992c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af02      	add	r7, sp, #8
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009936:	4b18      	ldr	r3, [pc, #96]	; (8009998 <prvProcessExpiredTimer+0x6c>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	3304      	adds	r3, #4
 8009944:	0018      	movs	r0, r3
 8009946:	f7fe fcd2 	bl	80082ee <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	69db      	ldr	r3, [r3, #28]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d119      	bne.n	8009986 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	699a      	ldr	r2, [r3, #24]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	18d1      	adds	r1, r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	683a      	ldr	r2, [r7, #0]
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f000 f8b6 	bl	8009ad0 <prvInsertTimerInActiveList>
 8009964:	1e03      	subs	r3, r0, #0
 8009966:	d00e      	beq.n	8009986 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	2300      	movs	r3, #0
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	2300      	movs	r3, #0
 8009972:	2100      	movs	r1, #0
 8009974:	f7ff ff90 	bl	8009898 <xTimerGenericCommand>
 8009978:	0003      	movs	r3, r0
 800997a:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <prvProcessExpiredTimer+0x5a>
 8009982:	b672      	cpsid	i
 8009984:	e7fe      	b.n	8009984 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	0010      	movs	r0, r2
 800998e:	4798      	blx	r3
}
 8009990:	46c0      	nop			; (mov r8, r8)
 8009992:	46bd      	mov	sp, r7
 8009994:	b004      	add	sp, #16
 8009996:	bd80      	pop	{r7, pc}
 8009998:	200016dc 	.word	0x200016dc

0800999c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099a4:	2308      	movs	r3, #8
 80099a6:	18fb      	adds	r3, r7, r3
 80099a8:	0018      	movs	r0, r3
 80099aa:	f000 f851 	bl	8009a50 <prvGetNextExpireTime>
 80099ae:	0003      	movs	r3, r0
 80099b0:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	0011      	movs	r1, r2
 80099b8:	0018      	movs	r0, r3
 80099ba:	f000 f803 	bl	80099c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80099be:	f000 f8c9 	bl	8009b54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099c2:	e7ef      	b.n	80099a4 <prvTimerTask+0x8>

080099c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80099ce:	f7ff fad1 	bl	8008f74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099d2:	2308      	movs	r3, #8
 80099d4:	18fb      	adds	r3, r7, r3
 80099d6:	0018      	movs	r0, r3
 80099d8:	f000 f85a 	bl	8009a90 <prvSampleTimeNow>
 80099dc:	0003      	movs	r3, r0
 80099de:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d129      	bne.n	8009a3a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10c      	bne.n	8009a06 <prvProcessTimerOrBlockTask+0x42>
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d808      	bhi.n	8009a06 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80099f4:	f7ff faca 	bl	8008f8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	0011      	movs	r1, r2
 80099fe:	0018      	movs	r0, r3
 8009a00:	f7ff ff94 	bl	800992c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a04:	e01b      	b.n	8009a3e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d006      	beq.n	8009a1a <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a0c:	4b0e      	ldr	r3, [pc, #56]	; (8009a48 <prvProcessTimerOrBlockTask+0x84>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	425a      	negs	r2, r3
 8009a14:	4153      	adcs	r3, r2
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a1a:	4b0c      	ldr	r3, [pc, #48]	; (8009a4c <prvProcessTimerOrBlockTask+0x88>)
 8009a1c:	6818      	ldr	r0, [r3, #0]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	0019      	movs	r1, r3
 8009a28:	f7ff f87e 	bl	8008b28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a2c:	f7ff faae 	bl	8008f8c <xTaskResumeAll>
 8009a30:	1e03      	subs	r3, r0, #0
 8009a32:	d104      	bne.n	8009a3e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8009a34:	f000 fa4c 	bl	8009ed0 <vPortYield>
}
 8009a38:	e001      	b.n	8009a3e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8009a3a:	f7ff faa7 	bl	8008f8c <xTaskResumeAll>
}
 8009a3e:	46c0      	nop			; (mov r8, r8)
 8009a40:	46bd      	mov	sp, r7
 8009a42:	b004      	add	sp, #16
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	46c0      	nop			; (mov r8, r8)
 8009a48:	200016e0 	.word	0x200016e0
 8009a4c:	200016e4 	.word	0x200016e4

08009a50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a58:	4b0c      	ldr	r3, [pc, #48]	; (8009a8c <prvGetNextExpireTime+0x3c>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	425a      	negs	r2, r3
 8009a60:	4153      	adcs	r3, r2
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	001a      	movs	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d105      	bne.n	8009a7e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a72:	4b06      	ldr	r3, [pc, #24]	; (8009a8c <prvGetNextExpireTime+0x3c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	60fb      	str	r3, [r7, #12]
 8009a7c:	e001      	b.n	8009a82 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a82:	68fb      	ldr	r3, [r7, #12]
}
 8009a84:	0018      	movs	r0, r3
 8009a86:	46bd      	mov	sp, r7
 8009a88:	b004      	add	sp, #16
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	200016dc 	.word	0x200016dc

08009a90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a98:	f7ff fb04 	bl	80090a4 <xTaskGetTickCount>
 8009a9c:	0003      	movs	r3, r0
 8009a9e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8009aa0:	4b0a      	ldr	r3, [pc, #40]	; (8009acc <prvSampleTimeNow+0x3c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d205      	bcs.n	8009ab6 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8009aaa:	f000 f8eb 	bl	8009c84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	e002      	b.n	8009abc <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009abc:	4b03      	ldr	r3, [pc, #12]	; (8009acc <prvSampleTimeNow+0x3c>)
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
}
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	b004      	add	sp, #16
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	200016ec 	.word	0x200016ec

08009ad0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d812      	bhi.n	8009b1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	1ad2      	subs	r2, r2, r3
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d302      	bcc.n	8009b0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b04:	2301      	movs	r3, #1
 8009b06:	617b      	str	r3, [r7, #20]
 8009b08:	e01b      	b.n	8009b42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b0a:	4b10      	ldr	r3, [pc, #64]	; (8009b4c <prvInsertTimerInActiveList+0x7c>)
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3304      	adds	r3, #4
 8009b12:	0019      	movs	r1, r3
 8009b14:	0010      	movs	r0, r2
 8009b16:	f7fe fbb4 	bl	8008282 <vListInsert>
 8009b1a:	e012      	b.n	8009b42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d206      	bcs.n	8009b32 <prvInsertTimerInActiveList+0x62>
 8009b24:	68ba      	ldr	r2, [r7, #8]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d302      	bcc.n	8009b32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	617b      	str	r3, [r7, #20]
 8009b30:	e007      	b.n	8009b42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b32:	4b07      	ldr	r3, [pc, #28]	; (8009b50 <prvInsertTimerInActiveList+0x80>)
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	3304      	adds	r3, #4
 8009b3a:	0019      	movs	r1, r3
 8009b3c:	0010      	movs	r0, r2
 8009b3e:	f7fe fba0 	bl	8008282 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009b42:	697b      	ldr	r3, [r7, #20]
}
 8009b44:	0018      	movs	r0, r3
 8009b46:	46bd      	mov	sp, r7
 8009b48:	b006      	add	sp, #24
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	200016e0 	.word	0x200016e0
 8009b50:	200016dc 	.word	0x200016dc

08009b54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b54:	b590      	push	{r4, r7, lr}
 8009b56:	b08d      	sub	sp, #52	; 0x34
 8009b58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b5a:	e07f      	b.n	8009c5c <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b5c:	2208      	movs	r2, #8
 8009b5e:	18bb      	adds	r3, r7, r2
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	da0f      	bge.n	8009b86 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b66:	18bb      	adds	r3, r7, r2
 8009b68:	3304      	adds	r3, #4
 8009b6a:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <prvProcessReceivedCommands+0x22>
 8009b72:	b672      	cpsid	i
 8009b74:	e7fe      	b.n	8009b74 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7c:	6858      	ldr	r0, [r3, #4]
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	0019      	movs	r1, r3
 8009b84:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b86:	2208      	movs	r2, #8
 8009b88:	18bb      	adds	r3, r7, r2
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	db65      	blt.n	8009c5c <prvProcessReceivedCommands+0x108>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b90:	18bb      	adds	r3, r7, r2
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	695b      	ldr	r3, [r3, #20]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d004      	beq.n	8009ba8 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	3304      	adds	r3, #4
 8009ba2:	0018      	movs	r0, r3
 8009ba4:	f7fe fba3 	bl	80082ee <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ba8:	1d3b      	adds	r3, r7, #4
 8009baa:	0018      	movs	r0, r3
 8009bac:	f7ff ff70 	bl	8009a90 <prvSampleTimeNow>
 8009bb0:	0003      	movs	r3, r0
 8009bb2:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8009bb4:	2308      	movs	r3, #8
 8009bb6:	18fb      	adds	r3, r7, r3
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b09      	cmp	r3, #9
 8009bbc:	d84d      	bhi.n	8009c5a <prvProcessReceivedCommands+0x106>
 8009bbe:	009a      	lsls	r2, r3, #2
 8009bc0:	4b2e      	ldr	r3, [pc, #184]	; (8009c7c <prvProcessReceivedCommands+0x128>)
 8009bc2:	18d3      	adds	r3, r2, r3
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009bc8:	2408      	movs	r4, #8
 8009bca:	193b      	adds	r3, r7, r4
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	6a3b      	ldr	r3, [r7, #32]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	18d1      	adds	r1, r2, r3
 8009bd4:	193b      	adds	r3, r7, r4
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	69fa      	ldr	r2, [r7, #28]
 8009bda:	6a38      	ldr	r0, [r7, #32]
 8009bdc:	f7ff ff78 	bl	8009ad0 <prvInsertTimerInActiveList>
 8009be0:	1e03      	subs	r3, r0, #0
 8009be2:	d03b      	beq.n	8009c5c <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009be4:	6a3b      	ldr	r3, [r7, #32]
 8009be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be8:	6a3a      	ldr	r2, [r7, #32]
 8009bea:	0010      	movs	r0, r2
 8009bec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009bee:	6a3b      	ldr	r3, [r7, #32]
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d132      	bne.n	8009c5c <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009bf6:	193b      	adds	r3, r7, r4
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	6a3b      	ldr	r3, [r7, #32]
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	18d2      	adds	r2, r2, r3
 8009c00:	6a38      	ldr	r0, [r7, #32]
 8009c02:	2300      	movs	r3, #0
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	2300      	movs	r3, #0
 8009c08:	2100      	movs	r1, #0
 8009c0a:	f7ff fe45 	bl	8009898 <xTimerGenericCommand>
 8009c0e:	0003      	movs	r3, r0
 8009c10:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d121      	bne.n	8009c5c <prvProcessReceivedCommands+0x108>
 8009c18:	b672      	cpsid	i
 8009c1a:	e7fe      	b.n	8009c1a <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c1c:	2308      	movs	r3, #8
 8009c1e:	18fb      	adds	r3, r7, r3
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	6a3b      	ldr	r3, [r7, #32]
 8009c24:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d101      	bne.n	8009c32 <prvProcessReceivedCommands+0xde>
 8009c2e:	b672      	cpsid	i
 8009c30:	e7fe      	b.n	8009c30 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	699a      	ldr	r2, [r3, #24]
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	18d1      	adds	r1, r2, r3
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	69fa      	ldr	r2, [r7, #28]
 8009c3e:	6a38      	ldr	r0, [r7, #32]
 8009c40:	f7ff ff46 	bl	8009ad0 <prvInsertTimerInActiveList>
					break;
 8009c44:	e00a      	b.n	8009c5c <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009c46:	6a3b      	ldr	r3, [r7, #32]
 8009c48:	222c      	movs	r2, #44	; 0x2c
 8009c4a:	5c9b      	ldrb	r3, [r3, r2]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d105      	bne.n	8009c5c <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8009c50:	6a3b      	ldr	r3, [r7, #32]
 8009c52:	0018      	movs	r0, r3
 8009c54:	f000 fa8a 	bl	800a16c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c58:	e000      	b.n	8009c5c <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
 8009c5a:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c5c:	4b08      	ldr	r3, [pc, #32]	; (8009c80 <prvProcessReceivedCommands+0x12c>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2208      	movs	r2, #8
 8009c62:	18b9      	adds	r1, r7, r2
 8009c64:	2200      	movs	r2, #0
 8009c66:	0018      	movs	r0, r3
 8009c68:	f7fe fd64 	bl	8008734 <xQueueReceive>
 8009c6c:	1e03      	subs	r3, r0, #0
 8009c6e:	d000      	beq.n	8009c72 <prvProcessReceivedCommands+0x11e>
 8009c70:	e774      	b.n	8009b5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c72:	46c0      	nop			; (mov r8, r8)
 8009c74:	46c0      	nop			; (mov r8, r8)
 8009c76:	46bd      	mov	sp, r7
 8009c78:	b00b      	add	sp, #44	; 0x2c
 8009c7a:	bd90      	pop	{r4, r7, pc}
 8009c7c:	0800e784 	.word	0x0800e784
 8009c80:	200016e4 	.word	0x200016e4

08009c84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b088      	sub	sp, #32
 8009c88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c8a:	e03e      	b.n	8009d0a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c8c:	4b28      	ldr	r3, [pc, #160]	; (8009d30 <prvSwitchTimerLists+0xac>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c96:	4b26      	ldr	r3, [pc, #152]	; (8009d30 <prvSwitchTimerLists+0xac>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	0018      	movs	r0, r3
 8009ca6:	f7fe fb22 	bl	80082ee <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	0010      	movs	r0, r2
 8009cb2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d126      	bne.n	8009d0a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	18d3      	adds	r3, r2, r3
 8009cc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d90e      	bls.n	8009cec <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cda:	4b15      	ldr	r3, [pc, #84]	; (8009d30 <prvSwitchTimerLists+0xac>)
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	3304      	adds	r3, #4
 8009ce2:	0019      	movs	r1, r3
 8009ce4:	0010      	movs	r0, r2
 8009ce6:	f7fe facc 	bl	8008282 <vListInsert>
 8009cea:	e00e      	b.n	8009d0a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	f7ff fdce 	bl	8009898 <xTimerGenericCommand>
 8009cfc:	0003      	movs	r3, r0
 8009cfe:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <prvSwitchTimerLists+0x86>
 8009d06:	b672      	cpsid	i
 8009d08:	e7fe      	b.n	8009d08 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d0a:	4b09      	ldr	r3, [pc, #36]	; (8009d30 <prvSwitchTimerLists+0xac>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1bb      	bne.n	8009c8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d14:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <prvSwitchTimerLists+0xac>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d1a:	4b06      	ldr	r3, [pc, #24]	; (8009d34 <prvSwitchTimerLists+0xb0>)
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	4b04      	ldr	r3, [pc, #16]	; (8009d30 <prvSwitchTimerLists+0xac>)
 8009d20:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8009d22:	4b04      	ldr	r3, [pc, #16]	; (8009d34 <prvSwitchTimerLists+0xb0>)
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	601a      	str	r2, [r3, #0]
}
 8009d28:	46c0      	nop			; (mov r8, r8)
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	b006      	add	sp, #24
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	200016dc 	.word	0x200016dc
 8009d34:	200016e0 	.word	0x200016e0

08009d38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d3e:	f000 f8d7 	bl	8009ef0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d42:	4b16      	ldr	r3, [pc, #88]	; (8009d9c <prvCheckForValidListAndQueue+0x64>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d123      	bne.n	8009d92 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d4a:	4b15      	ldr	r3, [pc, #84]	; (8009da0 <prvCheckForValidListAndQueue+0x68>)
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	f7fe fa4d 	bl	80081ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d52:	4b14      	ldr	r3, [pc, #80]	; (8009da4 <prvCheckForValidListAndQueue+0x6c>)
 8009d54:	0018      	movs	r0, r3
 8009d56:	f7fe fa49 	bl	80081ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d5a:	4b13      	ldr	r3, [pc, #76]	; (8009da8 <prvCheckForValidListAndQueue+0x70>)
 8009d5c:	4a10      	ldr	r2, [pc, #64]	; (8009da0 <prvCheckForValidListAndQueue+0x68>)
 8009d5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d60:	4b12      	ldr	r3, [pc, #72]	; (8009dac <prvCheckForValidListAndQueue+0x74>)
 8009d62:	4a10      	ldr	r2, [pc, #64]	; (8009da4 <prvCheckForValidListAndQueue+0x6c>)
 8009d64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d66:	4b12      	ldr	r3, [pc, #72]	; (8009db0 <prvCheckForValidListAndQueue+0x78>)
 8009d68:	4a12      	ldr	r2, [pc, #72]	; (8009db4 <prvCheckForValidListAndQueue+0x7c>)
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	9100      	str	r1, [sp, #0]
 8009d6e:	2110      	movs	r1, #16
 8009d70:	200a      	movs	r0, #10
 8009d72:	f7fe fb38 	bl	80083e6 <xQueueGenericCreateStatic>
 8009d76:	0002      	movs	r2, r0
 8009d78:	4b08      	ldr	r3, [pc, #32]	; (8009d9c <prvCheckForValidListAndQueue+0x64>)
 8009d7a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d7c:	4b07      	ldr	r3, [pc, #28]	; (8009d9c <prvCheckForValidListAndQueue+0x64>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d006      	beq.n	8009d92 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d84:	4b05      	ldr	r3, [pc, #20]	; (8009d9c <prvCheckForValidListAndQueue+0x64>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a0b      	ldr	r2, [pc, #44]	; (8009db8 <prvCheckForValidListAndQueue+0x80>)
 8009d8a:	0011      	movs	r1, r2
 8009d8c:	0018      	movs	r0, r3
 8009d8e:	f7fe fea3 	bl	8008ad8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d92:	f000 f8bf 	bl	8009f14 <vPortExitCritical>
}
 8009d96:	46c0      	nop			; (mov r8, r8)
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	200016e4 	.word	0x200016e4
 8009da0:	200016b4 	.word	0x200016b4
 8009da4:	200016c8 	.word	0x200016c8
 8009da8:	200016dc 	.word	0x200016dc
 8009dac:	200016e0 	.word	0x200016e0
 8009db0:	20001790 	.word	0x20001790
 8009db4:	200016f0 	.word	0x200016f0
 8009db8:	0800b6b0 	.word	0x0800b6b0

08009dbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	3b04      	subs	r3, #4
 8009dcc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2280      	movs	r2, #128	; 0x80
 8009dd2:	0452      	lsls	r2, r2, #17
 8009dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	3b04      	subs	r3, #4
 8009dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3b04      	subs	r3, #4
 8009de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009de8:	4a08      	ldr	r2, [pc, #32]	; (8009e0c <pxPortInitialiseStack+0x50>)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3b14      	subs	r3, #20
 8009df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	3b20      	subs	r3, #32
 8009dfe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e00:	68fb      	ldr	r3, [r7, #12]
}
 8009e02:	0018      	movs	r0, r3
 8009e04:	46bd      	mov	sp, r7
 8009e06:	b004      	add	sp, #16
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	46c0      	nop			; (mov r8, r8)
 8009e0c:	08009e11 	.word	0x08009e11

08009e10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009e16:	2300      	movs	r3, #0
 8009e18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e1a:	4b08      	ldr	r3, [pc, #32]	; (8009e3c <prvTaskExitError+0x2c>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	d001      	beq.n	8009e26 <prvTaskExitError+0x16>
 8009e22:	b672      	cpsid	i
 8009e24:	e7fe      	b.n	8009e24 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8009e26:	b672      	cpsid	i
	while( ulDummy == 0 )
 8009e28:	46c0      	nop			; (mov r8, r8)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d0fc      	beq.n	8009e2a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e30:	46c0      	nop			; (mov r8, r8)
 8009e32:	46c0      	nop			; (mov r8, r8)
 8009e34:	46bd      	mov	sp, r7
 8009e36:	b002      	add	sp, #8
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	46c0      	nop			; (mov r8, r8)
 8009e3c:	20000020 	.word	0x20000020

08009e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8009e44:	46c0      	nop			; (mov r8, r8)
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	0000      	movs	r0, r0
 8009e4c:	0000      	movs	r0, r0
	...

08009e50 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8009e50:	4a0b      	ldr	r2, [pc, #44]	; (8009e80 <pxCurrentTCBConst2>)
 8009e52:	6813      	ldr	r3, [r2, #0]
 8009e54:	6818      	ldr	r0, [r3, #0]
 8009e56:	3020      	adds	r0, #32
 8009e58:	f380 8809 	msr	PSP, r0
 8009e5c:	2002      	movs	r0, #2
 8009e5e:	f380 8814 	msr	CONTROL, r0
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8009e68:	46ae      	mov	lr, r5
 8009e6a:	bc08      	pop	{r3}
 8009e6c:	bc04      	pop	{r2}
 8009e6e:	b662      	cpsie	i
 8009e70:	4718      	bx	r3
 8009e72:	46c0      	nop			; (mov r8, r8)
 8009e74:	46c0      	nop			; (mov r8, r8)
 8009e76:	46c0      	nop			; (mov r8, r8)
 8009e78:	46c0      	nop			; (mov r8, r8)
 8009e7a:	46c0      	nop			; (mov r8, r8)
 8009e7c:	46c0      	nop			; (mov r8, r8)
 8009e7e:	46c0      	nop			; (mov r8, r8)

08009e80 <pxCurrentTCBConst2>:
 8009e80:	200011b4 	.word	0x200011b4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8009e84:	46c0      	nop			; (mov r8, r8)
 8009e86:	46c0      	nop			; (mov r8, r8)

08009e88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8009e8c:	4b0e      	ldr	r3, [pc, #56]	; (8009ec8 <xPortStartScheduler+0x40>)
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	4b0d      	ldr	r3, [pc, #52]	; (8009ec8 <xPortStartScheduler+0x40>)
 8009e92:	21ff      	movs	r1, #255	; 0xff
 8009e94:	0409      	lsls	r1, r1, #16
 8009e96:	430a      	orrs	r2, r1
 8009e98:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8009e9a:	4b0b      	ldr	r3, [pc, #44]	; (8009ec8 <xPortStartScheduler+0x40>)
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	4b0a      	ldr	r3, [pc, #40]	; (8009ec8 <xPortStartScheduler+0x40>)
 8009ea0:	21ff      	movs	r1, #255	; 0xff
 8009ea2:	0609      	lsls	r1, r1, #24
 8009ea4:	430a      	orrs	r2, r1
 8009ea6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8009ea8:	f000 f898 	bl	8009fdc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009eac:	4b07      	ldr	r3, [pc, #28]	; (8009ecc <xPortStartScheduler+0x44>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8009eb2:	f7ff ffcd 	bl	8009e50 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009eb6:	f7ff f9b7 	bl	8009228 <vTaskSwitchContext>
	prvTaskExitError();
 8009eba:	f7ff ffa9 	bl	8009e10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	0018      	movs	r0, r3
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	46c0      	nop			; (mov r8, r8)
 8009ec8:	e000ed20 	.word	0xe000ed20
 8009ecc:	20000020 	.word	0x20000020

08009ed0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8009ed4:	4b05      	ldr	r3, [pc, #20]	; (8009eec <vPortYield+0x1c>)
 8009ed6:	2280      	movs	r2, #128	; 0x80
 8009ed8:	0552      	lsls	r2, r2, #21
 8009eda:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8009edc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009ee0:	f3bf 8f6f 	isb	sy
}
 8009ee4:	46c0      	nop			; (mov r8, r8)
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	46c0      	nop			; (mov r8, r8)
 8009eec:	e000ed04 	.word	0xe000ed04

08009ef0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8009ef4:	b672      	cpsid	i
    uxCriticalNesting++;
 8009ef6:	4b06      	ldr	r3, [pc, #24]	; (8009f10 <vPortEnterCritical+0x20>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	1c5a      	adds	r2, r3, #1
 8009efc:	4b04      	ldr	r3, [pc, #16]	; (8009f10 <vPortEnterCritical+0x20>)
 8009efe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8009f00:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009f04:	f3bf 8f6f 	isb	sy
}
 8009f08:	46c0      	nop			; (mov r8, r8)
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	46c0      	nop			; (mov r8, r8)
 8009f10:	20000020 	.word	0x20000020

08009f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f18:	4b09      	ldr	r3, [pc, #36]	; (8009f40 <vPortExitCritical+0x2c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d101      	bne.n	8009f24 <vPortExitCritical+0x10>
 8009f20:	b672      	cpsid	i
 8009f22:	e7fe      	b.n	8009f22 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8009f24:	4b06      	ldr	r3, [pc, #24]	; (8009f40 <vPortExitCritical+0x2c>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	1e5a      	subs	r2, r3, #1
 8009f2a:	4b05      	ldr	r3, [pc, #20]	; (8009f40 <vPortExitCritical+0x2c>)
 8009f2c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8009f2e:	4b04      	ldr	r3, [pc, #16]	; (8009f40 <vPortExitCritical+0x2c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d100      	bne.n	8009f38 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8009f36:	b662      	cpsie	i
    }
}
 8009f38:	46c0      	nop			; (mov r8, r8)
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	46c0      	nop			; (mov r8, r8)
 8009f40:	20000020 	.word	0x20000020

08009f44 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8009f44:	f3ef 8010 	mrs	r0, PRIMASK
 8009f48:	b672      	cpsid	i
 8009f4a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8009f4c:	46c0      	nop			; (mov r8, r8)
 8009f4e:	0018      	movs	r0, r3

08009f50 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8009f50:	f380 8810 	msr	PRIMASK, r0
 8009f54:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8009f56:	46c0      	nop			; (mov r8, r8)
	...

08009f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f60:	f3ef 8009 	mrs	r0, PSP
 8009f64:	4b0e      	ldr	r3, [pc, #56]	; (8009fa0 <pxCurrentTCBConst>)
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	3820      	subs	r0, #32
 8009f6a:	6010      	str	r0, [r2, #0]
 8009f6c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8009f6e:	4644      	mov	r4, r8
 8009f70:	464d      	mov	r5, r9
 8009f72:	4656      	mov	r6, sl
 8009f74:	465f      	mov	r7, fp
 8009f76:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8009f78:	b508      	push	{r3, lr}
 8009f7a:	b672      	cpsid	i
 8009f7c:	f7ff f954 	bl	8009228 <vTaskSwitchContext>
 8009f80:	b662      	cpsie	i
 8009f82:	bc0c      	pop	{r2, r3}
 8009f84:	6811      	ldr	r1, [r2, #0]
 8009f86:	6808      	ldr	r0, [r1, #0]
 8009f88:	3010      	adds	r0, #16
 8009f8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8009f8c:	46a0      	mov	r8, r4
 8009f8e:	46a9      	mov	r9, r5
 8009f90:	46b2      	mov	sl, r6
 8009f92:	46bb      	mov	fp, r7
 8009f94:	f380 8809 	msr	PSP, r0
 8009f98:	3820      	subs	r0, #32
 8009f9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8009f9c:	4718      	bx	r3
 8009f9e:	46c0      	nop			; (mov r8, r8)

08009fa0 <pxCurrentTCBConst>:
 8009fa0:	200011b4 	.word	0x200011b4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8009fa4:	46c0      	nop			; (mov r8, r8)
 8009fa6:	46c0      	nop			; (mov r8, r8)

08009fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fae:	f7ff ffc9 	bl	8009f44 <ulSetInterruptMaskFromISR>
 8009fb2:	0003      	movs	r3, r0
 8009fb4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009fb6:	f7ff f883 	bl	80090c0 <xTaskIncrementTick>
 8009fba:	1e03      	subs	r3, r0, #0
 8009fbc:	d003      	beq.n	8009fc6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8009fbe:	4b06      	ldr	r3, [pc, #24]	; (8009fd8 <SysTick_Handler+0x30>)
 8009fc0:	2280      	movs	r2, #128	; 0x80
 8009fc2:	0552      	lsls	r2, r2, #21
 8009fc4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f7ff ffc1 	bl	8009f50 <vClearInterruptMaskFromISR>
}
 8009fce:	46c0      	nop			; (mov r8, r8)
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	b002      	add	sp, #8
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	46c0      	nop			; (mov r8, r8)
 8009fd8:	e000ed04 	.word	0xe000ed04

08009fdc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8009fe0:	4b0b      	ldr	r3, [pc, #44]	; (800a010 <prvSetupTimerInterrupt+0x34>)
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8009fe6:	4b0b      	ldr	r3, [pc, #44]	; (800a014 <prvSetupTimerInterrupt+0x38>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009fec:	4b0a      	ldr	r3, [pc, #40]	; (800a018 <prvSetupTimerInterrupt+0x3c>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	22fa      	movs	r2, #250	; 0xfa
 8009ff2:	0091      	lsls	r1, r2, #2
 8009ff4:	0018      	movs	r0, r3
 8009ff6:	f7f6 f891 	bl	800011c <__udivsi3>
 8009ffa:	0003      	movs	r3, r0
 8009ffc:	001a      	movs	r2, r3
 8009ffe:	4b07      	ldr	r3, [pc, #28]	; (800a01c <prvSetupTimerInterrupt+0x40>)
 800a000:	3a01      	subs	r2, #1
 800a002:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800a004:	4b02      	ldr	r3, [pc, #8]	; (800a010 <prvSetupTimerInterrupt+0x34>)
 800a006:	2207      	movs	r2, #7
 800a008:	601a      	str	r2, [r3, #0]
}
 800a00a:	46c0      	nop			; (mov r8, r8)
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	e000e010 	.word	0xe000e010
 800a014:	e000e018 	.word	0xe000e018
 800a018:	20000018 	.word	0x20000018
 800a01c:	e000e014 	.word	0xe000e014

0800a020 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a028:	2300      	movs	r3, #0
 800a02a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800a02c:	f7fe ffa2 	bl	8008f74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a030:	4b49      	ldr	r3, [pc, #292]	; (800a158 <pvPortMalloc+0x138>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d101      	bne.n	800a03c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a038:	f000 f8e0 	bl	800a1fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a03c:	4b47      	ldr	r3, [pc, #284]	; (800a15c <pvPortMalloc+0x13c>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	4013      	ands	r3, r2
 800a044:	d000      	beq.n	800a048 <pvPortMalloc+0x28>
 800a046:	e079      	b.n	800a13c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d012      	beq.n	800a074 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800a04e:	2208      	movs	r2, #8
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	189b      	adds	r3, r3, r2
 800a054:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2207      	movs	r2, #7
 800a05a:	4013      	ands	r3, r2
 800a05c:	d00a      	beq.n	800a074 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2207      	movs	r2, #7
 800a062:	4393      	bics	r3, r2
 800a064:	3308      	adds	r3, #8
 800a066:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2207      	movs	r2, #7
 800a06c:	4013      	ands	r3, r2
 800a06e:	d001      	beq.n	800a074 <pvPortMalloc+0x54>
 800a070:	b672      	cpsid	i
 800a072:	e7fe      	b.n	800a072 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d060      	beq.n	800a13c <pvPortMalloc+0x11c>
 800a07a:	4b39      	ldr	r3, [pc, #228]	; (800a160 <pvPortMalloc+0x140>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	429a      	cmp	r2, r3
 800a082:	d85b      	bhi.n	800a13c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a084:	4b37      	ldr	r3, [pc, #220]	; (800a164 <pvPortMalloc+0x144>)
 800a086:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800a088:	4b36      	ldr	r3, [pc, #216]	; (800a164 <pvPortMalloc+0x144>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a08e:	e004      	b.n	800a09a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d903      	bls.n	800a0ac <pvPortMalloc+0x8c>
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1f1      	bne.n	800a090 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a0ac:	4b2a      	ldr	r3, [pc, #168]	; (800a158 <pvPortMalloc+0x138>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d042      	beq.n	800a13c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2208      	movs	r2, #8
 800a0bc:	189b      	adds	r3, r3, r2
 800a0be:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	685a      	ldr	r2, [r3, #4]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	1ad2      	subs	r2, r2, r3
 800a0d0:	2308      	movs	r3, #8
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d916      	bls.n	800a106 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0d8:	697a      	ldr	r2, [r7, #20]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	18d3      	adds	r3, r2, r3
 800a0de:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2207      	movs	r2, #7
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	d001      	beq.n	800a0ec <pvPortMalloc+0xcc>
 800a0e8:	b672      	cpsid	i
 800a0ea:	e7fe      	b.n	800a0ea <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	685a      	ldr	r2, [r3, #4]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	1ad2      	subs	r2, r2, r3
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	0018      	movs	r0, r3
 800a102:	f000 f8db 	bl	800a2bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a106:	4b16      	ldr	r3, [pc, #88]	; (800a160 <pvPortMalloc+0x140>)
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	1ad2      	subs	r2, r2, r3
 800a110:	4b13      	ldr	r3, [pc, #76]	; (800a160 <pvPortMalloc+0x140>)
 800a112:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a114:	4b12      	ldr	r3, [pc, #72]	; (800a160 <pvPortMalloc+0x140>)
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	4b13      	ldr	r3, [pc, #76]	; (800a168 <pvPortMalloc+0x148>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d203      	bcs.n	800a128 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a120:	4b0f      	ldr	r3, [pc, #60]	; (800a160 <pvPortMalloc+0x140>)
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	4b10      	ldr	r3, [pc, #64]	; (800a168 <pvPortMalloc+0x148>)
 800a126:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	4b0b      	ldr	r3, [pc, #44]	; (800a15c <pvPortMalloc+0x13c>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	431a      	orrs	r2, r3
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	2200      	movs	r2, #0
 800a13a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a13c:	f7fe ff26 	bl	8008f8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2207      	movs	r2, #7
 800a144:	4013      	ands	r3, r2
 800a146:	d001      	beq.n	800a14c <pvPortMalloc+0x12c>
 800a148:	b672      	cpsid	i
 800a14a:	e7fe      	b.n	800a14a <pvPortMalloc+0x12a>
	return pvReturn;
 800a14c:	68fb      	ldr	r3, [r7, #12]
}
 800a14e:	0018      	movs	r0, r3
 800a150:	46bd      	mov	sp, r7
 800a152:	b006      	add	sp, #24
 800a154:	bd80      	pop	{r7, pc}
 800a156:	46c0      	nop			; (mov r8, r8)
 800a158:	200023e8 	.word	0x200023e8
 800a15c:	200023f4 	.word	0x200023f4
 800a160:	200023ec 	.word	0x200023ec
 800a164:	200023e0 	.word	0x200023e0
 800a168:	200023f0 	.word	0x200023f0

0800a16c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d035      	beq.n	800a1ea <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a17e:	2308      	movs	r3, #8
 800a180:	425b      	negs	r3, r3
 800a182:	68fa      	ldr	r2, [r7, #12]
 800a184:	18d3      	adds	r3, r2, r3
 800a186:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	685a      	ldr	r2, [r3, #4]
 800a190:	4b18      	ldr	r3, [pc, #96]	; (800a1f4 <vPortFree+0x88>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4013      	ands	r3, r2
 800a196:	d101      	bne.n	800a19c <vPortFree+0x30>
 800a198:	b672      	cpsid	i
 800a19a:	e7fe      	b.n	800a19a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d001      	beq.n	800a1a8 <vPortFree+0x3c>
 800a1a4:	b672      	cpsid	i
 800a1a6:	e7fe      	b.n	800a1a6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	4b11      	ldr	r3, [pc, #68]	; (800a1f4 <vPortFree+0x88>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	d01a      	beq.n	800a1ea <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d116      	bne.n	800a1ea <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	685a      	ldr	r2, [r3, #4]
 800a1c0:	4b0c      	ldr	r3, [pc, #48]	; (800a1f4 <vPortFree+0x88>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	43db      	mvns	r3, r3
 800a1c6:	401a      	ands	r2, r3
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1cc:	f7fe fed2 	bl	8008f74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	685a      	ldr	r2, [r3, #4]
 800a1d4:	4b08      	ldr	r3, [pc, #32]	; (800a1f8 <vPortFree+0x8c>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	18d2      	adds	r2, r2, r3
 800a1da:	4b07      	ldr	r3, [pc, #28]	; (800a1f8 <vPortFree+0x8c>)
 800a1dc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	0018      	movs	r0, r3
 800a1e2:	f000 f86b 	bl	800a2bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a1e6:	f7fe fed1 	bl	8008f8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a1ea:	46c0      	nop			; (mov r8, r8)
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	b004      	add	sp, #16
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	46c0      	nop			; (mov r8, r8)
 800a1f4:	200023f4 	.word	0x200023f4
 800a1f8:	200023ec 	.word	0x200023ec

0800a1fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a202:	23c0      	movs	r3, #192	; 0xc0
 800a204:	011b      	lsls	r3, r3, #4
 800a206:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a208:	4b26      	ldr	r3, [pc, #152]	; (800a2a4 <prvHeapInit+0xa8>)
 800a20a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2207      	movs	r2, #7
 800a210:	4013      	ands	r3, r2
 800a212:	d00c      	beq.n	800a22e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	3307      	adds	r3, #7
 800a218:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2207      	movs	r2, #7
 800a21e:	4393      	bics	r3, r2
 800a220:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	1ad2      	subs	r2, r2, r3
 800a228:	4b1e      	ldr	r3, [pc, #120]	; (800a2a4 <prvHeapInit+0xa8>)
 800a22a:	18d3      	adds	r3, r2, r3
 800a22c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a232:	4b1d      	ldr	r3, [pc, #116]	; (800a2a8 <prvHeapInit+0xac>)
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a238:	4b1b      	ldr	r3, [pc, #108]	; (800a2a8 <prvHeapInit+0xac>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	18d3      	adds	r3, r2, r3
 800a244:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a246:	2208      	movs	r2, #8
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	1a9b      	subs	r3, r3, r2
 800a24c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2207      	movs	r2, #7
 800a252:	4393      	bics	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	4b14      	ldr	r3, [pc, #80]	; (800a2ac <prvHeapInit+0xb0>)
 800a25a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800a25c:	4b13      	ldr	r3, [pc, #76]	; (800a2ac <prvHeapInit+0xb0>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2200      	movs	r2, #0
 800a262:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a264:	4b11      	ldr	r3, [pc, #68]	; (800a2ac <prvHeapInit+0xb0>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2200      	movs	r2, #0
 800a26a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	1ad2      	subs	r2, r2, r3
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a27a:	4b0c      	ldr	r3, [pc, #48]	; (800a2ac <prvHeapInit+0xb0>)
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	4b0a      	ldr	r3, [pc, #40]	; (800a2b0 <prvHeapInit+0xb4>)
 800a288:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	685a      	ldr	r2, [r3, #4]
 800a28e:	4b09      	ldr	r3, [pc, #36]	; (800a2b4 <prvHeapInit+0xb8>)
 800a290:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a292:	4b09      	ldr	r3, [pc, #36]	; (800a2b8 <prvHeapInit+0xbc>)
 800a294:	2280      	movs	r2, #128	; 0x80
 800a296:	0612      	lsls	r2, r2, #24
 800a298:	601a      	str	r2, [r3, #0]
}
 800a29a:	46c0      	nop			; (mov r8, r8)
 800a29c:	46bd      	mov	sp, r7
 800a29e:	b004      	add	sp, #16
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	46c0      	nop			; (mov r8, r8)
 800a2a4:	200017e0 	.word	0x200017e0
 800a2a8:	200023e0 	.word	0x200023e0
 800a2ac:	200023e8 	.word	0x200023e8
 800a2b0:	200023f0 	.word	0x200023f0
 800a2b4:	200023ec 	.word	0x200023ec
 800a2b8:	200023f4 	.word	0x200023f4

0800a2bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2c4:	4b27      	ldr	r3, [pc, #156]	; (800a364 <prvInsertBlockIntoFreeList+0xa8>)
 800a2c6:	60fb      	str	r3, [r7, #12]
 800a2c8:	e002      	b.n	800a2d0 <prvInsertBlockIntoFreeList+0x14>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	60fb      	str	r3, [r7, #12]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d8f7      	bhi.n	800a2ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	68ba      	ldr	r2, [r7, #8]
 800a2e4:	18d3      	adds	r3, r2, r3
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d108      	bne.n	800a2fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	18d2      	adds	r2, r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	18d2      	adds	r2, r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d118      	bne.n	800a344 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	4b14      	ldr	r3, [pc, #80]	; (800a368 <prvInsertBlockIntoFreeList+0xac>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d00d      	beq.n	800a33a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	18d2      	adds	r2, r2, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	601a      	str	r2, [r3, #0]
 800a338:	e008      	b.n	800a34c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a33a:	4b0b      	ldr	r3, [pc, #44]	; (800a368 <prvInsertBlockIntoFreeList+0xac>)
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	601a      	str	r2, [r3, #0]
 800a342:	e003      	b.n	800a34c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	429a      	cmp	r2, r3
 800a352:	d002      	beq.n	800a35a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a35a:	46c0      	nop			; (mov r8, r8)
 800a35c:	46bd      	mov	sp, r7
 800a35e:	b004      	add	sp, #16
 800a360:	bd80      	pop	{r7, pc}
 800a362:	46c0      	nop			; (mov r8, r8)
 800a364:	200023e0 	.word	0x200023e0
 800a368:	200023e8 	.word	0x200023e8

0800a36c <malloc>:
 800a36c:	b510      	push	{r4, lr}
 800a36e:	4b03      	ldr	r3, [pc, #12]	; (800a37c <malloc+0x10>)
 800a370:	0001      	movs	r1, r0
 800a372:	6818      	ldr	r0, [r3, #0]
 800a374:	f000 f826 	bl	800a3c4 <_malloc_r>
 800a378:	bd10      	pop	{r4, pc}
 800a37a:	46c0      	nop			; (mov r8, r8)
 800a37c:	2000007c 	.word	0x2000007c

0800a380 <sbrk_aligned>:
 800a380:	b570      	push	{r4, r5, r6, lr}
 800a382:	4e0f      	ldr	r6, [pc, #60]	; (800a3c0 <sbrk_aligned+0x40>)
 800a384:	000d      	movs	r5, r1
 800a386:	6831      	ldr	r1, [r6, #0]
 800a388:	0004      	movs	r4, r0
 800a38a:	2900      	cmp	r1, #0
 800a38c:	d102      	bne.n	800a394 <sbrk_aligned+0x14>
 800a38e:	f000 fa3b 	bl	800a808 <_sbrk_r>
 800a392:	6030      	str	r0, [r6, #0]
 800a394:	0029      	movs	r1, r5
 800a396:	0020      	movs	r0, r4
 800a398:	f000 fa36 	bl	800a808 <_sbrk_r>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	d00a      	beq.n	800a3b6 <sbrk_aligned+0x36>
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	1cc5      	adds	r5, r0, #3
 800a3a4:	439d      	bics	r5, r3
 800a3a6:	42a8      	cmp	r0, r5
 800a3a8:	d007      	beq.n	800a3ba <sbrk_aligned+0x3a>
 800a3aa:	1a29      	subs	r1, r5, r0
 800a3ac:	0020      	movs	r0, r4
 800a3ae:	f000 fa2b 	bl	800a808 <_sbrk_r>
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	d101      	bne.n	800a3ba <sbrk_aligned+0x3a>
 800a3b6:	2501      	movs	r5, #1
 800a3b8:	426d      	negs	r5, r5
 800a3ba:	0028      	movs	r0, r5
 800a3bc:	bd70      	pop	{r4, r5, r6, pc}
 800a3be:	46c0      	nop			; (mov r8, r8)
 800a3c0:	200023fc 	.word	0x200023fc

0800a3c4 <_malloc_r>:
 800a3c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3c6:	2203      	movs	r2, #3
 800a3c8:	1ccb      	adds	r3, r1, #3
 800a3ca:	4393      	bics	r3, r2
 800a3cc:	3308      	adds	r3, #8
 800a3ce:	0006      	movs	r6, r0
 800a3d0:	001f      	movs	r7, r3
 800a3d2:	2b0c      	cmp	r3, #12
 800a3d4:	d238      	bcs.n	800a448 <_malloc_r+0x84>
 800a3d6:	270c      	movs	r7, #12
 800a3d8:	42b9      	cmp	r1, r7
 800a3da:	d837      	bhi.n	800a44c <_malloc_r+0x88>
 800a3dc:	0030      	movs	r0, r6
 800a3de:	f000 f873 	bl	800a4c8 <__malloc_lock>
 800a3e2:	4b38      	ldr	r3, [pc, #224]	; (800a4c4 <_malloc_r+0x100>)
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	001c      	movs	r4, r3
 800a3ea:	2c00      	cmp	r4, #0
 800a3ec:	d133      	bne.n	800a456 <_malloc_r+0x92>
 800a3ee:	0039      	movs	r1, r7
 800a3f0:	0030      	movs	r0, r6
 800a3f2:	f7ff ffc5 	bl	800a380 <sbrk_aligned>
 800a3f6:	0004      	movs	r4, r0
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d15e      	bne.n	800a4ba <_malloc_r+0xf6>
 800a3fc:	9b00      	ldr	r3, [sp, #0]
 800a3fe:	681c      	ldr	r4, [r3, #0]
 800a400:	0025      	movs	r5, r4
 800a402:	2d00      	cmp	r5, #0
 800a404:	d14e      	bne.n	800a4a4 <_malloc_r+0xe0>
 800a406:	2c00      	cmp	r4, #0
 800a408:	d051      	beq.n	800a4ae <_malloc_r+0xea>
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	0029      	movs	r1, r5
 800a40e:	18e3      	adds	r3, r4, r3
 800a410:	0030      	movs	r0, r6
 800a412:	9301      	str	r3, [sp, #4]
 800a414:	f000 f9f8 	bl	800a808 <_sbrk_r>
 800a418:	9b01      	ldr	r3, [sp, #4]
 800a41a:	4283      	cmp	r3, r0
 800a41c:	d147      	bne.n	800a4ae <_malloc_r+0xea>
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	0030      	movs	r0, r6
 800a422:	1aff      	subs	r7, r7, r3
 800a424:	0039      	movs	r1, r7
 800a426:	f7ff ffab 	bl	800a380 <sbrk_aligned>
 800a42a:	3001      	adds	r0, #1
 800a42c:	d03f      	beq.n	800a4ae <_malloc_r+0xea>
 800a42e:	6823      	ldr	r3, [r4, #0]
 800a430:	19db      	adds	r3, r3, r7
 800a432:	6023      	str	r3, [r4, #0]
 800a434:	9b00      	ldr	r3, [sp, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d040      	beq.n	800a4be <_malloc_r+0xfa>
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	42a2      	cmp	r2, r4
 800a440:	d133      	bne.n	800a4aa <_malloc_r+0xe6>
 800a442:	2200      	movs	r2, #0
 800a444:	605a      	str	r2, [r3, #4]
 800a446:	e014      	b.n	800a472 <_malloc_r+0xae>
 800a448:	2b00      	cmp	r3, #0
 800a44a:	dac5      	bge.n	800a3d8 <_malloc_r+0x14>
 800a44c:	230c      	movs	r3, #12
 800a44e:	2500      	movs	r5, #0
 800a450:	6033      	str	r3, [r6, #0]
 800a452:	0028      	movs	r0, r5
 800a454:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a456:	6821      	ldr	r1, [r4, #0]
 800a458:	1bc9      	subs	r1, r1, r7
 800a45a:	d420      	bmi.n	800a49e <_malloc_r+0xda>
 800a45c:	290b      	cmp	r1, #11
 800a45e:	d918      	bls.n	800a492 <_malloc_r+0xce>
 800a460:	19e2      	adds	r2, r4, r7
 800a462:	6027      	str	r7, [r4, #0]
 800a464:	42a3      	cmp	r3, r4
 800a466:	d112      	bne.n	800a48e <_malloc_r+0xca>
 800a468:	9b00      	ldr	r3, [sp, #0]
 800a46a:	601a      	str	r2, [r3, #0]
 800a46c:	6863      	ldr	r3, [r4, #4]
 800a46e:	6011      	str	r1, [r2, #0]
 800a470:	6053      	str	r3, [r2, #4]
 800a472:	0030      	movs	r0, r6
 800a474:	0025      	movs	r5, r4
 800a476:	f000 f82f 	bl	800a4d8 <__malloc_unlock>
 800a47a:	2207      	movs	r2, #7
 800a47c:	350b      	adds	r5, #11
 800a47e:	1d23      	adds	r3, r4, #4
 800a480:	4395      	bics	r5, r2
 800a482:	1aea      	subs	r2, r5, r3
 800a484:	429d      	cmp	r5, r3
 800a486:	d0e4      	beq.n	800a452 <_malloc_r+0x8e>
 800a488:	1b5b      	subs	r3, r3, r5
 800a48a:	50a3      	str	r3, [r4, r2]
 800a48c:	e7e1      	b.n	800a452 <_malloc_r+0x8e>
 800a48e:	605a      	str	r2, [r3, #4]
 800a490:	e7ec      	b.n	800a46c <_malloc_r+0xa8>
 800a492:	6862      	ldr	r2, [r4, #4]
 800a494:	42a3      	cmp	r3, r4
 800a496:	d1d5      	bne.n	800a444 <_malloc_r+0x80>
 800a498:	9b00      	ldr	r3, [sp, #0]
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	e7e9      	b.n	800a472 <_malloc_r+0xae>
 800a49e:	0023      	movs	r3, r4
 800a4a0:	6864      	ldr	r4, [r4, #4]
 800a4a2:	e7a2      	b.n	800a3ea <_malloc_r+0x26>
 800a4a4:	002c      	movs	r4, r5
 800a4a6:	686d      	ldr	r5, [r5, #4]
 800a4a8:	e7ab      	b.n	800a402 <_malloc_r+0x3e>
 800a4aa:	0013      	movs	r3, r2
 800a4ac:	e7c4      	b.n	800a438 <_malloc_r+0x74>
 800a4ae:	230c      	movs	r3, #12
 800a4b0:	0030      	movs	r0, r6
 800a4b2:	6033      	str	r3, [r6, #0]
 800a4b4:	f000 f810 	bl	800a4d8 <__malloc_unlock>
 800a4b8:	e7cb      	b.n	800a452 <_malloc_r+0x8e>
 800a4ba:	6027      	str	r7, [r4, #0]
 800a4bc:	e7d9      	b.n	800a472 <_malloc_r+0xae>
 800a4be:	605b      	str	r3, [r3, #4]
 800a4c0:	deff      	udf	#255	; 0xff
 800a4c2:	46c0      	nop			; (mov r8, r8)
 800a4c4:	200023f8 	.word	0x200023f8

0800a4c8 <__malloc_lock>:
 800a4c8:	b510      	push	{r4, lr}
 800a4ca:	4802      	ldr	r0, [pc, #8]	; (800a4d4 <__malloc_lock+0xc>)
 800a4cc:	f000 f9ed 	bl	800a8aa <__retarget_lock_acquire_recursive>
 800a4d0:	bd10      	pop	{r4, pc}
 800a4d2:	46c0      	nop			; (mov r8, r8)
 800a4d4:	20002540 	.word	0x20002540

0800a4d8 <__malloc_unlock>:
 800a4d8:	b510      	push	{r4, lr}
 800a4da:	4802      	ldr	r0, [pc, #8]	; (800a4e4 <__malloc_unlock+0xc>)
 800a4dc:	f000 f9e6 	bl	800a8ac <__retarget_lock_release_recursive>
 800a4e0:	bd10      	pop	{r4, pc}
 800a4e2:	46c0      	nop			; (mov r8, r8)
 800a4e4:	20002540 	.word	0x20002540

0800a4e8 <rand>:
 800a4e8:	4b16      	ldr	r3, [pc, #88]	; (800a544 <rand+0x5c>)
 800a4ea:	b510      	push	{r4, lr}
 800a4ec:	681c      	ldr	r4, [r3, #0]
 800a4ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d116      	bne.n	800a522 <rand+0x3a>
 800a4f4:	2018      	movs	r0, #24
 800a4f6:	f7ff ff39 	bl	800a36c <malloc>
 800a4fa:	1e02      	subs	r2, r0, #0
 800a4fc:	6320      	str	r0, [r4, #48]	; 0x30
 800a4fe:	d104      	bne.n	800a50a <rand+0x22>
 800a500:	2152      	movs	r1, #82	; 0x52
 800a502:	4b11      	ldr	r3, [pc, #68]	; (800a548 <rand+0x60>)
 800a504:	4811      	ldr	r0, [pc, #68]	; (800a54c <rand+0x64>)
 800a506:	f000 f9db 	bl	800a8c0 <__assert_func>
 800a50a:	4b11      	ldr	r3, [pc, #68]	; (800a550 <rand+0x68>)
 800a50c:	2100      	movs	r1, #0
 800a50e:	6003      	str	r3, [r0, #0]
 800a510:	4b10      	ldr	r3, [pc, #64]	; (800a554 <rand+0x6c>)
 800a512:	6043      	str	r3, [r0, #4]
 800a514:	4b10      	ldr	r3, [pc, #64]	; (800a558 <rand+0x70>)
 800a516:	6083      	str	r3, [r0, #8]
 800a518:	230b      	movs	r3, #11
 800a51a:	8183      	strh	r3, [r0, #12]
 800a51c:	2001      	movs	r0, #1
 800a51e:	6110      	str	r0, [r2, #16]
 800a520:	6151      	str	r1, [r2, #20]
 800a522:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800a524:	4a0d      	ldr	r2, [pc, #52]	; (800a55c <rand+0x74>)
 800a526:	6920      	ldr	r0, [r4, #16]
 800a528:	6961      	ldr	r1, [r4, #20]
 800a52a:	4b0d      	ldr	r3, [pc, #52]	; (800a560 <rand+0x78>)
 800a52c:	f7f5 ff6c 	bl	8000408 <__aeabi_lmul>
 800a530:	2201      	movs	r2, #1
 800a532:	2300      	movs	r3, #0
 800a534:	1880      	adds	r0, r0, r2
 800a536:	4159      	adcs	r1, r3
 800a538:	6120      	str	r0, [r4, #16]
 800a53a:	6161      	str	r1, [r4, #20]
 800a53c:	0048      	lsls	r0, r1, #1
 800a53e:	0840      	lsrs	r0, r0, #1
 800a540:	bd10      	pop	{r4, pc}
 800a542:	46c0      	nop			; (mov r8, r8)
 800a544:	2000007c 	.word	0x2000007c
 800a548:	0800e7ac 	.word	0x0800e7ac
 800a54c:	0800e7c3 	.word	0x0800e7c3
 800a550:	abcd330e 	.word	0xabcd330e
 800a554:	e66d1234 	.word	0xe66d1234
 800a558:	0005deec 	.word	0x0005deec
 800a55c:	4c957f2d 	.word	0x4c957f2d
 800a560:	5851f42d 	.word	0x5851f42d

0800a564 <std>:
 800a564:	2300      	movs	r3, #0
 800a566:	b510      	push	{r4, lr}
 800a568:	0004      	movs	r4, r0
 800a56a:	6003      	str	r3, [r0, #0]
 800a56c:	6043      	str	r3, [r0, #4]
 800a56e:	6083      	str	r3, [r0, #8]
 800a570:	8181      	strh	r1, [r0, #12]
 800a572:	6643      	str	r3, [r0, #100]	; 0x64
 800a574:	81c2      	strh	r2, [r0, #14]
 800a576:	6103      	str	r3, [r0, #16]
 800a578:	6143      	str	r3, [r0, #20]
 800a57a:	6183      	str	r3, [r0, #24]
 800a57c:	0019      	movs	r1, r3
 800a57e:	2208      	movs	r2, #8
 800a580:	305c      	adds	r0, #92	; 0x5c
 800a582:	f000 f8ff 	bl	800a784 <memset>
 800a586:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <std+0x50>)
 800a588:	6224      	str	r4, [r4, #32]
 800a58a:	6263      	str	r3, [r4, #36]	; 0x24
 800a58c:	4b0a      	ldr	r3, [pc, #40]	; (800a5b8 <std+0x54>)
 800a58e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a590:	4b0a      	ldr	r3, [pc, #40]	; (800a5bc <std+0x58>)
 800a592:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a594:	4b0a      	ldr	r3, [pc, #40]	; (800a5c0 <std+0x5c>)
 800a596:	6323      	str	r3, [r4, #48]	; 0x30
 800a598:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <std+0x60>)
 800a59a:	429c      	cmp	r4, r3
 800a59c:	d005      	beq.n	800a5aa <std+0x46>
 800a59e:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <std+0x64>)
 800a5a0:	429c      	cmp	r4, r3
 800a5a2:	d002      	beq.n	800a5aa <std+0x46>
 800a5a4:	4b09      	ldr	r3, [pc, #36]	; (800a5cc <std+0x68>)
 800a5a6:	429c      	cmp	r4, r3
 800a5a8:	d103      	bne.n	800a5b2 <std+0x4e>
 800a5aa:	0020      	movs	r0, r4
 800a5ac:	3058      	adds	r0, #88	; 0x58
 800a5ae:	f000 f97b 	bl	800a8a8 <__retarget_lock_init_recursive>
 800a5b2:	bd10      	pop	{r4, pc}
 800a5b4:	0800a6ed 	.word	0x0800a6ed
 800a5b8:	0800a715 	.word	0x0800a715
 800a5bc:	0800a74d 	.word	0x0800a74d
 800a5c0:	0800a779 	.word	0x0800a779
 800a5c4:	20002400 	.word	0x20002400
 800a5c8:	20002468 	.word	0x20002468
 800a5cc:	200024d0 	.word	0x200024d0

0800a5d0 <stdio_exit_handler>:
 800a5d0:	b510      	push	{r4, lr}
 800a5d2:	4a03      	ldr	r2, [pc, #12]	; (800a5e0 <stdio_exit_handler+0x10>)
 800a5d4:	4903      	ldr	r1, [pc, #12]	; (800a5e4 <stdio_exit_handler+0x14>)
 800a5d6:	4804      	ldr	r0, [pc, #16]	; (800a5e8 <stdio_exit_handler+0x18>)
 800a5d8:	f000 f86c 	bl	800a6b4 <_fwalk_sglue>
 800a5dc:	bd10      	pop	{r4, pc}
 800a5de:	46c0      	nop			; (mov r8, r8)
 800a5e0:	20000024 	.word	0x20000024
 800a5e4:	0800aaa5 	.word	0x0800aaa5
 800a5e8:	20000030 	.word	0x20000030

0800a5ec <cleanup_stdio>:
 800a5ec:	6841      	ldr	r1, [r0, #4]
 800a5ee:	4b0b      	ldr	r3, [pc, #44]	; (800a61c <cleanup_stdio+0x30>)
 800a5f0:	b510      	push	{r4, lr}
 800a5f2:	0004      	movs	r4, r0
 800a5f4:	4299      	cmp	r1, r3
 800a5f6:	d001      	beq.n	800a5fc <cleanup_stdio+0x10>
 800a5f8:	f000 fa54 	bl	800aaa4 <_fflush_r>
 800a5fc:	68a1      	ldr	r1, [r4, #8]
 800a5fe:	4b08      	ldr	r3, [pc, #32]	; (800a620 <cleanup_stdio+0x34>)
 800a600:	4299      	cmp	r1, r3
 800a602:	d002      	beq.n	800a60a <cleanup_stdio+0x1e>
 800a604:	0020      	movs	r0, r4
 800a606:	f000 fa4d 	bl	800aaa4 <_fflush_r>
 800a60a:	68e1      	ldr	r1, [r4, #12]
 800a60c:	4b05      	ldr	r3, [pc, #20]	; (800a624 <cleanup_stdio+0x38>)
 800a60e:	4299      	cmp	r1, r3
 800a610:	d002      	beq.n	800a618 <cleanup_stdio+0x2c>
 800a612:	0020      	movs	r0, r4
 800a614:	f000 fa46 	bl	800aaa4 <_fflush_r>
 800a618:	bd10      	pop	{r4, pc}
 800a61a:	46c0      	nop			; (mov r8, r8)
 800a61c:	20002400 	.word	0x20002400
 800a620:	20002468 	.word	0x20002468
 800a624:	200024d0 	.word	0x200024d0

0800a628 <global_stdio_init.part.0>:
 800a628:	b510      	push	{r4, lr}
 800a62a:	4b09      	ldr	r3, [pc, #36]	; (800a650 <global_stdio_init.part.0+0x28>)
 800a62c:	4a09      	ldr	r2, [pc, #36]	; (800a654 <global_stdio_init.part.0+0x2c>)
 800a62e:	2104      	movs	r1, #4
 800a630:	601a      	str	r2, [r3, #0]
 800a632:	4809      	ldr	r0, [pc, #36]	; (800a658 <global_stdio_init.part.0+0x30>)
 800a634:	2200      	movs	r2, #0
 800a636:	f7ff ff95 	bl	800a564 <std>
 800a63a:	2201      	movs	r2, #1
 800a63c:	2109      	movs	r1, #9
 800a63e:	4807      	ldr	r0, [pc, #28]	; (800a65c <global_stdio_init.part.0+0x34>)
 800a640:	f7ff ff90 	bl	800a564 <std>
 800a644:	2202      	movs	r2, #2
 800a646:	2112      	movs	r1, #18
 800a648:	4805      	ldr	r0, [pc, #20]	; (800a660 <global_stdio_init.part.0+0x38>)
 800a64a:	f7ff ff8b 	bl	800a564 <std>
 800a64e:	bd10      	pop	{r4, pc}
 800a650:	20002538 	.word	0x20002538
 800a654:	0800a5d1 	.word	0x0800a5d1
 800a658:	20002400 	.word	0x20002400
 800a65c:	20002468 	.word	0x20002468
 800a660:	200024d0 	.word	0x200024d0

0800a664 <__sfp_lock_acquire>:
 800a664:	b510      	push	{r4, lr}
 800a666:	4802      	ldr	r0, [pc, #8]	; (800a670 <__sfp_lock_acquire+0xc>)
 800a668:	f000 f91f 	bl	800a8aa <__retarget_lock_acquire_recursive>
 800a66c:	bd10      	pop	{r4, pc}
 800a66e:	46c0      	nop			; (mov r8, r8)
 800a670:	20002541 	.word	0x20002541

0800a674 <__sfp_lock_release>:
 800a674:	b510      	push	{r4, lr}
 800a676:	4802      	ldr	r0, [pc, #8]	; (800a680 <__sfp_lock_release+0xc>)
 800a678:	f000 f918 	bl	800a8ac <__retarget_lock_release_recursive>
 800a67c:	bd10      	pop	{r4, pc}
 800a67e:	46c0      	nop			; (mov r8, r8)
 800a680:	20002541 	.word	0x20002541

0800a684 <__sinit>:
 800a684:	b510      	push	{r4, lr}
 800a686:	0004      	movs	r4, r0
 800a688:	f7ff ffec 	bl	800a664 <__sfp_lock_acquire>
 800a68c:	6a23      	ldr	r3, [r4, #32]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <__sinit+0x14>
 800a692:	f7ff ffef 	bl	800a674 <__sfp_lock_release>
 800a696:	bd10      	pop	{r4, pc}
 800a698:	4b04      	ldr	r3, [pc, #16]	; (800a6ac <__sinit+0x28>)
 800a69a:	6223      	str	r3, [r4, #32]
 800a69c:	4b04      	ldr	r3, [pc, #16]	; (800a6b0 <__sinit+0x2c>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d1f6      	bne.n	800a692 <__sinit+0xe>
 800a6a4:	f7ff ffc0 	bl	800a628 <global_stdio_init.part.0>
 800a6a8:	e7f3      	b.n	800a692 <__sinit+0xe>
 800a6aa:	46c0      	nop			; (mov r8, r8)
 800a6ac:	0800a5ed 	.word	0x0800a5ed
 800a6b0:	20002538 	.word	0x20002538

0800a6b4 <_fwalk_sglue>:
 800a6b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6b6:	0014      	movs	r4, r2
 800a6b8:	2600      	movs	r6, #0
 800a6ba:	9000      	str	r0, [sp, #0]
 800a6bc:	9101      	str	r1, [sp, #4]
 800a6be:	68a5      	ldr	r5, [r4, #8]
 800a6c0:	6867      	ldr	r7, [r4, #4]
 800a6c2:	3f01      	subs	r7, #1
 800a6c4:	d504      	bpl.n	800a6d0 <_fwalk_sglue+0x1c>
 800a6c6:	6824      	ldr	r4, [r4, #0]
 800a6c8:	2c00      	cmp	r4, #0
 800a6ca:	d1f8      	bne.n	800a6be <_fwalk_sglue+0xa>
 800a6cc:	0030      	movs	r0, r6
 800a6ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a6d0:	89ab      	ldrh	r3, [r5, #12]
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d908      	bls.n	800a6e8 <_fwalk_sglue+0x34>
 800a6d6:	220e      	movs	r2, #14
 800a6d8:	5eab      	ldrsh	r3, [r5, r2]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	d004      	beq.n	800a6e8 <_fwalk_sglue+0x34>
 800a6de:	0029      	movs	r1, r5
 800a6e0:	9800      	ldr	r0, [sp, #0]
 800a6e2:	9b01      	ldr	r3, [sp, #4]
 800a6e4:	4798      	blx	r3
 800a6e6:	4306      	orrs	r6, r0
 800a6e8:	3568      	adds	r5, #104	; 0x68
 800a6ea:	e7ea      	b.n	800a6c2 <_fwalk_sglue+0xe>

0800a6ec <__sread>:
 800a6ec:	b570      	push	{r4, r5, r6, lr}
 800a6ee:	000c      	movs	r4, r1
 800a6f0:	250e      	movs	r5, #14
 800a6f2:	5f49      	ldrsh	r1, [r1, r5]
 800a6f4:	f000 f874 	bl	800a7e0 <_read_r>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	db03      	blt.n	800a704 <__sread+0x18>
 800a6fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a6fe:	181b      	adds	r3, r3, r0
 800a700:	6563      	str	r3, [r4, #84]	; 0x54
 800a702:	bd70      	pop	{r4, r5, r6, pc}
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	4a02      	ldr	r2, [pc, #8]	; (800a710 <__sread+0x24>)
 800a708:	4013      	ands	r3, r2
 800a70a:	81a3      	strh	r3, [r4, #12]
 800a70c:	e7f9      	b.n	800a702 <__sread+0x16>
 800a70e:	46c0      	nop			; (mov r8, r8)
 800a710:	ffffefff 	.word	0xffffefff

0800a714 <__swrite>:
 800a714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a716:	001f      	movs	r7, r3
 800a718:	898b      	ldrh	r3, [r1, #12]
 800a71a:	0005      	movs	r5, r0
 800a71c:	000c      	movs	r4, r1
 800a71e:	0016      	movs	r6, r2
 800a720:	05db      	lsls	r3, r3, #23
 800a722:	d505      	bpl.n	800a730 <__swrite+0x1c>
 800a724:	230e      	movs	r3, #14
 800a726:	5ec9      	ldrsh	r1, [r1, r3]
 800a728:	2200      	movs	r2, #0
 800a72a:	2302      	movs	r3, #2
 800a72c:	f000 f844 	bl	800a7b8 <_lseek_r>
 800a730:	89a3      	ldrh	r3, [r4, #12]
 800a732:	4a05      	ldr	r2, [pc, #20]	; (800a748 <__swrite+0x34>)
 800a734:	0028      	movs	r0, r5
 800a736:	4013      	ands	r3, r2
 800a738:	81a3      	strh	r3, [r4, #12]
 800a73a:	0032      	movs	r2, r6
 800a73c:	230e      	movs	r3, #14
 800a73e:	5ee1      	ldrsh	r1, [r4, r3]
 800a740:	003b      	movs	r3, r7
 800a742:	f000 f873 	bl	800a82c <_write_r>
 800a746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a748:	ffffefff 	.word	0xffffefff

0800a74c <__sseek>:
 800a74c:	b570      	push	{r4, r5, r6, lr}
 800a74e:	000c      	movs	r4, r1
 800a750:	250e      	movs	r5, #14
 800a752:	5f49      	ldrsh	r1, [r1, r5]
 800a754:	f000 f830 	bl	800a7b8 <_lseek_r>
 800a758:	89a3      	ldrh	r3, [r4, #12]
 800a75a:	1c42      	adds	r2, r0, #1
 800a75c:	d103      	bne.n	800a766 <__sseek+0x1a>
 800a75e:	4a05      	ldr	r2, [pc, #20]	; (800a774 <__sseek+0x28>)
 800a760:	4013      	ands	r3, r2
 800a762:	81a3      	strh	r3, [r4, #12]
 800a764:	bd70      	pop	{r4, r5, r6, pc}
 800a766:	2280      	movs	r2, #128	; 0x80
 800a768:	0152      	lsls	r2, r2, #5
 800a76a:	4313      	orrs	r3, r2
 800a76c:	81a3      	strh	r3, [r4, #12]
 800a76e:	6560      	str	r0, [r4, #84]	; 0x54
 800a770:	e7f8      	b.n	800a764 <__sseek+0x18>
 800a772:	46c0      	nop			; (mov r8, r8)
 800a774:	ffffefff 	.word	0xffffefff

0800a778 <__sclose>:
 800a778:	b510      	push	{r4, lr}
 800a77a:	230e      	movs	r3, #14
 800a77c:	5ec9      	ldrsh	r1, [r1, r3]
 800a77e:	f000 f809 	bl	800a794 <_close_r>
 800a782:	bd10      	pop	{r4, pc}

0800a784 <memset>:
 800a784:	0003      	movs	r3, r0
 800a786:	1882      	adds	r2, r0, r2
 800a788:	4293      	cmp	r3, r2
 800a78a:	d100      	bne.n	800a78e <memset+0xa>
 800a78c:	4770      	bx	lr
 800a78e:	7019      	strb	r1, [r3, #0]
 800a790:	3301      	adds	r3, #1
 800a792:	e7f9      	b.n	800a788 <memset+0x4>

0800a794 <_close_r>:
 800a794:	2300      	movs	r3, #0
 800a796:	b570      	push	{r4, r5, r6, lr}
 800a798:	4d06      	ldr	r5, [pc, #24]	; (800a7b4 <_close_r+0x20>)
 800a79a:	0004      	movs	r4, r0
 800a79c:	0008      	movs	r0, r1
 800a79e:	602b      	str	r3, [r5, #0]
 800a7a0:	f7fa fec9 	bl	8005536 <_close>
 800a7a4:	1c43      	adds	r3, r0, #1
 800a7a6:	d103      	bne.n	800a7b0 <_close_r+0x1c>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d000      	beq.n	800a7b0 <_close_r+0x1c>
 800a7ae:	6023      	str	r3, [r4, #0]
 800a7b0:	bd70      	pop	{r4, r5, r6, pc}
 800a7b2:	46c0      	nop			; (mov r8, r8)
 800a7b4:	2000253c 	.word	0x2000253c

0800a7b8 <_lseek_r>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	0004      	movs	r4, r0
 800a7bc:	0008      	movs	r0, r1
 800a7be:	0011      	movs	r1, r2
 800a7c0:	001a      	movs	r2, r3
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	4d05      	ldr	r5, [pc, #20]	; (800a7dc <_lseek_r+0x24>)
 800a7c6:	602b      	str	r3, [r5, #0]
 800a7c8:	f7fa fed6 	bl	8005578 <_lseek>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d103      	bne.n	800a7d8 <_lseek_r+0x20>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d000      	beq.n	800a7d8 <_lseek_r+0x20>
 800a7d6:	6023      	str	r3, [r4, #0]
 800a7d8:	bd70      	pop	{r4, r5, r6, pc}
 800a7da:	46c0      	nop			; (mov r8, r8)
 800a7dc:	2000253c 	.word	0x2000253c

0800a7e0 <_read_r>:
 800a7e0:	b570      	push	{r4, r5, r6, lr}
 800a7e2:	0004      	movs	r4, r0
 800a7e4:	0008      	movs	r0, r1
 800a7e6:	0011      	movs	r1, r2
 800a7e8:	001a      	movs	r2, r3
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	4d05      	ldr	r5, [pc, #20]	; (800a804 <_read_r+0x24>)
 800a7ee:	602b      	str	r3, [r5, #0]
 800a7f0:	f7fa fe68 	bl	80054c4 <_read>
 800a7f4:	1c43      	adds	r3, r0, #1
 800a7f6:	d103      	bne.n	800a800 <_read_r+0x20>
 800a7f8:	682b      	ldr	r3, [r5, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d000      	beq.n	800a800 <_read_r+0x20>
 800a7fe:	6023      	str	r3, [r4, #0]
 800a800:	bd70      	pop	{r4, r5, r6, pc}
 800a802:	46c0      	nop			; (mov r8, r8)
 800a804:	2000253c 	.word	0x2000253c

0800a808 <_sbrk_r>:
 800a808:	2300      	movs	r3, #0
 800a80a:	b570      	push	{r4, r5, r6, lr}
 800a80c:	4d06      	ldr	r5, [pc, #24]	; (800a828 <_sbrk_r+0x20>)
 800a80e:	0004      	movs	r4, r0
 800a810:	0008      	movs	r0, r1
 800a812:	602b      	str	r3, [r5, #0]
 800a814:	f7fa febc 	bl	8005590 <_sbrk>
 800a818:	1c43      	adds	r3, r0, #1
 800a81a:	d103      	bne.n	800a824 <_sbrk_r+0x1c>
 800a81c:	682b      	ldr	r3, [r5, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d000      	beq.n	800a824 <_sbrk_r+0x1c>
 800a822:	6023      	str	r3, [r4, #0]
 800a824:	bd70      	pop	{r4, r5, r6, pc}
 800a826:	46c0      	nop			; (mov r8, r8)
 800a828:	2000253c 	.word	0x2000253c

0800a82c <_write_r>:
 800a82c:	b570      	push	{r4, r5, r6, lr}
 800a82e:	0004      	movs	r4, r0
 800a830:	0008      	movs	r0, r1
 800a832:	0011      	movs	r1, r2
 800a834:	001a      	movs	r2, r3
 800a836:	2300      	movs	r3, #0
 800a838:	4d05      	ldr	r5, [pc, #20]	; (800a850 <_write_r+0x24>)
 800a83a:	602b      	str	r3, [r5, #0]
 800a83c:	f7fa fe5f 	bl	80054fe <_write>
 800a840:	1c43      	adds	r3, r0, #1
 800a842:	d103      	bne.n	800a84c <_write_r+0x20>
 800a844:	682b      	ldr	r3, [r5, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d000      	beq.n	800a84c <_write_r+0x20>
 800a84a:	6023      	str	r3, [r4, #0]
 800a84c:	bd70      	pop	{r4, r5, r6, pc}
 800a84e:	46c0      	nop			; (mov r8, r8)
 800a850:	2000253c 	.word	0x2000253c

0800a854 <__errno>:
 800a854:	4b01      	ldr	r3, [pc, #4]	; (800a85c <__errno+0x8>)
 800a856:	6818      	ldr	r0, [r3, #0]
 800a858:	4770      	bx	lr
 800a85a:	46c0      	nop			; (mov r8, r8)
 800a85c:	2000007c 	.word	0x2000007c

0800a860 <__libc_init_array>:
 800a860:	b570      	push	{r4, r5, r6, lr}
 800a862:	2600      	movs	r6, #0
 800a864:	4c0c      	ldr	r4, [pc, #48]	; (800a898 <__libc_init_array+0x38>)
 800a866:	4d0d      	ldr	r5, [pc, #52]	; (800a89c <__libc_init_array+0x3c>)
 800a868:	1b64      	subs	r4, r4, r5
 800a86a:	10a4      	asrs	r4, r4, #2
 800a86c:	42a6      	cmp	r6, r4
 800a86e:	d109      	bne.n	800a884 <__libc_init_array+0x24>
 800a870:	2600      	movs	r6, #0
 800a872:	f000 fda3 	bl	800b3bc <_init>
 800a876:	4c0a      	ldr	r4, [pc, #40]	; (800a8a0 <__libc_init_array+0x40>)
 800a878:	4d0a      	ldr	r5, [pc, #40]	; (800a8a4 <__libc_init_array+0x44>)
 800a87a:	1b64      	subs	r4, r4, r5
 800a87c:	10a4      	asrs	r4, r4, #2
 800a87e:	42a6      	cmp	r6, r4
 800a880:	d105      	bne.n	800a88e <__libc_init_array+0x2e>
 800a882:	bd70      	pop	{r4, r5, r6, pc}
 800a884:	00b3      	lsls	r3, r6, #2
 800a886:	58eb      	ldr	r3, [r5, r3]
 800a888:	4798      	blx	r3
 800a88a:	3601      	adds	r6, #1
 800a88c:	e7ee      	b.n	800a86c <__libc_init_array+0xc>
 800a88e:	00b3      	lsls	r3, r6, #2
 800a890:	58eb      	ldr	r3, [r5, r3]
 800a892:	4798      	blx	r3
 800a894:	3601      	adds	r6, #1
 800a896:	e7f2      	b.n	800a87e <__libc_init_array+0x1e>
 800a898:	0800e88c 	.word	0x0800e88c
 800a89c:	0800e88c 	.word	0x0800e88c
 800a8a0:	0800e890 	.word	0x0800e890
 800a8a4:	0800e88c 	.word	0x0800e88c

0800a8a8 <__retarget_lock_init_recursive>:
 800a8a8:	4770      	bx	lr

0800a8aa <__retarget_lock_acquire_recursive>:
 800a8aa:	4770      	bx	lr

0800a8ac <__retarget_lock_release_recursive>:
 800a8ac:	4770      	bx	lr

0800a8ae <memcpy>:
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	b510      	push	{r4, lr}
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d100      	bne.n	800a8b8 <memcpy+0xa>
 800a8b6:	bd10      	pop	{r4, pc}
 800a8b8:	5ccc      	ldrb	r4, [r1, r3]
 800a8ba:	54c4      	strb	r4, [r0, r3]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	e7f8      	b.n	800a8b2 <memcpy+0x4>

0800a8c0 <__assert_func>:
 800a8c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a8c2:	0014      	movs	r4, r2
 800a8c4:	001a      	movs	r2, r3
 800a8c6:	4b09      	ldr	r3, [pc, #36]	; (800a8ec <__assert_func+0x2c>)
 800a8c8:	0005      	movs	r5, r0
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	000e      	movs	r6, r1
 800a8ce:	68d8      	ldr	r0, [r3, #12]
 800a8d0:	4b07      	ldr	r3, [pc, #28]	; (800a8f0 <__assert_func+0x30>)
 800a8d2:	2c00      	cmp	r4, #0
 800a8d4:	d101      	bne.n	800a8da <__assert_func+0x1a>
 800a8d6:	4b07      	ldr	r3, [pc, #28]	; (800a8f4 <__assert_func+0x34>)
 800a8d8:	001c      	movs	r4, r3
 800a8da:	4907      	ldr	r1, [pc, #28]	; (800a8f8 <__assert_func+0x38>)
 800a8dc:	9301      	str	r3, [sp, #4]
 800a8de:	9402      	str	r4, [sp, #8]
 800a8e0:	002b      	movs	r3, r5
 800a8e2:	9600      	str	r6, [sp, #0]
 800a8e4:	f000 f90a 	bl	800aafc <fiprintf>
 800a8e8:	f000 f918 	bl	800ab1c <abort>
 800a8ec:	2000007c 	.word	0x2000007c
 800a8f0:	0800e81b 	.word	0x0800e81b
 800a8f4:	0800e856 	.word	0x0800e856
 800a8f8:	0800e828 	.word	0x0800e828

0800a8fc <_free_r>:
 800a8fc:	b570      	push	{r4, r5, r6, lr}
 800a8fe:	0005      	movs	r5, r0
 800a900:	2900      	cmp	r1, #0
 800a902:	d010      	beq.n	800a926 <_free_r+0x2a>
 800a904:	1f0c      	subs	r4, r1, #4
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	da00      	bge.n	800a90e <_free_r+0x12>
 800a90c:	18e4      	adds	r4, r4, r3
 800a90e:	0028      	movs	r0, r5
 800a910:	f7ff fdda 	bl	800a4c8 <__malloc_lock>
 800a914:	4a1d      	ldr	r2, [pc, #116]	; (800a98c <_free_r+0x90>)
 800a916:	6813      	ldr	r3, [r2, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d105      	bne.n	800a928 <_free_r+0x2c>
 800a91c:	6063      	str	r3, [r4, #4]
 800a91e:	6014      	str	r4, [r2, #0]
 800a920:	0028      	movs	r0, r5
 800a922:	f7ff fdd9 	bl	800a4d8 <__malloc_unlock>
 800a926:	bd70      	pop	{r4, r5, r6, pc}
 800a928:	42a3      	cmp	r3, r4
 800a92a:	d908      	bls.n	800a93e <_free_r+0x42>
 800a92c:	6820      	ldr	r0, [r4, #0]
 800a92e:	1821      	adds	r1, r4, r0
 800a930:	428b      	cmp	r3, r1
 800a932:	d1f3      	bne.n	800a91c <_free_r+0x20>
 800a934:	6819      	ldr	r1, [r3, #0]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	1809      	adds	r1, r1, r0
 800a93a:	6021      	str	r1, [r4, #0]
 800a93c:	e7ee      	b.n	800a91c <_free_r+0x20>
 800a93e:	001a      	movs	r2, r3
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <_free_r+0x4e>
 800a946:	42a3      	cmp	r3, r4
 800a948:	d9f9      	bls.n	800a93e <_free_r+0x42>
 800a94a:	6811      	ldr	r1, [r2, #0]
 800a94c:	1850      	adds	r0, r2, r1
 800a94e:	42a0      	cmp	r0, r4
 800a950:	d10b      	bne.n	800a96a <_free_r+0x6e>
 800a952:	6820      	ldr	r0, [r4, #0]
 800a954:	1809      	adds	r1, r1, r0
 800a956:	1850      	adds	r0, r2, r1
 800a958:	6011      	str	r1, [r2, #0]
 800a95a:	4283      	cmp	r3, r0
 800a95c:	d1e0      	bne.n	800a920 <_free_r+0x24>
 800a95e:	6818      	ldr	r0, [r3, #0]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	1841      	adds	r1, r0, r1
 800a964:	6011      	str	r1, [r2, #0]
 800a966:	6053      	str	r3, [r2, #4]
 800a968:	e7da      	b.n	800a920 <_free_r+0x24>
 800a96a:	42a0      	cmp	r0, r4
 800a96c:	d902      	bls.n	800a974 <_free_r+0x78>
 800a96e:	230c      	movs	r3, #12
 800a970:	602b      	str	r3, [r5, #0]
 800a972:	e7d5      	b.n	800a920 <_free_r+0x24>
 800a974:	6820      	ldr	r0, [r4, #0]
 800a976:	1821      	adds	r1, r4, r0
 800a978:	428b      	cmp	r3, r1
 800a97a:	d103      	bne.n	800a984 <_free_r+0x88>
 800a97c:	6819      	ldr	r1, [r3, #0]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	1809      	adds	r1, r1, r0
 800a982:	6021      	str	r1, [r4, #0]
 800a984:	6063      	str	r3, [r4, #4]
 800a986:	6054      	str	r4, [r2, #4]
 800a988:	e7ca      	b.n	800a920 <_free_r+0x24>
 800a98a:	46c0      	nop			; (mov r8, r8)
 800a98c:	200023f8 	.word	0x200023f8

0800a990 <__sflush_r>:
 800a990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a992:	898b      	ldrh	r3, [r1, #12]
 800a994:	0005      	movs	r5, r0
 800a996:	000c      	movs	r4, r1
 800a998:	071a      	lsls	r2, r3, #28
 800a99a:	d45c      	bmi.n	800aa56 <__sflush_r+0xc6>
 800a99c:	684a      	ldr	r2, [r1, #4]
 800a99e:	2a00      	cmp	r2, #0
 800a9a0:	dc04      	bgt.n	800a9ac <__sflush_r+0x1c>
 800a9a2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a9a4:	2a00      	cmp	r2, #0
 800a9a6:	dc01      	bgt.n	800a9ac <__sflush_r+0x1c>
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a9ac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a9ae:	2f00      	cmp	r7, #0
 800a9b0:	d0fa      	beq.n	800a9a8 <__sflush_r+0x18>
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	2080      	movs	r0, #128	; 0x80
 800a9b6:	682e      	ldr	r6, [r5, #0]
 800a9b8:	602a      	str	r2, [r5, #0]
 800a9ba:	001a      	movs	r2, r3
 800a9bc:	0140      	lsls	r0, r0, #5
 800a9be:	6a21      	ldr	r1, [r4, #32]
 800a9c0:	4002      	ands	r2, r0
 800a9c2:	4203      	tst	r3, r0
 800a9c4:	d034      	beq.n	800aa30 <__sflush_r+0xa0>
 800a9c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9c8:	89a3      	ldrh	r3, [r4, #12]
 800a9ca:	075b      	lsls	r3, r3, #29
 800a9cc:	d506      	bpl.n	800a9dc <__sflush_r+0x4c>
 800a9ce:	6863      	ldr	r3, [r4, #4]
 800a9d0:	1ac0      	subs	r0, r0, r3
 800a9d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d001      	beq.n	800a9dc <__sflush_r+0x4c>
 800a9d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9da:	1ac0      	subs	r0, r0, r3
 800a9dc:	0002      	movs	r2, r0
 800a9de:	2300      	movs	r3, #0
 800a9e0:	0028      	movs	r0, r5
 800a9e2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a9e4:	6a21      	ldr	r1, [r4, #32]
 800a9e6:	47b8      	blx	r7
 800a9e8:	89a2      	ldrh	r2, [r4, #12]
 800a9ea:	1c43      	adds	r3, r0, #1
 800a9ec:	d106      	bne.n	800a9fc <__sflush_r+0x6c>
 800a9ee:	6829      	ldr	r1, [r5, #0]
 800a9f0:	291d      	cmp	r1, #29
 800a9f2:	d82c      	bhi.n	800aa4e <__sflush_r+0xbe>
 800a9f4:	4b2a      	ldr	r3, [pc, #168]	; (800aaa0 <__sflush_r+0x110>)
 800a9f6:	410b      	asrs	r3, r1
 800a9f8:	07db      	lsls	r3, r3, #31
 800a9fa:	d428      	bmi.n	800aa4e <__sflush_r+0xbe>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	6063      	str	r3, [r4, #4]
 800aa00:	6923      	ldr	r3, [r4, #16]
 800aa02:	6023      	str	r3, [r4, #0]
 800aa04:	04d2      	lsls	r2, r2, #19
 800aa06:	d505      	bpl.n	800aa14 <__sflush_r+0x84>
 800aa08:	1c43      	adds	r3, r0, #1
 800aa0a:	d102      	bne.n	800aa12 <__sflush_r+0x82>
 800aa0c:	682b      	ldr	r3, [r5, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d100      	bne.n	800aa14 <__sflush_r+0x84>
 800aa12:	6560      	str	r0, [r4, #84]	; 0x54
 800aa14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa16:	602e      	str	r6, [r5, #0]
 800aa18:	2900      	cmp	r1, #0
 800aa1a:	d0c5      	beq.n	800a9a8 <__sflush_r+0x18>
 800aa1c:	0023      	movs	r3, r4
 800aa1e:	3344      	adds	r3, #68	; 0x44
 800aa20:	4299      	cmp	r1, r3
 800aa22:	d002      	beq.n	800aa2a <__sflush_r+0x9a>
 800aa24:	0028      	movs	r0, r5
 800aa26:	f7ff ff69 	bl	800a8fc <_free_r>
 800aa2a:	2000      	movs	r0, #0
 800aa2c:	6360      	str	r0, [r4, #52]	; 0x34
 800aa2e:	e7bc      	b.n	800a9aa <__sflush_r+0x1a>
 800aa30:	2301      	movs	r3, #1
 800aa32:	0028      	movs	r0, r5
 800aa34:	47b8      	blx	r7
 800aa36:	1c43      	adds	r3, r0, #1
 800aa38:	d1c6      	bne.n	800a9c8 <__sflush_r+0x38>
 800aa3a:	682b      	ldr	r3, [r5, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d0c3      	beq.n	800a9c8 <__sflush_r+0x38>
 800aa40:	2b1d      	cmp	r3, #29
 800aa42:	d001      	beq.n	800aa48 <__sflush_r+0xb8>
 800aa44:	2b16      	cmp	r3, #22
 800aa46:	d101      	bne.n	800aa4c <__sflush_r+0xbc>
 800aa48:	602e      	str	r6, [r5, #0]
 800aa4a:	e7ad      	b.n	800a9a8 <__sflush_r+0x18>
 800aa4c:	89a2      	ldrh	r2, [r4, #12]
 800aa4e:	2340      	movs	r3, #64	; 0x40
 800aa50:	4313      	orrs	r3, r2
 800aa52:	81a3      	strh	r3, [r4, #12]
 800aa54:	e7a9      	b.n	800a9aa <__sflush_r+0x1a>
 800aa56:	690e      	ldr	r6, [r1, #16]
 800aa58:	2e00      	cmp	r6, #0
 800aa5a:	d0a5      	beq.n	800a9a8 <__sflush_r+0x18>
 800aa5c:	680f      	ldr	r7, [r1, #0]
 800aa5e:	600e      	str	r6, [r1, #0]
 800aa60:	1bba      	subs	r2, r7, r6
 800aa62:	9201      	str	r2, [sp, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	079b      	lsls	r3, r3, #30
 800aa68:	d100      	bne.n	800aa6c <__sflush_r+0xdc>
 800aa6a:	694a      	ldr	r2, [r1, #20]
 800aa6c:	60a2      	str	r2, [r4, #8]
 800aa6e:	9b01      	ldr	r3, [sp, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	dd99      	ble.n	800a9a8 <__sflush_r+0x18>
 800aa74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aa76:	0032      	movs	r2, r6
 800aa78:	001f      	movs	r7, r3
 800aa7a:	0028      	movs	r0, r5
 800aa7c:	9b01      	ldr	r3, [sp, #4]
 800aa7e:	6a21      	ldr	r1, [r4, #32]
 800aa80:	47b8      	blx	r7
 800aa82:	2800      	cmp	r0, #0
 800aa84:	dc06      	bgt.n	800aa94 <__sflush_r+0x104>
 800aa86:	2340      	movs	r3, #64	; 0x40
 800aa88:	2001      	movs	r0, #1
 800aa8a:	89a2      	ldrh	r2, [r4, #12]
 800aa8c:	4240      	negs	r0, r0
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	81a3      	strh	r3, [r4, #12]
 800aa92:	e78a      	b.n	800a9aa <__sflush_r+0x1a>
 800aa94:	9b01      	ldr	r3, [sp, #4]
 800aa96:	1836      	adds	r6, r6, r0
 800aa98:	1a1b      	subs	r3, r3, r0
 800aa9a:	9301      	str	r3, [sp, #4]
 800aa9c:	e7e7      	b.n	800aa6e <__sflush_r+0xde>
 800aa9e:	46c0      	nop			; (mov r8, r8)
 800aaa0:	dfbffffe 	.word	0xdfbffffe

0800aaa4 <_fflush_r>:
 800aaa4:	690b      	ldr	r3, [r1, #16]
 800aaa6:	b570      	push	{r4, r5, r6, lr}
 800aaa8:	0005      	movs	r5, r0
 800aaaa:	000c      	movs	r4, r1
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d102      	bne.n	800aab6 <_fflush_r+0x12>
 800aab0:	2500      	movs	r5, #0
 800aab2:	0028      	movs	r0, r5
 800aab4:	bd70      	pop	{r4, r5, r6, pc}
 800aab6:	2800      	cmp	r0, #0
 800aab8:	d004      	beq.n	800aac4 <_fflush_r+0x20>
 800aaba:	6a03      	ldr	r3, [r0, #32]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d101      	bne.n	800aac4 <_fflush_r+0x20>
 800aac0:	f7ff fde0 	bl	800a684 <__sinit>
 800aac4:	220c      	movs	r2, #12
 800aac6:	5ea3      	ldrsh	r3, [r4, r2]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d0f1      	beq.n	800aab0 <_fflush_r+0xc>
 800aacc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aace:	07d2      	lsls	r2, r2, #31
 800aad0:	d404      	bmi.n	800aadc <_fflush_r+0x38>
 800aad2:	059b      	lsls	r3, r3, #22
 800aad4:	d402      	bmi.n	800aadc <_fflush_r+0x38>
 800aad6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aad8:	f7ff fee7 	bl	800a8aa <__retarget_lock_acquire_recursive>
 800aadc:	0028      	movs	r0, r5
 800aade:	0021      	movs	r1, r4
 800aae0:	f7ff ff56 	bl	800a990 <__sflush_r>
 800aae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aae6:	0005      	movs	r5, r0
 800aae8:	07db      	lsls	r3, r3, #31
 800aaea:	d4e2      	bmi.n	800aab2 <_fflush_r+0xe>
 800aaec:	89a3      	ldrh	r3, [r4, #12]
 800aaee:	059b      	lsls	r3, r3, #22
 800aaf0:	d4df      	bmi.n	800aab2 <_fflush_r+0xe>
 800aaf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaf4:	f7ff feda 	bl	800a8ac <__retarget_lock_release_recursive>
 800aaf8:	e7db      	b.n	800aab2 <_fflush_r+0xe>
	...

0800aafc <fiprintf>:
 800aafc:	b40e      	push	{r1, r2, r3}
 800aafe:	b517      	push	{r0, r1, r2, r4, lr}
 800ab00:	4c05      	ldr	r4, [pc, #20]	; (800ab18 <fiprintf+0x1c>)
 800ab02:	ab05      	add	r3, sp, #20
 800ab04:	cb04      	ldmia	r3!, {r2}
 800ab06:	0001      	movs	r1, r0
 800ab08:	6820      	ldr	r0, [r4, #0]
 800ab0a:	9301      	str	r3, [sp, #4]
 800ab0c:	f000 f834 	bl	800ab78 <_vfiprintf_r>
 800ab10:	bc1e      	pop	{r1, r2, r3, r4}
 800ab12:	bc08      	pop	{r3}
 800ab14:	b003      	add	sp, #12
 800ab16:	4718      	bx	r3
 800ab18:	2000007c 	.word	0x2000007c

0800ab1c <abort>:
 800ab1c:	2006      	movs	r0, #6
 800ab1e:	b510      	push	{r4, lr}
 800ab20:	f000 fb96 	bl	800b250 <raise>
 800ab24:	2001      	movs	r0, #1
 800ab26:	f7fa fcc1 	bl	80054ac <_exit>

0800ab2a <__sfputc_r>:
 800ab2a:	6893      	ldr	r3, [r2, #8]
 800ab2c:	b510      	push	{r4, lr}
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	6093      	str	r3, [r2, #8]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	da04      	bge.n	800ab40 <__sfputc_r+0x16>
 800ab36:	6994      	ldr	r4, [r2, #24]
 800ab38:	42a3      	cmp	r3, r4
 800ab3a:	db07      	blt.n	800ab4c <__sfputc_r+0x22>
 800ab3c:	290a      	cmp	r1, #10
 800ab3e:	d005      	beq.n	800ab4c <__sfputc_r+0x22>
 800ab40:	6813      	ldr	r3, [r2, #0]
 800ab42:	1c58      	adds	r0, r3, #1
 800ab44:	6010      	str	r0, [r2, #0]
 800ab46:	7019      	strb	r1, [r3, #0]
 800ab48:	0008      	movs	r0, r1
 800ab4a:	bd10      	pop	{r4, pc}
 800ab4c:	f000 fab0 	bl	800b0b0 <__swbuf_r>
 800ab50:	0001      	movs	r1, r0
 800ab52:	e7f9      	b.n	800ab48 <__sfputc_r+0x1e>

0800ab54 <__sfputs_r>:
 800ab54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab56:	0006      	movs	r6, r0
 800ab58:	000f      	movs	r7, r1
 800ab5a:	0014      	movs	r4, r2
 800ab5c:	18d5      	adds	r5, r2, r3
 800ab5e:	42ac      	cmp	r4, r5
 800ab60:	d101      	bne.n	800ab66 <__sfputs_r+0x12>
 800ab62:	2000      	movs	r0, #0
 800ab64:	e007      	b.n	800ab76 <__sfputs_r+0x22>
 800ab66:	7821      	ldrb	r1, [r4, #0]
 800ab68:	003a      	movs	r2, r7
 800ab6a:	0030      	movs	r0, r6
 800ab6c:	f7ff ffdd 	bl	800ab2a <__sfputc_r>
 800ab70:	3401      	adds	r4, #1
 800ab72:	1c43      	adds	r3, r0, #1
 800ab74:	d1f3      	bne.n	800ab5e <__sfputs_r+0xa>
 800ab76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab78 <_vfiprintf_r>:
 800ab78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab7a:	b0a1      	sub	sp, #132	; 0x84
 800ab7c:	000f      	movs	r7, r1
 800ab7e:	0015      	movs	r5, r2
 800ab80:	001e      	movs	r6, r3
 800ab82:	9003      	str	r0, [sp, #12]
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d004      	beq.n	800ab92 <_vfiprintf_r+0x1a>
 800ab88:	6a03      	ldr	r3, [r0, #32]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <_vfiprintf_r+0x1a>
 800ab8e:	f7ff fd79 	bl	800a684 <__sinit>
 800ab92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab94:	07db      	lsls	r3, r3, #31
 800ab96:	d405      	bmi.n	800aba4 <_vfiprintf_r+0x2c>
 800ab98:	89bb      	ldrh	r3, [r7, #12]
 800ab9a:	059b      	lsls	r3, r3, #22
 800ab9c:	d402      	bmi.n	800aba4 <_vfiprintf_r+0x2c>
 800ab9e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800aba0:	f7ff fe83 	bl	800a8aa <__retarget_lock_acquire_recursive>
 800aba4:	89bb      	ldrh	r3, [r7, #12]
 800aba6:	071b      	lsls	r3, r3, #28
 800aba8:	d502      	bpl.n	800abb0 <_vfiprintf_r+0x38>
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d113      	bne.n	800abd8 <_vfiprintf_r+0x60>
 800abb0:	0039      	movs	r1, r7
 800abb2:	9803      	ldr	r0, [sp, #12]
 800abb4:	f000 fabe 	bl	800b134 <__swsetup_r>
 800abb8:	2800      	cmp	r0, #0
 800abba:	d00d      	beq.n	800abd8 <_vfiprintf_r+0x60>
 800abbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abbe:	07db      	lsls	r3, r3, #31
 800abc0:	d503      	bpl.n	800abca <_vfiprintf_r+0x52>
 800abc2:	2001      	movs	r0, #1
 800abc4:	4240      	negs	r0, r0
 800abc6:	b021      	add	sp, #132	; 0x84
 800abc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abca:	89bb      	ldrh	r3, [r7, #12]
 800abcc:	059b      	lsls	r3, r3, #22
 800abce:	d4f8      	bmi.n	800abc2 <_vfiprintf_r+0x4a>
 800abd0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800abd2:	f7ff fe6b 	bl	800a8ac <__retarget_lock_release_recursive>
 800abd6:	e7f4      	b.n	800abc2 <_vfiprintf_r+0x4a>
 800abd8:	2300      	movs	r3, #0
 800abda:	ac08      	add	r4, sp, #32
 800abdc:	6163      	str	r3, [r4, #20]
 800abde:	3320      	adds	r3, #32
 800abe0:	7663      	strb	r3, [r4, #25]
 800abe2:	3310      	adds	r3, #16
 800abe4:	76a3      	strb	r3, [r4, #26]
 800abe6:	9607      	str	r6, [sp, #28]
 800abe8:	002e      	movs	r6, r5
 800abea:	7833      	ldrb	r3, [r6, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d001      	beq.n	800abf4 <_vfiprintf_r+0x7c>
 800abf0:	2b25      	cmp	r3, #37	; 0x25
 800abf2:	d148      	bne.n	800ac86 <_vfiprintf_r+0x10e>
 800abf4:	1b73      	subs	r3, r6, r5
 800abf6:	9305      	str	r3, [sp, #20]
 800abf8:	42ae      	cmp	r6, r5
 800abfa:	d00b      	beq.n	800ac14 <_vfiprintf_r+0x9c>
 800abfc:	002a      	movs	r2, r5
 800abfe:	0039      	movs	r1, r7
 800ac00:	9803      	ldr	r0, [sp, #12]
 800ac02:	f7ff ffa7 	bl	800ab54 <__sfputs_r>
 800ac06:	3001      	adds	r0, #1
 800ac08:	d100      	bne.n	800ac0c <_vfiprintf_r+0x94>
 800ac0a:	e0af      	b.n	800ad6c <_vfiprintf_r+0x1f4>
 800ac0c:	6963      	ldr	r3, [r4, #20]
 800ac0e:	9a05      	ldr	r2, [sp, #20]
 800ac10:	189b      	adds	r3, r3, r2
 800ac12:	6163      	str	r3, [r4, #20]
 800ac14:	7833      	ldrb	r3, [r6, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d100      	bne.n	800ac1c <_vfiprintf_r+0xa4>
 800ac1a:	e0a7      	b.n	800ad6c <_vfiprintf_r+0x1f4>
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	2300      	movs	r3, #0
 800ac20:	4252      	negs	r2, r2
 800ac22:	6062      	str	r2, [r4, #4]
 800ac24:	a904      	add	r1, sp, #16
 800ac26:	3254      	adds	r2, #84	; 0x54
 800ac28:	1852      	adds	r2, r2, r1
 800ac2a:	1c75      	adds	r5, r6, #1
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	60e3      	str	r3, [r4, #12]
 800ac30:	60a3      	str	r3, [r4, #8]
 800ac32:	7013      	strb	r3, [r2, #0]
 800ac34:	65a3      	str	r3, [r4, #88]	; 0x58
 800ac36:	4b59      	ldr	r3, [pc, #356]	; (800ad9c <_vfiprintf_r+0x224>)
 800ac38:	2205      	movs	r2, #5
 800ac3a:	0018      	movs	r0, r3
 800ac3c:	7829      	ldrb	r1, [r5, #0]
 800ac3e:	9305      	str	r3, [sp, #20]
 800ac40:	f000 fb26 	bl	800b290 <memchr>
 800ac44:	1c6e      	adds	r6, r5, #1
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d11f      	bne.n	800ac8a <_vfiprintf_r+0x112>
 800ac4a:	6822      	ldr	r2, [r4, #0]
 800ac4c:	06d3      	lsls	r3, r2, #27
 800ac4e:	d504      	bpl.n	800ac5a <_vfiprintf_r+0xe2>
 800ac50:	2353      	movs	r3, #83	; 0x53
 800ac52:	a904      	add	r1, sp, #16
 800ac54:	185b      	adds	r3, r3, r1
 800ac56:	2120      	movs	r1, #32
 800ac58:	7019      	strb	r1, [r3, #0]
 800ac5a:	0713      	lsls	r3, r2, #28
 800ac5c:	d504      	bpl.n	800ac68 <_vfiprintf_r+0xf0>
 800ac5e:	2353      	movs	r3, #83	; 0x53
 800ac60:	a904      	add	r1, sp, #16
 800ac62:	185b      	adds	r3, r3, r1
 800ac64:	212b      	movs	r1, #43	; 0x2b
 800ac66:	7019      	strb	r1, [r3, #0]
 800ac68:	782b      	ldrb	r3, [r5, #0]
 800ac6a:	2b2a      	cmp	r3, #42	; 0x2a
 800ac6c:	d016      	beq.n	800ac9c <_vfiprintf_r+0x124>
 800ac6e:	002e      	movs	r6, r5
 800ac70:	2100      	movs	r1, #0
 800ac72:	200a      	movs	r0, #10
 800ac74:	68e3      	ldr	r3, [r4, #12]
 800ac76:	7832      	ldrb	r2, [r6, #0]
 800ac78:	1c75      	adds	r5, r6, #1
 800ac7a:	3a30      	subs	r2, #48	; 0x30
 800ac7c:	2a09      	cmp	r2, #9
 800ac7e:	d94e      	bls.n	800ad1e <_vfiprintf_r+0x1a6>
 800ac80:	2900      	cmp	r1, #0
 800ac82:	d111      	bne.n	800aca8 <_vfiprintf_r+0x130>
 800ac84:	e017      	b.n	800acb6 <_vfiprintf_r+0x13e>
 800ac86:	3601      	adds	r6, #1
 800ac88:	e7af      	b.n	800abea <_vfiprintf_r+0x72>
 800ac8a:	9b05      	ldr	r3, [sp, #20]
 800ac8c:	6822      	ldr	r2, [r4, #0]
 800ac8e:	1ac0      	subs	r0, r0, r3
 800ac90:	2301      	movs	r3, #1
 800ac92:	4083      	lsls	r3, r0
 800ac94:	4313      	orrs	r3, r2
 800ac96:	0035      	movs	r5, r6
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	e7cc      	b.n	800ac36 <_vfiprintf_r+0xbe>
 800ac9c:	9b07      	ldr	r3, [sp, #28]
 800ac9e:	1d19      	adds	r1, r3, #4
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	9107      	str	r1, [sp, #28]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	db01      	blt.n	800acac <_vfiprintf_r+0x134>
 800aca8:	930b      	str	r3, [sp, #44]	; 0x2c
 800acaa:	e004      	b.n	800acb6 <_vfiprintf_r+0x13e>
 800acac:	425b      	negs	r3, r3
 800acae:	60e3      	str	r3, [r4, #12]
 800acb0:	2302      	movs	r3, #2
 800acb2:	4313      	orrs	r3, r2
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	7833      	ldrb	r3, [r6, #0]
 800acb8:	2b2e      	cmp	r3, #46	; 0x2e
 800acba:	d10a      	bne.n	800acd2 <_vfiprintf_r+0x15a>
 800acbc:	7873      	ldrb	r3, [r6, #1]
 800acbe:	2b2a      	cmp	r3, #42	; 0x2a
 800acc0:	d135      	bne.n	800ad2e <_vfiprintf_r+0x1b6>
 800acc2:	9b07      	ldr	r3, [sp, #28]
 800acc4:	3602      	adds	r6, #2
 800acc6:	1d1a      	adds	r2, r3, #4
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	9207      	str	r2, [sp, #28]
 800accc:	2b00      	cmp	r3, #0
 800acce:	db2b      	blt.n	800ad28 <_vfiprintf_r+0x1b0>
 800acd0:	9309      	str	r3, [sp, #36]	; 0x24
 800acd2:	4d33      	ldr	r5, [pc, #204]	; (800ada0 <_vfiprintf_r+0x228>)
 800acd4:	2203      	movs	r2, #3
 800acd6:	0028      	movs	r0, r5
 800acd8:	7831      	ldrb	r1, [r6, #0]
 800acda:	f000 fad9 	bl	800b290 <memchr>
 800acde:	2800      	cmp	r0, #0
 800ace0:	d006      	beq.n	800acf0 <_vfiprintf_r+0x178>
 800ace2:	2340      	movs	r3, #64	; 0x40
 800ace4:	1b40      	subs	r0, r0, r5
 800ace6:	4083      	lsls	r3, r0
 800ace8:	6822      	ldr	r2, [r4, #0]
 800acea:	3601      	adds	r6, #1
 800acec:	4313      	orrs	r3, r2
 800acee:	6023      	str	r3, [r4, #0]
 800acf0:	7831      	ldrb	r1, [r6, #0]
 800acf2:	2206      	movs	r2, #6
 800acf4:	482b      	ldr	r0, [pc, #172]	; (800ada4 <_vfiprintf_r+0x22c>)
 800acf6:	1c75      	adds	r5, r6, #1
 800acf8:	7621      	strb	r1, [r4, #24]
 800acfa:	f000 fac9 	bl	800b290 <memchr>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	d043      	beq.n	800ad8a <_vfiprintf_r+0x212>
 800ad02:	4b29      	ldr	r3, [pc, #164]	; (800ada8 <_vfiprintf_r+0x230>)
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d125      	bne.n	800ad54 <_vfiprintf_r+0x1dc>
 800ad08:	2207      	movs	r2, #7
 800ad0a:	9b07      	ldr	r3, [sp, #28]
 800ad0c:	3307      	adds	r3, #7
 800ad0e:	4393      	bics	r3, r2
 800ad10:	3308      	adds	r3, #8
 800ad12:	9307      	str	r3, [sp, #28]
 800ad14:	6963      	ldr	r3, [r4, #20]
 800ad16:	9a04      	ldr	r2, [sp, #16]
 800ad18:	189b      	adds	r3, r3, r2
 800ad1a:	6163      	str	r3, [r4, #20]
 800ad1c:	e764      	b.n	800abe8 <_vfiprintf_r+0x70>
 800ad1e:	4343      	muls	r3, r0
 800ad20:	002e      	movs	r6, r5
 800ad22:	2101      	movs	r1, #1
 800ad24:	189b      	adds	r3, r3, r2
 800ad26:	e7a6      	b.n	800ac76 <_vfiprintf_r+0xfe>
 800ad28:	2301      	movs	r3, #1
 800ad2a:	425b      	negs	r3, r3
 800ad2c:	e7d0      	b.n	800acd0 <_vfiprintf_r+0x158>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	200a      	movs	r0, #10
 800ad32:	001a      	movs	r2, r3
 800ad34:	3601      	adds	r6, #1
 800ad36:	6063      	str	r3, [r4, #4]
 800ad38:	7831      	ldrb	r1, [r6, #0]
 800ad3a:	1c75      	adds	r5, r6, #1
 800ad3c:	3930      	subs	r1, #48	; 0x30
 800ad3e:	2909      	cmp	r1, #9
 800ad40:	d903      	bls.n	800ad4a <_vfiprintf_r+0x1d2>
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d0c5      	beq.n	800acd2 <_vfiprintf_r+0x15a>
 800ad46:	9209      	str	r2, [sp, #36]	; 0x24
 800ad48:	e7c3      	b.n	800acd2 <_vfiprintf_r+0x15a>
 800ad4a:	4342      	muls	r2, r0
 800ad4c:	002e      	movs	r6, r5
 800ad4e:	2301      	movs	r3, #1
 800ad50:	1852      	adds	r2, r2, r1
 800ad52:	e7f1      	b.n	800ad38 <_vfiprintf_r+0x1c0>
 800ad54:	aa07      	add	r2, sp, #28
 800ad56:	9200      	str	r2, [sp, #0]
 800ad58:	0021      	movs	r1, r4
 800ad5a:	003a      	movs	r2, r7
 800ad5c:	4b13      	ldr	r3, [pc, #76]	; (800adac <_vfiprintf_r+0x234>)
 800ad5e:	9803      	ldr	r0, [sp, #12]
 800ad60:	e000      	b.n	800ad64 <_vfiprintf_r+0x1ec>
 800ad62:	bf00      	nop
 800ad64:	9004      	str	r0, [sp, #16]
 800ad66:	9b04      	ldr	r3, [sp, #16]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	d1d3      	bne.n	800ad14 <_vfiprintf_r+0x19c>
 800ad6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad6e:	07db      	lsls	r3, r3, #31
 800ad70:	d405      	bmi.n	800ad7e <_vfiprintf_r+0x206>
 800ad72:	89bb      	ldrh	r3, [r7, #12]
 800ad74:	059b      	lsls	r3, r3, #22
 800ad76:	d402      	bmi.n	800ad7e <_vfiprintf_r+0x206>
 800ad78:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ad7a:	f7ff fd97 	bl	800a8ac <__retarget_lock_release_recursive>
 800ad7e:	89bb      	ldrh	r3, [r7, #12]
 800ad80:	065b      	lsls	r3, r3, #25
 800ad82:	d500      	bpl.n	800ad86 <_vfiprintf_r+0x20e>
 800ad84:	e71d      	b.n	800abc2 <_vfiprintf_r+0x4a>
 800ad86:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ad88:	e71d      	b.n	800abc6 <_vfiprintf_r+0x4e>
 800ad8a:	aa07      	add	r2, sp, #28
 800ad8c:	9200      	str	r2, [sp, #0]
 800ad8e:	0021      	movs	r1, r4
 800ad90:	003a      	movs	r2, r7
 800ad92:	4b06      	ldr	r3, [pc, #24]	; (800adac <_vfiprintf_r+0x234>)
 800ad94:	9803      	ldr	r0, [sp, #12]
 800ad96:	f000 f87b 	bl	800ae90 <_printf_i>
 800ad9a:	e7e3      	b.n	800ad64 <_vfiprintf_r+0x1ec>
 800ad9c:	0800e857 	.word	0x0800e857
 800ada0:	0800e85d 	.word	0x0800e85d
 800ada4:	0800e861 	.word	0x0800e861
 800ada8:	00000000 	.word	0x00000000
 800adac:	0800ab55 	.word	0x0800ab55

0800adb0 <_printf_common>:
 800adb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adb2:	0016      	movs	r6, r2
 800adb4:	9301      	str	r3, [sp, #4]
 800adb6:	688a      	ldr	r2, [r1, #8]
 800adb8:	690b      	ldr	r3, [r1, #16]
 800adba:	000c      	movs	r4, r1
 800adbc:	9000      	str	r0, [sp, #0]
 800adbe:	4293      	cmp	r3, r2
 800adc0:	da00      	bge.n	800adc4 <_printf_common+0x14>
 800adc2:	0013      	movs	r3, r2
 800adc4:	0022      	movs	r2, r4
 800adc6:	6033      	str	r3, [r6, #0]
 800adc8:	3243      	adds	r2, #67	; 0x43
 800adca:	7812      	ldrb	r2, [r2, #0]
 800adcc:	2a00      	cmp	r2, #0
 800adce:	d001      	beq.n	800add4 <_printf_common+0x24>
 800add0:	3301      	adds	r3, #1
 800add2:	6033      	str	r3, [r6, #0]
 800add4:	6823      	ldr	r3, [r4, #0]
 800add6:	069b      	lsls	r3, r3, #26
 800add8:	d502      	bpl.n	800ade0 <_printf_common+0x30>
 800adda:	6833      	ldr	r3, [r6, #0]
 800addc:	3302      	adds	r3, #2
 800adde:	6033      	str	r3, [r6, #0]
 800ade0:	6822      	ldr	r2, [r4, #0]
 800ade2:	2306      	movs	r3, #6
 800ade4:	0015      	movs	r5, r2
 800ade6:	401d      	ands	r5, r3
 800ade8:	421a      	tst	r2, r3
 800adea:	d027      	beq.n	800ae3c <_printf_common+0x8c>
 800adec:	0023      	movs	r3, r4
 800adee:	3343      	adds	r3, #67	; 0x43
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	1e5a      	subs	r2, r3, #1
 800adf4:	4193      	sbcs	r3, r2
 800adf6:	6822      	ldr	r2, [r4, #0]
 800adf8:	0692      	lsls	r2, r2, #26
 800adfa:	d430      	bmi.n	800ae5e <_printf_common+0xae>
 800adfc:	0022      	movs	r2, r4
 800adfe:	9901      	ldr	r1, [sp, #4]
 800ae00:	9800      	ldr	r0, [sp, #0]
 800ae02:	9d08      	ldr	r5, [sp, #32]
 800ae04:	3243      	adds	r2, #67	; 0x43
 800ae06:	47a8      	blx	r5
 800ae08:	3001      	adds	r0, #1
 800ae0a:	d025      	beq.n	800ae58 <_printf_common+0xa8>
 800ae0c:	2206      	movs	r2, #6
 800ae0e:	6823      	ldr	r3, [r4, #0]
 800ae10:	2500      	movs	r5, #0
 800ae12:	4013      	ands	r3, r2
 800ae14:	2b04      	cmp	r3, #4
 800ae16:	d105      	bne.n	800ae24 <_printf_common+0x74>
 800ae18:	6833      	ldr	r3, [r6, #0]
 800ae1a:	68e5      	ldr	r5, [r4, #12]
 800ae1c:	1aed      	subs	r5, r5, r3
 800ae1e:	43eb      	mvns	r3, r5
 800ae20:	17db      	asrs	r3, r3, #31
 800ae22:	401d      	ands	r5, r3
 800ae24:	68a3      	ldr	r3, [r4, #8]
 800ae26:	6922      	ldr	r2, [r4, #16]
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	dd01      	ble.n	800ae30 <_printf_common+0x80>
 800ae2c:	1a9b      	subs	r3, r3, r2
 800ae2e:	18ed      	adds	r5, r5, r3
 800ae30:	2600      	movs	r6, #0
 800ae32:	42b5      	cmp	r5, r6
 800ae34:	d120      	bne.n	800ae78 <_printf_common+0xc8>
 800ae36:	2000      	movs	r0, #0
 800ae38:	e010      	b.n	800ae5c <_printf_common+0xac>
 800ae3a:	3501      	adds	r5, #1
 800ae3c:	68e3      	ldr	r3, [r4, #12]
 800ae3e:	6832      	ldr	r2, [r6, #0]
 800ae40:	1a9b      	subs	r3, r3, r2
 800ae42:	42ab      	cmp	r3, r5
 800ae44:	ddd2      	ble.n	800adec <_printf_common+0x3c>
 800ae46:	0022      	movs	r2, r4
 800ae48:	2301      	movs	r3, #1
 800ae4a:	9901      	ldr	r1, [sp, #4]
 800ae4c:	9800      	ldr	r0, [sp, #0]
 800ae4e:	9f08      	ldr	r7, [sp, #32]
 800ae50:	3219      	adds	r2, #25
 800ae52:	47b8      	blx	r7
 800ae54:	3001      	adds	r0, #1
 800ae56:	d1f0      	bne.n	800ae3a <_printf_common+0x8a>
 800ae58:	2001      	movs	r0, #1
 800ae5a:	4240      	negs	r0, r0
 800ae5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ae5e:	2030      	movs	r0, #48	; 0x30
 800ae60:	18e1      	adds	r1, r4, r3
 800ae62:	3143      	adds	r1, #67	; 0x43
 800ae64:	7008      	strb	r0, [r1, #0]
 800ae66:	0021      	movs	r1, r4
 800ae68:	1c5a      	adds	r2, r3, #1
 800ae6a:	3145      	adds	r1, #69	; 0x45
 800ae6c:	7809      	ldrb	r1, [r1, #0]
 800ae6e:	18a2      	adds	r2, r4, r2
 800ae70:	3243      	adds	r2, #67	; 0x43
 800ae72:	3302      	adds	r3, #2
 800ae74:	7011      	strb	r1, [r2, #0]
 800ae76:	e7c1      	b.n	800adfc <_printf_common+0x4c>
 800ae78:	0022      	movs	r2, r4
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	9901      	ldr	r1, [sp, #4]
 800ae7e:	9800      	ldr	r0, [sp, #0]
 800ae80:	9f08      	ldr	r7, [sp, #32]
 800ae82:	321a      	adds	r2, #26
 800ae84:	47b8      	blx	r7
 800ae86:	3001      	adds	r0, #1
 800ae88:	d0e6      	beq.n	800ae58 <_printf_common+0xa8>
 800ae8a:	3601      	adds	r6, #1
 800ae8c:	e7d1      	b.n	800ae32 <_printf_common+0x82>
	...

0800ae90 <_printf_i>:
 800ae90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae92:	b08b      	sub	sp, #44	; 0x2c
 800ae94:	9206      	str	r2, [sp, #24]
 800ae96:	000a      	movs	r2, r1
 800ae98:	3243      	adds	r2, #67	; 0x43
 800ae9a:	9307      	str	r3, [sp, #28]
 800ae9c:	9005      	str	r0, [sp, #20]
 800ae9e:	9204      	str	r2, [sp, #16]
 800aea0:	7e0a      	ldrb	r2, [r1, #24]
 800aea2:	000c      	movs	r4, r1
 800aea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aea6:	2a78      	cmp	r2, #120	; 0x78
 800aea8:	d809      	bhi.n	800aebe <_printf_i+0x2e>
 800aeaa:	2a62      	cmp	r2, #98	; 0x62
 800aeac:	d80b      	bhi.n	800aec6 <_printf_i+0x36>
 800aeae:	2a00      	cmp	r2, #0
 800aeb0:	d100      	bne.n	800aeb4 <_printf_i+0x24>
 800aeb2:	e0be      	b.n	800b032 <_printf_i+0x1a2>
 800aeb4:	497c      	ldr	r1, [pc, #496]	; (800b0a8 <_printf_i+0x218>)
 800aeb6:	9103      	str	r1, [sp, #12]
 800aeb8:	2a58      	cmp	r2, #88	; 0x58
 800aeba:	d100      	bne.n	800aebe <_printf_i+0x2e>
 800aebc:	e093      	b.n	800afe6 <_printf_i+0x156>
 800aebe:	0026      	movs	r6, r4
 800aec0:	3642      	adds	r6, #66	; 0x42
 800aec2:	7032      	strb	r2, [r6, #0]
 800aec4:	e022      	b.n	800af0c <_printf_i+0x7c>
 800aec6:	0010      	movs	r0, r2
 800aec8:	3863      	subs	r0, #99	; 0x63
 800aeca:	2815      	cmp	r0, #21
 800aecc:	d8f7      	bhi.n	800aebe <_printf_i+0x2e>
 800aece:	f7f5 f91b 	bl	8000108 <__gnu_thumb1_case_shi>
 800aed2:	0016      	.short	0x0016
 800aed4:	fff6001f 	.word	0xfff6001f
 800aed8:	fff6fff6 	.word	0xfff6fff6
 800aedc:	001ffff6 	.word	0x001ffff6
 800aee0:	fff6fff6 	.word	0xfff6fff6
 800aee4:	fff6fff6 	.word	0xfff6fff6
 800aee8:	003600a3 	.word	0x003600a3
 800aeec:	fff60083 	.word	0xfff60083
 800aef0:	00b4fff6 	.word	0x00b4fff6
 800aef4:	0036fff6 	.word	0x0036fff6
 800aef8:	fff6fff6 	.word	0xfff6fff6
 800aefc:	0087      	.short	0x0087
 800aefe:	0026      	movs	r6, r4
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	3642      	adds	r6, #66	; 0x42
 800af04:	1d11      	adds	r1, r2, #4
 800af06:	6019      	str	r1, [r3, #0]
 800af08:	6813      	ldr	r3, [r2, #0]
 800af0a:	7033      	strb	r3, [r6, #0]
 800af0c:	2301      	movs	r3, #1
 800af0e:	e0a2      	b.n	800b056 <_printf_i+0x1c6>
 800af10:	6818      	ldr	r0, [r3, #0]
 800af12:	6809      	ldr	r1, [r1, #0]
 800af14:	1d02      	adds	r2, r0, #4
 800af16:	060d      	lsls	r5, r1, #24
 800af18:	d50b      	bpl.n	800af32 <_printf_i+0xa2>
 800af1a:	6805      	ldr	r5, [r0, #0]
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	2d00      	cmp	r5, #0
 800af20:	da03      	bge.n	800af2a <_printf_i+0x9a>
 800af22:	232d      	movs	r3, #45	; 0x2d
 800af24:	9a04      	ldr	r2, [sp, #16]
 800af26:	426d      	negs	r5, r5
 800af28:	7013      	strb	r3, [r2, #0]
 800af2a:	4b5f      	ldr	r3, [pc, #380]	; (800b0a8 <_printf_i+0x218>)
 800af2c:	270a      	movs	r7, #10
 800af2e:	9303      	str	r3, [sp, #12]
 800af30:	e01b      	b.n	800af6a <_printf_i+0xda>
 800af32:	6805      	ldr	r5, [r0, #0]
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	0649      	lsls	r1, r1, #25
 800af38:	d5f1      	bpl.n	800af1e <_printf_i+0x8e>
 800af3a:	b22d      	sxth	r5, r5
 800af3c:	e7ef      	b.n	800af1e <_printf_i+0x8e>
 800af3e:	680d      	ldr	r5, [r1, #0]
 800af40:	6819      	ldr	r1, [r3, #0]
 800af42:	1d08      	adds	r0, r1, #4
 800af44:	6018      	str	r0, [r3, #0]
 800af46:	062e      	lsls	r6, r5, #24
 800af48:	d501      	bpl.n	800af4e <_printf_i+0xbe>
 800af4a:	680d      	ldr	r5, [r1, #0]
 800af4c:	e003      	b.n	800af56 <_printf_i+0xc6>
 800af4e:	066d      	lsls	r5, r5, #25
 800af50:	d5fb      	bpl.n	800af4a <_printf_i+0xba>
 800af52:	680d      	ldr	r5, [r1, #0]
 800af54:	b2ad      	uxth	r5, r5
 800af56:	4b54      	ldr	r3, [pc, #336]	; (800b0a8 <_printf_i+0x218>)
 800af58:	2708      	movs	r7, #8
 800af5a:	9303      	str	r3, [sp, #12]
 800af5c:	2a6f      	cmp	r2, #111	; 0x6f
 800af5e:	d000      	beq.n	800af62 <_printf_i+0xd2>
 800af60:	3702      	adds	r7, #2
 800af62:	0023      	movs	r3, r4
 800af64:	2200      	movs	r2, #0
 800af66:	3343      	adds	r3, #67	; 0x43
 800af68:	701a      	strb	r2, [r3, #0]
 800af6a:	6863      	ldr	r3, [r4, #4]
 800af6c:	60a3      	str	r3, [r4, #8]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	db03      	blt.n	800af7a <_printf_i+0xea>
 800af72:	2104      	movs	r1, #4
 800af74:	6822      	ldr	r2, [r4, #0]
 800af76:	438a      	bics	r2, r1
 800af78:	6022      	str	r2, [r4, #0]
 800af7a:	2d00      	cmp	r5, #0
 800af7c:	d102      	bne.n	800af84 <_printf_i+0xf4>
 800af7e:	9e04      	ldr	r6, [sp, #16]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00c      	beq.n	800af9e <_printf_i+0x10e>
 800af84:	9e04      	ldr	r6, [sp, #16]
 800af86:	0028      	movs	r0, r5
 800af88:	0039      	movs	r1, r7
 800af8a:	f7f5 f94d 	bl	8000228 <__aeabi_uidivmod>
 800af8e:	9b03      	ldr	r3, [sp, #12]
 800af90:	3e01      	subs	r6, #1
 800af92:	5c5b      	ldrb	r3, [r3, r1]
 800af94:	7033      	strb	r3, [r6, #0]
 800af96:	002b      	movs	r3, r5
 800af98:	0005      	movs	r5, r0
 800af9a:	429f      	cmp	r7, r3
 800af9c:	d9f3      	bls.n	800af86 <_printf_i+0xf6>
 800af9e:	2f08      	cmp	r7, #8
 800afa0:	d109      	bne.n	800afb6 <_printf_i+0x126>
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	07db      	lsls	r3, r3, #31
 800afa6:	d506      	bpl.n	800afb6 <_printf_i+0x126>
 800afa8:	6862      	ldr	r2, [r4, #4]
 800afaa:	6923      	ldr	r3, [r4, #16]
 800afac:	429a      	cmp	r2, r3
 800afae:	dc02      	bgt.n	800afb6 <_printf_i+0x126>
 800afb0:	2330      	movs	r3, #48	; 0x30
 800afb2:	3e01      	subs	r6, #1
 800afb4:	7033      	strb	r3, [r6, #0]
 800afb6:	9b04      	ldr	r3, [sp, #16]
 800afb8:	1b9b      	subs	r3, r3, r6
 800afba:	6123      	str	r3, [r4, #16]
 800afbc:	9b07      	ldr	r3, [sp, #28]
 800afbe:	0021      	movs	r1, r4
 800afc0:	9300      	str	r3, [sp, #0]
 800afc2:	9805      	ldr	r0, [sp, #20]
 800afc4:	9b06      	ldr	r3, [sp, #24]
 800afc6:	aa09      	add	r2, sp, #36	; 0x24
 800afc8:	f7ff fef2 	bl	800adb0 <_printf_common>
 800afcc:	3001      	adds	r0, #1
 800afce:	d147      	bne.n	800b060 <_printf_i+0x1d0>
 800afd0:	2001      	movs	r0, #1
 800afd2:	4240      	negs	r0, r0
 800afd4:	b00b      	add	sp, #44	; 0x2c
 800afd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afd8:	2220      	movs	r2, #32
 800afda:	6809      	ldr	r1, [r1, #0]
 800afdc:	430a      	orrs	r2, r1
 800afde:	6022      	str	r2, [r4, #0]
 800afe0:	2278      	movs	r2, #120	; 0x78
 800afe2:	4932      	ldr	r1, [pc, #200]	; (800b0ac <_printf_i+0x21c>)
 800afe4:	9103      	str	r1, [sp, #12]
 800afe6:	0021      	movs	r1, r4
 800afe8:	3145      	adds	r1, #69	; 0x45
 800afea:	700a      	strb	r2, [r1, #0]
 800afec:	6819      	ldr	r1, [r3, #0]
 800afee:	6822      	ldr	r2, [r4, #0]
 800aff0:	c920      	ldmia	r1!, {r5}
 800aff2:	0610      	lsls	r0, r2, #24
 800aff4:	d402      	bmi.n	800affc <_printf_i+0x16c>
 800aff6:	0650      	lsls	r0, r2, #25
 800aff8:	d500      	bpl.n	800affc <_printf_i+0x16c>
 800affa:	b2ad      	uxth	r5, r5
 800affc:	6019      	str	r1, [r3, #0]
 800affe:	07d3      	lsls	r3, r2, #31
 800b000:	d502      	bpl.n	800b008 <_printf_i+0x178>
 800b002:	2320      	movs	r3, #32
 800b004:	4313      	orrs	r3, r2
 800b006:	6023      	str	r3, [r4, #0]
 800b008:	2710      	movs	r7, #16
 800b00a:	2d00      	cmp	r5, #0
 800b00c:	d1a9      	bne.n	800af62 <_printf_i+0xd2>
 800b00e:	2220      	movs	r2, #32
 800b010:	6823      	ldr	r3, [r4, #0]
 800b012:	4393      	bics	r3, r2
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	e7a4      	b.n	800af62 <_printf_i+0xd2>
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	680d      	ldr	r5, [r1, #0]
 800b01c:	1d10      	adds	r0, r2, #4
 800b01e:	6949      	ldr	r1, [r1, #20]
 800b020:	6018      	str	r0, [r3, #0]
 800b022:	6813      	ldr	r3, [r2, #0]
 800b024:	062e      	lsls	r6, r5, #24
 800b026:	d501      	bpl.n	800b02c <_printf_i+0x19c>
 800b028:	6019      	str	r1, [r3, #0]
 800b02a:	e002      	b.n	800b032 <_printf_i+0x1a2>
 800b02c:	066d      	lsls	r5, r5, #25
 800b02e:	d5fb      	bpl.n	800b028 <_printf_i+0x198>
 800b030:	8019      	strh	r1, [r3, #0]
 800b032:	2300      	movs	r3, #0
 800b034:	9e04      	ldr	r6, [sp, #16]
 800b036:	6123      	str	r3, [r4, #16]
 800b038:	e7c0      	b.n	800afbc <_printf_i+0x12c>
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	1d11      	adds	r1, r2, #4
 800b03e:	6019      	str	r1, [r3, #0]
 800b040:	6816      	ldr	r6, [r2, #0]
 800b042:	2100      	movs	r1, #0
 800b044:	0030      	movs	r0, r6
 800b046:	6862      	ldr	r2, [r4, #4]
 800b048:	f000 f922 	bl	800b290 <memchr>
 800b04c:	2800      	cmp	r0, #0
 800b04e:	d001      	beq.n	800b054 <_printf_i+0x1c4>
 800b050:	1b80      	subs	r0, r0, r6
 800b052:	6060      	str	r0, [r4, #4]
 800b054:	6863      	ldr	r3, [r4, #4]
 800b056:	6123      	str	r3, [r4, #16]
 800b058:	2300      	movs	r3, #0
 800b05a:	9a04      	ldr	r2, [sp, #16]
 800b05c:	7013      	strb	r3, [r2, #0]
 800b05e:	e7ad      	b.n	800afbc <_printf_i+0x12c>
 800b060:	0032      	movs	r2, r6
 800b062:	6923      	ldr	r3, [r4, #16]
 800b064:	9906      	ldr	r1, [sp, #24]
 800b066:	9805      	ldr	r0, [sp, #20]
 800b068:	9d07      	ldr	r5, [sp, #28]
 800b06a:	47a8      	blx	r5
 800b06c:	3001      	adds	r0, #1
 800b06e:	d0af      	beq.n	800afd0 <_printf_i+0x140>
 800b070:	6823      	ldr	r3, [r4, #0]
 800b072:	079b      	lsls	r3, r3, #30
 800b074:	d415      	bmi.n	800b0a2 <_printf_i+0x212>
 800b076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b078:	68e0      	ldr	r0, [r4, #12]
 800b07a:	4298      	cmp	r0, r3
 800b07c:	daaa      	bge.n	800afd4 <_printf_i+0x144>
 800b07e:	0018      	movs	r0, r3
 800b080:	e7a8      	b.n	800afd4 <_printf_i+0x144>
 800b082:	0022      	movs	r2, r4
 800b084:	2301      	movs	r3, #1
 800b086:	9906      	ldr	r1, [sp, #24]
 800b088:	9805      	ldr	r0, [sp, #20]
 800b08a:	9e07      	ldr	r6, [sp, #28]
 800b08c:	3219      	adds	r2, #25
 800b08e:	47b0      	blx	r6
 800b090:	3001      	adds	r0, #1
 800b092:	d09d      	beq.n	800afd0 <_printf_i+0x140>
 800b094:	3501      	adds	r5, #1
 800b096:	68e3      	ldr	r3, [r4, #12]
 800b098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b09a:	1a9b      	subs	r3, r3, r2
 800b09c:	42ab      	cmp	r3, r5
 800b09e:	dcf0      	bgt.n	800b082 <_printf_i+0x1f2>
 800b0a0:	e7e9      	b.n	800b076 <_printf_i+0x1e6>
 800b0a2:	2500      	movs	r5, #0
 800b0a4:	e7f7      	b.n	800b096 <_printf_i+0x206>
 800b0a6:	46c0      	nop			; (mov r8, r8)
 800b0a8:	0800e868 	.word	0x0800e868
 800b0ac:	0800e879 	.word	0x0800e879

0800b0b0 <__swbuf_r>:
 800b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b2:	0006      	movs	r6, r0
 800b0b4:	000d      	movs	r5, r1
 800b0b6:	0014      	movs	r4, r2
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d004      	beq.n	800b0c6 <__swbuf_r+0x16>
 800b0bc:	6a03      	ldr	r3, [r0, #32]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <__swbuf_r+0x16>
 800b0c2:	f7ff fadf 	bl	800a684 <__sinit>
 800b0c6:	69a3      	ldr	r3, [r4, #24]
 800b0c8:	60a3      	str	r3, [r4, #8]
 800b0ca:	89a3      	ldrh	r3, [r4, #12]
 800b0cc:	071b      	lsls	r3, r3, #28
 800b0ce:	d528      	bpl.n	800b122 <__swbuf_r+0x72>
 800b0d0:	6923      	ldr	r3, [r4, #16]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d025      	beq.n	800b122 <__swbuf_r+0x72>
 800b0d6:	6923      	ldr	r3, [r4, #16]
 800b0d8:	6820      	ldr	r0, [r4, #0]
 800b0da:	b2ef      	uxtb	r7, r5
 800b0dc:	1ac0      	subs	r0, r0, r3
 800b0de:	6963      	ldr	r3, [r4, #20]
 800b0e0:	b2ed      	uxtb	r5, r5
 800b0e2:	4283      	cmp	r3, r0
 800b0e4:	dc05      	bgt.n	800b0f2 <__swbuf_r+0x42>
 800b0e6:	0021      	movs	r1, r4
 800b0e8:	0030      	movs	r0, r6
 800b0ea:	f7ff fcdb 	bl	800aaa4 <_fflush_r>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	d11d      	bne.n	800b12e <__swbuf_r+0x7e>
 800b0f2:	68a3      	ldr	r3, [r4, #8]
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	60a3      	str	r3, [r4, #8]
 800b0fa:	6823      	ldr	r3, [r4, #0]
 800b0fc:	1c5a      	adds	r2, r3, #1
 800b0fe:	6022      	str	r2, [r4, #0]
 800b100:	701f      	strb	r7, [r3, #0]
 800b102:	6963      	ldr	r3, [r4, #20]
 800b104:	4283      	cmp	r3, r0
 800b106:	d004      	beq.n	800b112 <__swbuf_r+0x62>
 800b108:	89a3      	ldrh	r3, [r4, #12]
 800b10a:	07db      	lsls	r3, r3, #31
 800b10c:	d507      	bpl.n	800b11e <__swbuf_r+0x6e>
 800b10e:	2d0a      	cmp	r5, #10
 800b110:	d105      	bne.n	800b11e <__swbuf_r+0x6e>
 800b112:	0021      	movs	r1, r4
 800b114:	0030      	movs	r0, r6
 800b116:	f7ff fcc5 	bl	800aaa4 <_fflush_r>
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d107      	bne.n	800b12e <__swbuf_r+0x7e>
 800b11e:	0028      	movs	r0, r5
 800b120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b122:	0021      	movs	r1, r4
 800b124:	0030      	movs	r0, r6
 800b126:	f000 f805 	bl	800b134 <__swsetup_r>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	d0d3      	beq.n	800b0d6 <__swbuf_r+0x26>
 800b12e:	2501      	movs	r5, #1
 800b130:	426d      	negs	r5, r5
 800b132:	e7f4      	b.n	800b11e <__swbuf_r+0x6e>

0800b134 <__swsetup_r>:
 800b134:	4b30      	ldr	r3, [pc, #192]	; (800b1f8 <__swsetup_r+0xc4>)
 800b136:	b570      	push	{r4, r5, r6, lr}
 800b138:	0005      	movs	r5, r0
 800b13a:	6818      	ldr	r0, [r3, #0]
 800b13c:	000c      	movs	r4, r1
 800b13e:	2800      	cmp	r0, #0
 800b140:	d004      	beq.n	800b14c <__swsetup_r+0x18>
 800b142:	6a03      	ldr	r3, [r0, #32]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <__swsetup_r+0x18>
 800b148:	f7ff fa9c 	bl	800a684 <__sinit>
 800b14c:	230c      	movs	r3, #12
 800b14e:	5ee2      	ldrsh	r2, [r4, r3]
 800b150:	b293      	uxth	r3, r2
 800b152:	0711      	lsls	r1, r2, #28
 800b154:	d423      	bmi.n	800b19e <__swsetup_r+0x6a>
 800b156:	06d9      	lsls	r1, r3, #27
 800b158:	d407      	bmi.n	800b16a <__swsetup_r+0x36>
 800b15a:	2309      	movs	r3, #9
 800b15c:	2001      	movs	r0, #1
 800b15e:	602b      	str	r3, [r5, #0]
 800b160:	3337      	adds	r3, #55	; 0x37
 800b162:	4313      	orrs	r3, r2
 800b164:	81a3      	strh	r3, [r4, #12]
 800b166:	4240      	negs	r0, r0
 800b168:	bd70      	pop	{r4, r5, r6, pc}
 800b16a:	075b      	lsls	r3, r3, #29
 800b16c:	d513      	bpl.n	800b196 <__swsetup_r+0x62>
 800b16e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b170:	2900      	cmp	r1, #0
 800b172:	d008      	beq.n	800b186 <__swsetup_r+0x52>
 800b174:	0023      	movs	r3, r4
 800b176:	3344      	adds	r3, #68	; 0x44
 800b178:	4299      	cmp	r1, r3
 800b17a:	d002      	beq.n	800b182 <__swsetup_r+0x4e>
 800b17c:	0028      	movs	r0, r5
 800b17e:	f7ff fbbd 	bl	800a8fc <_free_r>
 800b182:	2300      	movs	r3, #0
 800b184:	6363      	str	r3, [r4, #52]	; 0x34
 800b186:	2224      	movs	r2, #36	; 0x24
 800b188:	89a3      	ldrh	r3, [r4, #12]
 800b18a:	4393      	bics	r3, r2
 800b18c:	81a3      	strh	r3, [r4, #12]
 800b18e:	2300      	movs	r3, #0
 800b190:	6063      	str	r3, [r4, #4]
 800b192:	6923      	ldr	r3, [r4, #16]
 800b194:	6023      	str	r3, [r4, #0]
 800b196:	2308      	movs	r3, #8
 800b198:	89a2      	ldrh	r2, [r4, #12]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	81a3      	strh	r3, [r4, #12]
 800b19e:	6923      	ldr	r3, [r4, #16]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10b      	bne.n	800b1bc <__swsetup_r+0x88>
 800b1a4:	21a0      	movs	r1, #160	; 0xa0
 800b1a6:	2280      	movs	r2, #128	; 0x80
 800b1a8:	89a3      	ldrh	r3, [r4, #12]
 800b1aa:	0089      	lsls	r1, r1, #2
 800b1ac:	0092      	lsls	r2, r2, #2
 800b1ae:	400b      	ands	r3, r1
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d003      	beq.n	800b1bc <__swsetup_r+0x88>
 800b1b4:	0021      	movs	r1, r4
 800b1b6:	0028      	movs	r0, r5
 800b1b8:	f000 f89e 	bl	800b2f8 <__smakebuf_r>
 800b1bc:	220c      	movs	r2, #12
 800b1be:	5ea3      	ldrsh	r3, [r4, r2]
 800b1c0:	2001      	movs	r0, #1
 800b1c2:	001a      	movs	r2, r3
 800b1c4:	b299      	uxth	r1, r3
 800b1c6:	4002      	ands	r2, r0
 800b1c8:	4203      	tst	r3, r0
 800b1ca:	d00f      	beq.n	800b1ec <__swsetup_r+0xb8>
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	60a2      	str	r2, [r4, #8]
 800b1d0:	6962      	ldr	r2, [r4, #20]
 800b1d2:	4252      	negs	r2, r2
 800b1d4:	61a2      	str	r2, [r4, #24]
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	6922      	ldr	r2, [r4, #16]
 800b1da:	4282      	cmp	r2, r0
 800b1dc:	d1c4      	bne.n	800b168 <__swsetup_r+0x34>
 800b1de:	0609      	lsls	r1, r1, #24
 800b1e0:	d5c2      	bpl.n	800b168 <__swsetup_r+0x34>
 800b1e2:	2240      	movs	r2, #64	; 0x40
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	81a3      	strh	r3, [r4, #12]
 800b1e8:	3801      	subs	r0, #1
 800b1ea:	e7bd      	b.n	800b168 <__swsetup_r+0x34>
 800b1ec:	0788      	lsls	r0, r1, #30
 800b1ee:	d400      	bmi.n	800b1f2 <__swsetup_r+0xbe>
 800b1f0:	6962      	ldr	r2, [r4, #20]
 800b1f2:	60a2      	str	r2, [r4, #8]
 800b1f4:	e7ef      	b.n	800b1d6 <__swsetup_r+0xa2>
 800b1f6:	46c0      	nop			; (mov r8, r8)
 800b1f8:	2000007c 	.word	0x2000007c

0800b1fc <_raise_r>:
 800b1fc:	b570      	push	{r4, r5, r6, lr}
 800b1fe:	0004      	movs	r4, r0
 800b200:	000d      	movs	r5, r1
 800b202:	291f      	cmp	r1, #31
 800b204:	d904      	bls.n	800b210 <_raise_r+0x14>
 800b206:	2316      	movs	r3, #22
 800b208:	6003      	str	r3, [r0, #0]
 800b20a:	2001      	movs	r0, #1
 800b20c:	4240      	negs	r0, r0
 800b20e:	bd70      	pop	{r4, r5, r6, pc}
 800b210:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800b212:	2b00      	cmp	r3, #0
 800b214:	d004      	beq.n	800b220 <_raise_r+0x24>
 800b216:	008a      	lsls	r2, r1, #2
 800b218:	189b      	adds	r3, r3, r2
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	2a00      	cmp	r2, #0
 800b21e:	d108      	bne.n	800b232 <_raise_r+0x36>
 800b220:	0020      	movs	r0, r4
 800b222:	f000 f831 	bl	800b288 <_getpid_r>
 800b226:	002a      	movs	r2, r5
 800b228:	0001      	movs	r1, r0
 800b22a:	0020      	movs	r0, r4
 800b22c:	f000 f81a 	bl	800b264 <_kill_r>
 800b230:	e7ed      	b.n	800b20e <_raise_r+0x12>
 800b232:	2000      	movs	r0, #0
 800b234:	2a01      	cmp	r2, #1
 800b236:	d0ea      	beq.n	800b20e <_raise_r+0x12>
 800b238:	1c51      	adds	r1, r2, #1
 800b23a:	d103      	bne.n	800b244 <_raise_r+0x48>
 800b23c:	2316      	movs	r3, #22
 800b23e:	3001      	adds	r0, #1
 800b240:	6023      	str	r3, [r4, #0]
 800b242:	e7e4      	b.n	800b20e <_raise_r+0x12>
 800b244:	2400      	movs	r4, #0
 800b246:	0028      	movs	r0, r5
 800b248:	601c      	str	r4, [r3, #0]
 800b24a:	4790      	blx	r2
 800b24c:	0020      	movs	r0, r4
 800b24e:	e7de      	b.n	800b20e <_raise_r+0x12>

0800b250 <raise>:
 800b250:	b510      	push	{r4, lr}
 800b252:	4b03      	ldr	r3, [pc, #12]	; (800b260 <raise+0x10>)
 800b254:	0001      	movs	r1, r0
 800b256:	6818      	ldr	r0, [r3, #0]
 800b258:	f7ff ffd0 	bl	800b1fc <_raise_r>
 800b25c:	bd10      	pop	{r4, pc}
 800b25e:	46c0      	nop			; (mov r8, r8)
 800b260:	2000007c 	.word	0x2000007c

0800b264 <_kill_r>:
 800b264:	2300      	movs	r3, #0
 800b266:	b570      	push	{r4, r5, r6, lr}
 800b268:	4d06      	ldr	r5, [pc, #24]	; (800b284 <_kill_r+0x20>)
 800b26a:	0004      	movs	r4, r0
 800b26c:	0008      	movs	r0, r1
 800b26e:	0011      	movs	r1, r2
 800b270:	602b      	str	r3, [r5, #0]
 800b272:	f7fa f90b 	bl	800548c <_kill>
 800b276:	1c43      	adds	r3, r0, #1
 800b278:	d103      	bne.n	800b282 <_kill_r+0x1e>
 800b27a:	682b      	ldr	r3, [r5, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d000      	beq.n	800b282 <_kill_r+0x1e>
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	bd70      	pop	{r4, r5, r6, pc}
 800b284:	2000253c 	.word	0x2000253c

0800b288 <_getpid_r>:
 800b288:	b510      	push	{r4, lr}
 800b28a:	f7fa f8f9 	bl	8005480 <_getpid>
 800b28e:	bd10      	pop	{r4, pc}

0800b290 <memchr>:
 800b290:	b2c9      	uxtb	r1, r1
 800b292:	1882      	adds	r2, r0, r2
 800b294:	4290      	cmp	r0, r2
 800b296:	d101      	bne.n	800b29c <memchr+0xc>
 800b298:	2000      	movs	r0, #0
 800b29a:	4770      	bx	lr
 800b29c:	7803      	ldrb	r3, [r0, #0]
 800b29e:	428b      	cmp	r3, r1
 800b2a0:	d0fb      	beq.n	800b29a <memchr+0xa>
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	e7f6      	b.n	800b294 <memchr+0x4>
	...

0800b2a8 <__swhatbuf_r>:
 800b2a8:	b570      	push	{r4, r5, r6, lr}
 800b2aa:	000e      	movs	r6, r1
 800b2ac:	001d      	movs	r5, r3
 800b2ae:	230e      	movs	r3, #14
 800b2b0:	5ec9      	ldrsh	r1, [r1, r3]
 800b2b2:	0014      	movs	r4, r2
 800b2b4:	b096      	sub	sp, #88	; 0x58
 800b2b6:	2900      	cmp	r1, #0
 800b2b8:	da0c      	bge.n	800b2d4 <__swhatbuf_r+0x2c>
 800b2ba:	89b2      	ldrh	r2, [r6, #12]
 800b2bc:	2380      	movs	r3, #128	; 0x80
 800b2be:	0011      	movs	r1, r2
 800b2c0:	4019      	ands	r1, r3
 800b2c2:	421a      	tst	r2, r3
 800b2c4:	d013      	beq.n	800b2ee <__swhatbuf_r+0x46>
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	3b40      	subs	r3, #64	; 0x40
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	6029      	str	r1, [r5, #0]
 800b2ce:	6023      	str	r3, [r4, #0]
 800b2d0:	b016      	add	sp, #88	; 0x58
 800b2d2:	bd70      	pop	{r4, r5, r6, pc}
 800b2d4:	466a      	mov	r2, sp
 800b2d6:	f000 f84d 	bl	800b374 <_fstat_r>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	dbed      	blt.n	800b2ba <__swhatbuf_r+0x12>
 800b2de:	23f0      	movs	r3, #240	; 0xf0
 800b2e0:	9901      	ldr	r1, [sp, #4]
 800b2e2:	021b      	lsls	r3, r3, #8
 800b2e4:	4019      	ands	r1, r3
 800b2e6:	4b03      	ldr	r3, [pc, #12]	; (800b2f4 <__swhatbuf_r+0x4c>)
 800b2e8:	18c9      	adds	r1, r1, r3
 800b2ea:	424b      	negs	r3, r1
 800b2ec:	4159      	adcs	r1, r3
 800b2ee:	2380      	movs	r3, #128	; 0x80
 800b2f0:	00db      	lsls	r3, r3, #3
 800b2f2:	e7ea      	b.n	800b2ca <__swhatbuf_r+0x22>
 800b2f4:	ffffe000 	.word	0xffffe000

0800b2f8 <__smakebuf_r>:
 800b2f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2fa:	2602      	movs	r6, #2
 800b2fc:	898b      	ldrh	r3, [r1, #12]
 800b2fe:	0005      	movs	r5, r0
 800b300:	000c      	movs	r4, r1
 800b302:	4233      	tst	r3, r6
 800b304:	d006      	beq.n	800b314 <__smakebuf_r+0x1c>
 800b306:	0023      	movs	r3, r4
 800b308:	3347      	adds	r3, #71	; 0x47
 800b30a:	6023      	str	r3, [r4, #0]
 800b30c:	6123      	str	r3, [r4, #16]
 800b30e:	2301      	movs	r3, #1
 800b310:	6163      	str	r3, [r4, #20]
 800b312:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b314:	466a      	mov	r2, sp
 800b316:	ab01      	add	r3, sp, #4
 800b318:	f7ff ffc6 	bl	800b2a8 <__swhatbuf_r>
 800b31c:	9900      	ldr	r1, [sp, #0]
 800b31e:	0007      	movs	r7, r0
 800b320:	0028      	movs	r0, r5
 800b322:	f7ff f84f 	bl	800a3c4 <_malloc_r>
 800b326:	2800      	cmp	r0, #0
 800b328:	d108      	bne.n	800b33c <__smakebuf_r+0x44>
 800b32a:	220c      	movs	r2, #12
 800b32c:	5ea3      	ldrsh	r3, [r4, r2]
 800b32e:	059a      	lsls	r2, r3, #22
 800b330:	d4ef      	bmi.n	800b312 <__smakebuf_r+0x1a>
 800b332:	2203      	movs	r2, #3
 800b334:	4393      	bics	r3, r2
 800b336:	431e      	orrs	r6, r3
 800b338:	81a6      	strh	r6, [r4, #12]
 800b33a:	e7e4      	b.n	800b306 <__smakebuf_r+0xe>
 800b33c:	2380      	movs	r3, #128	; 0x80
 800b33e:	89a2      	ldrh	r2, [r4, #12]
 800b340:	6020      	str	r0, [r4, #0]
 800b342:	4313      	orrs	r3, r2
 800b344:	81a3      	strh	r3, [r4, #12]
 800b346:	9b00      	ldr	r3, [sp, #0]
 800b348:	6120      	str	r0, [r4, #16]
 800b34a:	6163      	str	r3, [r4, #20]
 800b34c:	9b01      	ldr	r3, [sp, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00c      	beq.n	800b36c <__smakebuf_r+0x74>
 800b352:	0028      	movs	r0, r5
 800b354:	230e      	movs	r3, #14
 800b356:	5ee1      	ldrsh	r1, [r4, r3]
 800b358:	f000 f81e 	bl	800b398 <_isatty_r>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d005      	beq.n	800b36c <__smakebuf_r+0x74>
 800b360:	2303      	movs	r3, #3
 800b362:	89a2      	ldrh	r2, [r4, #12]
 800b364:	439a      	bics	r2, r3
 800b366:	3b02      	subs	r3, #2
 800b368:	4313      	orrs	r3, r2
 800b36a:	81a3      	strh	r3, [r4, #12]
 800b36c:	89a3      	ldrh	r3, [r4, #12]
 800b36e:	433b      	orrs	r3, r7
 800b370:	81a3      	strh	r3, [r4, #12]
 800b372:	e7ce      	b.n	800b312 <__smakebuf_r+0x1a>

0800b374 <_fstat_r>:
 800b374:	2300      	movs	r3, #0
 800b376:	b570      	push	{r4, r5, r6, lr}
 800b378:	4d06      	ldr	r5, [pc, #24]	; (800b394 <_fstat_r+0x20>)
 800b37a:	0004      	movs	r4, r0
 800b37c:	0008      	movs	r0, r1
 800b37e:	0011      	movs	r1, r2
 800b380:	602b      	str	r3, [r5, #0]
 800b382:	f7fa f8e2 	bl	800554a <_fstat>
 800b386:	1c43      	adds	r3, r0, #1
 800b388:	d103      	bne.n	800b392 <_fstat_r+0x1e>
 800b38a:	682b      	ldr	r3, [r5, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d000      	beq.n	800b392 <_fstat_r+0x1e>
 800b390:	6023      	str	r3, [r4, #0]
 800b392:	bd70      	pop	{r4, r5, r6, pc}
 800b394:	2000253c 	.word	0x2000253c

0800b398 <_isatty_r>:
 800b398:	2300      	movs	r3, #0
 800b39a:	b570      	push	{r4, r5, r6, lr}
 800b39c:	4d06      	ldr	r5, [pc, #24]	; (800b3b8 <_isatty_r+0x20>)
 800b39e:	0004      	movs	r4, r0
 800b3a0:	0008      	movs	r0, r1
 800b3a2:	602b      	str	r3, [r5, #0]
 800b3a4:	f7fa f8df 	bl	8005566 <_isatty>
 800b3a8:	1c43      	adds	r3, r0, #1
 800b3aa:	d103      	bne.n	800b3b4 <_isatty_r+0x1c>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d000      	beq.n	800b3b4 <_isatty_r+0x1c>
 800b3b2:	6023      	str	r3, [r4, #0]
 800b3b4:	bd70      	pop	{r4, r5, r6, pc}
 800b3b6:	46c0      	nop			; (mov r8, r8)
 800b3b8:	2000253c 	.word	0x2000253c

0800b3bc <_init>:
 800b3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3be:	46c0      	nop			; (mov r8, r8)
 800b3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3c2:	bc08      	pop	{r3}
 800b3c4:	469e      	mov	lr, r3
 800b3c6:	4770      	bx	lr

0800b3c8 <_fini>:
 800b3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ca:	46c0      	nop			; (mov r8, r8)
 800b3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ce:	bc08      	pop	{r3}
 800b3d0:	469e      	mov	lr, r3
 800b3d2:	4770      	bx	lr
